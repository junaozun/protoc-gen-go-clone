// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//角色资源枚举，对应item表
type PlayerPropertyType int32

const (
	//属性 对应item id
	PlayerPropertyType_exp                        PlayerPropertyType = 1    //经验
	PlayerPropertyType_diamond                    PlayerPropertyType = 2    //钻石 //元宝
	PlayerPropertyType_gold                       PlayerPropertyType = 3    //金币 //黄金
	PlayerPropertyType_physcal                    PlayerPropertyType = 4    //体力值
	PlayerPropertyType_activity                   PlayerPropertyType = 5    //活跃度
	PlayerPropertyType_commanderExpPool           PlayerPropertyType = 6    //武将经验池
	PlayerPropertyType_vipExp                     PlayerPropertyType = 7    //VIP经验
	PlayerPropertyType_skillExp                   PlayerPropertyType = 8    //技能经验
	PlayerPropertyType_dramaCoin                  PlayerPropertyType = 9    //剧本货币
	PlayerPropertyType_arenaCoin                  PlayerPropertyType = 15   //竞技币
	PlayerPropertyType_gameCoin                   PlayerPropertyType = 16   //游戏币
	PlayerPropertyType_treasureScore              PlayerPropertyType = 20   // 宝物积分
	PlayerPropertyType_treasureBaseCoin           PlayerPropertyType = 21   // 珍宝币
	PlayerPropertyType_treasureCoin               PlayerPropertyType = 22   //宝物精华
	PlayerPropertyType_peakCoin                   PlayerPropertyType = 23   //巅峰币
	PlayerPropertyType_slayCoin                   PlayerPropertyType = 25   //演武币
	PlayerPropertyType_guildContributionCoin      PlayerPropertyType = 27   //联盟贡献币
	PlayerPropertyType_guildContributionExp       PlayerPropertyType = 28   //联盟经验（这个经验是加到联盟上的）
	PlayerPropertyType_privilegeCoin              PlayerPropertyType = 29   //特权点
	PlayerPropertyType_goldenDragon               PlayerPropertyType = 30   //龙气
	PlayerPropertyType_guildExchangeCoin          PlayerPropertyType = 31   //联盟兑换币
	PlayerPropertyType_levelCoin                  PlayerPropertyType = 33   // 等级币
	PlayerPropertyType_mountExp                   PlayerPropertyType = 34   //坐骑经验
	PlayerPropertyType_mountRefineCoin            PlayerPropertyType = 37   //坐骑洗炼币
	PlayerPropertyType_wuHunCoin                  PlayerPropertyType = 42   //武魂币
	PlayerPropertyType_advancedWuHunCoin          PlayerPropertyType = 43   //高级武魂币
	PlayerPropertyType_redWuHunCoin               PlayerPropertyType = 44   //红色武魂币
	PlayerPropertyType_fanCoupon                  PlayerPropertyType = 35   //粉丝券
	PlayerPropertyType_souvenirCoin               PlayerPropertyType = 36   //纪念币
	PlayerPropertyType_luckDrawCoin               PlayerPropertyType = 45   //鸿运币，用于夺宝转盘
	PlayerPropertyType_luckDrawCard               PlayerPropertyType = 46   //天工令牌，用于夺宝转盘
	PlayerPropertyType_starSoulCoin               PlayerPropertyType = 47   // 星魂币
	PlayerPropertyType_militaryExploits           PlayerPropertyType = 48   // 战功
	PlayerPropertyType_onlyEquipGoldCoin          PlayerPropertyType = 50   //专属装备金色代币
	PlayerPropertyType_onlyEquipRedCoin           PlayerPropertyType = 51   //专属装备红色代币
	PlayerPropertyType_navalBattleCoin            PlayerPropertyType = 60   // 铁锁横江商店代币
	PlayerPropertyType_seasonSupplyScore          PlayerPropertyType = 997  //赛季补给积分
	PlayerPropertyType_cash                       PlayerPropertyType = 998  // 直购额度 发放直购福利专用
	PlayerPropertyType_rechargeDiamond            PlayerPropertyType = 999  // 充值元宝 发放充值福利专用
	PlayerPropertyType_res_property_dividing_line PlayerPropertyType = 9000 //资源和特殊资源的分割线
	//----------------------------------------------------//
	PlayerPropertyType_power    PlayerPropertyType = 9497 //战斗力
	PlayerPropertyType_level    PlayerPropertyType = 9498 //等级
	PlayerPropertyType_vipLevel PlayerPropertyType = 9499 //vip等级
)

// Enum value maps for PlayerPropertyType.
var (
	PlayerPropertyType_name = map[int32]string{
		1:    "exp",
		2:    "diamond",
		3:    "gold",
		4:    "physcal",
		5:    "activity",
		6:    "commanderExpPool",
		7:    "vipExp",
		8:    "skillExp",
		9:    "dramaCoin",
		15:   "arenaCoin",
		16:   "gameCoin",
		20:   "treasureScore",
		21:   "treasureBaseCoin",
		22:   "treasureCoin",
		23:   "peakCoin",
		25:   "slayCoin",
		27:   "guildContributionCoin",
		28:   "guildContributionExp",
		29:   "privilegeCoin",
		30:   "goldenDragon",
		31:   "guildExchangeCoin",
		33:   "levelCoin",
		34:   "mountExp",
		37:   "mountRefineCoin",
		42:   "wuHunCoin",
		43:   "advancedWuHunCoin",
		44:   "redWuHunCoin",
		35:   "fanCoupon",
		36:   "souvenirCoin",
		45:   "luckDrawCoin",
		46:   "luckDrawCard",
		47:   "starSoulCoin",
		48:   "militaryExploits",
		50:   "onlyEquipGoldCoin",
		51:   "onlyEquipRedCoin",
		60:   "navalBattleCoin",
		997:  "seasonSupplyScore",
		998:  "cash",
		999:  "rechargeDiamond",
		9000: "res_property_dividing_line",
		9497: "power",
		9498: "level",
		9499: "vipLevel",
	}
	PlayerPropertyType_value = map[string]int32{
		"exp":                        1,
		"diamond":                    2,
		"gold":                       3,
		"physcal":                    4,
		"activity":                   5,
		"commanderExpPool":           6,
		"vipExp":                     7,
		"skillExp":                   8,
		"dramaCoin":                  9,
		"arenaCoin":                  15,
		"gameCoin":                   16,
		"treasureScore":              20,
		"treasureBaseCoin":           21,
		"treasureCoin":               22,
		"peakCoin":                   23,
		"slayCoin":                   25,
		"guildContributionCoin":      27,
		"guildContributionExp":       28,
		"privilegeCoin":              29,
		"goldenDragon":               30,
		"guildExchangeCoin":          31,
		"levelCoin":                  33,
		"mountExp":                   34,
		"mountRefineCoin":            37,
		"wuHunCoin":                  42,
		"advancedWuHunCoin":          43,
		"redWuHunCoin":               44,
		"fanCoupon":                  35,
		"souvenirCoin":               36,
		"luckDrawCoin":               45,
		"luckDrawCard":               46,
		"starSoulCoin":               47,
		"militaryExploits":           48,
		"onlyEquipGoldCoin":          50,
		"onlyEquipRedCoin":           51,
		"navalBattleCoin":            60,
		"seasonSupplyScore":          997,
		"cash":                       998,
		"rechargeDiamond":            999,
		"res_property_dividing_line": 9000,
		"power":                      9497,
		"level":                      9498,
		"vipLevel":                   9499,
	}
)

func (x PlayerPropertyType) Enum() *PlayerPropertyType {
	p := new(PlayerPropertyType)
	*p = x
	return p
}

func (x PlayerPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (PlayerPropertyType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x PlayerPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlayerPropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlayerPropertyType(num)
	return nil
}

// Deprecated: Use PlayerPropertyType.Descriptor instead.
func (PlayerPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

//UsedFunction 使用过的功能
type UsedFunction int32

const (
	UsedFunction_UsedFunctionNone        UsedFunction = 0   // 占位
	UsedFunction_SoldierHasChange        UsedFunction = 1   //主将换兵
	UsedFunction_ArenaEverEnter          UsedFunction = 2   //进入过竞技场
	UsedFunction_ArenaEverChallenge      UsedFunction = 3   //挑战过竞技场
	UsedFunction_PeakEverEnter           UsedFunction = 4   //进入过巅峰
	UsedFunction_PeakEverChallenge       UsedFunction = 5   //挑战过巅峰
	UsedFunction_CollectEverEnter        UsedFunction = 6   // 进入过治所
	UsedFunction_PrivilegeEverEnter      UsedFunction = 7   // 进入过特权
	UsedFunction_DailyBossWinRewards     UsedFunction = 8   // 日常boss挑战奖励
	UsedFunction_PeakEverStart           UsedFunction = 9   // 第一次开始巅峰战斗
	UsedFunction_CommanderLittleStarLvUp UsedFunction = 10  //主将升级小星星
	UsedFunction_OpenChooseDraw          UsedFunction = 11  // 点将抽卡打开界面
	UsedFunction_WorldStepFirst          UsedFunction = 12  // 大世界引导1
	UsedFunction_WorldStepSecond         UsedFunction = 13  //大世界引导2
	UsedFunction_UsedFunctionMax         UsedFunction = 128 // 最大
)

// Enum value maps for UsedFunction.
var (
	UsedFunction_name = map[int32]string{
		0:   "UsedFunctionNone",
		1:   "SoldierHasChange",
		2:   "ArenaEverEnter",
		3:   "ArenaEverChallenge",
		4:   "PeakEverEnter",
		5:   "PeakEverChallenge",
		6:   "CollectEverEnter",
		7:   "PrivilegeEverEnter",
		8:   "DailyBossWinRewards",
		9:   "PeakEverStart",
		10:  "CommanderLittleStarLvUp",
		11:  "OpenChooseDraw",
		12:  "WorldStepFirst",
		13:  "WorldStepSecond",
		128: "UsedFunctionMax",
	}
	UsedFunction_value = map[string]int32{
		"UsedFunctionNone":        0,
		"SoldierHasChange":        1,
		"ArenaEverEnter":          2,
		"ArenaEverChallenge":      3,
		"PeakEverEnter":           4,
		"PeakEverChallenge":       5,
		"CollectEverEnter":        6,
		"PrivilegeEverEnter":      7,
		"DailyBossWinRewards":     8,
		"PeakEverStart":           9,
		"CommanderLittleStarLvUp": 10,
		"OpenChooseDraw":          11,
		"WorldStepFirst":          12,
		"WorldStepSecond":         13,
		"UsedFunctionMax":         128,
	}
)

func (x UsedFunction) Enum() *UsedFunction {
	p := new(UsedFunction)
	*p = x
	return p
}

func (x UsedFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsedFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (UsedFunction) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x UsedFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UsedFunction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UsedFunction(num)
	return nil
}

// Deprecated: Use UsedFunction.Descriptor instead.
func (UsedFunction) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

//OverlordStatus 霸主挑战镜像状态
type OverlordStatus int32

const (
	OverlordStatus_LM    OverlordStatus = 0 // 跨服九州争霸
	OverlordStatus_Arena OverlordStatus = 1 //竞技场
)

// Enum value maps for OverlordStatus.
var (
	OverlordStatus_name = map[int32]string{
		0: "LM",
		1: "Arena",
	}
	OverlordStatus_value = map[string]int32{
		"LM":    0,
		"Arena": 1,
	}
)

func (x OverlordStatus) Enum() *OverlordStatus {
	p := new(OverlordStatus)
	*p = x
	return p
}

func (x OverlordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverlordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (OverlordStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x OverlordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OverlordStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OverlordStatus(num)
	return nil
}

// Deprecated: Use OverlordStatus.Descriptor instead.
func (OverlordStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type FormationType int32

const (
	FormationType_pve              FormationType = 1  //主线
	FormationType_arenaAttack      FormationType = 2  //竞技场进攻
	FormationType_arenaDefence     FormationType = 3  //竞技场防御
	FormationType_peak             FormationType = 4  //巅峰竞技场
	FormationType_dailyBoss1       FormationType = 5  //日常Boss 1
	FormationType_dailyBoss2       FormationType = 6  //日常Boss 2
	FormationType_dailyBoss3       FormationType = 7  //日常Boss 3
	FormationType_slayAttack       FormationType = 8  //群雄割据1
	FormationType_drama            FormationType = 9  // 剧本
	FormationType_trainAttack      FormationType = 10 //试炼场自己进攻
	FormationType_trainDefend      FormationType = 11 //试炼场自己防守
	FormationType_gve              FormationType = 12 // gve
	FormationType_dailyExp         FormationType = 13 //华容道（日常经验）
	FormationType_dailyCoin        FormationType = 14 //长坂坡（日常金币）
	FormationType_slayAttack2      FormationType = 15 //群雄割据进攻2
	FormationType_slayAttack3      FormationType = 16 //群雄割据进攻3
	FormationType_chibi1           FormationType = 17 // 赤壁之战1
	FormationType_chibi2           FormationType = 18 // 赤壁之战2
	FormationType_gveSiege         FormationType = 19 //gve攻城
	FormationType_dyPeak1          FormationType = 20 // 决战巅峰1
	FormationType_dyPeak2          FormationType = 21 // 决战巅峰2
	FormationType_dyPeak3          FormationType = 22 // 决战巅峰3
	FormationType_tower            FormationType = 23 // 爬塔
	FormationType_commanderBattle1 FormationType = 24 // 主将对战1
	FormationType_commanderBattle2 FormationType = 25 // 主将对战2
	FormationType_qiecuoAttack     FormationType = 26 //切磋进攻
	FormationType_qiecuoDefence    FormationType = 27 //切磋防御
	FormationType_gvg1             FormationType = 28 //gvg队伍1
	FormationType_gvg2             FormationType = 29 //gvg队伍2
	FormationType_gvg3             FormationType = 30 //gvg队伍3
	FormationType_DyPeakChoose     FormationType = 31
	FormationType_tower2           FormationType = 32 // 爬塔2
	FormationType_tower3           FormationType = 33 // 爬塔3
	FormationType_tower4           FormationType = 34 // 爬塔4
	FormationType_WorldBoss        FormationType = 35 //世界Boss
	FormationType_Expedition       FormationType = 36 // 北伐中原
	FormationType_LadderBattle     FormationType = 37 // 排位赛
	FormationType_Lm1              FormationType = 39 // 九州问鼎1
	FormationType_Lm2              FormationType = 40 // 九州问鼎2
	FormationType_Lm3              FormationType = 41 // 九州问鼎3
	FormationType_won1             FormationType = 42 // 问鼎中原队伍1
	FormationType_won2             FormationType = 43 // 问鼎中原队伍2
	FormationType_won3             FormationType = 44 // 问鼎中原队伍3
	FormationType_overlord1        FormationType = 45 // 霸主挑战1
	FormationType_overlord2        FormationType = 46 // 霸主挑战2
	FormationType_overlord3        FormationType = 47 // 霸主挑战3
	FormationType_navalBattle1     FormationType = 48 //海战1
	FormationType_navalBattle2     FormationType = 49 //海战2
	FormationType_navalBattle3     FormationType = 50 //海战3
	// ！！！如果新加类型，id一定要连续，需要修改对应MaxCount----以上的会在登陆的时候回传给客户端
	FormationType_MaxLimit FormationType = 51 // 最大值
)

// Enum value maps for FormationType.
var (
	FormationType_name = map[int32]string{
		1:  "pve",
		2:  "arenaAttack",
		3:  "arenaDefence",
		4:  "peak",
		5:  "dailyBoss1",
		6:  "dailyBoss2",
		7:  "dailyBoss3",
		8:  "slayAttack",
		9:  "drama",
		10: "trainAttack",
		11: "trainDefend",
		12: "gve",
		13: "dailyExp",
		14: "dailyCoin",
		15: "slayAttack2",
		16: "slayAttack3",
		17: "chibi1",
		18: "chibi2",
		19: "gveSiege",
		20: "dyPeak1",
		21: "dyPeak2",
		22: "dyPeak3",
		23: "tower",
		24: "commanderBattle1",
		25: "commanderBattle2",
		26: "qiecuoAttack",
		27: "qiecuoDefence",
		28: "gvg1",
		29: "gvg2",
		30: "gvg3",
		31: "DyPeakChoose",
		32: "tower2",
		33: "tower3",
		34: "tower4",
		35: "WorldBoss",
		36: "Expedition",
		37: "LadderBattle",
		39: "Lm1",
		40: "Lm2",
		41: "Lm3",
		42: "won1",
		43: "won2",
		44: "won3",
		45: "overlord1",
		46: "overlord2",
		47: "overlord3",
		48: "navalBattle1",
		49: "navalBattle2",
		50: "navalBattle3",
		51: "MaxLimit",
	}
	FormationType_value = map[string]int32{
		"pve":              1,
		"arenaAttack":      2,
		"arenaDefence":     3,
		"peak":             4,
		"dailyBoss1":       5,
		"dailyBoss2":       6,
		"dailyBoss3":       7,
		"slayAttack":       8,
		"drama":            9,
		"trainAttack":      10,
		"trainDefend":      11,
		"gve":              12,
		"dailyExp":         13,
		"dailyCoin":        14,
		"slayAttack2":      15,
		"slayAttack3":      16,
		"chibi1":           17,
		"chibi2":           18,
		"gveSiege":         19,
		"dyPeak1":          20,
		"dyPeak2":          21,
		"dyPeak3":          22,
		"tower":            23,
		"commanderBattle1": 24,
		"commanderBattle2": 25,
		"qiecuoAttack":     26,
		"qiecuoDefence":    27,
		"gvg1":             28,
		"gvg2":             29,
		"gvg3":             30,
		"DyPeakChoose":     31,
		"tower2":           32,
		"tower3":           33,
		"tower4":           34,
		"WorldBoss":        35,
		"Expedition":       36,
		"LadderBattle":     37,
		"Lm1":              39,
		"Lm2":              40,
		"Lm3":              41,
		"won1":             42,
		"won2":             43,
		"won3":             44,
		"overlord1":        45,
		"overlord2":        46,
		"overlord3":        47,
		"navalBattle1":     48,
		"navalBattle2":     49,
		"navalBattle3":     50,
		"MaxLimit":         51,
	}
)

func (x FormationType) Enum() *FormationType {
	p := new(FormationType)
	*p = x
	return p
}

func (x FormationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (FormationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x FormationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FormationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FormationType(num)
	return nil
}

// Deprecated: Use FormationType.Descriptor instead.
func (FormationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

//开关类型
type SwitchID int32

const (
	SwitchID_MUSIC       SwitchID = 1 //音乐
	SwitchID_SOUNDEFFECT SwitchID = 2 //音效
	SwitchID_PUSH        SwitchID = 3 //推送
)

// Enum value maps for SwitchID.
var (
	SwitchID_name = map[int32]string{
		1: "MUSIC",
		2: "SOUNDEFFECT",
		3: "PUSH",
	}
	SwitchID_value = map[string]int32{
		"MUSIC":       1,
		"SOUNDEFFECT": 2,
		"PUSH":        3,
	}
)

func (x SwitchID) Enum() *SwitchID {
	p := new(SwitchID)
	*p = x
	return p
}

func (x SwitchID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchID) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (SwitchID) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x SwitchID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SwitchID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SwitchID(num)
	return nil
}

// Deprecated: Use SwitchID.Descriptor instead.
func (SwitchID) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

//段位
type Division int32

const (
	Division_Novice     Division = 1 //新手
	Division_Apprentice Division = 2 //学徒
	Division_Elites     Division = 3 //精英
	Division_Expert     Division = 4 //专家
	Division_Teacher    Division = 5 //大师
	Division_Master     Division = 6 //宗师
	Division_Championer Division = 7 //冠军
	Division_King       Division = 8 //王者
	Division_Legend     Division = 9 //传奇
)

// Enum value maps for Division.
var (
	Division_name = map[int32]string{
		1: "Novice",
		2: "Apprentice",
		3: "Elites",
		4: "Expert",
		5: "Teacher",
		6: "Master",
		7: "Championer",
		8: "King",
		9: "Legend",
	}
	Division_value = map[string]int32{
		"Novice":     1,
		"Apprentice": 2,
		"Elites":     3,
		"Expert":     4,
		"Teacher":    5,
		"Master":     6,
		"Championer": 7,
		"King":       8,
		"Legend":     9,
	}
)

func (x Division) Enum() *Division {
	p := new(Division)
	*p = x
	return p
}

func (x Division) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Division) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (Division) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x Division) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Division) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Division(num)
	return nil
}

// Deprecated: Use Division.Descriptor instead.
func (Division) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

//--------------------------------------------------------------------------------------------------玩家
type ItemShow int32

const (
	ItemShow_ShowDefault            ItemShow = 0
	ItemShow_Activity               ItemShow = 1  // 活动双倍
	ItemShow_Vip                    ItemShow = 2  // vip
	ItemShow_ItemCrit               ItemShow = 3  //物品暴击
	ItemShow_DoubleReward           ItemShow = 4  //双倍奖励
	ItemShow_WelfareReward          ItemShow = 5  // 天降洪福
	ItemShow_Activity3Reward        ItemShow = 6  //活动3倍奖励
	ItemShow_FirstGet               ItemShow = 7  // 首次获得
	ItemShow_WuHunAstrolabe         ItemShow = 8  // 武魂星盘
	ItemShow_MountSplinterTransform ItemShow = 9  // 坐骑碎片转换
	ItemShow_CashGiftRebate         ItemShow = 10 // 返利
)

// Enum value maps for ItemShow.
var (
	ItemShow_name = map[int32]string{
		0:  "ShowDefault",
		1:  "Activity",
		2:  "Vip",
		3:  "ItemCrit",
		4:  "DoubleReward",
		5:  "WelfareReward",
		6:  "Activity3Reward",
		7:  "FirstGet",
		8:  "WuHunAstrolabe",
		9:  "MountSplinterTransform",
		10: "CashGiftRebate",
	}
	ItemShow_value = map[string]int32{
		"ShowDefault":            0,
		"Activity":               1,
		"Vip":                    2,
		"ItemCrit":               3,
		"DoubleReward":           4,
		"WelfareReward":          5,
		"Activity3Reward":        6,
		"FirstGet":               7,
		"WuHunAstrolabe":         8,
		"MountSplinterTransform": 9,
		"CashGiftRebate":         10,
	}
)

func (x ItemShow) Enum() *ItemShow {
	p := new(ItemShow)
	*p = x
	return p
}

func (x ItemShow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemShow) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (ItemShow) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x ItemShow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemShow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemShow(num)
	return nil
}

// Deprecated: Use ItemShow.Descriptor instead.
func (ItemShow) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type AwakeStatus int32

const (
	AwakeStatus_Open AwakeStatus = 0 // 未觉醒
	AwakeStatus_Ing  AwakeStatus = 1 // 觉醒中
	AwakeStatus_Done AwakeStatus = 2 // 已觉醒
)

// Enum value maps for AwakeStatus.
var (
	AwakeStatus_name = map[int32]string{
		0: "Open",
		1: "Ing",
		2: "Done",
	}
	AwakeStatus_value = map[string]int32{
		"Open": 0,
		"Ing":  1,
		"Done": 2,
	}
)

func (x AwakeStatus) Enum() *AwakeStatus {
	p := new(AwakeStatus)
	*p = x
	return p
}

func (x AwakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (AwakeStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x AwakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AwakeStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AwakeStatus(num)
	return nil
}

// Deprecated: Use AwakeStatus.Descriptor instead.
func (AwakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type CommanderAwakeTaskStatus int32

const (
	CommanderAwakeTaskStatus_UnCompleted          CommanderAwakeTaskStatus = 0 // 未完成
	CommanderAwakeTaskStatus_CompletedUnCommitted CommanderAwakeTaskStatus = 1 // 已完成未提交
	CommanderAwakeTaskStatus_Committed            CommanderAwakeTaskStatus = 2 // 已提交
)

// Enum value maps for CommanderAwakeTaskStatus.
var (
	CommanderAwakeTaskStatus_name = map[int32]string{
		0: "UnCompleted",
		1: "CompletedUnCommitted",
		2: "Committed",
	}
	CommanderAwakeTaskStatus_value = map[string]int32{
		"UnCompleted":          0,
		"CompletedUnCommitted": 1,
		"Committed":            2,
	}
)

func (x CommanderAwakeTaskStatus) Enum() *CommanderAwakeTaskStatus {
	p := new(CommanderAwakeTaskStatus)
	*p = x
	return p
}

func (x CommanderAwakeTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommanderAwakeTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (CommanderAwakeTaskStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x CommanderAwakeTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommanderAwakeTaskStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommanderAwakeTaskStatus(num)
	return nil
}

// Deprecated: Use CommanderAwakeTaskStatus.Descriptor instead.
func (CommanderAwakeTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

// 任务状态
type MissionStatus int32

const (
	MissionStatus_Accepted MissionStatus = 0
	MissionStatus_Finished MissionStatus = 1
)

// Enum value maps for MissionStatus.
var (
	MissionStatus_name = map[int32]string{
		0: "Accepted",
		1: "Finished",
	}
	MissionStatus_value = map[string]int32{
		"Accepted": 0,
		"Finished": 1,
	}
)

func (x MissionStatus) Enum() *MissionStatus {
	p := new(MissionStatus)
	*p = x
	return p
}

func (x MissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (MissionStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x MissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionStatus(num)
	return nil
}

// Deprecated: Use MissionStatus.Descriptor instead.
func (MissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

//好友类型
type FriendType int32

const (
	FriendType_Friend    FriendType = 1 //好友
	FriendType_Request   FriendType = 2 //申请
	FriendType_Black     FriendType = 3 //黑名单
	FriendType_Recommend FriendType = 4 //推荐
	FriendType_Search    FriendType = 5 //查询
)

// Enum value maps for FriendType.
var (
	FriendType_name = map[int32]string{
		1: "Friend",
		2: "Request",
		3: "Black",
		4: "Recommend",
		5: "Search",
	}
	FriendType_value = map[string]int32{
		"Friend":    1,
		"Request":   2,
		"Black":     3,
		"Recommend": 4,
		"Search":    5,
	}
)

func (x FriendType) Enum() *FriendType {
	p := new(FriendType)
	*p = x
	return p
}

func (x FriendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (FriendType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x FriendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FriendType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FriendType(num)
	return nil
}

// Deprecated: Use FriendType.Descriptor instead.
func (FriendType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

//--------------------------------------------------------------------------------------------------聊天
type ChatChannel int32

const (
	ChatChannel_System        ChatChannel = 0    // 系统聊天
	ChatChannel_World         ChatChannel = 1    // 世界
	ChatChannel_Union         ChatChannel = 2    // 联盟
	ChatChannel_Private       ChatChannel = 3    // 联盟
	ChatChannel_Cross         ChatChannel = 4    // 跨服
	ChatChannel_Lm            ChatChannel = 5    // 九州问鼎
	ChatChannel_WonChat       ChatChannel = 6    // 问鼎中原
	ChatChannel_Count         ChatChannel = 7    // 最大频道数(增加频道需要修改这个数)
	ChatChannel_UnionAnnounce ChatChannel = 1023 // 联盟公告用
	ChatChannel_All           ChatChannel = 1024 // 所有频道
)

// Enum value maps for ChatChannel.
var (
	ChatChannel_name = map[int32]string{
		0:    "System",
		1:    "World",
		2:    "Union",
		3:    "Private",
		4:    "Cross",
		5:    "Lm",
		6:    "WonChat",
		7:    "Count",
		1023: "UnionAnnounce",
		1024: "All",
	}
	ChatChannel_value = map[string]int32{
		"System":        0,
		"World":         1,
		"Union":         2,
		"Private":       3,
		"Cross":         4,
		"Lm":            5,
		"WonChat":       6,
		"Count":         7,
		"UnionAnnounce": 1023,
		"All":           1024,
	}
)

func (x ChatChannel) Enum() *ChatChannel {
	p := new(ChatChannel)
	*p = x
	return p
}

func (x ChatChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (ChatChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x ChatChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatChannel(num)
	return nil
}

// Deprecated: Use ChatChannel.Descriptor instead.
func (ChatChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

// 消息类型(对应resolving.csv)
type ChatCellType int32

const (
	ChatCellType_normal            ChatCellType = 0   // 普通
	ChatCellType_callCommander     ChatCellType = 1   // 召唤主将
	ChatCellType_drawCommander     ChatCellType = 2   // 抽主将
	ChatCellType_arenaFirstChange  ChatCellType = 3   // 竞技场第一变更
	ChatCellType_arenaSecondChange ChatCellType = 4   // 竞技场第2变更
	ChatCellType_arenaThirdChange  ChatCellType = 5   // 竞技场第3变更
	ChatCellType_dragon            ChatCellType = 100 // 真龙试炼
	//魂匣跑马灯公告
	ChatCellType_SoulBoxGainCommander ChatCellType = 200 //获得神将跑马灯公告
	ChatCellType_unionRecruit         ChatCellType = 201 // 联盟招募
	ChatCellType_assistWinThanks      ChatCellType = 202 // 助战胜利感谢
	ChatCellType_assistLoseThanks     ChatCellType = 203 // 助战失败感谢
	ChatCellType_assistSuccess        ChatCellType = 204 // 助战成功
	ChatCellType_fightReport          ChatCellType = 205 // 战报
	ChatCellType_GMReserve            ChatCellType = 999 // gm保留
	// ur抽卡跑马灯
	ChatCellType_UrGainCommander ChatCellType = 300 //ur 抽卡跑马灯公告
	// 决战巅峰
	ChatCellType_DyPeakGroupBattle ChatCellType = 1001 // 小组赛开始
	ChatCellType_DyPeakTop16Gen    ChatCellType = 1002 // 16强诞生
	ChatCellType_DyPeakTop16Battle ChatCellType = 1003 // 16 battle
	ChatCellType_DyPeakTop8Gen     ChatCellType = 1004 // 8强开始
	ChatCellType_DyPeakTop8Battle  ChatCellType = 1005 // 8强开赛
	ChatCellType_DyPeakTop4Gen     ChatCellType = 1006 // 4强开赛
	ChatCellType_DyPeakTop4Battle  ChatCellType = 1007 // 4强开赛
	ChatCellType_DyPeakLastGen     ChatCellType = 1008
	ChatCellType_DyPeakLastBattle  ChatCellType = 1009
	ChatCellType_DyPeakChampGen    ChatCellType = 1010
	//世界boss击杀跑马灯
	ChatCellType_WorldBossDeath ChatCellType = 2001 //击杀世界boss后触发跑马灯
	ChatCellType_StarSealClear  ChatCellType = 3001 // 将星封印解除
	// 发在世界的系统消息
	ChatCellType_GvePass         ChatCellType = 10001 // 通关gve
	ChatCellType_WorldBossKilled ChatCellType = 10002 //世界boss被击杀
	ChatCellType_GvgCityOccupy   ChatCellType = 10003 // gvg城池占领
	// 九州问鼎
	ChatCellType_LmChampEnd ChatCellType = 4001 // 冠军赛结束
	// 问鼎中原霸主消息
	ChatCellType_WonConqueror ChatCellType = 10004
)

// Enum value maps for ChatCellType.
var (
	ChatCellType_name = map[int32]string{
		0:     "normal",
		1:     "callCommander",
		2:     "drawCommander",
		3:     "arenaFirstChange",
		4:     "arenaSecondChange",
		5:     "arenaThirdChange",
		100:   "dragon",
		200:   "SoulBoxGainCommander",
		201:   "unionRecruit",
		202:   "assistWinThanks",
		203:   "assistLoseThanks",
		204:   "assistSuccess",
		205:   "fightReport",
		999:   "GMReserve",
		300:   "UrGainCommander",
		1001:  "DyPeakGroupBattle",
		1002:  "DyPeakTop16Gen",
		1003:  "DyPeakTop16Battle",
		1004:  "DyPeakTop8Gen",
		1005:  "DyPeakTop8Battle",
		1006:  "DyPeakTop4Gen",
		1007:  "DyPeakTop4Battle",
		1008:  "DyPeakLastGen",
		1009:  "DyPeakLastBattle",
		1010:  "DyPeakChampGen",
		2001:  "WorldBossDeath",
		3001:  "StarSealClear",
		10001: "GvePass",
		10002: "WorldBossKilled",
		10003: "GvgCityOccupy",
		4001:  "LmChampEnd",
		10004: "WonConqueror",
	}
	ChatCellType_value = map[string]int32{
		"normal":               0,
		"callCommander":        1,
		"drawCommander":        2,
		"arenaFirstChange":     3,
		"arenaSecondChange":    4,
		"arenaThirdChange":     5,
		"dragon":               100,
		"SoulBoxGainCommander": 200,
		"unionRecruit":         201,
		"assistWinThanks":      202,
		"assistLoseThanks":     203,
		"assistSuccess":        204,
		"fightReport":          205,
		"GMReserve":            999,
		"UrGainCommander":      300,
		"DyPeakGroupBattle":    1001,
		"DyPeakTop16Gen":       1002,
		"DyPeakTop16Battle":    1003,
		"DyPeakTop8Gen":        1004,
		"DyPeakTop8Battle":     1005,
		"DyPeakTop4Gen":        1006,
		"DyPeakTop4Battle":     1007,
		"DyPeakLastGen":        1008,
		"DyPeakLastBattle":     1009,
		"DyPeakChampGen":       1010,
		"WorldBossDeath":       2001,
		"StarSealClear":        3001,
		"GvePass":              10001,
		"WorldBossKilled":      10002,
		"GvgCityOccupy":        10003,
		"LmChampEnd":           4001,
		"WonConqueror":         10004,
	}
)

func (x ChatCellType) Enum() *ChatCellType {
	p := new(ChatCellType)
	*p = x
	return p
}

func (x ChatCellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCellType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (ChatCellType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x ChatCellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatCellType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatCellType(num)
	return nil
}

// Deprecated: Use ChatCellType.Descriptor instead.
func (ChatCellType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

//排行榜
type RankType int32

const (
	RankType_FightPower          RankType = 0   // 战斗力
	RankType_dailyBoss1Time      RankType = 1   // 日常Boss 1 通关时间
	RankType_dailyBoss2Time      RankType = 2   // 日常Boss 2 通关时间
	RankType_dailyBoss3Time      RankType = 3   // 日常Boss 3 通关时间
	RankType_CounsellorSumPower  RankType = 4   // 军师总战斗力
	RankType_InstanceStar        RankType = 5   // 副本星星
	RankType_CommanderSumPower   RankType = 6   // 主将总战斗力
	RankType_TreasurePower       RankType = 7   // 宝物总战力排行
	RankType_DailyExpKillNum     RankType = 8   // 日常经验 华容道
	RankType_DailyCoinKillNum    RankType = 9   // 日常金币 长坂坡
	RankType_FriendRecommend     RankType = 10  // 好友推荐
	RankType_ArenaDefencePower   RankType = 11  // 竞技场防守阵型战力
	RankType_CommanderPower      RankType = 12  // 主将战斗力
	RankType_CounsellorPower     RankType = 13  // 军师战力
	RankType_Mission             RankType = 16  // 剧情
	RankType_ChibiProgress       RankType = 17  // 赤壁进度
	RankType_Tower               RankType = 18  // 爬塔
	RankType_CommanderBattle1    RankType = 19  // 主将对战1
	RankType_CommanderBattle2    RankType = 20  // 主将对战2
	RankType_Tower2              RankType = 21  // 爬塔2
	RankType_Tower3              RankType = 22  // 爬塔3
	RankType_Tower4              RankType = 23  // 爬塔4
	RankType_StarSeal            RankType = 24  // 将星封印
	RankType_ExpeditionStar      RankType = 25  // 北伐中原关卡星数排行榜
	RankType_Recharge            RankType = 99  // 充值排行
	RankType_Guild               RankType = 100 // 帮派
	RankType_Peak                RankType = 101 // 巅峰竞技场
	RankType_WorldBossPersonalHp RankType = 102 //世界boss个人伤害排行
	RankType_WorldBossGuildHp    RankType = 103 //世界boss联盟伤害排行
	RankType_GuildRoll           RankType = 104 //联盟roll点排行
	RankType_Overlord            RankType = 105 //霸主挑战
	RankType_Ladder              RankType = 120 // 排位赛本服
	RankType_LadderCross         RankType = 121 // 排位赛跨服
	RankType_Gvg                 RankType = 201 // gvg排行榜
	RankType_Won                 RankType = 202 // 问鼎中原
	RankType_NavalBattle         RankType = 203 //海战
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		0:   "FightPower",
		1:   "dailyBoss1Time",
		2:   "dailyBoss2Time",
		3:   "dailyBoss3Time",
		4:   "CounsellorSumPower",
		5:   "InstanceStar",
		6:   "CommanderSumPower",
		7:   "TreasurePower",
		8:   "DailyExpKillNum",
		9:   "DailyCoinKillNum",
		10:  "FriendRecommend",
		11:  "ArenaDefencePower",
		12:  "CommanderPower",
		13:  "CounsellorPower",
		16:  "Mission",
		17:  "ChibiProgress",
		18:  "Tower",
		19:  "CommanderBattle1",
		20:  "CommanderBattle2",
		21:  "Tower2",
		22:  "Tower3",
		23:  "Tower4",
		24:  "StarSeal",
		25:  "ExpeditionStar",
		99:  "Recharge",
		100: "Guild",
		101: "Peak",
		102: "WorldBossPersonalHp",
		103: "WorldBossGuildHp",
		104: "GuildRoll",
		105: "Overlord",
		120: "Ladder",
		121: "LadderCross",
		201: "Gvg",
		202: "Won",
		203: "NavalBattle",
	}
	RankType_value = map[string]int32{
		"FightPower":          0,
		"dailyBoss1Time":      1,
		"dailyBoss2Time":      2,
		"dailyBoss3Time":      3,
		"CounsellorSumPower":  4,
		"InstanceStar":        5,
		"CommanderSumPower":   6,
		"TreasurePower":       7,
		"DailyExpKillNum":     8,
		"DailyCoinKillNum":    9,
		"FriendRecommend":     10,
		"ArenaDefencePower":   11,
		"CommanderPower":      12,
		"CounsellorPower":     13,
		"Mission":             16,
		"ChibiProgress":       17,
		"Tower":               18,
		"CommanderBattle1":    19,
		"CommanderBattle2":    20,
		"Tower2":              21,
		"Tower3":              22,
		"Tower4":              23,
		"StarSeal":            24,
		"ExpeditionStar":      25,
		"Recharge":            99,
		"Guild":               100,
		"Peak":                101,
		"WorldBossPersonalHp": 102,
		"WorldBossGuildHp":    103,
		"GuildRoll":           104,
		"Overlord":            105,
		"Ladder":              120,
		"LadderCross":         121,
		"Gvg":                 201,
		"Won":                 202,
		"NavalBattle":         203,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RankType(num)
	return nil
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

type ShopType int32

const (
	ShopType_Physical     ShopType = 1 //体力
	ShopType_Gold         ShopType = 2 //黄金
	ShopType_CommanderExp ShopType = 3 //主将经验
	ShopType_GameCoin     ShopType = 4 //幸运币
	ShopType_AdvanceStone ShopType = 5 //铸造石
	ShopType_MagicBook    ShopType = 6 //法术书
	ShopType_AlbumEssence ShopType = 7 //图鉴精华
	ShopType_Beyond       ShopType = 8 //突破丹
	ShopType_AwakeHsch    ShopType = 9 //觉醒汉室残魂
)

// Enum value maps for ShopType.
var (
	ShopType_name = map[int32]string{
		1: "Physical",
		2: "Gold",
		3: "CommanderExp",
		4: "GameCoin",
		5: "AdvanceStone",
		6: "MagicBook",
		7: "AlbumEssence",
		8: "Beyond",
		9: "AwakeHsch",
	}
	ShopType_value = map[string]int32{
		"Physical":     1,
		"Gold":         2,
		"CommanderExp": 3,
		"GameCoin":     4,
		"AdvanceStone": 5,
		"MagicBook":    6,
		"AlbumEssence": 7,
		"Beyond":       8,
		"AwakeHsch":    9,
	}
)

func (x ShopType) Enum() *ShopType {
	p := new(ShopType)
	*p = x
	return p
}

func (x ShopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShopType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (ShopType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x ShopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShopType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShopType(num)
	return nil
}

// Deprecated: Use ShopType.Descriptor instead.
func (ShopType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

// 联盟权限
type GuildPowerType int32

const (
	GuildPowerType_President     GuildPowerType = 1 // 盟主
	GuildPowerType_VicePresident GuildPowerType = 2 // 副盟主
	GuildPowerType_Normal        GuildPowerType = 3 // 普通成员
)

// Enum value maps for GuildPowerType.
var (
	GuildPowerType_name = map[int32]string{
		1: "President",
		2: "VicePresident",
		3: "Normal",
	}
	GuildPowerType_value = map[string]int32{
		"President":     1,
		"VicePresident": 2,
		"Normal":        3,
	}
)

func (x GuildPowerType) Enum() *GuildPowerType {
	p := new(GuildPowerType)
	*p = x
	return p
}

func (x GuildPowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildPowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (GuildPowerType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x GuildPowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildPowerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildPowerType(num)
	return nil
}

// Deprecated: Use GuildPowerType.Descriptor instead.
func (GuildPowerType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

//GuildHonorType 荣誉类型
type GuildHonorType int32

const (
	GuildHonorType_OnlineTime            GuildHonorType = 0
	GuildHonorType_PowerUpgrade          GuildHonorType = 1
	GuildHonorType_RecvCommanderFragment GuildHonorType = 2
	GuildHonorType_DiamondCost           GuildHonorType = 3
	GuildHonorType_physicalCost          GuildHonorType = 4
	GuildHonorType_assistMax             GuildHonorType = 5 // 助战
	GuildHonorType_occupiedTimes         GuildHonorType = 6 //占领次数
)

// Enum value maps for GuildHonorType.
var (
	GuildHonorType_name = map[int32]string{
		0: "OnlineTime",
		1: "PowerUpgrade",
		2: "RecvCommanderFragment",
		3: "DiamondCost",
		4: "physicalCost",
		5: "assistMax",
		6: "occupiedTimes",
	}
	GuildHonorType_value = map[string]int32{
		"OnlineTime":            0,
		"PowerUpgrade":          1,
		"RecvCommanderFragment": 2,
		"DiamondCost":           3,
		"physicalCost":          4,
		"assistMax":             5,
		"occupiedTimes":         6,
	}
)

func (x GuildHonorType) Enum() *GuildHonorType {
	p := new(GuildHonorType)
	*p = x
	return p
}

func (x GuildHonorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildHonorType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (GuildHonorType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x GuildHonorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildHonorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildHonorType(num)
	return nil
}

// Deprecated: Use GuildHonorType.Descriptor instead.
func (GuildHonorType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

type GveStep int32

const (
	GveStep_GveStep_Zero  GveStep = 0 //初始
	GveStep_GveStep_Siege GveStep = 1 //攻城阶段
	GveStep_GveStep_Pass  GveStep = 2 //通关
)

// Enum value maps for GveStep.
var (
	GveStep_name = map[int32]string{
		0: "GveStep_Zero",
		1: "GveStep_Siege",
		2: "GveStep_Pass",
	}
	GveStep_value = map[string]int32{
		"GveStep_Zero":  0,
		"GveStep_Siege": 1,
		"GveStep_Pass":  2,
	}
)

func (x GveStep) Enum() *GveStep {
	p := new(GveStep)
	*p = x
	return p
}

func (x GveStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GveStep) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (GveStep) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x GveStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GveStep) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GveStep(num)
	return nil
}

// Deprecated: Use GveStep.Descriptor instead.
func (GveStep) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

// gve的cue类型
type GveCueType int32

const (
	GveCueType_HasMoveTimes        GveCueType = 1 // 剩余行动次数不为0
	GveCueType_HasBox              GveCueType = 2 // 若有地图中的宝箱可领取
	GveCueType_SiegeOpenNotFormat  GveCueType = 3 // 已开启攻城阶段，在布阵期间内内且玩家未布阵
	GveCueType_SiegeStartCountDown GveCueType = 4 // 已开启攻城阶段，在锁定阵型期间内，且距离开始攻城在30分钟内。
	GveCueType_SiegeStart          GveCueType = 5 // 已开启攻城阶段，在攻城期间内，且未达到20：05
	GveCueType_GveEnter            GveCueType = 6 // 若玩家本周未进入GVE地图，且有关卡开启，针对所有玩家提示
	GveCueType_GveNotOpen          GveCueType = 7 // 若玩家本周未进入GVE地图，且没有开任何一个关卡。针对盟主副盟主提示
	GveCueType_GveTaxBox           GveCueType = 8 // 税收格子
	GveCueType_GveTranBox          GveCueType = 9 // 运粮格子
)

// Enum value maps for GveCueType.
var (
	GveCueType_name = map[int32]string{
		1: "HasMoveTimes",
		2: "HasBox",
		3: "SiegeOpenNotFormat",
		4: "SiegeStartCountDown",
		5: "SiegeStart",
		6: "GveEnter",
		7: "GveNotOpen",
		8: "GveTaxBox",
		9: "GveTranBox",
	}
	GveCueType_value = map[string]int32{
		"HasMoveTimes":        1,
		"HasBox":              2,
		"SiegeOpenNotFormat":  3,
		"SiegeStartCountDown": 4,
		"SiegeStart":          5,
		"GveEnter":            6,
		"GveNotOpen":          7,
		"GveTaxBox":           8,
		"GveTranBox":          9,
	}
)

func (x GveCueType) Enum() *GveCueType {
	p := new(GveCueType)
	*p = x
	return p
}

func (x GveCueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GveCueType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[18].Descriptor()
}

func (GveCueType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[18]
}

func (x GveCueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GveCueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GveCueType(num)
	return nil
}

// Deprecated: Use GveCueType.Descriptor instead.
func (GveCueType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

// 宝物品质
type TreasureQuality int32

const (
	TreasureQuality_Green  TreasureQuality = 1 // 绿
	TreasureQuality_Blue   TreasureQuality = 2 // 蓝
	TreasureQuality_Purple TreasureQuality = 3 // 紫
	TreasureQuality_Orange TreasureQuality = 4 // 橙
	TreasureQuality_Golden TreasureQuality = 5 // 金
	TreasureQuality_Red    TreasureQuality = 6 // 红
)

// Enum value maps for TreasureQuality.
var (
	TreasureQuality_name = map[int32]string{
		1: "Green",
		2: "Blue",
		3: "Purple",
		4: "Orange",
		5: "Golden",
		6: "Red",
	}
	TreasureQuality_value = map[string]int32{
		"Green":  1,
		"Blue":   2,
		"Purple": 3,
		"Orange": 4,
		"Golden": 5,
		"Red":    6,
	}
)

func (x TreasureQuality) Enum() *TreasureQuality {
	p := new(TreasureQuality)
	*p = x
	return p
}

func (x TreasureQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreasureQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[19].Descriptor()
}

func (TreasureQuality) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[19]
}

func (x TreasureQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TreasureQuality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TreasureQuality(num)
	return nil
}

// Deprecated: Use TreasureQuality.Descriptor instead.
func (TreasureQuality) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

// 宝物洗炼类型
type TreasureRefineType int32

const (
	TreasureRefineType_Ordinary TreasureRefineType = 1 // 普通
	TreasureRefineType_Advanced TreasureRefineType = 2 // 高级
)

// Enum value maps for TreasureRefineType.
var (
	TreasureRefineType_name = map[int32]string{
		1: "Ordinary",
		2: "Advanced",
	}
	TreasureRefineType_value = map[string]int32{
		"Ordinary": 1,
		"Advanced": 2,
	}
)

func (x TreasureRefineType) Enum() *TreasureRefineType {
	p := new(TreasureRefineType)
	*p = x
	return p
}

func (x TreasureRefineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreasureRefineType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[20].Descriptor()
}

func (TreasureRefineType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[20]
}

func (x TreasureRefineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TreasureRefineType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TreasureRefineType(num)
	return nil
}

// Deprecated: Use TreasureRefineType.Descriptor instead.
func (TreasureRefineType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

// 宝物洗炼类型
type TreasureAffix int32

const (
	TreasureAffix_NoQuality     TreasureAffix = 0 // 没有品质
	TreasureAffix_GoldenQuality TreasureAffix = 5 // 金色
	TreasureAffix_RedQuality    TreasureAffix = 6 // 红色
)

// Enum value maps for TreasureAffix.
var (
	TreasureAffix_name = map[int32]string{
		0: "NoQuality",
		5: "GoldenQuality",
		6: "RedQuality",
	}
	TreasureAffix_value = map[string]int32{
		"NoQuality":     0,
		"GoldenQuality": 5,
		"RedQuality":    6,
	}
)

func (x TreasureAffix) Enum() *TreasureAffix {
	p := new(TreasureAffix)
	*p = x
	return p
}

func (x TreasureAffix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreasureAffix) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[21].Descriptor()
}

func (TreasureAffix) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[21]
}

func (x TreasureAffix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TreasureAffix) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TreasureAffix(num)
	return nil
}

// Deprecated: Use TreasureAffix.Descriptor instead.
func (TreasureAffix) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

// 宝物缘分类型
type TreasureFateType int32

const (
	TreasureFateType_Positive TreasureFateType = 1 //主动
	TreasureFateType_Start    TreasureFateType = 2 //开场
	TreasureFateType_Passive  TreasureFateType = 3 //被动
)

// Enum value maps for TreasureFateType.
var (
	TreasureFateType_name = map[int32]string{
		1: "Positive",
		2: "Start",
		3: "Passive",
	}
	TreasureFateType_value = map[string]int32{
		"Positive": 1,
		"Start":    2,
		"Passive":  3,
	}
)

func (x TreasureFateType) Enum() *TreasureFateType {
	p := new(TreasureFateType)
	*p = x
	return p
}

func (x TreasureFateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreasureFateType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[22].Descriptor()
}

func (TreasureFateType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[22]
}

func (x TreasureFateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TreasureFateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TreasureFateType(num)
	return nil
}

// Deprecated: Use TreasureFateType.Descriptor instead.
func (TreasureFateType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

//巅峰竞技场的状态
type PeakStateStep int32

const (
	PeakStateStep_NONE      PeakStateStep = 1 //不在巅峰竞技场中
	PeakStateStep_FORMATION PeakStateStep = 2 //在巅峰竞技场的布阵中
	PeakStateStep_BATTLE    PeakStateStep = 3 //在巅峰竞技场的战斗中
	PeakStateStep_MATCHING  PeakStateStep = 4 //匹配中
)

// Enum value maps for PeakStateStep.
var (
	PeakStateStep_name = map[int32]string{
		1: "NONE",
		2: "FORMATION",
		3: "BATTLE",
		4: "MATCHING",
	}
	PeakStateStep_value = map[string]int32{
		"NONE":      1,
		"FORMATION": 2,
		"BATTLE":    3,
		"MATCHING":  4,
	}
)

func (x PeakStateStep) Enum() *PeakStateStep {
	p := new(PeakStateStep)
	*p = x
	return p
}

func (x PeakStateStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeakStateStep) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[23].Descriptor()
}

func (PeakStateStep) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[23]
}

func (x PeakStateStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeakStateStep) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeakStateStep(num)
	return nil
}

// Deprecated: Use PeakStateStep.Descriptor instead.
func (PeakStateStep) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

type BattleResultErrorCode int32

const (
	BattleResultErrorCode_OK      BattleResultErrorCode = 0 // 正常
	BattleResultErrorCode_CHEAT   BattleResultErrorCode = 1 // 作弊
	BattleResultErrorCode_TIMEOUT BattleResultErrorCode = 2 // 超时
)

// Enum value maps for BattleResultErrorCode.
var (
	BattleResultErrorCode_name = map[int32]string{
		0: "OK",
		1: "CHEAT",
		2: "TIMEOUT",
	}
	BattleResultErrorCode_value = map[string]int32{
		"OK":      0,
		"CHEAT":   1,
		"TIMEOUT": 2,
	}
)

func (x BattleResultErrorCode) Enum() *BattleResultErrorCode {
	p := new(BattleResultErrorCode)
	*p = x
	return p
}

func (x BattleResultErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleResultErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[24].Descriptor()
}

func (BattleResultErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[24]
}

func (x BattleResultErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BattleResultErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BattleResultErrorCode(num)
	return nil
}

// Deprecated: Use BattleResultErrorCode.Descriptor instead.
func (BattleResultErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

// 战报类型
type SlayFightReportType int32

const (
	SlayFightReportType_AttackPowerSuccess   SlayFightReportType = 1 // 攻打势力城成功战报
	SlayFightReportType_AttackPowerFail      SlayFightReportType = 2 // 攻打势力城失败战报
	SlayFightReportType_AttackNeutralSuccess SlayFightReportType = 3 // 攻打中立城成功战报
	SlayFightReportType_AttackNeutralFail    SlayFightReportType = 4 // 攻打中立城失败战报
	SlayFightReportType_CallArmy             SlayFightReportType = 5 // 征兵
	SlayFightReportType_LevelUpArmy          SlayFightReportType = 6 // 升级
)

// Enum value maps for SlayFightReportType.
var (
	SlayFightReportType_name = map[int32]string{
		1: "AttackPowerSuccess",
		2: "AttackPowerFail",
		3: "AttackNeutralSuccess",
		4: "AttackNeutralFail",
		5: "CallArmy",
		6: "LevelUpArmy",
	}
	SlayFightReportType_value = map[string]int32{
		"AttackPowerSuccess":   1,
		"AttackPowerFail":      2,
		"AttackNeutralSuccess": 3,
		"AttackNeutralFail":    4,
		"CallArmy":             5,
		"LevelUpArmy":          6,
	}
)

func (x SlayFightReportType) Enum() *SlayFightReportType {
	p := new(SlayFightReportType)
	*p = x
	return p
}

func (x SlayFightReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlayFightReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[25].Descriptor()
}

func (SlayFightReportType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[25]
}

func (x SlayFightReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SlayFightReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SlayFightReportType(num)
	return nil
}

// Deprecated: Use SlayFightReportType.Descriptor instead.
func (SlayFightReportType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

//页签类型
type StrMansionTabType int32

const (
	StrMansionTabType_Wind  StrMansionTabType = 1  //风系
	StrMansionTabType_Fire  StrMansionTabType = 2  //火系
	StrMansionTabType_Dirt  StrMansionTabType = 3  //土系
	StrMansionTabType_Water StrMansionTabType = 4  //水系
	StrMansionTabType_Max   StrMansionTabType = 10 //最大值（标记用）
)

// Enum value maps for StrMansionTabType.
var (
	StrMansionTabType_name = map[int32]string{
		1:  "Wind",
		2:  "Fire",
		3:  "Dirt",
		4:  "Water",
		10: "Max",
	}
	StrMansionTabType_value = map[string]int32{
		"Wind":  1,
		"Fire":  2,
		"Dirt":  3,
		"Water": 4,
		"Max":   10,
	}
)

func (x StrMansionTabType) Enum() *StrMansionTabType {
	p := new(StrMansionTabType)
	*p = x
	return p
}

func (x StrMansionTabType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrMansionTabType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[26].Descriptor()
}

func (StrMansionTabType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[26]
}

func (x StrMansionTabType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrMansionTabType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrMansionTabType(num)
	return nil
}

// Deprecated: Use StrMansionTabType.Descriptor instead.
func (StrMansionTabType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

//屏蔽vip显示
type HideVipUI int32

const (
	HideVipUI_FriendUI     HideVipUI = 1 //好友
	HideVipUI_UnionUI      HideVipUI = 2 //联盟
	HideVipUI_ChatUI       HideVipUI = 3 //聊天
	HideVipUI_PlayerInfoUI HideVipUI = 4 //玩家详情
)

// Enum value maps for HideVipUI.
var (
	HideVipUI_name = map[int32]string{
		1: "FriendUI",
		2: "UnionUI",
		3: "ChatUI",
		4: "PlayerInfoUI",
	}
	HideVipUI_value = map[string]int32{
		"FriendUI":     1,
		"UnionUI":      2,
		"ChatUI":       3,
		"PlayerInfoUI": 4,
	}
)

func (x HideVipUI) Enum() *HideVipUI {
	p := new(HideVipUI)
	*p = x
	return p
}

func (x HideVipUI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideVipUI) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[27].Descriptor()
}

func (HideVipUI) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[27]
}

func (x HideVipUI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HideVipUI) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HideVipUI(num)
	return nil
}

// Deprecated: Use HideVipUI.Descriptor instead.
func (HideVipUI) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

// 赤壁之战 排行榜类型
type ChibiRankType int32

const (
	ChibiRankType_Date  ChibiRankType = 1 // 最近通关
	ChibiRankType_Time  ChibiRankType = 2 // 最快通关
	ChibiRankType_Power ChibiRankType = 3 // 最低战力
)

// Enum value maps for ChibiRankType.
var (
	ChibiRankType_name = map[int32]string{
		1: "Date",
		2: "Time",
		3: "Power",
	}
	ChibiRankType_value = map[string]int32{
		"Date":  1,
		"Time":  2,
		"Power": 3,
	}
)

func (x ChibiRankType) Enum() *ChibiRankType {
	p := new(ChibiRankType)
	*p = x
	return p
}

func (x ChibiRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChibiRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[28].Descriptor()
}

func (ChibiRankType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[28]
}

func (x ChibiRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChibiRankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChibiRankType(num)
	return nil
}

// Deprecated: Use ChibiRankType.Descriptor instead.
func (ChibiRankType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

// 赛季基金任务类型
type SeasonFundTaskType int32

const (
	SeasonFundTaskType_Daily     SeasonFundTaskType = 1 // 每日任务
	SeasonFundTaskType_Season    SeasonFundTaskType = 2 // 赛季任务
	SeasonFundTaskType_Exclusive SeasonFundTaskType = 3 // 专属任务
)

// Enum value maps for SeasonFundTaskType.
var (
	SeasonFundTaskType_name = map[int32]string{
		1: "Daily",
		2: "Season",
		3: "Exclusive",
	}
	SeasonFundTaskType_value = map[string]int32{
		"Daily":     1,
		"Season":    2,
		"Exclusive": 3,
	}
)

func (x SeasonFundTaskType) Enum() *SeasonFundTaskType {
	p := new(SeasonFundTaskType)
	*p = x
	return p
}

func (x SeasonFundTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeasonFundTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[29].Descriptor()
}

func (SeasonFundTaskType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[29]
}

func (x SeasonFundTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeasonFundTaskType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeasonFundTaskType(num)
	return nil
}

// Deprecated: Use SeasonFundTaskType.Descriptor instead.
func (SeasonFundTaskType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

type StarSealLogType int32

const (
	StarSealLogType_PlayerDamage StarSealLogType = 1
	StarSealLogType_StarUnlock   StarSealLogType = 2
)

// Enum value maps for StarSealLogType.
var (
	StarSealLogType_name = map[int32]string{
		1: "PlayerDamage",
		2: "StarUnlock",
	}
	StarSealLogType_value = map[string]int32{
		"PlayerDamage": 1,
		"StarUnlock":   2,
	}
)

func (x StarSealLogType) Enum() *StarSealLogType {
	p := new(StarSealLogType)
	*p = x
	return p
}

func (x StarSealLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StarSealLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[30].Descriptor()
}

func (StarSealLogType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[30]
}

func (x StarSealLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StarSealLogType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StarSealLogType(num)
	return nil
}

// Deprecated: Use StarSealLogType.Descriptor instead.
func (StarSealLogType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

type SeasonTaskType int32

const (
	SeasonTaskType_sDailyExp      SeasonTaskType = 1
	SeasonTaskType_sDailyCoin     SeasonTaskType = 2
	SeasonTaskType_sDailyBoss     SeasonTaskType = 3
	SeasonTaskType_sDailyCMBattle SeasonTaskType = 4
	SeasonTaskType_sDailyPeak     SeasonTaskType = 5
	SeasonTaskType_sDailyOverlord SeasonTaskType = 6
)

// Enum value maps for SeasonTaskType.
var (
	SeasonTaskType_name = map[int32]string{
		1: "sDailyExp",
		2: "sDailyCoin",
		3: "sDailyBoss",
		4: "sDailyCMBattle",
		5: "sDailyPeak",
		6: "sDailyOverlord",
	}
	SeasonTaskType_value = map[string]int32{
		"sDailyExp":      1,
		"sDailyCoin":     2,
		"sDailyBoss":     3,
		"sDailyCMBattle": 4,
		"sDailyPeak":     5,
		"sDailyOverlord": 6,
	}
)

func (x SeasonTaskType) Enum() *SeasonTaskType {
	p := new(SeasonTaskType)
	*p = x
	return p
}

func (x SeasonTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeasonTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[31].Descriptor()
}

func (SeasonTaskType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[31]
}

func (x SeasonTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeasonTaskType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeasonTaskType(num)
	return nil
}

// Deprecated: Use SeasonTaskType.Descriptor instead.
func (SeasonTaskType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

type DrawPoolType int32

const (
	DrawPoolType_greenPool  DrawPoolType = 1 //绿色卡池
	DrawPoolType_bluePool   DrawPoolType = 2 //蓝色卡池
	DrawPoolType_PurplePool DrawPoolType = 3 //紫色卡池
	DrawPoolType_OrangePool DrawPoolType = 4 //橙色卡池
	DrawPoolType_GoldPool   DrawPoolType = 5 //金色卡池
	DrawPoolType_normalPool DrawPoolType = 6 //普通卡池
)

// Enum value maps for DrawPoolType.
var (
	DrawPoolType_name = map[int32]string{
		1: "greenPool",
		2: "bluePool",
		3: "PurplePool",
		4: "OrangePool",
		5: "GoldPool",
		6: "normalPool",
	}
	DrawPoolType_value = map[string]int32{
		"greenPool":  1,
		"bluePool":   2,
		"PurplePool": 3,
		"OrangePool": 4,
		"GoldPool":   5,
		"normalPool": 6,
	}
)

func (x DrawPoolType) Enum() *DrawPoolType {
	p := new(DrawPoolType)
	*p = x
	return p
}

func (x DrawPoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawPoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[32].Descriptor()
}

func (DrawPoolType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[32]
}

func (x DrawPoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrawPoolType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrawPoolType(num)
	return nil
}

// Deprecated: Use DrawPoolType.Descriptor instead.
func (DrawPoolType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

type CrossRankWonType int32

const (
	CrossRankWonType_WonRankGuild  CrossRankWonType = 1
	CrossRankWonType_WonRankPlayer CrossRankWonType = 2
)

// Enum value maps for CrossRankWonType.
var (
	CrossRankWonType_name = map[int32]string{
		1: "WonRankGuild",
		2: "WonRankPlayer",
	}
	CrossRankWonType_value = map[string]int32{
		"WonRankGuild":  1,
		"WonRankPlayer": 2,
	}
)

func (x CrossRankWonType) Enum() *CrossRankWonType {
	p := new(CrossRankWonType)
	*p = x
	return p
}

func (x CrossRankWonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossRankWonType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[33].Descriptor()
}

func (CrossRankWonType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[33]
}

func (x CrossRankWonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CrossRankWonType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CrossRankWonType(num)
	return nil
}

// Deprecated: Use CrossRankWonType.Descriptor instead.
func (CrossRankWonType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

type LadderState int32

const (
	LadderState_LadderNone          LadderState = 1 // 不在对战中
	LadderState_LadderPick          LadderState = 2 // 选择阶段
	LadderState_LadderSaveFormation LadderState = 3 // 布阵阶段
)

// Enum value maps for LadderState.
var (
	LadderState_name = map[int32]string{
		1: "LadderNone",
		2: "LadderPick",
		3: "LadderSaveFormation",
	}
	LadderState_value = map[string]int32{
		"LadderNone":          1,
		"LadderPick":          2,
		"LadderSaveFormation": 3,
	}
)

func (x LadderState) Enum() *LadderState {
	p := new(LadderState)
	*p = x
	return p
}

func (x LadderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LadderState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[34].Descriptor()
}

func (LadderState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[34]
}

func (x LadderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LadderState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LadderState(num)
	return nil
}

// Deprecated: Use LadderState.Descriptor instead.
func (LadderState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

// 排位赛 大神战报类型
type LadderGodBattleLogType int32

const (
	LadderGodBattleLogType_LadderGodBattleLog1 LadderGodBattleLogType = 1 // 艰苦鏖战
	LadderGodBattleLogType_LadderGodBattleLog2 LadderGodBattleLogType = 2 // 势如破竹
	LadderGodBattleLogType_LadderGodBattleLog3 LadderGodBattleLogType = 3 // 背水一战
	LadderGodBattleLogType_LadderGodBattleLog4 LadderGodBattleLogType = 4 // 强者之战
)

// Enum value maps for LadderGodBattleLogType.
var (
	LadderGodBattleLogType_name = map[int32]string{
		1: "LadderGodBattleLog1",
		2: "LadderGodBattleLog2",
		3: "LadderGodBattleLog3",
		4: "LadderGodBattleLog4",
	}
	LadderGodBattleLogType_value = map[string]int32{
		"LadderGodBattleLog1": 1,
		"LadderGodBattleLog2": 2,
		"LadderGodBattleLog3": 3,
		"LadderGodBattleLog4": 4,
	}
)

func (x LadderGodBattleLogType) Enum() *LadderGodBattleLogType {
	p := new(LadderGodBattleLogType)
	*p = x
	return p
}

func (x LadderGodBattleLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LadderGodBattleLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[35].Descriptor()
}

func (LadderGodBattleLogType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[35]
}

func (x LadderGodBattleLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LadderGodBattleLogType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LadderGodBattleLogType(num)
	return nil
}

// Deprecated: Use LadderGodBattleLogType.Descriptor instead.
func (LadderGodBattleLogType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

// 队伍状态
type WonFtStatus int32

const (
	WonFtStatus_None    WonFtStatus = 0 // 默认
	WonFtStatus_Moving  WonFtStatus = 1 // 行军中
	WonFtStatus_Retreat WonFtStatus = 2 // 撤退中
	WonFtStatus_Heal    WonFtStatus = 3 // 养伤中/重伤
	WonFtStatus_Recover WonFtStatus = 4 // 恢复中
	WonFtStatus_Defend  WonFtStatus = 5 // 驻守中
	WonFtStatus_Attack  WonFtStatus = 6 // 攻击中
)

// Enum value maps for WonFtStatus.
var (
	WonFtStatus_name = map[int32]string{
		0: "None",
		1: "Moving",
		2: "Retreat",
		3: "Heal",
		4: "Recover",
		5: "Defend",
		6: "Attack",
	}
	WonFtStatus_value = map[string]int32{
		"None":    0,
		"Moving":  1,
		"Retreat": 2,
		"Heal":    3,
		"Recover": 4,
		"Defend":  5,
		"Attack":  6,
	}
)

func (x WonFtStatus) Enum() *WonFtStatus {
	p := new(WonFtStatus)
	*p = x
	return p
}

func (x WonFtStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WonFtStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[36].Descriptor()
}

func (WonFtStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[36]
}

func (x WonFtStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WonFtStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WonFtStatus(num)
	return nil
}

// Deprecated: Use WonFtStatus.Descriptor instead.
func (WonFtStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

type WonActType int32

const (
	WonActType_ActMove    WonActType = 0 // 行军
	WonActType_ActRetreat WonActType = 1 // 撤退
)

// Enum value maps for WonActType.
var (
	WonActType_name = map[int32]string{
		0: "ActMove",
		1: "ActRetreat",
	}
	WonActType_value = map[string]int32{
		"ActMove":    0,
		"ActRetreat": 1,
	}
)

func (x WonActType) Enum() *WonActType {
	p := new(WonActType)
	*p = x
	return p
}

func (x WonActType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WonActType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[37].Descriptor()
}

func (WonActType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[37]
}

func (x WonActType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WonActType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WonActType(num)
	return nil
}

// Deprecated: Use WonActType.Descriptor instead.
func (WonActType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

type WonSurrenderApplyStatus int32

const (
	WonSurrenderApplyStatus_ApplyIng     WonSurrenderApplyStatus = 0 // 申请中
	WonSurrenderApplyStatus_ApplySuccess WonSurrenderApplyStatus = 1 // 成功
	WonSurrenderApplyStatus_ApplyFail    WonSurrenderApplyStatus = 2 // 拒绝
)

// Enum value maps for WonSurrenderApplyStatus.
var (
	WonSurrenderApplyStatus_name = map[int32]string{
		0: "ApplyIng",
		1: "ApplySuccess",
		2: "ApplyFail",
	}
	WonSurrenderApplyStatus_value = map[string]int32{
		"ApplyIng":     0,
		"ApplySuccess": 1,
		"ApplyFail":    2,
	}
)

func (x WonSurrenderApplyStatus) Enum() *WonSurrenderApplyStatus {
	p := new(WonSurrenderApplyStatus)
	*p = x
	return p
}

func (x WonSurrenderApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WonSurrenderApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[38].Descriptor()
}

func (WonSurrenderApplyStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[38]
}

func (x WonSurrenderApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WonSurrenderApplyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WonSurrenderApplyStatus(num)
	return nil
}

// Deprecated: Use WonSurrenderApplyStatus.Descriptor instead.
func (WonSurrenderApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

type WonMessageType int32

const (
	WonMessageType_Occupy         WonMessageType = 0 // 占领消息
	WonMessageType_TotalKill      WonMessageType = 1 // 累计击杀消息
	WonMessageType_PlayerFtReport WonMessageType = 2 // 玩家个人播报
)

// Enum value maps for WonMessageType.
var (
	WonMessageType_name = map[int32]string{
		0: "Occupy",
		1: "TotalKill",
		2: "PlayerFtReport",
	}
	WonMessageType_value = map[string]int32{
		"Occupy":         0,
		"TotalKill":      1,
		"PlayerFtReport": 2,
	}
)

func (x WonMessageType) Enum() *WonMessageType {
	p := new(WonMessageType)
	*p = x
	return p
}

func (x WonMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WonMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[39].Descriptor()
}

func (WonMessageType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[39]
}

func (x WonMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WonMessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WonMessageType(num)
	return nil
}

// Deprecated: Use WonMessageType.Descriptor instead.
func (WonMessageType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

type AucType int32

const (
	AucType_WonMap   AucType = 1 // 问鼎中原地图拍卖行
	AucType_WonField AucType = 2 // 问鼎中原战场拍卖行
)

// Enum value maps for AucType.
var (
	AucType_name = map[int32]string{
		1: "WonMap",
		2: "WonField",
	}
	AucType_value = map[string]int32{
		"WonMap":   1,
		"WonField": 2,
	}
)

func (x AucType) Enum() *AucType {
	p := new(AucType)
	*p = x
	return p
}

func (x AucType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AucType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[40].Descriptor()
}

func (AucType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[40]
}

func (x AucType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AucType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AucType(num)
	return nil
}

// Deprecated: Use AucType.Descriptor instead.
func (AucType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

// 卡牌状态
type HappyFlopStatus int32

const (
	HappyFlopStatus_Card_Negative HappyFlopStatus = 0 // 反面
	HappyFlopStatus_Card_Positive HappyFlopStatus = 1 // 正面
	HappyFlopStatus_Card_Remove   HappyFlopStatus = 2 // 消失
)

// Enum value maps for HappyFlopStatus.
var (
	HappyFlopStatus_name = map[int32]string{
		0: "Card_Negative",
		1: "Card_Positive",
		2: "Card_Remove",
	}
	HappyFlopStatus_value = map[string]int32{
		"Card_Negative": 0,
		"Card_Positive": 1,
		"Card_Remove":   2,
	}
)

func (x HappyFlopStatus) Enum() *HappyFlopStatus {
	p := new(HappyFlopStatus)
	*p = x
	return p
}

func (x HappyFlopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HappyFlopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[41].Descriptor()
}

func (HappyFlopStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[41]
}

func (x HappyFlopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HappyFlopStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HappyFlopStatus(num)
	return nil
}

// Deprecated: Use HappyFlopStatus.Descriptor instead.
func (HappyFlopStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

type NavalStage_NavalStageState int32

const (
	NavalStage_none        NavalStage_NavalStageState = 1 //无
	NavalStage_occupied    NavalStage_NavalStageState = 2 //占领
	NavalStage_operator    NavalStage_NavalStageState = 3 //完成操作，如购买，领奖
	NavalStage_trap        NavalStage_NavalStageState = 4 // 陷阱节点
	NavalStage_selectEvent NavalStage_NavalStageState = 5 // 事件选择节点
)

// Enum value maps for NavalStage_NavalStageState.
var (
	NavalStage_NavalStageState_name = map[int32]string{
		1: "none",
		2: "occupied",
		3: "operator",
		4: "trap",
		5: "selectEvent",
	}
	NavalStage_NavalStageState_value = map[string]int32{
		"none":        1,
		"occupied":    2,
		"operator":    3,
		"trap":        4,
		"selectEvent": 5,
	}
)

func (x NavalStage_NavalStageState) Enum() *NavalStage_NavalStageState {
	p := new(NavalStage_NavalStageState)
	*p = x
	return p
}

func (x NavalStage_NavalStageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavalStage_NavalStageState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[42].Descriptor()
}

func (NavalStage_NavalStageState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[42]
}

func (x NavalStage_NavalStageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NavalStage_NavalStageState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NavalStage_NavalStageState(num)
	return nil
}

// Deprecated: Use NavalStage_NavalStageState.Descriptor instead.
func (NavalStage_NavalStageState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{224, 0}
}

type NavalBattleUniteFt_State int32

const (
	NavalBattleUniteFt_unBattle NavalBattleUniteFt_State = 0 // 没有战斗
	NavalBattleUniteFt_win      NavalBattleUniteFt_State = 1 // 胜利
	NavalBattleUniteFt_fail     NavalBattleUniteFt_State = 2 // 失败
)

// Enum value maps for NavalBattleUniteFt_State.
var (
	NavalBattleUniteFt_State_name = map[int32]string{
		0: "unBattle",
		1: "win",
		2: "fail",
	}
	NavalBattleUniteFt_State_value = map[string]int32{
		"unBattle": 0,
		"win":      1,
		"fail":     2,
	}
)

func (x NavalBattleUniteFt_State) Enum() *NavalBattleUniteFt_State {
	p := new(NavalBattleUniteFt_State)
	*p = x
	return p
}

func (x NavalBattleUniteFt_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavalBattleUniteFt_State) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[43].Descriptor()
}

func (NavalBattleUniteFt_State) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[43]
}

func (x NavalBattleUniteFt_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NavalBattleUniteFt_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NavalBattleUniteFt_State(num)
	return nil
}

// Deprecated: Use NavalBattleUniteFt_State.Descriptor instead.
func (NavalBattleUniteFt_State) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{225, 0}
}

type PlayerHeadPortrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`                //名字
	Level       *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`             //等级
	Avatar      *int32  `protobuf:"varint,3,opt,name=avatar" json:"avatar,omitempty"`           //头像
	AvatarFrame *int32  `protobuf:"varint,4,opt,name=avatarFrame" json:"avatarFrame,omitempty"` //头像框
	VipLv       *uint32 `protobuf:"varint,5,opt,name=vipLv" json:"vipLv,omitempty"`             //vip等级
	Uid         *uint64 `protobuf:"varint,6,opt,name=uid" json:"uid,omitempty"`                 //角色id
	Model       *int32  `protobuf:"varint,7,opt,name=model" json:"model,omitempty"`             //角色形象
}

func (x *PlayerHeadPortrait) Reset() {
	*x = PlayerHeadPortrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHeadPortrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHeadPortrait) ProtoMessage() {}

func (x *PlayerHeadPortrait) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHeadPortrait.ProtoReflect.Descriptor instead.
func (*PlayerHeadPortrait) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerHeadPortrait) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlayerHeadPortrait) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PlayerHeadPortrait) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *PlayerHeadPortrait) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *PlayerHeadPortrait) GetVipLv() uint32 {
	if x != nil && x.VipLv != nil {
		return *x.VipLv
	}
	return 0
}

func (x *PlayerHeadPortrait) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PlayerHeadPortrait) GetModel() int32 {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return 0
}

//玩家简单数据
type PlayerSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                //id
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                             //数量
	ServerId          *uint64 `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`                    //服务器id
	Level             *uint32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`                          //等级
	Career            *uint32 `protobuf:"varint,5,opt,name=career" json:"career,omitempty"`                        //职业
	Avatar            *int32  `protobuf:"varint,6,opt,name=avatar" json:"avatar,omitempty"`                        //头像
	AvatarFrame       *int32  `protobuf:"varint,7,opt,name=avatarFrame" json:"avatarFrame,omitempty"`              //头像框
	Msg               *string `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`                               //宣言
	Vip               *uint32 `protobuf:"varint,9,opt,name=vip" json:"vip,omitempty"`                              //VIP
	Power             *uint32 `protobuf:"varint,10,opt,name=power" json:"power,omitempty"`                         //战斗力
	LastLogout        *int64  `protobuf:"varint,11,opt,name=lastLogout" json:"lastLogout,omitempty"`               //上一次登出时间
	GuildId           *uint64 `protobuf:"varint,12,opt,name=guildId" json:"guildId,omitempty"`                     //势力id
	GuildName         *string `protobuf:"bytes,13,opt,name=guildName" json:"guildName,omitempty"`                  //势力名字
	CounsellorId      *int32  `protobuf:"varint,14,opt,name=counsellorId" json:"counsellorId,omitempty"`           //竞技场防守阵型的军师(竞技场界面要显示)
	LastLogin         *int64  `protobuf:"varint,15,opt,name=lastLogin" json:"lastLogin,omitempty"`                 //上一次登陆时间
	ArenaRank         *uint32 `protobuf:"varint,16,opt,name=arenaRank" json:"arenaRank,omitempty"`                 //竞技场排名的显示数据（真实的在竞技场管理器里）
	ArenaDefencePower *uint32 `protobuf:"varint,17,opt,name=arenaDefencePower" json:"arenaDefencePower,omitempty"` //竞技场Pve阵型的战斗力
	PveCounsellorId   *int32  `protobuf:"varint,18,opt,name=pveCounsellorId" json:"pveCounsellorId,omitempty"`     //军师
	HideVipSystems    []int32 `protobuf:"varint,19,rep,name=hideVipSystems" json:"hideVipSystems,omitempty"`       //需要隐藏Vip标识的功能
	//optional Formation formation = 16; //阵型数据
	//repeated common.Commander commanders = 13; //上阵武将
	Friends             *Friends               `protobuf:"bytes,20,opt,name=friends" json:"friends,omitempty"`                         //好友
	Praise              *uint32                `protobuf:"varint,21,opt,name=praise" json:"praise,omitempty"`                          //点赞
	HasPraise           *bool                  `protobuf:"varint,22,opt,name=hasPraise" json:"hasPraise,omitempty"`                    //今日是否点赞
	PeakRank            *uint32                `protobuf:"varint,23,opt,name=peakRank" json:"peakRank,omitempty"`                      //巅峰竞技场排名
	MaxPower            *uint32                `protobuf:"varint,24,opt,name=maxPower" json:"maxPower,omitempty"`                      // 最强战力
	ShowCommanderId     *int32                 `protobuf:"varint,25,opt,name=showCommanderId" json:"showCommanderId,omitempty"`        //要展示的武将
	FormationCounsellor []*FormationCounsellor `protobuf:"bytes,26,rep,name=formationCounsellor" json:"formationCounsellor,omitempty"` // 阵型军师
	TopCounsellorId     *int32                 `protobuf:"varint,27,opt,name=topCounsellorId" json:"topCounsellorId,omitempty"`        //战斗力最高军师
	GuildSkills         []*PlayerGuildSkill    `protobuf:"bytes,28,rep,name=guildSkills" json:"guildSkills,omitempty"`                 //联盟科技技能
	Online              *bool                  `protobuf:"varint,30,opt,name=online" json:"online,omitempty"`                          //是否在线
	Model               *int32                 `protobuf:"varint,31,opt,name=model" json:"model,omitempty"`                            //形象
	VipExp              *uint32                `protobuf:"varint,32,opt,name=VipExp" json:"VipExp,omitempty"`                          // vip 经验
	Account             *string                `protobuf:"bytes,33,opt,name=account" json:"account,omitempty"`                         // 账号
	Diamond             *uint32                `protobuf:"varint,34,opt,name=Diamond" json:"Diamond,omitempty"`                        // 元宝
	CreateTime          *int64                 `protobuf:"varint,35,opt,name=createTime" json:"createTime,omitempty"`                  // 创建时间
	Opid                *string                `protobuf:"bytes,36,opt,name=opid" json:"opid,omitempty"`                               // op id
	YouthReturnExpired  *int64                 `protobuf:"varint,84,opt,name=youthReturnExpired" json:"youthReturnExpired,omitempty"`  //少年回归过期时间
}

func (x *PlayerSimpleData) Reset() {
	*x = PlayerSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSimpleData) ProtoMessage() {}

func (x *PlayerSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSimpleData.ProtoReflect.Descriptor instead.
func (*PlayerSimpleData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerSimpleData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PlayerSimpleData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlayerSimpleData) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerSimpleData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PlayerSimpleData) GetCareer() uint32 {
	if x != nil && x.Career != nil {
		return *x.Career
	}
	return 0
}

func (x *PlayerSimpleData) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *PlayerSimpleData) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *PlayerSimpleData) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *PlayerSimpleData) GetVip() uint32 {
	if x != nil && x.Vip != nil {
		return *x.Vip
	}
	return 0
}

func (x *PlayerSimpleData) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PlayerSimpleData) GetLastLogout() int64 {
	if x != nil && x.LastLogout != nil {
		return *x.LastLogout
	}
	return 0
}

func (x *PlayerSimpleData) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *PlayerSimpleData) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *PlayerSimpleData) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *PlayerSimpleData) GetLastLogin() int64 {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return 0
}

func (x *PlayerSimpleData) GetArenaRank() uint32 {
	if x != nil && x.ArenaRank != nil {
		return *x.ArenaRank
	}
	return 0
}

func (x *PlayerSimpleData) GetArenaDefencePower() uint32 {
	if x != nil && x.ArenaDefencePower != nil {
		return *x.ArenaDefencePower
	}
	return 0
}

func (x *PlayerSimpleData) GetPveCounsellorId() int32 {
	if x != nil && x.PveCounsellorId != nil {
		return *x.PveCounsellorId
	}
	return 0
}

func (x *PlayerSimpleData) GetHideVipSystems() []int32 {
	if x != nil {
		return x.HideVipSystems
	}
	return nil
}

func (x *PlayerSimpleData) GetFriends() *Friends {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *PlayerSimpleData) GetPraise() uint32 {
	if x != nil && x.Praise != nil {
		return *x.Praise
	}
	return 0
}

func (x *PlayerSimpleData) GetHasPraise() bool {
	if x != nil && x.HasPraise != nil {
		return *x.HasPraise
	}
	return false
}

func (x *PlayerSimpleData) GetPeakRank() uint32 {
	if x != nil && x.PeakRank != nil {
		return *x.PeakRank
	}
	return 0
}

func (x *PlayerSimpleData) GetMaxPower() uint32 {
	if x != nil && x.MaxPower != nil {
		return *x.MaxPower
	}
	return 0
}

func (x *PlayerSimpleData) GetShowCommanderId() int32 {
	if x != nil && x.ShowCommanderId != nil {
		return *x.ShowCommanderId
	}
	return 0
}

func (x *PlayerSimpleData) GetFormationCounsellor() []*FormationCounsellor {
	if x != nil {
		return x.FormationCounsellor
	}
	return nil
}

func (x *PlayerSimpleData) GetTopCounsellorId() int32 {
	if x != nil && x.TopCounsellorId != nil {
		return *x.TopCounsellorId
	}
	return 0
}

func (x *PlayerSimpleData) GetGuildSkills() []*PlayerGuildSkill {
	if x != nil {
		return x.GuildSkills
	}
	return nil
}

func (x *PlayerSimpleData) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *PlayerSimpleData) GetModel() int32 {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return 0
}

func (x *PlayerSimpleData) GetVipExp() uint32 {
	if x != nil && x.VipExp != nil {
		return *x.VipExp
	}
	return 0
}

func (x *PlayerSimpleData) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *PlayerSimpleData) GetDiamond() uint32 {
	if x != nil && x.Diamond != nil {
		return *x.Diamond
	}
	return 0
}

func (x *PlayerSimpleData) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PlayerSimpleData) GetOpid() string {
	if x != nil && x.Opid != nil {
		return *x.Opid
	}
	return ""
}

func (x *PlayerSimpleData) GetYouthReturnExpired() int64 {
	if x != nil && x.YouthReturnExpired != nil {
		return *x.YouthReturnExpired
	}
	return 0
}

//玩家数据
type PlayerSimpleDataEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                   //id
	Name                *string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                //数量
	ServerId            *uint64               `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`                       //服务器id
	Level               *uint32               `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`                             //等级
	Career              *uint32               `protobuf:"varint,5,opt,name=career" json:"career,omitempty"`                           //职业
	Avatar              *int32                `protobuf:"varint,6,opt,name=avatar" json:"avatar,omitempty"`                           //头像
	AvatarFrame         *int32                `protobuf:"varint,7,opt,name=avatarFrame" json:"avatarFrame,omitempty"`                 //头像框
	Msg                 *string               `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`                                  //宣言
	Vip                 *uint32               `protobuf:"varint,9,opt,name=vip" json:"vip,omitempty"`                                 //VIP
	Power               *uint32               `protobuf:"varint,10,opt,name=power" json:"power,omitempty"`                            //战斗力
	LastLogout          *int64                `protobuf:"varint,11,opt,name=lastLogout" json:"lastLogout,omitempty"`                  //上一次登出时间
	GuildId             *uint64               `protobuf:"varint,12,opt,name=guildId" json:"guildId,omitempty"`                        //势力id
	GuildName           *string               `protobuf:"bytes,13,opt,name=guildName" json:"guildName,omitempty"`                     //势力名字
	CounsellorId        *int32                `protobuf:"varint,14,opt,name=counsellorId" json:"counsellorId,omitempty"`              //军师
	LastLogin           *int64                `protobuf:"varint,15,opt,name=lastLogin" json:"lastLogin,omitempty"`                    //上一次登陆时间
	ArenaRank           *uint32               `protobuf:"varint,16,opt,name=arenaRank" json:"arenaRank,omitempty"`                    //竞技场排名的显示数据（真实的在竞技场管理器里）
	ArenaDefencePower   *uint32               `protobuf:"varint,17,opt,name=arenaDefencePower" json:"arenaDefencePower,omitempty"`    //竞技场Pve阵型的战斗力
	Praise              *uint32               `protobuf:"varint,18,opt,name=praise" json:"praise,omitempty"`                          //点赞
	HasPraise           *bool                 `protobuf:"varint,19,opt,name=hasPraise" json:"hasPraise,omitempty"`                    //今日是否点赞
	Commanders          []*Commander          `protobuf:"bytes,20,rep,name=commanders" json:"commanders,omitempty"`                   //上阵武将
	Formation           *Formation            `protobuf:"bytes,21,opt,name=formation" json:"formation,omitempty"`                     //阵型数据
	PeakRank            *uint32               `protobuf:"varint,22,opt,name=peakRank" json:"peakRank,omitempty"`                      //巅峰竞技场排名
	HideVipSystems      []int32               `protobuf:"varint,23,rep,name=hideVipSystems" json:"hideVipSystems,omitempty"`          //需要隐藏Vip标识的功能
	DungeonStar         *uint32               `protobuf:"varint,24,opt,name=dungeonStar" json:"dungeonStar,omitempty"`                // 战役总星数
	MainMissionId       *int32                `protobuf:"varint,25,opt,name=mainMissionId" json:"mainMissionId,omitempty"`            // 主线任务
	DailyCoinRank       *uint32               `protobuf:"varint,26,opt,name=dailyCoinRank" json:"dailyCoinRank,omitempty"`            // 长坂坡排名
	DailyExpRank        *uint32               `protobuf:"varint,27,opt,name=dailyExpRank" json:"dailyExpRank,omitempty"`              // 华容道排名
	DailyBoss1Rank      *uint32               `protobuf:"varint,28,opt,name=dailyBoss1Rank" json:"dailyBoss1Rank,omitempty"`          // 奇珍异兽1排名
	DailyBoss2Rank      *uint32               `protobuf:"varint,29,opt,name=dailyBoss2Rank" json:"dailyBoss2Rank,omitempty"`          // 奇珍异兽2排名
	DailyBoss3Rank      *uint32               `protobuf:"varint,30,opt,name=dailyBoss3Rank" json:"dailyBoss3Rank,omitempty"`          // 奇珍异兽3排名
	Model               *int32                `protobuf:"varint,31,opt,name=model" json:"model,omitempty"`                            //形象
	HotCounsellor       *Counsellor           `protobuf:"bytes,32,opt,name=hotCounsellor" json:"hotCounsellor,omitempty"`             //热点军师
	BeastCommanderInfos []*BeastCommanderInfo `protobuf:"bytes,33,rep,name=beastCommanderInfos" json:"beastCommanderInfos,omitempty"` // 神兽数据
	BeastIsOpen         *bool                 `protobuf:"varint,34,opt,name=beastIsOpen" json:"beastIsOpen,omitempty"`                //神兽是否开启
	MountIsOpen         *bool                 `protobuf:"varint,35,opt,name=mountIsOpen" json:"mountIsOpen,omitempty"`                //坐骑是否开启
	Grow                *PlayerGrow           `protobuf:"bytes,36,opt,name=grow" json:"grow,omitempty"`                               // 养成
}

func (x *PlayerSimpleDataEx) Reset() {
	*x = PlayerSimpleDataEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSimpleDataEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSimpleDataEx) ProtoMessage() {}

func (x *PlayerSimpleDataEx) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSimpleDataEx.ProtoReflect.Descriptor instead.
func (*PlayerSimpleDataEx) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerSimpleDataEx) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlayerSimpleDataEx) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetCareer() uint32 {
	if x != nil && x.Career != nil {
		return *x.Career
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *PlayerSimpleDataEx) GetVip() uint32 {
	if x != nil && x.Vip != nil {
		return *x.Vip
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetLastLogout() int64 {
	if x != nil && x.LastLogout != nil {
		return *x.LastLogout
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *PlayerSimpleDataEx) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetLastLogin() int64 {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetArenaRank() uint32 {
	if x != nil && x.ArenaRank != nil {
		return *x.ArenaRank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetArenaDefencePower() uint32 {
	if x != nil && x.ArenaDefencePower != nil {
		return *x.ArenaDefencePower
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetPraise() uint32 {
	if x != nil && x.Praise != nil {
		return *x.Praise
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetHasPraise() bool {
	if x != nil && x.HasPraise != nil {
		return *x.HasPraise
	}
	return false
}

func (x *PlayerSimpleDataEx) GetCommanders() []*Commander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

func (x *PlayerSimpleDataEx) GetFormation() *Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *PlayerSimpleDataEx) GetPeakRank() uint32 {
	if x != nil && x.PeakRank != nil {
		return *x.PeakRank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetHideVipSystems() []int32 {
	if x != nil {
		return x.HideVipSystems
	}
	return nil
}

func (x *PlayerSimpleDataEx) GetDungeonStar() uint32 {
	if x != nil && x.DungeonStar != nil {
		return *x.DungeonStar
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetMainMissionId() int32 {
	if x != nil && x.MainMissionId != nil {
		return *x.MainMissionId
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetDailyCoinRank() uint32 {
	if x != nil && x.DailyCoinRank != nil {
		return *x.DailyCoinRank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetDailyExpRank() uint32 {
	if x != nil && x.DailyExpRank != nil {
		return *x.DailyExpRank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetDailyBoss1Rank() uint32 {
	if x != nil && x.DailyBoss1Rank != nil {
		return *x.DailyBoss1Rank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetDailyBoss2Rank() uint32 {
	if x != nil && x.DailyBoss2Rank != nil {
		return *x.DailyBoss2Rank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetDailyBoss3Rank() uint32 {
	if x != nil && x.DailyBoss3Rank != nil {
		return *x.DailyBoss3Rank
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetModel() int32 {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return 0
}

func (x *PlayerSimpleDataEx) GetHotCounsellor() *Counsellor {
	if x != nil {
		return x.HotCounsellor
	}
	return nil
}

func (x *PlayerSimpleDataEx) GetBeastCommanderInfos() []*BeastCommanderInfo {
	if x != nil {
		return x.BeastCommanderInfos
	}
	return nil
}

func (x *PlayerSimpleDataEx) GetBeastIsOpen() bool {
	if x != nil && x.BeastIsOpen != nil {
		return *x.BeastIsOpen
	}
	return false
}

func (x *PlayerSimpleDataEx) GetMountIsOpen() bool {
	if x != nil && x.MountIsOpen != nil {
		return *x.MountIsOpen
	}
	return false
}

func (x *PlayerSimpleDataEx) GetGrow() *PlayerGrow {
	if x != nil {
		return x.Grow
	}
	return nil
}

type BeastCommanderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beast       *Beast       `protobuf:"bytes,1,opt,name=beast" json:"beast,omitempty"`             // 神兽数据
	Commander   *Commander   `protobuf:"bytes,2,opt,name=commander" json:"commander,omitempty"`     //神兽连携的主将数据
	BeastTalent *BeastTalent `protobuf:"bytes,3,opt,name=beastTalent" json:"beastTalent,omitempty"` //神兽天赋数据
}

func (x *BeastCommanderInfo) Reset() {
	*x = BeastCommanderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeastCommanderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeastCommanderInfo) ProtoMessage() {}

func (x *BeastCommanderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeastCommanderInfo.ProtoReflect.Descriptor instead.
func (*BeastCommanderInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *BeastCommanderInfo) GetBeast() *Beast {
	if x != nil {
		return x.Beast
	}
	return nil
}

func (x *BeastCommanderInfo) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *BeastCommanderInfo) GetBeastTalent() *BeastTalent {
	if x != nil {
		return x.BeastTalent
	}
	return nil
}

// DeviceInfo 设备信息
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType *string `protobuf:"bytes,20,opt,name=deviceType" json:"deviceType,omitempty"` // 机型(同model)
	DeviceOS   *string `protobuf:"bytes,21,opt,name=deviceOS" json:"deviceOS,omitempty"`     // 操作系统（os）
	DeviceID   *string `protobuf:"bytes,22,opt,name=deviceID" json:"deviceID,omitempty"`     // 设备id(new_device_id)
	BundleID   *string `protobuf:"bytes,23,opt,name=bundleID" json:"bundleID,omitempty"`     // 分包ID(package_name)
	Region     *string `protobuf:"bytes,24,opt,name=region" json:"region,omitempty"`         // 地区
	Language   *string `protobuf:"bytes,25,opt,name=language" json:"language,omitempty"`     // language
	GameVer    *string `protobuf:"bytes,26,opt,name=gameVer" json:"gameVer,omitempty"`       // 客户端版本
	OpId       *string `protobuf:"bytes,27,opt,name=opId" json:"opId,omitempty"`             // 运营商
	Lv         *int32  `protobuf:"varint,28,opt,name=lv" json:"lv,omitempty"`                // Vip等级
	VipLv      *int32  `protobuf:"varint,29,opt,name=vipLv" json:"vipLv,omitempty"`          // Vip等级
	YzDeviceId *string `protobuf:"bytes,30,opt,name=yzDeviceId" json:"yzDeviceId,omitempty"` // 游族设备ID
	OaId       *string `protobuf:"bytes,31,opt,name=oaId" json:"oaId,omitempty"`             // 国内安卓联盟设备ID
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfo) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *DeviceInfo) GetDeviceOS() string {
	if x != nil && x.DeviceOS != nil {
		return *x.DeviceOS
	}
	return ""
}

func (x *DeviceInfo) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

func (x *DeviceInfo) GetBundleID() string {
	if x != nil && x.BundleID != nil {
		return *x.BundleID
	}
	return ""
}

func (x *DeviceInfo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DeviceInfo) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *DeviceInfo) GetGameVer() string {
	if x != nil && x.GameVer != nil {
		return *x.GameVer
	}
	return ""
}

func (x *DeviceInfo) GetOpId() string {
	if x != nil && x.OpId != nil {
		return *x.OpId
	}
	return ""
}

func (x *DeviceInfo) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *DeviceInfo) GetVipLv() int32 {
	if x != nil && x.VipLv != nil {
		return *x.VipLv
	}
	return 0
}

func (x *DeviceInfo) GetYzDeviceId() string {
	if x != nil && x.YzDeviceId != nil {
		return *x.YzDeviceId
	}
	return ""
}

func (x *DeviceInfo) GetOaId() string {
	if x != nil && x.OaId != nil {
		return *x.OaId
	}
	return ""
}

// 阵型军师
type FormationCounsellor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormationType *FormationType `protobuf:"varint,1,opt,name=formationType,enum=common.FormationType" json:"formationType,omitempty"`
	CounsellorId  *int32         `protobuf:"varint,2,opt,name=counsellorId" json:"counsellorId,omitempty"`
}

func (x *FormationCounsellor) Reset() {
	*x = FormationCounsellor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationCounsellor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationCounsellor) ProtoMessage() {}

func (x *FormationCounsellor) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationCounsellor.ProtoReflect.Descriptor instead.
func (*FormationCounsellor) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *FormationCounsellor) GetFormationType() FormationType {
	if x != nil && x.FormationType != nil {
		return *x.FormationType
	}
	return FormationType_pve
}

func (x *FormationCounsellor) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

type ItemExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CritCount *int32 `protobuf:"varint,1,opt,name=critCount" json:"critCount,omitempty"` // 暴击倍数
	ItemGroup *int32 `protobuf:"varint,2,opt,name=itemGroup" json:"itemGroup,omitempty"` // 物品所属组
}

func (x *ItemExtra) Reset() {
	*x = ItemExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExtra) ProtoMessage() {}

func (x *ItemExtra) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExtra.ProtoReflect.Descriptor instead.
func (*ItemExtra) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *ItemExtra) GetCritCount() int32 {
	if x != nil && x.CritCount != nil {
		return *x.CritCount
	}
	return 0
}

func (x *ItemExtra) GetItemGroup() int32 {
	if x != nil && x.ItemGroup != nil {
		return *x.ItemGroup
	}
	return 0
}

//道具
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`               //id
	Count     *uint32    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`         //数量
	ValidTime *int64     `protobuf:"varint,3,opt,name=validTime" json:"validTime,omitempty"` //有效时间戳(永久有效0)
	Show      *ItemShow  `protobuf:"varint,4,opt,name=show,enum=common.ItemShow" json:"show,omitempty"`
	Extra     *ItemExtra `protobuf:"bytes,5,opt,name=extra" json:"extra,omitempty"` // 其他参数
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *Item) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Item) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Item) GetValidTime() int64 {
	if x != nil && x.ValidTime != nil {
		return *x.ValidTime
	}
	return 0
}

func (x *Item) GetShow() ItemShow {
	if x != nil && x.Show != nil {
		return *x.Show
	}
	return ItemShow_ShowDefault
}

func (x *Item) GetExtra() *ItemExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

//技能别聊
type CommanderSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillSlotId *uint32 `protobuf:"varint,1,opt,name=skillSlotId" json:"skillSlotId,omitempty"` //技能插槽id，对应1，2，3，4
	Level       *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`             //技能等级 无解锁为0
	Exp         *uint32 `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`                 //技能当前经验  无解锁为 0
}

func (x *CommanderSkill) Reset() {
	*x = CommanderSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderSkill) ProtoMessage() {}

func (x *CommanderSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderSkill.ProtoReflect.Descriptor instead.
func (*CommanderSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *CommanderSkill) GetSkillSlotId() uint32 {
	if x != nil && x.SkillSlotId != nil {
		return *x.SkillSlotId
	}
	return 0
}

func (x *CommanderSkill) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CommanderSkill) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

type CommanderEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipSlotId *uint32 `protobuf:"varint,1,opt,name=equipSlotId" json:"equipSlotId,omitempty"` //装备插槽id
	Synthetical *bool   `protobuf:"varint,2,opt,name=synthetical" json:"synthetical,omitempty"` //是否已经合成
}

func (x *CommanderEquip) Reset() {
	*x = CommanderEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderEquip) ProtoMessage() {}

func (x *CommanderEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderEquip.ProtoReflect.Descriptor instead.
func (*CommanderEquip) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *CommanderEquip) GetEquipSlotId() uint32 {
	if x != nil && x.EquipSlotId != nil {
		return *x.EquipSlotId
	}
	return 0
}

func (x *CommanderEquip) GetSynthetical() bool {
	if x != nil && x.Synthetical != nil {
		return *x.Synthetical
	}
	return false
}

type CommanderMedication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId *uint32 `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"` //装备插槽id
	Level  *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`   //等级
}

func (x *CommanderMedication) Reset() {
	*x = CommanderMedication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderMedication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderMedication) ProtoMessage() {}

func (x *CommanderMedication) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderMedication.ProtoReflect.Descriptor instead.
func (*CommanderMedication) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *CommanderMedication) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CommanderMedication) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CommanderPotential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId *uint32 `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"` //插槽id
	Level  *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`   //技能等级 无解锁为0
}

func (x *CommanderPotential) Reset() {
	*x = CommanderPotential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderPotential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderPotential) ProtoMessage() {}

func (x *CommanderPotential) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderPotential.ProtoReflect.Descriptor instead.
func (*CommanderPotential) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *CommanderPotential) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CommanderPotential) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 三维加成
type CommanderImprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId    *uint32 `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"`       //技能插槽id，对应1，2，3，4，5
	IsImprove *bool   `protobuf:"varint,2,opt,name=isImprove" json:"isImprove,omitempty"` //是否解锁三维加成
}

func (x *CommanderImprove) Reset() {
	*x = CommanderImprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderImprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderImprove) ProtoMessage() {}

func (x *CommanderImprove) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderImprove.ProtoReflect.Descriptor instead.
func (*CommanderImprove) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *CommanderImprove) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CommanderImprove) GetIsImprove() bool {
	if x != nil && x.IsImprove != nil {
		return *x.IsImprove
	}
	return false
}

// 主将天命
type CommanderDestiny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId     *uint32  `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"`          //插槽id
	Value      *uint32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`            //百分比的值，废弃
	ValueFloat *float64 `protobuf:"fixed64,3,opt,name=valueFloat" json:"valueFloat,omitempty"` //百分比的值，支持小数
}

func (x *CommanderDestiny) Reset() {
	*x = CommanderDestiny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderDestiny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderDestiny) ProtoMessage() {}

func (x *CommanderDestiny) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderDestiny.ProtoReflect.Descriptor instead.
func (*CommanderDestiny) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *CommanderDestiny) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CommanderDestiny) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CommanderDestiny) GetValueFloat() float64 {
	if x != nil && x.ValueFloat != nil {
		return *x.ValueFloat
	}
	return 0
}

// 主将
type Commander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *int32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                            //模板id
	Level              *uint32                `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`                                      //等级
	Exp                *uint32                `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`                                          //当前等级的经验
	Potential          *uint32                `protobuf:"varint,5,opt,name=potential" json:"potential,omitempty"`                              // 是否开启潜能
	Quality            *uint32                `protobuf:"varint,6,opt,name=quality" json:"quality,omitempty"`                                  //品级
	StarLevel          *uint32                `protobuf:"varint,7,opt,name=starLevel" json:"starLevel,omitempty"`                              //星级
	LittleStarLevel    *uint32                `protobuf:"varint,8,opt,name=littleStarLevel" json:"littleStarLevel,omitempty"`                  //当前小星等级
	BasePower          *uint32                `protobuf:"varint,10,opt,name=basePower" json:"basePower,omitempty"`                             //基础战斗力
	LeadershipLevel    *uint32                `protobuf:"varint,11,opt,name=leadershipLevel" json:"leadershipLevel,omitempty"`                 //统率能力等级
	SoldierId          *int32                 `protobuf:"varint,12,opt,name=soldierId" json:"soldierId,omitempty"`                             //携带的兵团ID -1无兵团ID
	Skills             []*CommanderSkill      `protobuf:"bytes,13,rep,name=skills" json:"skills,omitempty"`                                    //技能
	Equips             []*CommanderEquip      `protobuf:"bytes,14,rep,name=equips" json:"equips,omitempty"`                                    //装备
	Power              *uint32                `protobuf:"varint,15,opt,name=power" json:"power,omitempty"`                                     //总战斗力
	Skin               *int32                 `protobuf:"varint,16,opt,name=skin" json:"skin,omitempty"`                                       // 皮肤
	Genius             *uint32                `protobuf:"varint,17,opt,name=genius" json:"genius,omitempty"`                                   //
	Potentials         []*CommanderPotential  `protobuf:"bytes,18,rep,name=potentials" json:"potentials,omitempty"`                            //潜能
	Medications        []*CommanderMedication `protobuf:"bytes,19,rep,name=medications" json:"medications,omitempty"`                          //丹药
	AwakeLevel         *uint32                `protobuf:"varint,20,opt,name=awakeLevel" json:"awakeLevel,omitempty"`                           // 主将觉醒星级
	AwakeStatus        *AwakeStatus           `protobuf:"varint,21,opt,name=awakeStatus,enum=common.AwakeStatus" json:"awakeStatus,omitempty"` // 主将觉醒状态 0：未觉醒 1：觉醒中 2：已觉醒
	AwakeSkill         *CommanderSkill        `protobuf:"bytes,22,opt,name=awakeSkill" json:"awakeSkill,omitempty"`                            // 主将觉醒技能
	SeeStrategy        *int32                 `protobuf:"varint,23,opt,name=seeStrategy" json:"seeStrategy,omitempty"`                         // 是否查看了攻略 0：没查看 1：查看了
	MedicationProgress *uint32                `protobuf:"varint,24,opt,name=medicationProgress" json:"medicationProgress,omitempty"`           // 丹药进度
	Zizhi              *uint32                `protobuf:"varint,25,opt,name=zizhi" json:"zizhi,omitempty"`                                     // 资质
	WuHunEquip         []uint32               `protobuf:"varint,26,rep,name=wuHunEquip" json:"wuHunEquip,omitempty"`                           // 武魂
	MountId            *int32                 `protobuf:"varint,27,opt,name=mountId" json:"mountId,omitempty"`                                 // 坐骑
	Destinys           []*CommanderDestiny    `protobuf:"bytes,28,rep,name=destinys" json:"destinys,omitempty"`                                //天命
	DestinyProgress    *uint32                `protobuf:"varint,29,opt,name=destinyProgress" json:"destinyProgress,omitempty"`                 //天命进度
	OnlyEquipId        *uint32                `protobuf:"varint,30,opt,name=onlyEquipId" json:"onlyEquipId,omitempty"`                         //专属装备
	DeputyId           *int32                 `protobuf:"varint,31,opt,name=deputyId" json:"deputyId,omitempty"`                               //副将模板id
	ZizhiProgress      *int32                 `protobuf:"varint,32,opt,name=zizhiProgress" json:"zizhiProgress,omitempty"`                     //资质阶段
}

func (x *Commander) Reset() {
	*x = Commander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commander) ProtoMessage() {}

func (x *Commander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commander.ProtoReflect.Descriptor instead.
func (*Commander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *Commander) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Commander) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Commander) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *Commander) GetPotential() uint32 {
	if x != nil && x.Potential != nil {
		return *x.Potential
	}
	return 0
}

func (x *Commander) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *Commander) GetStarLevel() uint32 {
	if x != nil && x.StarLevel != nil {
		return *x.StarLevel
	}
	return 0
}

func (x *Commander) GetLittleStarLevel() uint32 {
	if x != nil && x.LittleStarLevel != nil {
		return *x.LittleStarLevel
	}
	return 0
}

func (x *Commander) GetBasePower() uint32 {
	if x != nil && x.BasePower != nil {
		return *x.BasePower
	}
	return 0
}

func (x *Commander) GetLeadershipLevel() uint32 {
	if x != nil && x.LeadershipLevel != nil {
		return *x.LeadershipLevel
	}
	return 0
}

func (x *Commander) GetSoldierId() int32 {
	if x != nil && x.SoldierId != nil {
		return *x.SoldierId
	}
	return 0
}

func (x *Commander) GetSkills() []*CommanderSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Commander) GetEquips() []*CommanderEquip {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *Commander) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Commander) GetSkin() int32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

func (x *Commander) GetGenius() uint32 {
	if x != nil && x.Genius != nil {
		return *x.Genius
	}
	return 0
}

func (x *Commander) GetPotentials() []*CommanderPotential {
	if x != nil {
		return x.Potentials
	}
	return nil
}

func (x *Commander) GetMedications() []*CommanderMedication {
	if x != nil {
		return x.Medications
	}
	return nil
}

func (x *Commander) GetAwakeLevel() uint32 {
	if x != nil && x.AwakeLevel != nil {
		return *x.AwakeLevel
	}
	return 0
}

func (x *Commander) GetAwakeStatus() AwakeStatus {
	if x != nil && x.AwakeStatus != nil {
		return *x.AwakeStatus
	}
	return AwakeStatus_Open
}

func (x *Commander) GetAwakeSkill() *CommanderSkill {
	if x != nil {
		return x.AwakeSkill
	}
	return nil
}

func (x *Commander) GetSeeStrategy() int32 {
	if x != nil && x.SeeStrategy != nil {
		return *x.SeeStrategy
	}
	return 0
}

func (x *Commander) GetMedicationProgress() uint32 {
	if x != nil && x.MedicationProgress != nil {
		return *x.MedicationProgress
	}
	return 0
}

func (x *Commander) GetZizhi() uint32 {
	if x != nil && x.Zizhi != nil {
		return *x.Zizhi
	}
	return 0
}

func (x *Commander) GetWuHunEquip() []uint32 {
	if x != nil {
		return x.WuHunEquip
	}
	return nil
}

func (x *Commander) GetMountId() int32 {
	if x != nil && x.MountId != nil {
		return *x.MountId
	}
	return 0
}

func (x *Commander) GetDestinys() []*CommanderDestiny {
	if x != nil {
		return x.Destinys
	}
	return nil
}

func (x *Commander) GetDestinyProgress() uint32 {
	if x != nil && x.DestinyProgress != nil {
		return *x.DestinyProgress
	}
	return 0
}

func (x *Commander) GetOnlyEquipId() uint32 {
	if x != nil && x.OnlyEquipId != nil {
		return *x.OnlyEquipId
	}
	return 0
}

func (x *Commander) GetDeputyId() int32 {
	if x != nil && x.DeputyId != nil {
		return *x.DeputyId
	}
	return 0
}

func (x *Commander) GetZizhiProgress() int32 {
	if x != nil && x.ZizhiProgress != nil {
		return *x.ZizhiProgress
	}
	return 0
}

//单个阵型数据
type Grid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1  2  3  4
	// 5  6  7  8
	// 9  10 11 12
	// 13 14 15 16
	Id             *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                         //格子位置 1-16
	CommanderId    *int32  `protobuf:"varint,2,opt,name=commanderId" json:"commanderId,omitempty"`       //放置的统帅
	SoldierId      *int32  `protobuf:"varint,3,opt,name=soldierId" json:"soldierId,omitempty"`           //士兵id
	SoldierNum     *int32  `protobuf:"varint,4,opt,name=soldierNum" json:"soldierNum,omitempty"`         //士兵数量
	AssistPlayerId *uint64 `protobuf:"varint,5,opt,name=assistPlayerId" json:"assistPlayerId,omitempty"` // 助战玩家id
	BeastId        *int32  `protobuf:"varint,6,opt,name=beastId" json:"beastId,omitempty"`               //神兽id
}

func (x *Grid) Reset() {
	*x = Grid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grid) ProtoMessage() {}

func (x *Grid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grid.ProtoReflect.Descriptor instead.
func (*Grid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *Grid) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Grid) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *Grid) GetSoldierId() int32 {
	if x != nil && x.SoldierId != nil {
		return *x.SoldierId
	}
	return 0
}

func (x *Grid) GetSoldierNum() int32 {
	if x != nil && x.SoldierNum != nil {
		return *x.SoldierNum
	}
	return 0
}

func (x *Grid) GetAssistPlayerId() uint64 {
	if x != nil && x.AssistPlayerId != nil {
		return *x.AssistPlayerId
	}
	return 0
}

func (x *Grid) GetBeastId() int32 {
	if x != nil && x.BeastId != nil {
		return *x.BeastId
	}
	return 0
}

//单个阵型数据
type Formation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`                         //阵型类型
	CounsellorId     *int32  `protobuf:"varint,2,opt,name=counsellorId" json:"counsellorId,omitempty"`         //军师
	Grid             []*Grid `protobuf:"bytes,3,rep,name=grid" json:"grid,omitempty"`                          //格子
	TreasureGroup    *uint32 `protobuf:"varint,4,opt,name=treasureGroup" json:"treasureGroup,omitempty"`       //宝物组
	IllustratedGroup *uint32 `protobuf:"varint,5,opt,name=illustratedGroup" json:"illustratedGroup,omitempty"` //图鉴组
	Team             *int32  `protobuf:"varint,6,opt,name=team" json:"team,omitempty"`                         //gve二阶段攻城技能（只有二阶段工程需要）
}

func (x *Formation) Reset() {
	*x = Formation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formation) ProtoMessage() {}

func (x *Formation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formation.ProtoReflect.Descriptor instead.
func (*Formation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *Formation) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Formation) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *Formation) GetGrid() []*Grid {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *Formation) GetTreasureGroup() uint32 {
	if x != nil && x.TreasureGroup != nil {
		return *x.TreasureGroup
	}
	return 0
}

func (x *Formation) GetIllustratedGroup() uint32 {
	if x != nil && x.IllustratedGroup != nil {
		return *x.IllustratedGroup
	}
	return 0
}

func (x *Formation) GetTeam() int32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

// 单个阵型详细数据
type FormationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"` //阵型类型
	// 阵型数据
	FormationPower      *uint32               `protobuf:"varint,2,opt,name=formationPower" json:"formationPower,omitempty"`          //阵型战斗力
	Commanders          []*Commander          `protobuf:"bytes,3,rep,name=commanders" json:"commanders,omitempty"`                   //上阵武将
	Formation           *Formation            `protobuf:"bytes,4,opt,name=formation" json:"formation,omitempty"`                     //阵型数据
	Counsellor          *Counsellor           `protobuf:"bytes,5,opt,name=counsellor" json:"counsellor,omitempty"`                   // 军师数据
	BeastCommanderInfos []*BeastCommanderInfo `protobuf:"bytes,6,rep,name=beastCommanderInfos" json:"beastCommanderInfos,omitempty"` // 上阵神兽数据
}

func (x *FormationDetail) Reset() {
	*x = FormationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationDetail) ProtoMessage() {}

func (x *FormationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationDetail.ProtoReflect.Descriptor instead.
func (*FormationDetail) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *FormationDetail) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FormationDetail) GetFormationPower() uint32 {
	if x != nil && x.FormationPower != nil {
		return *x.FormationPower
	}
	return 0
}

func (x *FormationDetail) GetCommanders() []*Commander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

func (x *FormationDetail) GetFormation() *Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *FormationDetail) GetCounsellor() *Counsellor {
	if x != nil {
		return x.Counsellor
	}
	return nil
}

func (x *FormationDetail) GetBeastCommanderInfos() []*BeastCommanderInfo {
	if x != nil {
		return x.BeastCommanderInfos
	}
	return nil
}

// 布阵编组
type FormationGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Formation *Formation `protobuf:"bytes,3,opt,name=formation" json:"formation,omitempty"`
}

func (x *FormationGroupItem) Reset() {
	*x = FormationGroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationGroupItem) ProtoMessage() {}

func (x *FormationGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationGroupItem.ProtoReflect.Descriptor instead.
func (*FormationGroupItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *FormationGroupItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FormationGroupItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FormationGroupItem) GetFormation() *Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

//士兵
type Soldier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                       //士兵id
	SkillActive   *bool  `protobuf:"varint,2,opt,name=skillActive" json:"skillActive,omitempty"`     // 技能激活为true，否则为nil
	EvolutionFlag *bool  `protobuf:"varint,3,opt,name=evolutionFlag" json:"evolutionFlag,omitempty"` //士兵是否已经进化
	Stars         *int32 `protobuf:"varint,4,opt,name=stars" json:"stars,omitempty"`                 //士兵星星数
}

func (x *Soldier) Reset() {
	*x = Soldier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soldier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soldier) ProtoMessage() {}

func (x *Soldier) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soldier.ProtoReflect.Descriptor instead.
func (*Soldier) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *Soldier) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Soldier) GetSkillActive() bool {
	if x != nil && x.SkillActive != nil {
		return *x.SkillActive
	}
	return false
}

func (x *Soldier) GetEvolutionFlag() bool {
	if x != nil && x.EvolutionFlag != nil {
		return *x.EvolutionFlag
	}
	return false
}

func (x *Soldier) GetStars() int32 {
	if x != nil && x.Stars != nil {
		return *x.Stars
	}
	return 0
}

//武魂
type WuHun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UuId   *uint32 `protobuf:"varint,1,opt,name=uuId" json:"uuId,omitempty"`     //武魂UUID
	Id     *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`         //武魂id
	Star   *uint32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`     //星级
	Level  *uint32 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`   //等级
	Power  *uint32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`   //武魂战力
	CurExp *uint32 `protobuf:"varint,7,opt,name=curExp" json:"curExp,omitempty"` //当前经验
	Count  *uint32 `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`   //数量
}

func (x *WuHun) Reset() {
	*x = WuHun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WuHun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WuHun) ProtoMessage() {}

func (x *WuHun) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WuHun.ProtoReflect.Descriptor instead.
func (*WuHun) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *WuHun) GetUuId() uint32 {
	if x != nil && x.UuId != nil {
		return *x.UuId
	}
	return 0
}

func (x *WuHun) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WuHun) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *WuHun) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *WuHun) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *WuHun) GetCurExp() uint32 {
	if x != nil && x.CurExp != nil {
		return *x.CurExp
	}
	return 0
}

func (x *WuHun) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//专属装备
type OnlyEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       *uint32 `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`             //装备UUID
	Id         *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`                 //装备id
	Star       *uint32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`             //星级
	Level      *uint32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`           //等级
	CurExp     *uint32 `protobuf:"varint,5,opt,name=curExp" json:"curExp,omitempty"`         //当前经验
	Power      *uint32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`           //战力
	BreakLevel *uint32 `protobuf:"varint,7,opt,name=breakLevel" json:"breakLevel,omitempty"` //突破等级
}

func (x *OnlyEquip) Reset() {
	*x = OnlyEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyEquip) ProtoMessage() {}

func (x *OnlyEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyEquip.ProtoReflect.Descriptor instead.
func (*OnlyEquip) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *OnlyEquip) GetUuid() uint32 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *OnlyEquip) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OnlyEquip) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *OnlyEquip) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *OnlyEquip) GetCurExp() uint32 {
	if x != nil && x.CurExp != nil {
		return *x.CurExp
	}
	return 0
}

func (x *OnlyEquip) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *OnlyEquip) GetBreakLevel() uint32 {
	if x != nil && x.BreakLevel != nil {
		return *x.BreakLevel
	}
	return 0
}

// 单个兵营科技
type SoldierTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`       // 配置ID
	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` // 等级
}

func (x *SoldierTech) Reset() {
	*x = SoldierTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoldierTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoldierTech) ProtoMessage() {}

func (x *SoldierTech) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoldierTech.ProtoReflect.Descriptor instead.
func (*SoldierTech) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *SoldierTech) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SoldierTech) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 军师
type Counsellor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Star   *uint32            `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`    // 星
	Magics []*CounsellorMagic `protobuf:"bytes,4,rep,name=magics" json:"magics,omitempty"` // 法术
	Power  *uint32            `protobuf:"varint,5,opt,name=power" json:"power,omitempty"`  // 战斗力
	QiMen  []*CounsellorQiMen `protobuf:"bytes,6,rep,name=qiMen" json:"qiMen,omitempty"`   // 奇门
	QiJi   *uint32            `protobuf:"varint,7,opt,name=qiJi" json:"qiJi,omitempty"`    // 奇迹等级, 未解锁为0，解锁后为1，值2、3、4、5对应奇计1，2，3，4级
}

func (x *Counsellor) Reset() {
	*x = Counsellor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counsellor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counsellor) ProtoMessage() {}

func (x *Counsellor) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counsellor.ProtoReflect.Descriptor instead.
func (*Counsellor) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *Counsellor) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Counsellor) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *Counsellor) GetMagics() []*CounsellorMagic {
	if x != nil {
		return x.Magics
	}
	return nil
}

func (x *Counsellor) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Counsellor) GetQiMen() []*CounsellorQiMen {
	if x != nil {
		return x.QiMen
	}
	return nil
}

func (x *Counsellor) GetQiJi() uint32 {
	if x != nil && x.QiJi != nil {
		return *x.QiJi
	}
	return 0
}

// 军师法术
type CounsellorMagic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`             // 法术id
	Level    *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`       // 阶数
	Progress *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"` // 进度
}

func (x *CounsellorMagic) Reset() {
	*x = CounsellorMagic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounsellorMagic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounsellorMagic) ProtoMessage() {}

func (x *CounsellorMagic) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounsellorMagic.ProtoReflect.Descriptor instead.
func (*CounsellorMagic) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *CounsellorMagic) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CounsellorMagic) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CounsellorMagic) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

// 奇门
type CounsellorQiMen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` // 等级
}

func (x *CounsellorQiMen) Reset() {
	*x = CounsellorQiMen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounsellorQiMen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounsellorQiMen) ProtoMessage() {}

func (x *CounsellorQiMen) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounsellorQiMen.ProtoReflect.Descriptor instead.
func (*CounsellorQiMen) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *CounsellorQiMen) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 任务单元
type MissionUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status                *MissionStatus `protobuf:"varint,2,opt,name=Status,enum=common.MissionStatus" json:"Status,omitempty"`     // 状态
	InteractFortress      []int32        `protobuf:"varint,3,rep,name=interactFortress" json:"interactFortress,omitempty"`           // 交互据点
	SelectedFightID       *int32         `protobuf:"varint,5,opt,name=selectedFightID" json:"selectedFightID,omitempty"`             // 选择的战斗(一个任务可以选择不同战斗时使用)
	IsDoFightEventTrigger *bool          `protobuf:"varint,6,opt,name=isDoFightEventTrigger" json:"isDoFightEventTrigger,omitempty"` // 是否触发战斗内事件
	Star                  *uint32        `protobuf:"varint,7,opt,name=star" json:"star,omitempty"`                                   //精英支线 星星数
	StarRewards           []bool         `protobuf:"varint,8,rep,name=starRewards" json:"starRewards,omitempty"`                     //精英支线 星级奖励是否已领取
}

func (x *MissionUnit) Reset() {
	*x = MissionUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionUnit) ProtoMessage() {}

func (x *MissionUnit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionUnit.ProtoReflect.Descriptor instead.
func (*MissionUnit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *MissionUnit) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MissionUnit) GetStatus() MissionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return MissionStatus_Accepted
}

func (x *MissionUnit) GetInteractFortress() []int32 {
	if x != nil {
		return x.InteractFortress
	}
	return nil
}

func (x *MissionUnit) GetSelectedFightID() int32 {
	if x != nil && x.SelectedFightID != nil {
		return *x.SelectedFightID
	}
	return 0
}

func (x *MissionUnit) GetIsDoFightEventTrigger() bool {
	if x != nil && x.IsDoFightEventTrigger != nil {
		return *x.IsDoFightEventTrigger
	}
	return false
}

func (x *MissionUnit) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *MissionUnit) GetStarRewards() []bool {
	if x != nil {
		return x.StarRewards
	}
	return nil
}

// 任务目标奖励
type MissionTargetChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId *int32 `protobuf:"varint,1,opt,name=targetId" json:"targetId,omitempty"`
	Reward   *bool  `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"` // 是否领奖
}

func (x *MissionTargetChapter) Reset() {
	*x = MissionTargetChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionTargetChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionTargetChapter) ProtoMessage() {}

func (x *MissionTargetChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionTargetChapter.ProtoReflect.Descriptor instead.
func (*MissionTargetChapter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *MissionTargetChapter) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MissionTargetChapter) GetReward() bool {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return false
}

// 任务章节
type MissionChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId   *int32  `protobuf:"varint,1,opt,name=chapterId" json:"chapterId,omitempty"`     // worldMissionChapter表id
	RewardIndex []int32 `protobuf:"varint,3,rep,name=rewardIndex" json:"rewardIndex,omitempty"` // 已领取章节奖励索引（从1开始）
}

func (x *MissionChapter) Reset() {
	*x = MissionChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionChapter) ProtoMessage() {}

func (x *MissionChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionChapter.ProtoReflect.Descriptor instead.
func (*MissionChapter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *MissionChapter) GetChapterId() int32 {
	if x != nil && x.ChapterId != nil {
		return *x.ChapterId
	}
	return 0
}

func (x *MissionChapter) GetRewardIndex() []int32 {
	if x != nil {
		return x.RewardIndex
	}
	return nil
}

// 坐标
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

// 地图
type WorldMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"` // 地图索引
	ResId *int32 `protobuf:"varint,2,opt,name=resId" json:"resId,omitempty"` // 资源id
}

func (x *WorldMap) Reset() {
	*x = WorldMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldMap) ProtoMessage() {}

func (x *WorldMap) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldMap.ProtoReflect.Descriptor instead.
func (*WorldMap) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *WorldMap) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *WorldMap) GetResId() int32 {
	if x != nil && x.ResId != nil {
		return *x.ResId
	}
	return 0
}

// 据点
type Fortress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pos      *Position `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`            // 位置
	NationID *int32    `protobuf:"varint,3,opt,name=nationID" json:"nationID,omitempty"` // 势力
	Show     *bool     `protobuf:"varint,4,opt,name=show" json:"show,omitempty"`         // 是否显示
	Status   *int32    `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`     // 状态（着火等效果）
	DescID   *int32    `protobuf:"varint,6,opt,name=descID" json:"descID,omitempty"`     // 描述
	Dir      *int32    `protobuf:"varint,7,opt,name=dir" json:"dir,omitempty"`           // 方向
	Action   *int32    `protobuf:"varint,8,opt,name=action" json:"action,omitempty"`     // 动作
	ResId    *int32    `protobuf:"varint,9,opt,name=resId" json:"resId,omitempty"`       // 资源id
}

func (x *Fortress) Reset() {
	*x = Fortress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fortress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fortress) ProtoMessage() {}

func (x *Fortress) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fortress.ProtoReflect.Descriptor instead.
func (*Fortress) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *Fortress) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Fortress) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Fortress) GetNationID() int32 {
	if x != nil && x.NationID != nil {
		return *x.NationID
	}
	return 0
}

func (x *Fortress) GetShow() bool {
	if x != nil && x.Show != nil {
		return *x.Show
	}
	return false
}

func (x *Fortress) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Fortress) GetDescID() int32 {
	if x != nil && x.DescID != nil {
		return *x.DescID
	}
	return 0
}

func (x *Fortress) GetDir() int32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *Fortress) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *Fortress) GetResId() int32 {
	if x != nil && x.ResId != nil {
		return *x.ResId
	}
	return 0
}

// 州
type District struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`             // 州id
	NationID *int32 `protobuf:"varint,2,opt,name=nationID" json:"nationID,omitempty"` // 势力id
	Unlock   *bool  `protobuf:"varint,3,opt,name=unlock" json:"unlock,omitempty"`     // 解锁迷雾
}

func (x *District) Reset() {
	*x = District{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *District) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*District) ProtoMessage() {}

func (x *District) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use District.ProtoReflect.Descriptor instead.
func (*District) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *District) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *District) GetNationID() int32 {
	if x != nil && x.NationID != nil {
		return *x.NationID
	}
	return 0
}

func (x *District) GetUnlock() bool {
	if x != nil && x.Unlock != nil {
		return *x.Unlock
	}
	return false
}

// 限时任务
type TimeMission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTime *int32         `protobuf:"varint,1,opt,name=refreshTime" json:"refreshTime,omitempty"` // 生成时间
	Missions    []*MissionUnit `protobuf:"bytes,2,rep,name=missions" json:"missions,omitempty"`        // 任务
}

func (x *TimeMission) Reset() {
	*x = TimeMission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeMission) ProtoMessage() {}

func (x *TimeMission) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeMission.ProtoReflect.Descriptor instead.
func (*TimeMission) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *TimeMission) GetRefreshTime() int32 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

func (x *TimeMission) GetMissions() []*MissionUnit {
	if x != nil {
		return x.Missions
	}
	return nil
}

// 副本关卡
type DungeonLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Star                 *uint32 `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	FightCount           *int32  `protobuf:"varint,3,opt,name=fightCount" json:"fightCount,omitempty"`                     // 战斗次数(精英副本用)
	EliteDungeonBuyTimes *uint32 `protobuf:"varint,4,opt,name=eliteDungeonBuyTimes" json:"eliteDungeonBuyTimes,omitempty"` // 精英副本已购买次数
}

func (x *DungeonLevel) Reset() {
	*x = DungeonLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonLevel) ProtoMessage() {}

func (x *DungeonLevel) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonLevel.ProtoReflect.Descriptor instead.
func (*DungeonLevel) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *DungeonLevel) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DungeonLevel) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *DungeonLevel) GetFightCount() int32 {
	if x != nil && x.FightCount != nil {
		return *x.FightCount
	}
	return 0
}

func (x *DungeonLevel) GetEliteDungeonBuyTimes() uint32 {
	if x != nil && x.EliteDungeonBuyTimes != nil {
		return *x.EliteDungeonBuyTimes
	}
	return 0
}

// 副本章节
type DungeonChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ConnectStageId []int32 `protobuf:"varint,2,rep,name=connectStageId" json:"connectStageId,omitempty"` // 已领取连线奖励
	StarRewards    []bool  `protobuf:"varint,3,rep,name=starRewards" json:"starRewards,omitempty"`       // 是否领取星奖励
}

func (x *DungeonChapter) Reset() {
	*x = DungeonChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonChapter) ProtoMessage() {}

func (x *DungeonChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonChapter.ProtoReflect.Descriptor instead.
func (*DungeonChapter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *DungeonChapter) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DungeonChapter) GetConnectStageId() []int32 {
	if x != nil {
		return x.ConnectStageId
	}
	return nil
}

func (x *DungeonChapter) GetStarRewards() []bool {
	if x != nil {
		return x.StarRewards
	}
	return nil
}

//--------------------------------------------------------------------------------------------------邮件
//玩具邮件的条件
type MailCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType *uint32 `protobuf:"varint,1,opt,name=condition_type,json=conditionType" json:"condition_type,omitempty"` //1:等级 2:vip 3:创角时间
	Min           *uint32 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`                                          //条件的最小值
	Max           *uint32 `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`                                          //条件的最大值
}

func (x *MailCondition) Reset() {
	*x = MailCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailCondition) ProtoMessage() {}

func (x *MailCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailCondition.ProtoReflect.Descriptor instead.
func (*MailCondition) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *MailCondition) GetConditionType() uint32 {
	if x != nil && x.ConditionType != nil {
		return *x.ConditionType
	}
	return 0
}

func (x *MailCondition) GetMin() uint32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *MailCondition) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

//单个邮件
type Mail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                    //邮件唯一iD
	TID          *int32   `protobuf:"varint,2,opt,name=TID" json:"TID,omitempty"`                  //邮件的类型id （配置表 0为自定义）
	HasRead      *bool    `protobuf:"varint,3,opt,name=hasRead" json:"hasRead,omitempty"`          //是否已经阅读
	ReceiveTime  *int64   `protobuf:"varint,4,opt,name=receiveTime" json:"receiveTime,omitempty"`  //接收时间
	HasGet       *bool    `protobuf:"varint,5,opt,name=hasGet" json:"hasGet,omitempty"`            //是否已经领取
	Title        *string  `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`               //标题 用于需要的时候覆盖配置数据
	Content      *string  `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`           //内容 用于需要的时候覆盖配置数据
	Atachments   []*Item  `protobuf:"bytes,8,rep,name=atachments" json:"atachments,omitempty"`     //附件列表
	StringParams []string `protobuf:"bytes,9,rep,name=stringParams" json:"stringParams,omitempty"` //参数列表 如 恭喜xxx成为联盟长 获得第x名
	GuildWord    *string  `protobuf:"bytes,10,opt,name=guildWord" json:"guildWord,omitempty"`      //联盟字
}

func (x *Mail) Reset() {
	*x = Mail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mail) ProtoMessage() {}

func (x *Mail) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mail.ProtoReflect.Descriptor instead.
func (*Mail) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *Mail) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Mail) GetTID() int32 {
	if x != nil && x.TID != nil {
		return *x.TID
	}
	return 0
}

func (x *Mail) GetHasRead() bool {
	if x != nil && x.HasRead != nil {
		return *x.HasRead
	}
	return false
}

func (x *Mail) GetReceiveTime() int64 {
	if x != nil && x.ReceiveTime != nil {
		return *x.ReceiveTime
	}
	return 0
}

func (x *Mail) GetHasGet() bool {
	if x != nil && x.HasGet != nil {
		return *x.HasGet
	}
	return false
}

func (x *Mail) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Mail) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *Mail) GetAtachments() []*Item {
	if x != nil {
		return x.Atachments
	}
	return nil
}

func (x *Mail) GetStringParams() []string {
	if x != nil {
		return x.StringParams
	}
	return nil
}

func (x *Mail) GetGuildWord() string {
	if x != nil && x.GuildWord != nil {
		return *x.GuildWord
	}
	return ""
}

type Friends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendList  []uint64 `protobuf:"varint,1,rep,name=friendList" json:"friendList,omitempty"`   // 好友
	BlackList   []uint64 `protobuf:"varint,2,rep,name=blackList" json:"blackList,omitempty"`     // 黑名单
	RequestList []uint64 `protobuf:"varint,3,rep,name=requestList" json:"requestList,omitempty"` // 申请
}

func (x *Friends) Reset() {
	*x = Friends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friends) ProtoMessage() {}

func (x *Friends) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friends.ProtoReflect.Descriptor instead.
func (*Friends) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *Friends) GetFriendList() []uint64 {
	if x != nil {
		return x.FriendList
	}
	return nil
}

func (x *Friends) GetBlackList() []uint64 {
	if x != nil {
		return x.BlackList
	}
	return nil
}

func (x *Friends) GetRequestList() []uint64 {
	if x != nil {
		return x.RequestList
	}
	return nil
}

type FriendCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                         //ID
	Name                 *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                      //名字
	Level                *uint32     `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`                                   //等级
	FightPower           *uint32     `protobuf:"varint,4,opt,name=fightPower" json:"fightPower,omitempty"`                         //战斗力
	Vip                  *uint32     `protobuf:"varint,5,opt,name=vip" json:"vip,omitempty"`                                       //VIP
	Avatar               *int32      `protobuf:"varint,6,opt,name=avatar" json:"avatar,omitempty"`                                 //头像
	AvatarFrame          *int32      `protobuf:"varint,7,opt,name=avatarFrame" json:"avatarFrame,omitempty"`                       //头像框
	Declaration          *string     `protobuf:"bytes,8,opt,name=declaration" json:"declaration,omitempty"`                        //宣言
	LogoutTime           *int64      `protobuf:"varint,9,opt,name=logoutTime" json:"logoutTime,omitempty"`                         //离线时间(在线：0)
	RequestFlag          *bool       `protobuf:"varint,10,opt,name=requestFlag" json:"requestFlag,omitempty"`                      //申请标记
	PhysicalCollectState *int32      `protobuf:"varint,11,opt,name=physicalCollectState" json:"physicalCollectState,omitempty"`    //体力领取状态 (-1:不可领取 0:可领取 1:已领取)
	PhysicalGiveFlag     *bool       `protobuf:"varint,12,opt,name=physicalGiveFlag" json:"physicalGiveFlag,omitempty"`            //体力赠送标记
	FriendType           *FriendType `protobuf:"varint,13,opt,name=friendType,enum=common.FriendType" json:"friendType,omitempty"` //类型
	IsHideVip            *bool       `protobuf:"varint,14,opt,name=isHideVip" json:"isHideVip,omitempty"`                          //是否隐藏vip标识
}

func (x *FriendCommonData) Reset() {
	*x = FriendCommonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendCommonData) ProtoMessage() {}

func (x *FriendCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendCommonData.ProtoReflect.Descriptor instead.
func (*FriendCommonData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *FriendCommonData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FriendCommonData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FriendCommonData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *FriendCommonData) GetFightPower() uint32 {
	if x != nil && x.FightPower != nil {
		return *x.FightPower
	}
	return 0
}

func (x *FriendCommonData) GetVip() uint32 {
	if x != nil && x.Vip != nil {
		return *x.Vip
	}
	return 0
}

func (x *FriendCommonData) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *FriendCommonData) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *FriendCommonData) GetDeclaration() string {
	if x != nil && x.Declaration != nil {
		return *x.Declaration
	}
	return ""
}

func (x *FriendCommonData) GetLogoutTime() int64 {
	if x != nil && x.LogoutTime != nil {
		return *x.LogoutTime
	}
	return 0
}

func (x *FriendCommonData) GetRequestFlag() bool {
	if x != nil && x.RequestFlag != nil {
		return *x.RequestFlag
	}
	return false
}

func (x *FriendCommonData) GetPhysicalCollectState() int32 {
	if x != nil && x.PhysicalCollectState != nil {
		return *x.PhysicalCollectState
	}
	return 0
}

func (x *FriendCommonData) GetPhysicalGiveFlag() bool {
	if x != nil && x.PhysicalGiveFlag != nil {
		return *x.PhysicalGiveFlag
	}
	return false
}

func (x *FriendCommonData) GetFriendType() FriendType {
	if x != nil && x.FriendType != nil {
		return *x.FriendType
	}
	return FriendType_Friend
}

func (x *FriendCommonData) GetIsHideVip() bool {
	if x != nil && x.IsHideVip != nil {
		return *x.IsHideVip
	}
	return false
}

// 语音数据
type VoiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`          // 语音数据
	Duration *int32  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"` // 持续时间
}

func (x *VoiceData) Reset() {
	*x = VoiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceData) ProtoMessage() {}

func (x *VoiceData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceData.ProtoReflect.Descriptor instead.
func (*VoiceData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (x *VoiceData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *VoiceData) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

// 聊天单元
type ChatCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID        *uint64              `protobuf:"varint,1,opt,name=senderID" json:"senderID,omitempty"`                  // 发送者id
	SendTime        *int64               `protobuf:"varint,2,opt,name=sendTime" json:"sendTime,omitempty"`                  // 发送时间
	Type            *ChatCellType        `protobuf:"varint,3,opt,name=type,enum=common.ChatCellType" json:"type,omitempty"` // 消息类型
	Msg             *string              `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	Params          []string             `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`                    // 消息参数
	UnionID         *uint64              `protobuf:"varint,6,opt,name=unionID" json:"unionID,omitempty"`                 // 帮派id
	BattleId        *uint64              `protobuf:"varint,7,opt,name=battleId" json:"battleId,omitempty"`               // 战斗id
	LevelLimit      *uint32              `protobuf:"varint,8,opt,name=levelLimit" json:"levelLimit,omitempty"`           //招募等级
	Confirm         *bool                `protobuf:"varint,9,opt,name=confirm" json:"confirm,omitempty"`                 //是否需要审核
	GuildOfficial   *int32               `protobuf:"varint,10,opt,name=guildOfficial" json:"guildOfficial,omitempty"`    // 联盟官职
	CommanderId     *int32               `protobuf:"varint,11,opt,name=commanderId" json:"commanderId,omitempty"`        // 主将id
	Battle          *ChatBattle          `protobuf:"bytes,12,opt,name=battle" json:"battle,omitempty"`                   // 战斗
	GvePass         *ChatGvePass         `protobuf:"bytes,13,opt,name=gvePass" json:"gvePass,omitempty"`                 // gve通关消息
	WorldBossKilled *ChatWorldBossKilled `protobuf:"bytes,14,opt,name=worldBossKilled" json:"worldBossKilled,omitempty"` //世界boss被击杀
	ServerName      *string              `protobuf:"bytes,15,opt,name=serverName" json:"serverName,omitempty"`           // 服务器名字
	Camp            *int32               `protobuf:"varint,16,opt,name=camp" json:"camp,omitempty"`                      // 阵营
	CityOccupy      *ChatGvgCityOccupy   `protobuf:"bytes,17,opt,name=cityOccupy" json:"cityOccupy,omitempty"`           // gvg每日城池占领
	TargetId        *uint64              `protobuf:"varint,18,opt,name=targetId" json:"targetId,omitempty"`              // 接收者Id
	Player          *LmTopThreePlayer    `protobuf:"bytes,19,opt,name=player" json:"player,omitempty"`                   // 三强，每次发送一个
	WonConqueror    *ChatWonConqueror    `protobuf:"bytes,20,opt,name=wonConqueror" json:"wonConqueror,omitempty"`       // 问鼎中原霸主消息
}

func (x *ChatCell) Reset() {
	*x = ChatCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCell) ProtoMessage() {}

func (x *ChatCell) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCell.ProtoReflect.Descriptor instead.
func (*ChatCell) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *ChatCell) GetSenderID() uint64 {
	if x != nil && x.SenderID != nil {
		return *x.SenderID
	}
	return 0
}

func (x *ChatCell) GetSendTime() int64 {
	if x != nil && x.SendTime != nil {
		return *x.SendTime
	}
	return 0
}

func (x *ChatCell) GetType() ChatCellType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChatCellType_normal
}

func (x *ChatCell) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *ChatCell) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ChatCell) GetUnionID() uint64 {
	if x != nil && x.UnionID != nil {
		return *x.UnionID
	}
	return 0
}

func (x *ChatCell) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *ChatCell) GetLevelLimit() uint32 {
	if x != nil && x.LevelLimit != nil {
		return *x.LevelLimit
	}
	return 0
}

func (x *ChatCell) GetConfirm() bool {
	if x != nil && x.Confirm != nil {
		return *x.Confirm
	}
	return false
}

func (x *ChatCell) GetGuildOfficial() int32 {
	if x != nil && x.GuildOfficial != nil {
		return *x.GuildOfficial
	}
	return 0
}

func (x *ChatCell) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *ChatCell) GetBattle() *ChatBattle {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *ChatCell) GetGvePass() *ChatGvePass {
	if x != nil {
		return x.GvePass
	}
	return nil
}

func (x *ChatCell) GetWorldBossKilled() *ChatWorldBossKilled {
	if x != nil {
		return x.WorldBossKilled
	}
	return nil
}

func (x *ChatCell) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *ChatCell) GetCamp() int32 {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return 0
}

func (x *ChatCell) GetCityOccupy() *ChatGvgCityOccupy {
	if x != nil {
		return x.CityOccupy
	}
	return nil
}

func (x *ChatCell) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *ChatCell) GetPlayer() *LmTopThreePlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *ChatCell) GetWonConqueror() *ChatWonConqueror {
	if x != nil {
		return x.WonConqueror
	}
	return nil
}

type LmTopThreePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"` // 玩家Id
	Rank     *int32  `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`         // 排名
}

func (x *LmTopThreePlayer) Reset() {
	*x = LmTopThreePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmTopThreePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmTopThreePlayer) ProtoMessage() {}

func (x *LmTopThreePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmTopThreePlayer.ProtoReflect.Descriptor instead.
func (*LmTopThreePlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{42}
}

func (x *LmTopThreePlayer) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *LmTopThreePlayer) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

// 聊天发送者信息
type ChatSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                   // 发送者id
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                // 发送者名字
	Level       *uint32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`             // 发送者等级
	Avatar      *int32  `protobuf:"varint,4,opt,name=avatar" json:"avatar,omitempty"`           // 发送者头像
	AvatarFrame *int32  `protobuf:"varint,5,opt,name=avatarFrame" json:"avatarFrame,omitempty"` // 发送者头像框
	VipLevel    *uint32 `protobuf:"varint,6,opt,name=vipLevel" json:"vipLevel,omitempty"`       // vip
	FightPower  *uint32 `protobuf:"varint,7,opt,name=fightPower" json:"fightPower,omitempty"`   // 战斗力
	HideVip     *bool   `protobuf:"varint,8,opt,name=hideVip" json:"hideVip,omitempty"`         // true 隐藏vip
}

func (x *ChatSender) Reset() {
	*x = ChatSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSender) ProtoMessage() {}

func (x *ChatSender) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSender.ProtoReflect.Descriptor instead.
func (*ChatSender) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{43}
}

func (x *ChatSender) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChatSender) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChatSender) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ChatSender) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *ChatSender) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *ChatSender) GetVipLevel() uint32 {
	if x != nil && x.VipLevel != nil {
		return *x.VipLevel
	}
	return 0
}

func (x *ChatSender) GetFightPower() uint32 {
	if x != nil && x.FightPower != nil {
		return *x.FightPower
	}
	return 0
}

func (x *ChatSender) GetHideVip() bool {
	if x != nil && x.HideVip != nil {
		return *x.HideVip
	}
	return false
}

// gve通关消息
type ChatGvePass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildName *string `protobuf:"bytes,1,opt,name=guildName" json:"guildName,omitempty"` // 联盟名字
	Word      *string `protobuf:"bytes,2,opt,name=word" json:"word,omitempty"`           // 旗帜名字
	Color     *int32  `protobuf:"varint,3,opt,name=color" json:"color,omitempty"`        // 旗帜颜色
	CityId    *uint32 `protobuf:"varint,4,opt,name=cityId" json:"cityId,omitempty"`      // 主城id
	Badge     *int32  `protobuf:"varint,5,opt,name=badge" json:"badge,omitempty"`        //徽章
}

func (x *ChatGvePass) Reset() {
	*x = ChatGvePass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatGvePass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatGvePass) ProtoMessage() {}

func (x *ChatGvePass) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatGvePass.ProtoReflect.Descriptor instead.
func (*ChatGvePass) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{44}
}

func (x *ChatGvePass) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *ChatGvePass) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *ChatGvePass) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *ChatGvePass) GetCityId() uint32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *ChatGvePass) GetBadge() int32 {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return 0
}

//世界boss被击杀
type ChatWorldBossKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`         //玩家id
	BossId *int32  `protobuf:"varint,2,opt,name=bossId" json:"bossId,omitempty"` //bossId
}

func (x *ChatWorldBossKilled) Reset() {
	*x = ChatWorldBossKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWorldBossKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWorldBossKilled) ProtoMessage() {}

func (x *ChatWorldBossKilled) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWorldBossKilled.ProtoReflect.Descriptor instead.
func (*ChatWorldBossKilled) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{45}
}

func (x *ChatWorldBossKilled) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChatWorldBossKilled) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

// gvg日结算城池占领
type ChatGvgCityOccupy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildName     *string `protobuf:"bytes,1,opt,name=guildName" json:"guildName,omitempty"`          // 联盟名字
	Word          *string `protobuf:"bytes,2,opt,name=word" json:"word,omitempty"`                    // 旗帜名字
	Color         *int32  `protobuf:"varint,3,opt,name=color" json:"color,omitempty"`                 // 旗帜颜色
	CityId        *uint64 `protobuf:"varint,4,opt,name=cityId" json:"cityId,omitempty"`               // 主城id
	Badge         *int32  `protobuf:"varint,5,opt,name=badge" json:"badge,omitempty"`                 //徽章
	GuildCamp     *uint32 `protobuf:"varint,6,opt,name=guildCamp" json:"guildCamp,omitempty"`         // 阵营
	LastGuildName *string `protobuf:"bytes,7,opt,name=lastGuildName" json:"lastGuildName,omitempty"`  // 上一个占领的联盟名字
	LastGuildCamp *uint32 `protobuf:"varint,8,opt,name=lastGuildCamp" json:"lastGuildCamp,omitempty"` // 上一个占领的联盟阵营
}

func (x *ChatGvgCityOccupy) Reset() {
	*x = ChatGvgCityOccupy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatGvgCityOccupy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatGvgCityOccupy) ProtoMessage() {}

func (x *ChatGvgCityOccupy) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatGvgCityOccupy.ProtoReflect.Descriptor instead.
func (*ChatGvgCityOccupy) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{46}
}

func (x *ChatGvgCityOccupy) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *ChatGvgCityOccupy) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *ChatGvgCityOccupy) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *ChatGvgCityOccupy) GetCityId() uint64 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *ChatGvgCityOccupy) GetBadge() int32 {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return 0
}

func (x *ChatGvgCityOccupy) GetGuildCamp() uint32 {
	if x != nil && x.GuildCamp != nil {
		return *x.GuildCamp
	}
	return 0
}

func (x *ChatGvgCityOccupy) GetLastGuildName() string {
	if x != nil && x.LastGuildName != nil {
		return *x.LastGuildName
	}
	return ""
}

func (x *ChatGvgCityOccupy) GetLastGuildCamp() uint32 {
	if x != nil && x.LastGuildCamp != nil {
		return *x.LastGuildCamp
	}
	return 0
}

// 联盟成为某个地图的霸主
type ChatWonConqueror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildName *string `protobuf:"bytes,1,opt,name=guildName" json:"guildName,omitempty"` // 联盟名字
	Word      *string `protobuf:"bytes,2,opt,name=word" json:"word,omitempty"`           // 旗帜名字
	Color     *int32  `protobuf:"varint,3,opt,name=color" json:"color,omitempty"`        // 旗帜颜色
	Badge     *int32  `protobuf:"varint,4,opt,name=badge" json:"badge,omitempty"`        //徽章
	MapId     *uint32 `protobuf:"varint,5,opt,name=mapId" json:"mapId,omitempty"`        // 成为哪个地图的霸主
	ServerId  *uint64 `protobuf:"varint,6,opt,name=serverId" json:"serverId,omitempty"`  // 服务器id
}

func (x *ChatWonConqueror) Reset() {
	*x = ChatWonConqueror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWonConqueror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWonConqueror) ProtoMessage() {}

func (x *ChatWonConqueror) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWonConqueror.ProtoReflect.Descriptor instead.
func (*ChatWonConqueror) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{47}
}

func (x *ChatWonConqueror) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *ChatWonConqueror) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *ChatWonConqueror) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *ChatWonConqueror) GetBadge() int32 {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return 0
}

func (x *ChatWonConqueror) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *ChatWonConqueror) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

// 聊天战斗信息
type ChatBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType *int32            `protobuf:"varint,1,opt,name=battleType" json:"battleType,omitempty"` // 战斗类型
	BattleId   *uint64           `protobuf:"varint,2,opt,name=battleId" json:"battleId,omitempty"`     // 战斗唯一id
	Player1    *ChatBattlePlayer `protobuf:"bytes,3,opt,name=player1" json:"player1,omitempty"`        // 玩家1
	Player2    *ChatBattlePlayer `protobuf:"bytes,4,opt,name=player2" json:"player2,omitempty"`        // 玩家2
	Npc        *ChatBattleNpc    `protobuf:"bytes,5,opt,name=npc" json:"npc,omitempty"`                // 打npc的数据
	TowerLevel *int32            `protobuf:"varint,6,opt,name=towerLevel" json:"towerLevel,omitempty"` // 爬塔层数
	TowerType  *int32            `protobuf:"varint,7,opt,name=towerType" json:"towerType,omitempty"`   // 爬塔类型
}

func (x *ChatBattle) Reset() {
	*x = ChatBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBattle) ProtoMessage() {}

func (x *ChatBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBattle.ProtoReflect.Descriptor instead.
func (*ChatBattle) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{48}
}

func (x *ChatBattle) GetBattleType() int32 {
	if x != nil && x.BattleType != nil {
		return *x.BattleType
	}
	return 0
}

func (x *ChatBattle) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *ChatBattle) GetPlayer1() *ChatBattlePlayer {
	if x != nil {
		return x.Player1
	}
	return nil
}

func (x *ChatBattle) GetPlayer2() *ChatBattlePlayer {
	if x != nil {
		return x.Player2
	}
	return nil
}

func (x *ChatBattle) GetNpc() *ChatBattleNpc {
	if x != nil {
		return x.Npc
	}
	return nil
}

func (x *ChatBattle) GetTowerLevel() int32 {
	if x != nil && x.TowerLevel != nil {
		return *x.TowerLevel
	}
	return 0
}

func (x *ChatBattle) GetTowerType() int32 {
	if x != nil && x.TowerType != nil {
		return *x.TowerType
	}
	return 0
}

type ChatBattlePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`       // 玩家id
	Avatar      *int32  `protobuf:"varint,2,opt,name=avatar" json:"avatar,omitempty"`           // 头像
	AvatarFrame *int32  `protobuf:"varint,3,opt,name=avatarFrame" json:"avatarFrame,omitempty"` // 头像框
	Level       *uint32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`             // 等级
	Name        *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`                // 名字
}

func (x *ChatBattlePlayer) Reset() {
	*x = ChatBattlePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBattlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBattlePlayer) ProtoMessage() {}

func (x *ChatBattlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBattlePlayer.ProtoReflect.Descriptor instead.
func (*ChatBattlePlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{49}
}

func (x *ChatBattlePlayer) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ChatBattlePlayer) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *ChatBattlePlayer) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *ChatBattlePlayer) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ChatBattlePlayer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ChatBattleNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderId *int32 `protobuf:"varint,1,opt,name=commanderId" json:"commanderId,omitempty"` // 主将id
}

func (x *ChatBattleNpc) Reset() {
	*x = ChatBattleNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBattleNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBattleNpc) ProtoMessage() {}

func (x *ChatBattleNpc) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBattleNpc.ProtoReflect.Descriptor instead.
func (*ChatBattleNpc) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{50}
}

func (x *ChatBattleNpc) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

// 公告
type Announce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgs []*AnnounceMessage `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"` // 公告
}

func (x *Announce) Reset() {
	*x = Announce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announce) ProtoMessage() {}

func (x *Announce) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announce.ProtoReflect.Descriptor instead.
func (*Announce) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{51}
}

func (x *Announce) GetMsgs() []*AnnounceMessage {
	if x != nil {
		return x.Msgs
	}
	return nil
}

// 循环时间
type LoopTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime *int64  `protobuf:"varint,2,opt,name=beginTime" json:"beginTime,omitempty"` // 开始时间
	EndTime   *int64  `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`     // 结束时间
	Frequent  *uint32 `protobuf:"varint,4,opt,name=frequent" json:"frequent,omitempty"`   // 间隔
}

func (x *LoopTime) Reset() {
	*x = LoopTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoopTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopTime) ProtoMessage() {}

func (x *LoopTime) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopTime.ProtoReflect.Descriptor instead.
func (*LoopTime) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{52}
}

func (x *LoopTime) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *LoopTime) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *LoopTime) GetFrequent() uint32 {
	if x != nil && x.Frequent != nil {
		return *x.Frequent
	}
	return 0
}

// 公告消息
type AnnounceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`             // 唯一id
	LoopTime *LoopTime `protobuf:"bytes,2,opt,name=loopTime" json:"loopTime,omitempty"`  // 循环
	Priority *uint32   `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"` // 优先级
	EndTime  *int64    `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`   // 服务器用，如果结束了，则不同步客户端
	Msg      *ChatCell `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`            // 内容
	IsCross  *bool     `protobuf:"varint,6,opt,name=isCross" json:"isCross,omitempty"`   // 是否是跨服跑马灯
}

func (x *AnnounceMessage) Reset() {
	*x = AnnounceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceMessage) ProtoMessage() {}

func (x *AnnounceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceMessage.ProtoReflect.Descriptor instead.
func (*AnnounceMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{53}
}

func (x *AnnounceMessage) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AnnounceMessage) GetLoopTime() *LoopTime {
	if x != nil {
		return x.LoopTime
	}
	return nil
}

func (x *AnnounceMessage) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *AnnounceMessage) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *AnnounceMessage) GetMsg() *ChatCell {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AnnounceMessage) GetIsCross() bool {
	if x != nil && x.IsCross != nil {
		return *x.IsCross
	}
	return false
}

type PlayerRankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType *RankType `protobuf:"varint,1,opt,name=rankType,enum=common.RankType" json:"rankType,omitempty"`
	Ids      []int32   `protobuf:"varint,2,rep,name=ids" json:"ids,omitempty"`
}

func (x *PlayerRankReward) Reset() {
	*x = PlayerRankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankReward) ProtoMessage() {}

func (x *PlayerRankReward) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankReward.ProtoReflect.Descriptor instead.
func (*PlayerRankReward) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{54}
}

func (x *PlayerRankReward) GetRankType() RankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return RankType_FightPower
}

func (x *PlayerRankReward) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MarketGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketItemID *int32 `protobuf:"varint,1,opt,name=marketItemID" json:"marketItemID,omitempty"` // marketItem 表格id
	ItemId       *int32 `protobuf:"varint,2,opt,name=itemId" json:"itemId,omitempty"`             // 随机物品id
	BuyTimes     *int32 `protobuf:"varint,3,opt,name=buyTimes" json:"buyTimes,omitempty"`         // 购买次数(没买过为0)
	Lock         *bool  `protobuf:"varint,4,opt,name=lock" json:"lock,omitempty"`                 // true为未解锁；nil或false为解锁
}

func (x *MarketGrid) Reset() {
	*x = MarketGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGrid) ProtoMessage() {}

func (x *MarketGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGrid.ProtoReflect.Descriptor instead.
func (*MarketGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{55}
}

func (x *MarketGrid) GetMarketItemID() int32 {
	if x != nil && x.MarketItemID != nil {
		return *x.MarketItemID
	}
	return 0
}

func (x *MarketGrid) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *MarketGrid) GetBuyTimes() int32 {
	if x != nil && x.BuyTimes != nil {
		return *x.BuyTimes
	}
	return 0
}

func (x *MarketGrid) GetLock() bool {
	if x != nil && x.Lock != nil {
		return *x.Lock
	}
	return false
}

// 单个市场数据
type ItemMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId             *int32        `protobuf:"varint,1,opt,name=marketId" json:"marketId,omitempty"`                         // 商店id
	Grids                []*MarketGrid `protobuf:"bytes,2,rep,name=grids" json:"grids,omitempty"`                                // 全部商品
	AutoRefreshTime      *int64        `protobuf:"varint,3,opt,name=autoRefreshTime" json:"autoRefreshTime,omitempty"`           // 自动刷新时间
	ManualRefreshCount   *int32        `protobuf:"varint,4,opt,name=manualRefreshCount" json:"manualRefreshCount,omitempty"`     // 手动刷新次数
	FreeRefreshCount     *int32        `protobuf:"varint,6,opt,name=freeRefreshCount" json:"freeRefreshCount,omitempty"`         // 手动免费刷新次数
	RefreshLevel         *uint32       `protobuf:"varint,7,opt,name=refreshLevel" json:"refreshLevel,omitempty"`                 // 刷新时玩家等级
	LastCycleRefreshTime *int64        `protobuf:"varint,8,opt,name=lastCycleRefreshTime" json:"lastCycleRefreshTime,omitempty"` //上次周期刷新的时间
}

func (x *ItemMarket) Reset() {
	*x = ItemMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMarket) ProtoMessage() {}

func (x *ItemMarket) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMarket.ProtoReflect.Descriptor instead.
func (*ItemMarket) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{56}
}

func (x *ItemMarket) GetMarketId() int32 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *ItemMarket) GetGrids() []*MarketGrid {
	if x != nil {
		return x.Grids
	}
	return nil
}

func (x *ItemMarket) GetAutoRefreshTime() int64 {
	if x != nil && x.AutoRefreshTime != nil {
		return *x.AutoRefreshTime
	}
	return 0
}

func (x *ItemMarket) GetManualRefreshCount() int32 {
	if x != nil && x.ManualRefreshCount != nil {
		return *x.ManualRefreshCount
	}
	return 0
}

func (x *ItemMarket) GetFreeRefreshCount() int32 {
	if x != nil && x.FreeRefreshCount != nil {
		return *x.FreeRefreshCount
	}
	return 0
}

func (x *ItemMarket) GetRefreshLevel() uint32 {
	if x != nil && x.RefreshLevel != nil {
		return *x.RefreshLevel
	}
	return 0
}

func (x *ItemMarket) GetLastCycleRefreshTime() int64 {
	if x != nil && x.LastCycleRefreshTime != nil {
		return *x.LastCycleRefreshTime
	}
	return 0
}

//每日购买记录
type ShopDailyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalBuyTimes         *uint32 `protobuf:"varint,1,opt,name=physicalBuyTimes" json:"physicalBuyTimes,omitempty"`                 //体力次数
	PhysicalFreeBuyTimes     *uint32 `protobuf:"varint,2,opt,name=physicalFreeBuyTimes" json:"physicalFreeBuyTimes,omitempty"`         //免费体力次数
	GoldBuyTimes             *uint32 `protobuf:"varint,3,opt,name=goldBuyTimes" json:"goldBuyTimes,omitempty"`                         //黄金次数
	GoldFreeBuyTimes         *uint32 `protobuf:"varint,4,opt,name=goldFreeBuyTimes" json:"goldFreeBuyTimes,omitempty"`                 //免费黄金次数
	CommanderExpBuyTimes     *uint32 `protobuf:"varint,5,opt,name=commanderExpBuyTimes" json:"commanderExpBuyTimes,omitempty"`         //主将经验次数
	CommanderExpFreeBuyTimes *uint32 `protobuf:"varint,6,opt,name=commanderExpFreeBuyTimes" json:"commanderExpFreeBuyTimes,omitempty"` //免费主将经验次数
	AdvanceStoneBuyTimes     *uint32 `protobuf:"varint,7,opt,name=advanceStoneBuyTimes" json:"advanceStoneBuyTimes,omitempty"`         //铸造石次数
	AdvanceStoneFreeBuyTimes *uint32 `protobuf:"varint,8,opt,name=advanceStoneFreeBuyTimes" json:"advanceStoneFreeBuyTimes,omitempty"` //免费铸造石次数
	MagicBookBuyTimes        *uint32 `protobuf:"varint,9,opt,name=magicBookBuyTimes" json:"magicBookBuyTimes,omitempty"`               //法术书次数
	MagicBookFreeBuyTimes    *uint32 `protobuf:"varint,10,opt,name=magicBookFreeBuyTimes" json:"magicBookFreeBuyTimes,omitempty"`      //免费法术书次数
	AlbumEssenceBuyTimes     *uint32 `protobuf:"varint,11,opt,name=albumEssenceBuyTimes" json:"albumEssenceBuyTimes,omitempty"`        //图鉴精华次数
	BeyondBuyTimes           *uint32 `protobuf:"varint,12,opt,name=beyondBuyTimes" json:"beyondBuyTimes,omitempty"`                    //突破丹次数
	AwakeHschTimes           *uint32 `protobuf:"varint,13,opt,name=awakeHschTimes" json:"awakeHschTimes,omitempty"`                    //觉醒道具汉室残魂次数
}

func (x *ShopDailyRecord) Reset() {
	*x = ShopDailyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopDailyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopDailyRecord) ProtoMessage() {}

func (x *ShopDailyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopDailyRecord.ProtoReflect.Descriptor instead.
func (*ShopDailyRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{57}
}

func (x *ShopDailyRecord) GetPhysicalBuyTimes() uint32 {
	if x != nil && x.PhysicalBuyTimes != nil {
		return *x.PhysicalBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetPhysicalFreeBuyTimes() uint32 {
	if x != nil && x.PhysicalFreeBuyTimes != nil {
		return *x.PhysicalFreeBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetGoldBuyTimes() uint32 {
	if x != nil && x.GoldBuyTimes != nil {
		return *x.GoldBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetGoldFreeBuyTimes() uint32 {
	if x != nil && x.GoldFreeBuyTimes != nil {
		return *x.GoldFreeBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetCommanderExpBuyTimes() uint32 {
	if x != nil && x.CommanderExpBuyTimes != nil {
		return *x.CommanderExpBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetCommanderExpFreeBuyTimes() uint32 {
	if x != nil && x.CommanderExpFreeBuyTimes != nil {
		return *x.CommanderExpFreeBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetAdvanceStoneBuyTimes() uint32 {
	if x != nil && x.AdvanceStoneBuyTimes != nil {
		return *x.AdvanceStoneBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetAdvanceStoneFreeBuyTimes() uint32 {
	if x != nil && x.AdvanceStoneFreeBuyTimes != nil {
		return *x.AdvanceStoneFreeBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetMagicBookBuyTimes() uint32 {
	if x != nil && x.MagicBookBuyTimes != nil {
		return *x.MagicBookBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetMagicBookFreeBuyTimes() uint32 {
	if x != nil && x.MagicBookFreeBuyTimes != nil {
		return *x.MagicBookFreeBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetAlbumEssenceBuyTimes() uint32 {
	if x != nil && x.AlbumEssenceBuyTimes != nil {
		return *x.AlbumEssenceBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetBeyondBuyTimes() uint32 {
	if x != nil && x.BeyondBuyTimes != nil {
		return *x.BeyondBuyTimes
	}
	return 0
}

func (x *ShopDailyRecord) GetAwakeHschTimes() uint32 {
	if x != nil && x.AwakeHschTimes != nil {
		return *x.AwakeHschTimes
	}
	return 0
}

// 训练条目
type TrainItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Star     *int32   `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	Evaluate *int32   `protobuf:"varint,3,opt,name=evaluate" json:"evaluate,omitempty"` // 评价(1,2,3 -> 丙、乙、甲)
	Exceed   *float32 `protobuf:"fixed32,4,opt,name=exceed" json:"exceed,omitempty"`    // 超越人数（百分比）
	Reward   *bool    `protobuf:"varint,5,opt,name=reward" json:"reward,omitempty"`     // 已领取为true，否则为nil
}

func (x *TrainItem) Reset() {
	*x = TrainItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainItem) ProtoMessage() {}

func (x *TrainItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainItem.ProtoReflect.Descriptor instead.
func (*TrainItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{58}
}

func (x *TrainItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TrainItem) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *TrainItem) GetEvaluate() int32 {
	if x != nil && x.Evaluate != nil {
		return *x.Evaluate
	}
	return 0
}

func (x *TrainItem) GetExceed() float32 {
	if x != nil && x.Exceed != nil {
		return *x.Exceed
	}
	return 0
}

func (x *TrainItem) GetReward() bool {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return false
}

// 训练场弹幕
type TrainBarrage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []string `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
}

func (x *TrainBarrage) Reset() {
	*x = TrainBarrage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainBarrage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainBarrage) ProtoMessage() {}

func (x *TrainBarrage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainBarrage.ProtoReflect.Descriptor instead.
func (*TrainBarrage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{59}
}

func (x *TrainBarrage) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

// 回放简要信息
type ReplaySimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                          // 回放id
	BattleTime      *int64     `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"`          // 战斗开始时间
	Formation       *Formation `protobuf:"bytes,3,opt,name=formation" json:"formation,omitempty"`             // 布阵
	TargetFormation *Formation `protobuf:"bytes,4,opt,name=targetFormation" json:"targetFormation,omitempty"` // 布阵
}

func (x *ReplaySimple) Reset() {
	*x = ReplaySimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaySimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaySimple) ProtoMessage() {}

func (x *ReplaySimple) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaySimple.ProtoReflect.Descriptor instead.
func (*ReplaySimple) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{60}
}

func (x *ReplaySimple) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ReplaySimple) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *ReplaySimple) GetFormation() *Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *ReplaySimple) GetTargetFormation() *Formation {
	if x != nil {
		return x.TargetFormation
	}
	return nil
}

//GuildHonorPlayer 荣誉玩家
type GuildHonorPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            *uint64             `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Icon           *PlayerHeadPortrait `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Power          *uint32             `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`                                              //战斗力
	GuildHonorType *GuildHonorType     `protobuf:"varint,4,opt,name=guildHonorType,enum=common.GuildHonorType" json:"guildHonorType,omitempty"` //荣誉类型
	Value          *int64              `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`                                              //值
	CounsellorId   *int32              `protobuf:"varint,6,opt,name=counsellorId" json:"counsellorId,omitempty"`                                //军师id
}

func (x *GuildHonorPlayer) Reset() {
	*x = GuildHonorPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildHonorPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildHonorPlayer) ProtoMessage() {}

func (x *GuildHonorPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildHonorPlayer.ProtoReflect.Descriptor instead.
func (*GuildHonorPlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{61}
}

func (x *GuildHonorPlayer) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *GuildHonorPlayer) GetIcon() *PlayerHeadPortrait {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GuildHonorPlayer) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *GuildHonorPlayer) GetGuildHonorType() GuildHonorType {
	if x != nil && x.GuildHonorType != nil {
		return *x.GuildHonorType
	}
	return GuildHonorType_OnlineTime
}

func (x *GuildHonorPlayer) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *GuildHonorPlayer) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

//事件日志
type GuildLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *int32   `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`      //事件id
	Time       *int64   `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`            //时间
	PlayerID   *uint64  `protobuf:"varint,3,opt,name=playerID" json:"playerID,omitempty"`    //谁 (可能为空)
	PlayerName *string  `protobuf:"bytes,4,opt,name=playerName" json:"playerName,omitempty"` //名字 （可能为空）
	Params     []string `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`         //参数列表 （可能为空）
}

func (x *GuildLog) Reset() {
	*x = GuildLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLog) ProtoMessage() {}

func (x *GuildLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLog.ProtoReflect.Descriptor instead.
func (*GuildLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{62}
}

func (x *GuildLog) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *GuildLog) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GuildLog) GetPlayerID() uint64 {
	if x != nil && x.PlayerID != nil {
		return *x.PlayerID
	}
	return 0
}

func (x *GuildLog) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *GuildLog) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//魂匣日志
type SoulBoxLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *int32   `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`      //事件id
	Time       *int64   `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`            //时间
	PlayerID   *uint64  `protobuf:"varint,3,opt,name=playerID" json:"playerID,omitempty"`    //谁 (可能为空)
	PlayerName *string  `protobuf:"bytes,4,opt,name=playerName" json:"playerName,omitempty"` //名字 （可能为空）
	Params     []string `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`         //参数列表 （可能为空）
}

func (x *SoulBoxLog) Reset() {
	*x = SoulBoxLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulBoxLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulBoxLog) ProtoMessage() {}

func (x *SoulBoxLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulBoxLog.ProtoReflect.Descriptor instead.
func (*SoulBoxLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{63}
}

func (x *SoulBoxLog) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *SoulBoxLog) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *SoulBoxLog) GetPlayerID() uint64 {
	if x != nil && x.PlayerID != nil {
		return *x.PlayerID
	}
	return 0
}

func (x *SoulBoxLog) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *SoulBoxLog) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//公告
type GuildAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Title   *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content *string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (x *GuildAnnouncement) Reset() {
	*x = GuildAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildAnnouncement) ProtoMessage() {}

func (x *GuildAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildAnnouncement.ProtoReflect.Descriptor instead.
func (*GuildAnnouncement) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{64}
}

func (x *GuildAnnouncement) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GuildAnnouncement) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GuildAnnouncement) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{65}
}

func (x *Coordinate) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Coordinate) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type GveDamageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidHp         *uint64 `protobuf:"varint,1,opt,name=didHp" json:"didHp,omitempty"`
	DidRealDamage *uint64 `protobuf:"varint,2,opt,name=didRealDamage" json:"didRealDamage,omitempty"`
}

func (x *GveDamageRecord) Reset() {
	*x = GveDamageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveDamageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveDamageRecord) ProtoMessage() {}

func (x *GveDamageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveDamageRecord.ProtoReflect.Descriptor instead.
func (*GveDamageRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{66}
}

func (x *GveDamageRecord) GetDidHp() uint64 {
	if x != nil && x.DidHp != nil {
		return *x.DidHp
	}
	return 0
}

func (x *GveDamageRecord) GetDidRealDamage() uint64 {
	if x != nil && x.DidRealDamage != nil {
		return *x.DidRealDamage
	}
	return 0
}

// 宝物
type Treasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                     // 宝物id
	AdvanceLevel *uint32 `protobuf:"varint,2,opt,name=advanceLevel" json:"advanceLevel,omitempty"` // 进阶等级
	IsAwake      *bool   `protobuf:"varint,3,opt,name=isAwake" json:"isAwake,omitempty"`           // 是否觉醒
	//   repeated uint32 starTrainExps = 4; // 升星淬炼 #废弃
	StarLevel        *uint32 `protobuf:"varint,5,opt,name=starLevel" json:"starLevel,omitempty"`               // 星级
	Power            *uint32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`                       // 战斗力
	StarTrainPercent *uint32 `protobuf:"varint,7,opt,name=starTrainPercent" json:"starTrainPercent,omitempty"` // 淬炼百分比
}

func (x *Treasure) Reset() {
	*x = Treasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasure) ProtoMessage() {}

func (x *Treasure) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasure.ProtoReflect.Descriptor instead.
func (*Treasure) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{67}
}

func (x *Treasure) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Treasure) GetAdvanceLevel() uint32 {
	if x != nil && x.AdvanceLevel != nil {
		return *x.AdvanceLevel
	}
	return 0
}

func (x *Treasure) GetIsAwake() bool {
	if x != nil && x.IsAwake != nil {
		return *x.IsAwake
	}
	return false
}

func (x *Treasure) GetStarLevel() uint32 {
	if x != nil && x.StarLevel != nil {
		return *x.StarLevel
	}
	return 0
}

func (x *Treasure) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Treasure) GetStarTrainPercent() uint32 {
	if x != nil && x.StarTrainPercent != nil {
		return *x.StarTrainPercent
	}
	return 0
}

// 宝物缘分
type TreasureFate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`       // 缘分id
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` // 缘分等级
	Power *uint32 `protobuf:"varint,3,opt,name=power" json:"power,omitempty"` // 战斗力
}

func (x *TreasureFate) Reset() {
	*x = TreasureFate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureFate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureFate) ProtoMessage() {}

func (x *TreasureFate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureFate.ProtoReflect.Descriptor instead.
func (*TreasureFate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{68}
}

func (x *TreasureFate) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TreasureFate) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *TreasureFate) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

// 宝物缘分技能
type TreasureFatesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositiveFateSkills []*TreasureFate `protobuf:"bytes,1,rep,name=positiveFateSkills" json:"positiveFateSkills,omitempty"` //主动技能
	StartFateSkills    []*TreasureFate `protobuf:"bytes,2,rep,name=startFateSkills" json:"startFateSkills,omitempty"`       //开场技能
	PassiveFateSkills  []*TreasureFate `protobuf:"bytes,3,rep,name=passiveFateSkills" json:"passiveFateSkills,omitempty"`   //被动技能
}

func (x *TreasureFatesInfo) Reset() {
	*x = TreasureFatesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureFatesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureFatesInfo) ProtoMessage() {}

func (x *TreasureFatesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureFatesInfo.ProtoReflect.Descriptor instead.
func (*TreasureFatesInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{69}
}

func (x *TreasureFatesInfo) GetPositiveFateSkills() []*TreasureFate {
	if x != nil {
		return x.PositiveFateSkills
	}
	return nil
}

func (x *TreasureFatesInfo) GetStartFateSkills() []*TreasureFate {
	if x != nil {
		return x.StartFateSkills
	}
	return nil
}

func (x *TreasureFatesInfo) GetPassiveFateSkills() []*TreasureFate {
	if x != nil {
		return x.PassiveFateSkills
	}
	return nil
}

// 宝物洗炼卡槽属性
type TreasureRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                           // 缘分id
	OwnQuality *TreasureAffix        `protobuf:"varint,2,opt,name=ownQuality,enum=common.TreasureAffix" json:"ownQuality,omitempty"` // 已经拥有的词缀品质
	Power      *uint32               `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`                                     // 战斗力
	Slots      []*TreasureRefineSlot `protobuf:"bytes,4,rep,name=slots" json:"slots,omitempty"`                                      // 卡槽属性
	RefineType *int32                `protobuf:"varint,5,opt,name=refineType" json:"refineType,omitempty"`                           // 上一次洗炼方式
}

func (x *TreasureRefine) Reset() {
	*x = TreasureRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureRefine) ProtoMessage() {}

func (x *TreasureRefine) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureRefine.ProtoReflect.Descriptor instead.
func (*TreasureRefine) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{70}
}

func (x *TreasureRefine) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TreasureRefine) GetOwnQuality() TreasureAffix {
	if x != nil && x.OwnQuality != nil {
		return *x.OwnQuality
	}
	return TreasureAffix_NoQuality
}

func (x *TreasureRefine) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *TreasureRefine) GetSlots() []*TreasureRefineSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *TreasureRefine) GetRefineType() int32 {
	if x != nil && x.RefineType != nil {
		return *x.RefineType
	}
	return 0
}

// 宝物洗炼属性
type TreasureRefineSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Own *TreasureRefineAttr `protobuf:"bytes,1,opt,name=own" json:"own,omitempty"` // 已经保存的洗炼属性
	Tmp *TreasureRefineAttr `protobuf:"bytes,2,opt,name=tmp" json:"tmp,omitempty"` // 没有保存的洗炼属性
}

func (x *TreasureRefineSlot) Reset() {
	*x = TreasureRefineSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureRefineSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureRefineSlot) ProtoMessage() {}

func (x *TreasureRefineSlot) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureRefineSlot.ProtoReflect.Descriptor instead.
func (*TreasureRefineSlot) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{71}
}

func (x *TreasureRefineSlot) GetOwn() *TreasureRefineAttr {
	if x != nil {
		return x.Own
	}
	return nil
}

func (x *TreasureRefineSlot) GetTmp() *TreasureRefineAttr {
	if x != nil {
		return x.Tmp
	}
	return nil
}

// 宝物洗炼属性
type TreasureRefineAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`           // id
	Quality *int32 `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"` // 品质
	Value   *int32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`     // 值
}

func (x *TreasureRefineAttr) Reset() {
	*x = TreasureRefineAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureRefineAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureRefineAttr) ProtoMessage() {}

func (x *TreasureRefineAttr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureRefineAttr.ProtoReflect.Descriptor instead.
func (*TreasureRefineAttr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{72}
}

func (x *TreasureRefineAttr) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TreasureRefineAttr) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *TreasureRefineAttr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//--------------------------------------------------------------------------------------------------竞技场
//战报
type ArenaBattleLogPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          *uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"` //uid
	Name         *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Power        *uint32 `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`
	Level        *uint32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	VipLevel     *uint32 `protobuf:"varint,5,opt,name=vipLevel" json:"vipLevel,omitempty"`
	Avatar       *int32  `protobuf:"varint,6,opt,name=avatar" json:"avatar,omitempty"`           //头像
	AvatarFrame  *int32  `protobuf:"varint,7,opt,name=avatarFrame" json:"avatarFrame,omitempty"` //头像框
	CounsellorId *int32  `protobuf:"varint,8,opt,name=counsellorId" json:"counsellorId,omitempty"`
	Msg          *string `protobuf:"bytes,9,opt,name=msg" json:"msg,omitempty"` //宣言
	GuildName    *string `protobuf:"bytes,10,opt,name=guildName" json:"guildName,omitempty"`
	BeforeRank   *uint32 `protobuf:"varint,11,opt,name=beforeRank" json:"beforeRank,omitempty"` //战前排名
	AfterRank    *uint32 `protobuf:"varint,12,opt,name=afterRank" json:"afterRank,omitempty"`   //战后排名
}

func (x *ArenaBattleLogPlayerInfo) Reset() {
	*x = ArenaBattleLogPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaBattleLogPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaBattleLogPlayerInfo) ProtoMessage() {}

func (x *ArenaBattleLogPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaBattleLogPlayerInfo.ProtoReflect.Descriptor instead.
func (*ArenaBattleLogPlayerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{73}
}

func (x *ArenaBattleLogPlayerInfo) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArenaBattleLogPlayerInfo) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetVipLevel() uint32 {
	if x != nil && x.VipLevel != nil {
		return *x.VipLevel
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *ArenaBattleLogPlayerInfo) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *ArenaBattleLogPlayerInfo) GetBeforeRank() uint32 {
	if x != nil && x.BeforeRank != nil {
		return *x.BeforeRank
	}
	return 0
}

func (x *ArenaBattleLogPlayerInfo) GetAfterRank() uint32 {
	if x != nil && x.AfterRank != nil {
		return *x.AfterRank
	}
	return 0
}

//ArenaBattleLog 战报
type ArenaBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64                     `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     //战斗id
	BattleTime *int64                      `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` //战斗时间
	Players    []*ArenaBattleLogPlayerInfo `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`        //参战人  //前一个是进攻方，后一个是防守方
	WinUid     *uint64                     `protobuf:"varint,4,opt,name=winUid" json:"winUid,omitempty"`         //胜利者
	Complete   *bool                       `protobuf:"varint,5,opt,name=complete" json:"complete,omitempty"`     //是否完成
}

func (x *ArenaBattleLog) Reset() {
	*x = ArenaBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaBattleLog) ProtoMessage() {}

func (x *ArenaBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaBattleLog.ProtoReflect.Descriptor instead.
func (*ArenaBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{74}
}

func (x *ArenaBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *ArenaBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *ArenaBattleLog) GetPlayers() []*ArenaBattleLogPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *ArenaBattleLog) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *ArenaBattleLog) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

//ArenaBattleLog 战报
type ArenaBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64                     `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     //战斗id
	BattleTime *int64                      `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` //战斗时间
	Players    []*ArenaBattleLogPlayerInfo `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`        //参战人  //前一个是进攻方，后一个是防守方
	WinUid     *uint64                     `protobuf:"varint,4,opt,name=winUid" json:"winUid,omitempty"`         //胜利者
	Complete   *bool                       `protobuf:"varint,5,opt,name=complete" json:"complete,omitempty"`     //是否完成
}

func (x *ArenaBattleInfo) Reset() {
	*x = ArenaBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaBattleInfo) ProtoMessage() {}

func (x *ArenaBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaBattleInfo.ProtoReflect.Descriptor instead.
func (*ArenaBattleInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{75}
}

func (x *ArenaBattleInfo) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *ArenaBattleInfo) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *ArenaBattleInfo) GetPlayers() []*ArenaBattleLogPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *ArenaBattleInfo) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *ArenaBattleInfo) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

//巅峰竞技场玩家数据
type PeakMatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          *uint64             `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`                   //玩家id
	Icon         *PlayerHeadPortrait `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`                  //头像
	Score        *uint32             `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`               //积分
	Power        *uint32             `protobuf:"varint,4,opt,name=power" json:"power,omitempty"`               //战斗力
	CounsellorId *int32              `protobuf:"varint,5,opt,name=counsellorId" json:"counsellorId,omitempty"` //军师id
	Commanders   []*Commander        `protobuf:"bytes,6,rep,name=commanders" json:"commanders,omitempty"`      //拥有的热点英雄
	IsRobot      *bool               `protobuf:"varint,7,opt,name=isRobot" json:"isRobot,omitempty"`           //是否机器人
	IsReady      *bool               `protobuf:"varint,8,opt,name=isReady" json:"isReady,omitempty"`           //准备状态 //只在匹配成功之后才有
}

func (x *PeakMatchPlayer) Reset() {
	*x = PeakMatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakMatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakMatchPlayer) ProtoMessage() {}

func (x *PeakMatchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakMatchPlayer.ProtoReflect.Descriptor instead.
func (*PeakMatchPlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{76}
}

func (x *PeakMatchPlayer) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PeakMatchPlayer) GetIcon() *PlayerHeadPortrait {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PeakMatchPlayer) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PeakMatchPlayer) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PeakMatchPlayer) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *PeakMatchPlayer) GetCommanders() []*Commander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

func (x *PeakMatchPlayer) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *PeakMatchPlayer) GetIsReady() bool {
	if x != nil && x.IsReady != nil {
		return *x.IsReady
	}
	return false
}

//巅峰竞技场玩家布阵数据
type PeakFormationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MathTime    *int64        `protobuf:"varint,1,opt,name=mathTime" json:"mathTime,omitempty"`      //匹配完成的时间
	Counsellors []*Counsellor `protobuf:"bytes,2,rep,name=counsellors" json:"counsellors,omitempty"` //军师列表（某些情况用于覆盖背包的军师）
}

func (x *PeakFormationData) Reset() {
	*x = PeakFormationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakFormationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakFormationData) ProtoMessage() {}

func (x *PeakFormationData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakFormationData.ProtoReflect.Descriptor instead.
func (*PeakFormationData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{77}
}

func (x *PeakFormationData) GetMathTime() int64 {
	if x != nil && x.MathTime != nil {
		return *x.MathTime
	}
	return 0
}

func (x *PeakFormationData) GetCounsellors() []*Counsellor {
	if x != nil {
		return x.Counsellors
	}
	return nil
}

//巅峰竞技场玩家战斗数据
type PeakBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string          `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Secret  *string          `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Info    *BattleStartInfo `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"` // 战斗开始数据
}

func (x *PeakBattleData) Reset() {
	*x = PeakBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakBattleData) ProtoMessage() {}

func (x *PeakBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakBattleData.ProtoReflect.Descriptor instead.
func (*PeakBattleData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{78}
}

func (x *PeakBattleData) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *PeakBattleData) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *PeakBattleData) GetInfo() *BattleStartInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

//巅峰竞技场玩家状态数据
type PeakStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeakStateStep     *PeakStateStep     `protobuf:"varint,1,opt,name=peakStateStep,enum=common.PeakStateStep" json:"peakStateStep,omitempty"` //巅峰竞技场状态
	PeakMatchPlayer   []*PeakMatchPlayer `protobuf:"bytes,2,rep,name=peakMatchPlayer" json:"peakMatchPlayer,omitempty"`                        //匹配到的数据 (双方玩家)
	PeakFormationData *PeakFormationData `protobuf:"bytes,3,opt,name=peakFormationData" json:"peakFormationData,omitempty"`                    //布阵中数据 （布阵数据）
	PeakBattleData    *PeakBattleData    `protobuf:"bytes,4,opt,name=peakBattleData" json:"peakBattleData,omitempty"`                          //战斗中数据 （战斗数据）
}

func (x *PeakStateData) Reset() {
	*x = PeakStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakStateData) ProtoMessage() {}

func (x *PeakStateData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakStateData.ProtoReflect.Descriptor instead.
func (*PeakStateData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{79}
}

func (x *PeakStateData) GetPeakStateStep() PeakStateStep {
	if x != nil && x.PeakStateStep != nil {
		return *x.PeakStateStep
	}
	return PeakStateStep_NONE
}

func (x *PeakStateData) GetPeakMatchPlayer() []*PeakMatchPlayer {
	if x != nil {
		return x.PeakMatchPlayer
	}
	return nil
}

func (x *PeakStateData) GetPeakFormationData() *PeakFormationData {
	if x != nil {
		return x.PeakFormationData
	}
	return nil
}

func (x *PeakStateData) GetPeakBattleData() *PeakBattleData {
	if x != nil {
		return x.PeakBattleData
	}
	return nil
}

//巅峰竞技场上次结算数据
type PeakBattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleID                       *uint64 `protobuf:"varint,1,opt,name=battleID" json:"battleID,omitempty"`                                             //战斗id
	WinUid                         *uint64 `protobuf:"varint,2,opt,name=winUid" json:"winUid,omitempty"`                                                 // 胜利者
	MaxScore                       *uint32 `protobuf:"varint,3,opt,name=maxScore" json:"maxScore,omitempty"`                                             // 最大积分
	BeforeScore                    *uint32 `protobuf:"varint,4,opt,name=beforeScore" json:"beforeScore,omitempty"`                                       // 战前积分
	AfterScore                     *uint32 `protobuf:"varint,5,opt,name=afterScore" json:"afterScore,omitempty"`                                         // 战后积分
	TotalBattleTimes               *int32  `protobuf:"varint,6,opt,name=totalBattleTimes" json:"totalBattleTimes,omitempty"`                             // 总次数
	TotalBattleWinTimes            *int32  `protobuf:"varint,7,opt,name=totalBattleWinTimes" json:"totalBattleWinTimes,omitempty"`                       // 总胜利次数
	LastAccumulatePeakCoin         *uint32 `protobuf:"varint,8,opt,name=lastAccumulatePeakCoin" json:"lastAccumulatePeakCoin,omitempty"`                 //之前累计的积分
	NowAccumulatePeakCoinBeginTime *int64  `protobuf:"varint,9,opt,name=nowAccumulatePeakCoinBeginTime" json:"nowAccumulatePeakCoinBeginTime,omitempty"` //本轮累计开始的时间
	HotCommander                   []int32 `protobuf:"varint,10,rep,name=hotCommander" json:"hotCommander,omitempty"`                                    //战斗结束积分变化可能引起 热点武将
	HotCounsellor                  *int32  `protobuf:"varint,11,opt,name=hotCounsellor" json:"hotCounsellor,omitempty"`                                  //战斗结束积分变化可能引起 热点军师
	LeftChallengeTimes             *uint32 `protobuf:"varint,12,opt,name=leftChallengeTimes" json:"leftChallengeTimes,omitempty"`                        //进入战斗时候就扣次数
	SeasonCommander                []int32 `protobuf:"varint,13,rep,name=seasonCommander" json:"seasonCommander,omitempty"`                              //赛季武将
}

func (x *PeakBattleResult) Reset() {
	*x = PeakBattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakBattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakBattleResult) ProtoMessage() {}

func (x *PeakBattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakBattleResult.ProtoReflect.Descriptor instead.
func (*PeakBattleResult) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{80}
}

func (x *PeakBattleResult) GetBattleID() uint64 {
	if x != nil && x.BattleID != nil {
		return *x.BattleID
	}
	return 0
}

func (x *PeakBattleResult) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *PeakBattleResult) GetMaxScore() uint32 {
	if x != nil && x.MaxScore != nil {
		return *x.MaxScore
	}
	return 0
}

func (x *PeakBattleResult) GetBeforeScore() uint32 {
	if x != nil && x.BeforeScore != nil {
		return *x.BeforeScore
	}
	return 0
}

func (x *PeakBattleResult) GetAfterScore() uint32 {
	if x != nil && x.AfterScore != nil {
		return *x.AfterScore
	}
	return 0
}

func (x *PeakBattleResult) GetTotalBattleTimes() int32 {
	if x != nil && x.TotalBattleTimes != nil {
		return *x.TotalBattleTimes
	}
	return 0
}

func (x *PeakBattleResult) GetTotalBattleWinTimes() int32 {
	if x != nil && x.TotalBattleWinTimes != nil {
		return *x.TotalBattleWinTimes
	}
	return 0
}

func (x *PeakBattleResult) GetLastAccumulatePeakCoin() uint32 {
	if x != nil && x.LastAccumulatePeakCoin != nil {
		return *x.LastAccumulatePeakCoin
	}
	return 0
}

func (x *PeakBattleResult) GetNowAccumulatePeakCoinBeginTime() int64 {
	if x != nil && x.NowAccumulatePeakCoinBeginTime != nil {
		return *x.NowAccumulatePeakCoinBeginTime
	}
	return 0
}

func (x *PeakBattleResult) GetHotCommander() []int32 {
	if x != nil {
		return x.HotCommander
	}
	return nil
}

func (x *PeakBattleResult) GetHotCounsellor() int32 {
	if x != nil && x.HotCounsellor != nil {
		return *x.HotCounsellor
	}
	return 0
}

func (x *PeakBattleResult) GetLeftChallengeTimes() uint32 {
	if x != nil && x.LeftChallengeTimes != nil {
		return *x.LeftChallengeTimes
	}
	return 0
}

func (x *PeakBattleResult) GetSeasonCommander() []int32 {
	if x != nil {
		return x.SeasonCommander
	}
	return nil
}

type PeakBattleLogPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         *uint64             `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"` //uid
	Icon        *PlayerHeadPortrait `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Power       *uint32             `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`
	BeforeScore *uint32             `protobuf:"varint,4,opt,name=beforeScore" json:"beforeScore,omitempty"` //战前积分
	AfterScore  *uint32             `protobuf:"varint,5,opt,name=afterScore" json:"afterScore,omitempty"`   //战后积分
}

func (x *PeakBattleLogPlayerInfo) Reset() {
	*x = PeakBattleLogPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakBattleLogPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakBattleLogPlayerInfo) ProtoMessage() {}

func (x *PeakBattleLogPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakBattleLogPlayerInfo.ProtoReflect.Descriptor instead.
func (*PeakBattleLogPlayerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{81}
}

func (x *PeakBattleLogPlayerInfo) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PeakBattleLogPlayerInfo) GetIcon() *PlayerHeadPortrait {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PeakBattleLogPlayerInfo) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PeakBattleLogPlayerInfo) GetBeforeScore() uint32 {
	if x != nil && x.BeforeScore != nil {
		return *x.BeforeScore
	}
	return 0
}

func (x *PeakBattleLogPlayerInfo) GetAfterScore() uint32 {
	if x != nil && x.AfterScore != nil {
		return *x.AfterScore
	}
	return 0
}

//PeakBattleLog 战报
type PeakBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64                    `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     //战斗id
	BattleTime *int64                     `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` //战斗时间
	Players    []*PeakBattleLogPlayerInfo `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`        //参战人
	WinUid     *uint64                    `protobuf:"varint,4,opt,name=winUid" json:"winUid,omitempty"`         //胜利者
	GiveIn     *bool                      `protobuf:"varint,5,opt,name=giveIn" json:"giveIn,omitempty"`         //是否是认输
}

func (x *PeakBattleLog) Reset() {
	*x = PeakBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakBattleLog) ProtoMessage() {}

func (x *PeakBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakBattleLog.ProtoReflect.Descriptor instead.
func (*PeakBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{82}
}

func (x *PeakBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *PeakBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *PeakBattleLog) GetPlayers() []*PeakBattleLogPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PeakBattleLog) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *PeakBattleLog) GetGiveIn() bool {
	if x != nil && x.GiveIn != nil {
		return *x.GiveIn
	}
	return false
}

// 战斗属性
type BattleAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType  *int32 `protobuf:"varint,1,opt,name=attrType" json:"attrType,omitempty"`   // 类型
	AttrValue *int32 `protobuf:"varint,2,opt,name=attrValue" json:"attrValue,omitempty"` // 值
}

func (x *BattleAttr) Reset() {
	*x = BattleAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleAttr) ProtoMessage() {}

func (x *BattleAttr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleAttr.ProtoReflect.Descriptor instead.
func (*BattleAttr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{83}
}

func (x *BattleAttr) GetAttrType() int32 {
	if x != nil && x.AttrType != nil {
		return *x.AttrType
	}
	return 0
}

func (x *BattleAttr) GetAttrValue() int32 {
	if x != nil && x.AttrValue != nil {
		return *x.AttrValue
	}
	return 0
}

// 战斗技能
type SoldierTechSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`               // 技能id
	Level     *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`         // 技能等级
	SkillType *int32 `protobuf:"varint,3,opt,name=skillType" json:"skillType,omitempty"` // 技能类型
}

func (x *SoldierTechSkill) Reset() {
	*x = SoldierTechSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoldierTechSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoldierTechSkill) ProtoMessage() {}

func (x *SoldierTechSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoldierTechSkill.ProtoReflect.Descriptor instead.
func (*SoldierTechSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{84}
}

func (x *SoldierTechSkill) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SoldierTechSkill) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *SoldierTechSkill) GetSkillType() int32 {
	if x != nil && x.SkillType != nil {
		return *x.SkillType
	}
	return 0
}

//guild 技能
type PlayerGuildSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId *int32  `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"`
	Level  *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *PlayerGuildSkill) Reset() {
	*x = PlayerGuildSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGuildSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGuildSkill) ProtoMessage() {}

func (x *PlayerGuildSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGuildSkill.ProtoReflect.Descriptor instead.
func (*PlayerGuildSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{85}
}

func (x *PlayerGuildSkill) GetSlotId() int32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *PlayerGuildSkill) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 战斗主将
type BattleCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commander        *Commander    `protobuf:"bytes,1,opt,name=commander" json:"commander,omitempty"`               //上阵武将
	GridId           *int32        `protobuf:"varint,2,opt,name=gridId" json:"gridId,omitempty"`                    // 站位格子
	Hp               *int32        `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`                            // 生命值(百分比)
	Armor            *int32        `protobuf:"varint,4,opt,name=armor" json:"armor,omitempty"`                      // 盾甲值(百分比)
	Attrs            []*BattleAttr `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`                       // 属性
	AssistPlayerId   *uint64       `protobuf:"varint,6,opt,name=assistPlayerId" json:"assistPlayerId,omitempty"`    // 助战玩家id
	AssistPlayerName *string       `protobuf:"bytes,7,opt,name=assistPlayerName" json:"assistPlayerName,omitempty"` // 助战玩家名字
}

func (x *BattleCommander) Reset() {
	*x = BattleCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCommander) ProtoMessage() {}

func (x *BattleCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCommander.ProtoReflect.Descriptor instead.
func (*BattleCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{86}
}

func (x *BattleCommander) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *BattleCommander) GetGridId() int32 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

func (x *BattleCommander) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleCommander) GetArmor() int32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *BattleCommander) GetAttrs() []*BattleAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *BattleCommander) GetAssistPlayerId() uint64 {
	if x != nil && x.AssistPlayerId != nil {
		return *x.AssistPlayerId
	}
	return 0
}

func (x *BattleCommander) GetAssistPlayerName() string {
	if x != nil && x.AssistPlayerName != nil {
		return *x.AssistPlayerName
	}
	return ""
}

// npc战斗主将
type BattleNpcCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                 // 上阵npc武将id
	GridId     *int32 `protobuf:"varint,2,opt,name=gridId" json:"gridId,omitempty"`         // 站位格子
	SoldierId  *int32 `protobuf:"varint,3,opt,name=soldierId" json:"soldierId,omitempty"`   // 士兵id
	SoldierNum *int32 `protobuf:"varint,4,opt,name=soldierNum" json:"soldierNum,omitempty"` // 士兵数量
	Hp         *int32 `protobuf:"varint,5,opt,name=hp" json:"hp,omitempty"`                 // 生命值(百分比)
	Skin       *int32 `protobuf:"varint,6,opt,name=skin" json:"skin,omitempty"`             // 当前皮肤
}

func (x *BattleNpcCommander) Reset() {
	*x = BattleNpcCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleNpcCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleNpcCommander) ProtoMessage() {}

func (x *BattleNpcCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleNpcCommander.ProtoReflect.Descriptor instead.
func (*BattleNpcCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{87}
}

func (x *BattleNpcCommander) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleNpcCommander) GetGridId() int32 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

func (x *BattleNpcCommander) GetSoldierId() int32 {
	if x != nil && x.SoldierId != nil {
		return *x.SoldierId
	}
	return 0
}

func (x *BattleNpcCommander) GetSoldierNum() int32 {
	if x != nil && x.SoldierNum != nil {
		return *x.SoldierNum
	}
	return 0
}

func (x *BattleNpcCommander) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleNpcCommander) GetSkin() int32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

// 战斗军师
type BattleCounsellor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counsellor *Counsellor `protobuf:"bytes,1,opt,name=counsellor" json:"counsellor,omitempty"` //上阵武将
	Assist     *bool       `protobuf:"varint,2,opt,name=assist" json:"assist,omitempty"`        //是否是助战英雄
}

func (x *BattleCounsellor) Reset() {
	*x = BattleCounsellor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCounsellor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCounsellor) ProtoMessage() {}

func (x *BattleCounsellor) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCounsellor.ProtoReflect.Descriptor instead.
func (*BattleCounsellor) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{88}
}

func (x *BattleCounsellor) GetCounsellor() *Counsellor {
	if x != nil {
		return x.Counsellor
	}
	return nil
}

func (x *BattleCounsellor) GetAssist() bool {
	if x != nil && x.Assist != nil {
		return *x.Assist
	}
	return false
}

// 战斗神兽
type BattleBeast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beast     *Beast     `protobuf:"bytes,1,opt,name=beast" json:"beast,omitempty"`         //上阵神兽
	GridId    *int32     `protobuf:"varint,2,opt,name=gridId" json:"gridId,omitempty"`      // 站位格子
	Hp        *int32     `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`              //血量
	Commander *Commander `protobuf:"bytes,4,opt,name=commander" json:"commander,omitempty"` //神兽连携的主将
	Armor     *int32     `protobuf:"varint,5,opt,name=armor" json:"armor,omitempty"`        // 盾甲值(百分比)
}

func (x *BattleBeast) Reset() {
	*x = BattleBeast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleBeast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleBeast) ProtoMessage() {}

func (x *BattleBeast) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleBeast.ProtoReflect.Descriptor instead.
func (*BattleBeast) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{89}
}

func (x *BattleBeast) GetBeast() *Beast {
	if x != nil {
		return x.Beast
	}
	return nil
}

func (x *BattleBeast) GetGridId() int32 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

func (x *BattleBeast) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleBeast) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *BattleBeast) GetArmor() int32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

// 日常Boss
type BattleDailyBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp     *uint32 `protobuf:"varint,1,opt,name=hp" json:"hp,omitempty"`         //生命值(百分比)
	Damage *uint32 `protobuf:"varint,2,opt,name=damage" json:"damage,omitempty"` //造成的伤害值
}

func (x *BattleDailyBoss) Reset() {
	*x = BattleDailyBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleDailyBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleDailyBoss) ProtoMessage() {}

func (x *BattleDailyBoss) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleDailyBoss.ProtoReflect.Descriptor instead.
func (*BattleDailyBoss) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{90}
}

func (x *BattleDailyBoss) GetHp() uint32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleDailyBoss) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

// 日常经验
type BattleDailyExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalKillNum *uint32 `protobuf:"varint,1,opt,name=normalKillNum" json:"normalKillNum,omitempty"` //普通怪击杀数量
	EliteKillNum  *uint32 `protobuf:"varint,2,opt,name=eliteKillNum" json:"eliteKillNum,omitempty"`   //精英怪击杀数量
	RoundNum      *uint32 `protobuf:"varint,3,opt,name=roundNum" json:"roundNum,omitempty"`           //击杀波数
}

func (x *BattleDailyExp) Reset() {
	*x = BattleDailyExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleDailyExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleDailyExp) ProtoMessage() {}

func (x *BattleDailyExp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleDailyExp.ProtoReflect.Descriptor instead.
func (*BattleDailyExp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{91}
}

func (x *BattleDailyExp) GetNormalKillNum() uint32 {
	if x != nil && x.NormalKillNum != nil {
		return *x.NormalKillNum
	}
	return 0
}

func (x *BattleDailyExp) GetEliteKillNum() uint32 {
	if x != nil && x.EliteKillNum != nil {
		return *x.EliteKillNum
	}
	return 0
}

func (x *BattleDailyExp) GetRoundNum() uint32 {
	if x != nil && x.RoundNum != nil {
		return *x.RoundNum
	}
	return 0
}

// 日常金币
type BattleDailyCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalKillNum *uint32 `protobuf:"varint,1,opt,name=normalKillNum" json:"normalKillNum,omitempty"` //普通怪击杀数量
	EliteKillNum  *uint32 `protobuf:"varint,2,opt,name=eliteKillNum" json:"eliteKillNum,omitempty"`   //精英怪击杀数量
	RoundNum      *uint32 `protobuf:"varint,3,opt,name=roundNum" json:"roundNum,omitempty"`           //击杀波数
	Damage        *uint64 `protobuf:"varint,4,opt,name=damage" json:"damage,omitempty"`               //造成的伤害值
}

func (x *BattleDailyCoin) Reset() {
	*x = BattleDailyCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleDailyCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleDailyCoin) ProtoMessage() {}

func (x *BattleDailyCoin) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleDailyCoin.ProtoReflect.Descriptor instead.
func (*BattleDailyCoin) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{92}
}

func (x *BattleDailyCoin) GetNormalKillNum() uint32 {
	if x != nil && x.NormalKillNum != nil {
		return *x.NormalKillNum
	}
	return 0
}

func (x *BattleDailyCoin) GetEliteKillNum() uint32 {
	if x != nil && x.EliteKillNum != nil {
		return *x.EliteKillNum
	}
	return 0
}

func (x *BattleDailyCoin) GetRoundNum() uint32 {
	if x != nil && x.RoundNum != nil {
		return *x.RoundNum
	}
	return 0
}

func (x *BattleDailyCoin) GetDamage() uint64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableType *int32  `protobuf:"varint,1,opt,name=tableType" json:"tableType,omitempty"`
	Id        *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Lv        *uint32 `protobuf:"varint,3,opt,name=lv" json:"lv,omitempty"` //无这个字段默认1级（客户端说）
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{93}
}

func (x *Skill) GetTableType() int32 {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return 0
}

func (x *Skill) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Skill) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

//战斗玩家信息 //进入战斗发送给客户端的
type BattlePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                                  //战斗id
	Name                 *string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                               //数量
	Level                *uint32               `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`                                            //等级
	Avatar               *int32                `protobuf:"varint,4,opt,name=avatar" json:"avatar,omitempty"`                                          //头像
	AvatarFrame          *int32                `protobuf:"varint,5,opt,name=avatarFrame" json:"avatarFrame,omitempty"`                                //头像框
	Msg                  *string               `protobuf:"bytes,6,opt,name=msg" json:"msg,omitempty"`                                                 //宣言
	VipLevel             *uint32               `protobuf:"varint,7,opt,name=vipLevel" json:"vipLevel,omitempty"`                                      //VIP
	Power                *uint32               `protobuf:"varint,8,opt,name=power" json:"power,omitempty"`                                            //战斗力
	GuildName            *string               `protobuf:"bytes,9,opt,name=guildName" json:"guildName,omitempty"`                                     //势力名字
	ServerId             *uint64               `protobuf:"varint,10,opt,name=serverId" json:"serverId,omitempty"`                                     //服务器id
	RealPower            *uint32               `protobuf:"varint,11,opt,name=realPower" json:"realPower,omitempty"`                                   // 上阵战力
	Model                *int32                `protobuf:"varint,12,opt,name=model" json:"model,omitempty"`                                           // 玩家形象
	FormationType        *FormationType        `protobuf:"varint,14,opt,name=formationType,enum=common.FormationType" json:"formationType,omitempty"` //布阵类型
	IsRobot              *bool                 `protobuf:"varint,15,opt,name=isRobot" json:"isRobot,omitempty"`                                       //对方是否是机器人
	CounsellorId         *int32                `protobuf:"varint,16,opt,name=counsellorId" json:"counsellorId,omitempty"`                             //上阵军师
	BattleCounsellors    []*BattleCounsellor   `protobuf:"bytes,17,rep,name=battleCounsellors" json:"battleCounsellors,omitempty"`                    //拥有的所有军师
	BattleCommanders     []*BattleCommander    `protobuf:"bytes,18,rep,name=battleCommanders" json:"battleCommanders,omitempty"`                      //主将战斗数据
	BattleNpcCommanders  []*BattleNpcCommander `protobuf:"bytes,19,rep,name=battleNpcCommanders" json:"battleNpcCommanders,omitempty"`                //npc主将战斗数据
	AttributeCoefficient *uint32               `protobuf:"varint,20,opt,name=attributeCoefficient" json:"attributeCoefficient,omitempty"`             //robot属性系数(机器人才需要取这个)
	TreasureGroup        *uint32               `protobuf:"varint,22,opt,name=treasureGroup" json:"treasureGroup,omitempty"`                           //宝物组
	TreasureFatesInfo    *TreasureFatesInfo    `protobuf:"bytes,23,opt,name=treasureFatesInfo" json:"treasureFatesInfo,omitempty"`                    //宝物缘分数据
	Treasures            []*Treasure           `protobuf:"bytes,24,rep,name=treasures" json:"treasures,omitempty"`                                    //宝物数据
	StrTalents           []*StrTalent          `protobuf:"bytes,26,rep,name=strTalents" json:"strTalents,omitempty"`                                  //计谋府数据
	Guild                []*PlayerGuildSkill   `protobuf:"bytes,27,rep,name=guild" json:"guild,omitempty"`                                            //guild技能数据
	SoldierTechs         []*SoldierTechSkill   `protobuf:"bytes,28,rep,name=soldierTechs" json:"soldierTechs,omitempty"`                              //兵营科技技能
	ExtralSkills         []*Skill              `protobuf:"bytes,29,rep,name=extralSkills" json:"extralSkills,omitempty"`                              //附加技能
	Album                *Album                `protobuf:"bytes,31,opt,name=album" json:"album,omitempty"`                                            // 图鉴
	TreasureFates        []*TreasureFate       `protobuf:"bytes,32,rep,name=treasureFates" json:"treasureFates,omitempty"`                            //宝物缘分数据
	SoldierSkill         *SoliderSkill         `protobuf:"bytes,33,opt,name=soldierSkill" json:"soldierSkill,omitempty"`                              // 士兵特性
	ProfessionSkill      *ProfessionSkill      `protobuf:"bytes,34,opt,name=professionSkill" json:"professionSkill,omitempty"`                        // 职业特性
	CommanderItemSkins   []int32               `protobuf:"varint,35,rep,name=commanderItemSkins" json:"commanderItemSkins,omitempty"`                 // 玩家拥有的主将道具皮肤
	Soldier              []*Soldier            `protobuf:"bytes,36,rep,name=soldier" json:"soldier,omitempty"`                                        // 士兵
	WuHun                []*WuHun              `protobuf:"bytes,37,rep,name=wuHun" json:"wuHun,omitempty"`                                            //武魂
	AssistSoldier        []*Soldier            `protobuf:"bytes,38,rep,name=assistSoldier" json:"assistSoldier,omitempty"`                            // 助战士兵
	AssistWuHun          []*AssistWuHun        `protobuf:"bytes,39,rep,name=assistWuHun" json:"assistWuHun,omitempty"`                                // 助战武魂
	BattleBeasts         []*BattleBeast        `protobuf:"bytes,40,rep,name=battleBeasts" json:"battleBeasts,omitempty"`                              //神兽战斗数据
	BeastTalent          *BeastTalent          `protobuf:"bytes,41,opt,name=beastTalent" json:"beastTalent,omitempty"`                                //神兽天赋数据
	MountInfo            []*MountItem          `protobuf:"bytes,42,rep,name=mountInfo" json:"mountInfo,omitempty"`                                    //坐骑数据
	AssistMount          []*AssistMount        `protobuf:"bytes,43,rep,name=assistMount" json:"assistMount,omitempty"`                                // 助战坐骑
	Biography            *Biography            `protobuf:"bytes,44,opt,name=biography" json:"biography,omitempty"`                                    // 名将录
	TreasureRefine       []*TreasureRefine     `protobuf:"bytes,45,rep,name=treasureRefine" json:"treasureRefine,omitempty"`                          // 宝物洗炼
	OnlyEquip            []*OnlyEquip          `protobuf:"bytes,46,rep,name=onlyEquip" json:"onlyEquip,omitempty"`                                    //专属装备
	AssistOnlyEquip      []*AssistOnlyEquip    `protobuf:"bytes,47,rep,name=assistOnlyEquip" json:"assistOnlyEquip,omitempty"`                        //助战专属装备
	DeputyCommander      []*Commander          `protobuf:"bytes,48,rep,name=deputyCommander" json:"deputyCommander,omitempty"`                        //副将
}

func (x *BattlePlayerInfo) Reset() {
	*x = BattlePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePlayerInfo) ProtoMessage() {}

func (x *BattlePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePlayerInfo.ProtoReflect.Descriptor instead.
func (*BattlePlayerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{94}
}

func (x *BattlePlayerInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattlePlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BattlePlayerInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BattlePlayerInfo) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *BattlePlayerInfo) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *BattlePlayerInfo) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *BattlePlayerInfo) GetVipLevel() uint32 {
	if x != nil && x.VipLevel != nil {
		return *x.VipLevel
	}
	return 0
}

func (x *BattlePlayerInfo) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *BattlePlayerInfo) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *BattlePlayerInfo) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *BattlePlayerInfo) GetRealPower() uint32 {
	if x != nil && x.RealPower != nil {
		return *x.RealPower
	}
	return 0
}

func (x *BattlePlayerInfo) GetModel() int32 {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return 0
}

func (x *BattlePlayerInfo) GetFormationType() FormationType {
	if x != nil && x.FormationType != nil {
		return *x.FormationType
	}
	return FormationType_pve
}

func (x *BattlePlayerInfo) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *BattlePlayerInfo) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *BattlePlayerInfo) GetBattleCounsellors() []*BattleCounsellor {
	if x != nil {
		return x.BattleCounsellors
	}
	return nil
}

func (x *BattlePlayerInfo) GetBattleCommanders() []*BattleCommander {
	if x != nil {
		return x.BattleCommanders
	}
	return nil
}

func (x *BattlePlayerInfo) GetBattleNpcCommanders() []*BattleNpcCommander {
	if x != nil {
		return x.BattleNpcCommanders
	}
	return nil
}

func (x *BattlePlayerInfo) GetAttributeCoefficient() uint32 {
	if x != nil && x.AttributeCoefficient != nil {
		return *x.AttributeCoefficient
	}
	return 0
}

func (x *BattlePlayerInfo) GetTreasureGroup() uint32 {
	if x != nil && x.TreasureGroup != nil {
		return *x.TreasureGroup
	}
	return 0
}

func (x *BattlePlayerInfo) GetTreasureFatesInfo() *TreasureFatesInfo {
	if x != nil {
		return x.TreasureFatesInfo
	}
	return nil
}

func (x *BattlePlayerInfo) GetTreasures() []*Treasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

func (x *BattlePlayerInfo) GetStrTalents() []*StrTalent {
	if x != nil {
		return x.StrTalents
	}
	return nil
}

func (x *BattlePlayerInfo) GetGuild() []*PlayerGuildSkill {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *BattlePlayerInfo) GetSoldierTechs() []*SoldierTechSkill {
	if x != nil {
		return x.SoldierTechs
	}
	return nil
}

func (x *BattlePlayerInfo) GetExtralSkills() []*Skill {
	if x != nil {
		return x.ExtralSkills
	}
	return nil
}

func (x *BattlePlayerInfo) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *BattlePlayerInfo) GetTreasureFates() []*TreasureFate {
	if x != nil {
		return x.TreasureFates
	}
	return nil
}

func (x *BattlePlayerInfo) GetSoldierSkill() *SoliderSkill {
	if x != nil {
		return x.SoldierSkill
	}
	return nil
}

func (x *BattlePlayerInfo) GetProfessionSkill() *ProfessionSkill {
	if x != nil {
		return x.ProfessionSkill
	}
	return nil
}

func (x *BattlePlayerInfo) GetCommanderItemSkins() []int32 {
	if x != nil {
		return x.CommanderItemSkins
	}
	return nil
}

func (x *BattlePlayerInfo) GetSoldier() []*Soldier {
	if x != nil {
		return x.Soldier
	}
	return nil
}

func (x *BattlePlayerInfo) GetWuHun() []*WuHun {
	if x != nil {
		return x.WuHun
	}
	return nil
}

func (x *BattlePlayerInfo) GetAssistSoldier() []*Soldier {
	if x != nil {
		return x.AssistSoldier
	}
	return nil
}

func (x *BattlePlayerInfo) GetAssistWuHun() []*AssistWuHun {
	if x != nil {
		return x.AssistWuHun
	}
	return nil
}

func (x *BattlePlayerInfo) GetBattleBeasts() []*BattleBeast {
	if x != nil {
		return x.BattleBeasts
	}
	return nil
}

func (x *BattlePlayerInfo) GetBeastTalent() *BeastTalent {
	if x != nil {
		return x.BeastTalent
	}
	return nil
}

func (x *BattlePlayerInfo) GetMountInfo() []*MountItem {
	if x != nil {
		return x.MountInfo
	}
	return nil
}

func (x *BattlePlayerInfo) GetAssistMount() []*AssistMount {
	if x != nil {
		return x.AssistMount
	}
	return nil
}

func (x *BattlePlayerInfo) GetBiography() *Biography {
	if x != nil {
		return x.Biography
	}
	return nil
}

func (x *BattlePlayerInfo) GetTreasureRefine() []*TreasureRefine {
	if x != nil {
		return x.TreasureRefine
	}
	return nil
}

func (x *BattlePlayerInfo) GetOnlyEquip() []*OnlyEquip {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *BattlePlayerInfo) GetAssistOnlyEquip() []*AssistOnlyEquip {
	if x != nil {
		return x.AssistOnlyEquip
	}
	return nil
}

func (x *BattlePlayerInfo) GetDeputyCommander() []*Commander {
	if x != nil {
		return x.DeputyCommander
	}
	return nil
}

type AssistWuHun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WuHun    []*WuHun `protobuf:"bytes,2,rep,name=wuHun" json:"wuHun,omitempty"`
	PlayerId *uint64  `protobuf:"varint,3,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *AssistWuHun) Reset() {
	*x = AssistWuHun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistWuHun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistWuHun) ProtoMessage() {}

func (x *AssistWuHun) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistWuHun.ProtoReflect.Descriptor instead.
func (*AssistWuHun) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{95}
}

func (x *AssistWuHun) GetWuHun() []*WuHun {
	if x != nil {
		return x.WuHun
	}
	return nil
}

func (x *AssistWuHun) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

// 助战坐骑
type AssistMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistMount *MountItem `protobuf:"bytes,1,opt,name=assistMount" json:"assistMount,omitempty"`
	PlayerId    *uint64    `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *AssistMount) Reset() {
	*x = AssistMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistMount) ProtoMessage() {}

func (x *AssistMount) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistMount.ProtoReflect.Descriptor instead.
func (*AssistMount) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{96}
}

func (x *AssistMount) GetAssistMount() *MountItem {
	if x != nil {
		return x.AssistMount
	}
	return nil
}

func (x *AssistMount) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type AssistOnlyEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyEquip *OnlyEquip `protobuf:"bytes,1,opt,name=onlyEquip" json:"onlyEquip,omitempty"`
	PlayerId  *uint64    `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *AssistOnlyEquip) Reset() {
	*x = AssistOnlyEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistOnlyEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistOnlyEquip) ProtoMessage() {}

func (x *AssistOnlyEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistOnlyEquip.ProtoReflect.Descriptor instead.
func (*AssistOnlyEquip) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{97}
}

func (x *AssistOnlyEquip) GetOnlyEquip() *OnlyEquip {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *AssistOnlyEquip) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

// 士兵特性
type SoliderSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockSoldiers []int32 `protobuf:"varint,1,rep,name=unlockSoldiers" json:"unlockSoldiers,omitempty"` // 已解锁特性的士兵
}

func (x *SoliderSkill) Reset() {
	*x = SoliderSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoliderSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoliderSkill) ProtoMessage() {}

func (x *SoliderSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoliderSkill.ProtoReflect.Descriptor instead.
func (*SoliderSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{98}
}

func (x *SoliderSkill) GetUnlockSoldiers() []int32 {
	if x != nil {
		return x.UnlockSoldiers
	}
	return nil
}

// 职业特性
type ProfessionSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels []int32 `protobuf:"varint,1,rep,name=levels" json:"levels,omitempty"` // 特性等级（共6个元素）
}

func (x *ProfessionSkill) Reset() {
	*x = ProfessionSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionSkill) ProtoMessage() {}

func (x *ProfessionSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionSkill.ProtoReflect.Descriptor instead.
func (*ProfessionSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{99}
}

func (x *ProfessionSkill) GetLevels() []int32 {
	if x != nil {
		return x.Levels
	}
	return nil
}

//战斗开始信息
type BattleStartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                  //战斗id
	TypeId     *int32              `protobuf:"varint,2,opt,name=typeId" json:"typeId,omitempty"`          //战斗类型
	StageId    *int32              `protobuf:"varint,3,opt,name=stageId" json:"stageId,omitempty"`        //关卡ID
	BeginTime  *int64              `protobuf:"varint,4,opt,name=beginTime" json:"beginTime,omitempty"`    //战斗时间
	RandomSeed *int32              `protobuf:"varint,5,opt,name=randomSeed" json:"randomSeed,omitempty"`  //随机种子
	Speed      *int32              `protobuf:"varint,6,opt,name=speed" json:"speed,omitempty"`            //播放速度
	ServerId   *uint64             `protobuf:"varint,7,opt,name=serverId" json:"serverId,omitempty"`      //服务器id
	Fighter    []*BattlePlayerInfo `protobuf:"bytes,10,rep,name=fighter" json:"fighter,omitempty"`        //参战人员数据
	Subscribes []int32             `protobuf:"varint,11,rep,name=subscribes" json:"subscribes,omitempty"` // 订阅
	//optional int32 version = 100; //版本号 等确定如何同步版本把这个字段废弃
	Ver *string `protobuf:"bytes,200,opt,name=ver" json:"ver,omitempty"` //版本号
}

func (x *BattleStartInfo) Reset() {
	*x = BattleStartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleStartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleStartInfo) ProtoMessage() {}

func (x *BattleStartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleStartInfo.ProtoReflect.Descriptor instead.
func (*BattleStartInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{100}
}

func (x *BattleStartInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleStartInfo) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *BattleStartInfo) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *BattleStartInfo) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *BattleStartInfo) GetRandomSeed() int32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *BattleStartInfo) GetSpeed() int32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *BattleStartInfo) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *BattleStartInfo) GetFighter() []*BattlePlayerInfo {
	if x != nil {
		return x.Fighter
	}
	return nil
}

func (x *BattleStartInfo) GetSubscribes() []int32 {
	if x != nil {
		return x.Subscribes
	}
	return nil
}

func (x *BattleStartInfo) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

//战斗玩家输入信息
type BattlePlayerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`   //id
	Sid *int32  `protobuf:"varint,2,opt,name=sid" json:"sid,omitempty"` //技能id
	X   *int32  `protobuf:"varint,3,opt,name=x" json:"x,omitempty"`     //x
	Y   *int32  `protobuf:"varint,4,opt,name=y" json:"y,omitempty"`     //y
}

func (x *BattlePlayerInput) Reset() {
	*x = BattlePlayerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePlayerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePlayerInput) ProtoMessage() {}

func (x *BattlePlayerInput) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePlayerInput.ProtoReflect.Descriptor instead.
func (*BattlePlayerInput) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{101}
}

func (x *BattlePlayerInput) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattlePlayerInput) GetSid() int32 {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return 0
}

func (x *BattlePlayerInput) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *BattlePlayerInput) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

//战斗帧数据
type BattleFrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameId *uint32              `protobuf:"varint,1,opt,name=frameId" json:"frameId,omitempty"` //帧id
	Input   []*BattlePlayerInput `protobuf:"bytes,2,rep,name=input" json:"input,omitempty"`      //输入
}

func (x *BattleFrameData) Reset() {
	*x = BattleFrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleFrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleFrameData) ProtoMessage() {}

func (x *BattleFrameData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleFrameData.ProtoReflect.Descriptor instead.
func (*BattleFrameData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{102}
}

func (x *BattleFrameData) GetFrameId() uint32 {
	if x != nil && x.FrameId != nil {
		return *x.FrameId
	}
	return 0
}

func (x *BattleFrameData) GetInput() []*BattlePlayerInput {
	if x != nil {
		return x.Input
	}
	return nil
}

// 战斗结束玩家数据
type BattleResultCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player []*BattleCommander `protobuf:"bytes,1,rep,name=player" json:"player,omitempty"` //主将战斗数据
	Target []*BattleCommander `protobuf:"bytes,2,rep,name=target" json:"target,omitempty"` //对方数据
}

func (x *BattleResultCommander) Reset() {
	*x = BattleResultCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleResultCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleResultCommander) ProtoMessage() {}

func (x *BattleResultCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleResultCommander.ProtoReflect.Descriptor instead.
func (*BattleResultCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{103}
}

func (x *BattleResultCommander) GetPlayer() []*BattleCommander {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *BattleResultCommander) GetTarget() []*BattleCommander {
	if x != nil {
		return x.Target
	}
	return nil
}

// 战斗结束玩家数据
type BattleResultBeast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player []*BattleBeast `protobuf:"bytes,1,rep,name=player" json:"player,omitempty"` //神兽战斗数据
	Target []*BattleBeast `protobuf:"bytes,2,rep,name=target" json:"target,omitempty"` //对方数据
}

func (x *BattleResultBeast) Reset() {
	*x = BattleResultBeast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleResultBeast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleResultBeast) ProtoMessage() {}

func (x *BattleResultBeast) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleResultBeast.ProtoReflect.Descriptor instead.
func (*BattleResultBeast) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{104}
}

func (x *BattleResultBeast) GetPlayer() []*BattleBeast {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *BattleResultBeast) GetTarget() []*BattleBeast {
	if x != nil {
		return x.Target
	}
	return nil
}

//战斗结束信息 客户端给返回
type BattleResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                        //战斗id
	Win                   *bool                  `protobuf:"varint,2,opt,name=win" json:"win,omitempty"`                                      //是否胜利
	Star                  *int32                 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`                                    //星级
	BattleTime            *uint32                `protobuf:"varint,4,opt,name=battleTime" json:"battleTime,omitempty"`                        // 战斗时间
	CommanderDieNum       *uint32                `protobuf:"varint,5,opt,name=commanderDieNum" json:"commanderDieNum,omitempty"`              //己方主将死亡数量
	TargetCommanderDieNum *uint32                `protobuf:"varint,6,opt,name=targetCommanderDieNum" json:"targetCommanderDieNum,omitempty"`  //敌方主将死亡数量
	TotalTime             *uint32                `protobuf:"varint,7,opt,name=totalTime" json:"totalTime,omitempty"`                          //战斗最长时间
	PlayerDamage          []*BattlePlayerDamage  `protobuf:"bytes,8,rep,name=playerDamage" json:"playerDamage,omitempty"`                     // 战斗伤害
	TotalDamage           *uint64                `protobuf:"varint,9,opt,name=totalDamage" json:"totalDamage,omitempty"`                      //总伤害
	Frames                []*BattleFrameData     `protobuf:"bytes,10,rep,name=frames" json:"frames,omitempty"`                                //玩家输入数据
	Commander             *BattleResultCommander `protobuf:"bytes,11,opt,name=commander" json:"commander,omitempty"`                          //武将数据
	DailyBoss             *BattleDailyBoss       `protobuf:"bytes,12,opt,name=dailyBoss" json:"dailyBoss,omitempty"`                          //日常Boss数据
	DailyExp              *BattleDailyExp        `protobuf:"bytes,13,opt,name=dailyExp" json:"dailyExp,omitempty"`                            //日常经验数据
	DailyCoin             *BattleDailyCoin       `protobuf:"bytes,14,opt,name=dailyCoin" json:"dailyCoin,omitempty"`                          //日常金币数据
	StarSlot              []uint32               `protobuf:"varint,15,rep,name=starSlot" json:"starSlot,omitempty"`                           //星级槽
	Review                *string                `protobuf:"bytes,16,opt,name=review" json:"review,omitempty"`                                //战斗复盘字符串
	BattleStat            *BattleStat            `protobuf:"bytes,17,opt,name=battleStat" json:"battleStat,omitempty"`                        // 战斗统计
	Code                  *BattleResultErrorCode `protobuf:"varint,18,opt,name=code,enum=common.BattleResultErrorCode" json:"code,omitempty"` // 错误码
	Beast                 *BattleResultBeast     `protobuf:"bytes,19,opt,name=beast" json:"beast,omitempty"`                                  //神兽数据
}

func (x *BattleResultInfo) Reset() {
	*x = BattleResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleResultInfo) ProtoMessage() {}

func (x *BattleResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleResultInfo.ProtoReflect.Descriptor instead.
func (*BattleResultInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{105}
}

func (x *BattleResultInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleResultInfo) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

func (x *BattleResultInfo) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *BattleResultInfo) GetBattleTime() uint32 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *BattleResultInfo) GetCommanderDieNum() uint32 {
	if x != nil && x.CommanderDieNum != nil {
		return *x.CommanderDieNum
	}
	return 0
}

func (x *BattleResultInfo) GetTargetCommanderDieNum() uint32 {
	if x != nil && x.TargetCommanderDieNum != nil {
		return *x.TargetCommanderDieNum
	}
	return 0
}

func (x *BattleResultInfo) GetTotalTime() uint32 {
	if x != nil && x.TotalTime != nil {
		return *x.TotalTime
	}
	return 0
}

func (x *BattleResultInfo) GetPlayerDamage() []*BattlePlayerDamage {
	if x != nil {
		return x.PlayerDamage
	}
	return nil
}

func (x *BattleResultInfo) GetTotalDamage() uint64 {
	if x != nil && x.TotalDamage != nil {
		return *x.TotalDamage
	}
	return 0
}

func (x *BattleResultInfo) GetFrames() []*BattleFrameData {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *BattleResultInfo) GetCommander() *BattleResultCommander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *BattleResultInfo) GetDailyBoss() *BattleDailyBoss {
	if x != nil {
		return x.DailyBoss
	}
	return nil
}

func (x *BattleResultInfo) GetDailyExp() *BattleDailyExp {
	if x != nil {
		return x.DailyExp
	}
	return nil
}

func (x *BattleResultInfo) GetDailyCoin() *BattleDailyCoin {
	if x != nil {
		return x.DailyCoin
	}
	return nil
}

func (x *BattleResultInfo) GetStarSlot() []uint32 {
	if x != nil {
		return x.StarSlot
	}
	return nil
}

func (x *BattleResultInfo) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

func (x *BattleResultInfo) GetBattleStat() *BattleStat {
	if x != nil {
		return x.BattleStat
	}
	return nil
}

func (x *BattleResultInfo) GetCode() BattleResultErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return BattleResultErrorCode_OK
}

func (x *BattleResultInfo) GetBeast() *BattleResultBeast {
	if x != nil {
		return x.Beast
	}
	return nil
}

// BattleSkillDamage 战斗技能伤害
type BattleSkillDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CastCount  *int32  `protobuf:"varint,2,opt,name=castCount" json:"castCount,omitempty"`
	Value      *int32  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	RealValue  *int32  `protobuf:"varint,4,opt,name=realValue" json:"realValue,omitempty"`
	Level      *uint32 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
	SlotId     *int32  `protobuf:"varint,6,opt,name=slotId" json:"slotId,omitempty"`
	Damage     *uint64 `protobuf:"varint,7,opt,name=damage" json:"damage,omitempty"`
	RealDamage *uint64 `protobuf:"varint,8,opt,name=realDamage" json:"realDamage,omitempty"`
	Heal       *uint64 `protobuf:"varint,9,opt,name=heal" json:"heal,omitempty"`
	RealHeal   *uint64 `protobuf:"varint,10,opt,name=realHeal" json:"realHeal,omitempty"`
}

func (x *BattleSkillDamage) Reset() {
	*x = BattleSkillDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleSkillDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleSkillDamage) ProtoMessage() {}

func (x *BattleSkillDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleSkillDamage.ProtoReflect.Descriptor instead.
func (*BattleSkillDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{106}
}

func (x *BattleSkillDamage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleSkillDamage) GetCastCount() int32 {
	if x != nil && x.CastCount != nil {
		return *x.CastCount
	}
	return 0
}

func (x *BattleSkillDamage) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *BattleSkillDamage) GetRealValue() int32 {
	if x != nil && x.RealValue != nil {
		return *x.RealValue
	}
	return 0
}

func (x *BattleSkillDamage) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BattleSkillDamage) GetSlotId() int32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *BattleSkillDamage) GetDamage() uint64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *BattleSkillDamage) GetRealDamage() uint64 {
	if x != nil && x.RealDamage != nil {
		return *x.RealDamage
	}
	return 0
}

func (x *BattleSkillDamage) GetHeal() uint64 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *BattleSkillDamage) GetRealHeal() uint64 {
	if x != nil && x.RealHeal != nil {
		return *x.RealHeal
	}
	return 0
}

// BattleSoldierDamage 战斗主将士兵统计
type BattleSoldierDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Damage     *uint64 `protobuf:"varint,2,opt,name=damage" json:"damage,omitempty"`
	RealDamage *uint64 `protobuf:"varint,3,opt,name=realDamage" json:"realDamage,omitempty"`
	Heal       *uint64 `protobuf:"varint,4,opt,name=heal" json:"heal,omitempty"`
	RealHeal   *uint64 `protobuf:"varint,5,opt,name=realHeal" json:"realHeal,omitempty"`
	Hurt       *uint64 `protobuf:"varint,6,opt,name=hurt" json:"hurt,omitempty"`
	RealHurt   *uint64 `protobuf:"varint,7,opt,name=realHurt" json:"realHurt,omitempty"`
}

func (x *BattleSoldierDamage) Reset() {
	*x = BattleSoldierDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleSoldierDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleSoldierDamage) ProtoMessage() {}

func (x *BattleSoldierDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleSoldierDamage.ProtoReflect.Descriptor instead.
func (*BattleSoldierDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{107}
}

func (x *BattleSoldierDamage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleSoldierDamage) GetDamage() uint64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *BattleSoldierDamage) GetRealDamage() uint64 {
	if x != nil && x.RealDamage != nil {
		return *x.RealDamage
	}
	return 0
}

func (x *BattleSoldierDamage) GetHeal() uint64 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *BattleSoldierDamage) GetRealHeal() uint64 {
	if x != nil && x.RealHeal != nil {
		return *x.RealHeal
	}
	return 0
}

func (x *BattleSoldierDamage) GetHurt() uint64 {
	if x != nil && x.Hurt != nil {
		return *x.Hurt
	}
	return 0
}

func (x *BattleSoldierDamage) GetRealHurt() uint64 {
	if x != nil && x.RealHurt != nil {
		return *x.RealHurt
	}
	return 0
}

// BattleTeamDamage 战斗部队统计
type BattleTeamDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GridId          *int32               `protobuf:"varint,1,opt,name=gridId" json:"gridId,omitempty"`
	DieTime         *int32               `protobuf:"varint,2,opt,name=dieTime" json:"dieTime,omitempty"`
	Commander       *BattleSoldierDamage `protobuf:"bytes,3,opt,name=commander" json:"commander,omitempty"`
	Soldier         *BattleSoldierDamage `protobuf:"bytes,4,opt,name=soldier" json:"soldier,omitempty"`
	CommanderSkills []*BattleSkillDamage `protobuf:"bytes,5,rep,name=commanderSkills" json:"commanderSkills,omitempty"`
}

func (x *BattleTeamDamage) Reset() {
	*x = BattleTeamDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleTeamDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleTeamDamage) ProtoMessage() {}

func (x *BattleTeamDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleTeamDamage.ProtoReflect.Descriptor instead.
func (*BattleTeamDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{108}
}

func (x *BattleTeamDamage) GetGridId() int32 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

func (x *BattleTeamDamage) GetDieTime() int32 {
	if x != nil && x.DieTime != nil {
		return *x.DieTime
	}
	return 0
}

func (x *BattleTeamDamage) GetCommander() *BattleSoldierDamage {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *BattleTeamDamage) GetSoldier() *BattleSoldierDamage {
	if x != nil {
		return x.Soldier
	}
	return nil
}

func (x *BattleTeamDamage) GetCommanderSkills() []*BattleSkillDamage {
	if x != nil {
		return x.CommanderSkills
	}
	return nil
}

// BattleCounsellorDamage 战斗军师统计
type BattleCounsellorDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Skills []*BattleSkillDamage `protobuf:"bytes,2,rep,name=skills" json:"skills,omitempty"`
}

func (x *BattleCounsellorDamage) Reset() {
	*x = BattleCounsellorDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCounsellorDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCounsellorDamage) ProtoMessage() {}

func (x *BattleCounsellorDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCounsellorDamage.ProtoReflect.Descriptor instead.
func (*BattleCounsellorDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{109}
}

func (x *BattleCounsellorDamage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleCounsellorDamage) GetSkills() []*BattleSkillDamage {
	if x != nil {
		return x.Skills
	}
	return nil
}

//战斗回放  //战斗回访时候使用的
type BattleReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *BattleStartInfo   `protobuf:"bytes,10,opt,name=info" json:"info,omitempty"`     //战斗开始信息
	Frames     []*BattleFrameData `protobuf:"bytes,11,rep,name=frames" json:"frames,omitempty"` //输入操作
	Error      *string            `protobuf:"bytes,12,opt,name=error" json:"error,omitempty"`
	ResultInfo *BattleResultInfo  `protobuf:"bytes,13,opt,name=resultInfo" json:"resultInfo,omitempty"` //战斗结束信息
	Review     *string            `protobuf:"bytes,14,opt,name=review" json:"review,omitempty"`         // 复盘
}

func (x *BattleReplay) Reset() {
	*x = BattleReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleReplay) ProtoMessage() {}

func (x *BattleReplay) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleReplay.ProtoReflect.Descriptor instead.
func (*BattleReplay) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{110}
}

func (x *BattleReplay) GetInfo() *BattleStartInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BattleReplay) GetFrames() []*BattleFrameData {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *BattleReplay) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *BattleReplay) GetResultInfo() *BattleResultInfo {
	if x != nil {
		return x.ResultInfo
	}
	return nil
}

func (x *BattleReplay) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

// BattleDamageData 战斗伤害
type BattleDamageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *uint64                 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	Hp           *uint32                 `protobuf:"varint,2,opt,name=hp" json:"hp,omitempty"`
	MaxHp        *uint32                 `protobuf:"varint,3,opt,name=maxHp" json:"maxHp,omitempty"`
	TotalDmg     *uint64                 `protobuf:"varint,4,opt,name=totalDmg" json:"totalDmg,omitempty"`
	TotalRealDmg *uint64                 `protobuf:"varint,5,opt,name=totalRealDmg" json:"totalRealDmg,omitempty"`
	Counsellor   *BattleCounsellorDamage `protobuf:"bytes,6,opt,name=counsellor" json:"counsellor,omitempty"`
	Team         []*BattleTeamDamage     `protobuf:"bytes,7,rep,name=team" json:"team,omitempty"`
}

func (x *BattleDamageData) Reset() {
	*x = BattleDamageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleDamageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleDamageData) ProtoMessage() {}

func (x *BattleDamageData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleDamageData.ProtoReflect.Descriptor instead.
func (*BattleDamageData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{111}
}

func (x *BattleDamageData) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *BattleDamageData) GetHp() uint32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleDamageData) GetMaxHp() uint32 {
	if x != nil && x.MaxHp != nil {
		return *x.MaxHp
	}
	return 0
}

func (x *BattleDamageData) GetTotalDmg() uint64 {
	if x != nil && x.TotalDmg != nil {
		return *x.TotalDmg
	}
	return 0
}

func (x *BattleDamageData) GetTotalRealDmg() uint64 {
	if x != nil && x.TotalRealDmg != nil {
		return *x.TotalRealDmg
	}
	return 0
}

func (x *BattleDamageData) GetCounsellor() *BattleCounsellorDamage {
	if x != nil {
		return x.Counsellor
	}
	return nil
}

func (x *BattleDamageData) GetTeam() []*BattleTeamDamage {
	if x != nil {
		return x.Team
	}
	return nil
}

// BattlePlayerDamage 阵营伤害
type BattlePlayerDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleCounsellors   []*BattleCounsellor   `protobuf:"bytes,1,rep,name=battleCounsellors" json:"battleCounsellors,omitempty"`     //拥有的所有军师
	BattleCommanders    []*BattleCommander    `protobuf:"bytes,2,rep,name=battleCommanders" json:"battleCommanders,omitempty"`       //主将战斗数据
	BattleNpcCommanders []*BattleNpcCommander `protobuf:"bytes,3,rep,name=battleNpcCommanders" json:"battleNpcCommanders,omitempty"` //npc主将战斗数据
	DamageData          *BattleDamageData     `protobuf:"bytes,4,opt,name=damageData" json:"damageData,omitempty"`                   // 战斗伤害
	PlayerName          *string               `protobuf:"bytes,5,opt,name=playerName" json:"playerName,omitempty"`                   // 玩家名称
	PlayerId            *uint64               `protobuf:"varint,6,opt,name=playerId" json:"playerId,omitempty"`                      //玩家id
	BattleBeasts        []*BattleBeast        `protobuf:"bytes,7,rep,name=battleBeasts" json:"battleBeasts,omitempty"`               //战斗神兽数据
}

func (x *BattlePlayerDamage) Reset() {
	*x = BattlePlayerDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePlayerDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePlayerDamage) ProtoMessage() {}

func (x *BattlePlayerDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePlayerDamage.ProtoReflect.Descriptor instead.
func (*BattlePlayerDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{112}
}

func (x *BattlePlayerDamage) GetBattleCounsellors() []*BattleCounsellor {
	if x != nil {
		return x.BattleCounsellors
	}
	return nil
}

func (x *BattlePlayerDamage) GetBattleCommanders() []*BattleCommander {
	if x != nil {
		return x.BattleCommanders
	}
	return nil
}

func (x *BattlePlayerDamage) GetBattleNpcCommanders() []*BattleNpcCommander {
	if x != nil {
		return x.BattleNpcCommanders
	}
	return nil
}

func (x *BattlePlayerDamage) GetDamageData() *BattleDamageData {
	if x != nil {
		return x.DamageData
	}
	return nil
}

func (x *BattlePlayerDamage) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *BattlePlayerDamage) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *BattlePlayerDamage) GetBattleBeasts() []*BattleBeast {
	if x != nil {
		return x.BattleBeasts
	}
	return nil
}

// BattleShareDamage 战斗统计
type BattleShareDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinId        *uint64               `protobuf:"varint,1,opt,name=winId" json:"winId,omitempty"`              //胜利方id
	StageId      *int32                `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`          //副本id
	BattleTime   *uint32               `protobuf:"varint,3,opt,name=battleTime" json:"battleTime,omitempty"`    //战斗持续时间
	PlayerDamage []*BattlePlayerDamage `protobuf:"bytes,4,rep,name=playerDamage" json:"playerDamage,omitempty"` //双方阵营伤害
}

func (x *BattleShareDamage) Reset() {
	*x = BattleShareDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleShareDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleShareDamage) ProtoMessage() {}

func (x *BattleShareDamage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleShareDamage.ProtoReflect.Descriptor instead.
func (*BattleShareDamage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{113}
}

func (x *BattleShareDamage) GetWinId() uint64 {
	if x != nil && x.WinId != nil {
		return *x.WinId
	}
	return 0
}

func (x *BattleShareDamage) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *BattleShareDamage) GetBattleTime() uint32 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *BattleShareDamage) GetPlayerDamage() []*BattlePlayerDamage {
	if x != nil {
		return x.PlayerDamage
	}
	return nil
}

// 战斗统计
type BattleStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderStats []*BattleCommanderStat `protobuf:"bytes,1,rep,name=commanderStats" json:"commanderStats,omitempty"` // 主将统计
}

func (x *BattleStat) Reset() {
	*x = BattleStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleStat) ProtoMessage() {}

func (x *BattleStat) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleStat.ProtoReflect.Descriptor instead.
func (*BattleStat) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{114}
}

func (x *BattleStat) GetCommanderStats() []*BattleCommanderStat {
	if x != nil {
		return x.CommanderStats
	}
	return nil
}

type BattleCommanderStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderId     *int32                        `protobuf:"varint,1,opt,name=commanderId" json:"commanderId,omitempty"`        // 主将id
	KillSoldiers    []*BattleCommanderKillSoldier `protobuf:"bytes,2,rep,name=killSoldiers" json:"killSoldiers,omitempty"`       // 击杀士兵
	KillTeams       []*BattleCommanderKillTeam    `protobuf:"bytes,3,rep,name=killTeams" json:"killTeams,omitempty"`             // 击杀部队
	CommanderSkills []*BattleCommanderSkill       `protobuf:"bytes,4,rep,name=commanderSkills" json:"commanderSkills,omitempty"` // 技能统计
}

func (x *BattleCommanderStat) Reset() {
	*x = BattleCommanderStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCommanderStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCommanderStat) ProtoMessage() {}

func (x *BattleCommanderStat) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCommanderStat.ProtoReflect.Descriptor instead.
func (*BattleCommanderStat) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{115}
}

func (x *BattleCommanderStat) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *BattleCommanderStat) GetKillSoldiers() []*BattleCommanderKillSoldier {
	if x != nil {
		return x.KillSoldiers
	}
	return nil
}

func (x *BattleCommanderStat) GetKillTeams() []*BattleCommanderKillTeam {
	if x != nil {
		return x.KillTeams
	}
	return nil
}

func (x *BattleCommanderStat) GetCommanderSkills() []*BattleCommanderSkill {
	if x != nil {
		return x.CommanderSkills
	}
	return nil
}

type BattleCommanderKillSoldier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoldierId *int32  `protobuf:"varint,1,opt,name=soldierId" json:"soldierId,omitempty"` // 士兵id
	KillCount *uint32 `protobuf:"varint,2,opt,name=killCount" json:"killCount,omitempty"` // 击杀该士兵数量
}

func (x *BattleCommanderKillSoldier) Reset() {
	*x = BattleCommanderKillSoldier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCommanderKillSoldier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCommanderKillSoldier) ProtoMessage() {}

func (x *BattleCommanderKillSoldier) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCommanderKillSoldier.ProtoReflect.Descriptor instead.
func (*BattleCommanderKillSoldier) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{116}
}

func (x *BattleCommanderKillSoldier) GetSoldierId() int32 {
	if x != nil && x.SoldierId != nil {
		return *x.SoldierId
	}
	return 0
}

func (x *BattleCommanderKillSoldier) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

type BattleCommanderKillTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoldierId   *int32  `protobuf:"varint,1,opt,name=soldierId" json:"soldierId,omitempty"`     // 士兵id
	CommanderId *int32  `protobuf:"varint,2,opt,name=commanderId" json:"commanderId,omitempty"` // 主将id
	KillCount   *uint32 `protobuf:"varint,3,opt,name=killCount" json:"killCount,omitempty"`     // 击杀该部队数量
}

func (x *BattleCommanderKillTeam) Reset() {
	*x = BattleCommanderKillTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCommanderKillTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCommanderKillTeam) ProtoMessage() {}

func (x *BattleCommanderKillTeam) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCommanderKillTeam.ProtoReflect.Descriptor instead.
func (*BattleCommanderKillTeam) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{117}
}

func (x *BattleCommanderKillTeam) GetSoldierId() int32 {
	if x != nil && x.SoldierId != nil {
		return *x.SoldierId
	}
	return 0
}

func (x *BattleCommanderKillTeam) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *BattleCommanderKillTeam) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

type BattleCommanderSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId      *int32  `protobuf:"varint,1,opt,name=skillId" json:"skillId,omitempty"`           // 主将天赋技能id
	ReleaseCount *uint32 `protobuf:"varint,2,opt,name=releaseCount" json:"releaseCount,omitempty"` // 释放次数
}

func (x *BattleCommanderSkill) Reset() {
	*x = BattleCommanderSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCommanderSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCommanderSkill) ProtoMessage() {}

func (x *BattleCommanderSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCommanderSkill.ProtoReflect.Descriptor instead.
func (*BattleCommanderSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{118}
}

func (x *BattleCommanderSkill) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *BattleCommanderSkill) GetReleaseCount() uint32 {
	if x != nil && x.ReleaseCount != nil {
		return *x.ReleaseCount
	}
	return 0
}

type SlayCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     *int32     `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`        // 削弱等级
	Hp        *int32     `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`              // hp百分比（0-100）
	Commander *Commander `protobuf:"bytes,4,opt,name=commander" json:"commander,omitempty"` // 主将
}

func (x *SlayCommander) Reset() {
	*x = SlayCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayCommander) ProtoMessage() {}

func (x *SlayCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayCommander.ProtoReflect.Descriptor instead.
func (*SlayCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{119}
}

func (x *SlayCommander) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *SlayCommander) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *SlayCommander) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

type SlayCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PowerId    *int32  `protobuf:"varint,2,opt,name=powerId" json:"powerId,omitempty"`       // 所属势力
	TaxPer     *int32  `protobuf:"varint,5,opt,name=taxPer" json:"taxPer,omitempty"`         // 税收加成百分比(默认100)
	FightPower *uint32 `protobuf:"varint,6,opt,name=fightPower" json:"fightPower,omitempty"` // 战斗力
}

func (x *SlayCity) Reset() {
	*x = SlayCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayCity) ProtoMessage() {}

func (x *SlayCity) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayCity.ProtoReflect.Descriptor instead.
func (*SlayCity) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{120}
}

func (x *SlayCity) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SlayCity) GetPowerId() int32 {
	if x != nil && x.PowerId != nil {
		return *x.PowerId
	}
	return 0
}

func (x *SlayCity) GetTaxPer() int32 {
	if x != nil && x.TaxPer != nil {
		return *x.TaxPer
	}
	return 0
}

func (x *SlayCity) GetFightPower() uint32 {
	if x != nil && x.FightPower != nil {
		return *x.FightPower
	}
	return 0
}

// 玩家武将数据
type SlayPlayerCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`             // commander id
	Strength *int32 `protobuf:"varint,2,opt,name=strength" json:"strength,omitempty"` // 行动力(玩家有用)
	Hp       *int32 `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`             // hp百分比（0-100）
}

func (x *SlayPlayerCommander) Reset() {
	*x = SlayPlayerCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayPlayerCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayPlayerCommander) ProtoMessage() {}

func (x *SlayPlayerCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayPlayerCommander.ProtoReflect.Descriptor instead.
func (*SlayPlayerCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{121}
}

func (x *SlayPlayerCommander) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SlayPlayerCommander) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *SlayPlayerCommander) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

// 势力
type SlayPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Gold *int32 `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`
}

func (x *SlayPower) Reset() {
	*x = SlayPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayPower) ProtoMessage() {}

func (x *SlayPower) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayPower.ProtoReflect.Descriptor instead.
func (*SlayPower) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{122}
}

func (x *SlayPower) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SlayPower) GetGold() int32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

// 城池攻打
type SlayAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackCityId *int32 `protobuf:"varint,1,opt,name=attackCityId" json:"attackCityId,omitempty"` // 进攻城池
	DefendCityId *int32 `protobuf:"varint,2,opt,name=defendCityId" json:"defendCityId,omitempty"` // 防守城池
}

func (x *SlayAttack) Reset() {
	*x = SlayAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayAttack) ProtoMessage() {}

func (x *SlayAttack) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayAttack.ProtoReflect.Descriptor instead.
func (*SlayAttack) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{123}
}

func (x *SlayAttack) GetAttackCityId() int32 {
	if x != nil && x.AttackCityId != nil {
		return *x.AttackCityId
	}
	return 0
}

func (x *SlayAttack) GetDefendCityId() int32 {
	if x != nil && x.DefendCityId != nil {
		return *x.DefendCityId
	}
	return 0
}

// 锦囊购买
type SlaySilkBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SilkId *int32 `protobuf:"varint,1,opt,name=silkId" json:"silkId,omitempty"` // 锦囊id
	Bought *bool  `protobuf:"varint,2,opt,name=bought" json:"bought,omitempty"` // 买过为true
}

func (x *SlaySilkBuy) Reset() {
	*x = SlaySilkBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaySilkBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaySilkBuy) ProtoMessage() {}

func (x *SlaySilkBuy) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaySilkBuy.ProtoReflect.Descriptor instead.
func (*SlaySilkBuy) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{124}
}

func (x *SlaySilkBuy) GetSilkId() int32 {
	if x != nil && x.SilkId != nil {
		return *x.SilkId
	}
	return 0
}

func (x *SlaySilkBuy) GetBought() bool {
	if x != nil && x.Bought != nil {
		return *x.Bought
	}
	return false
}

// 锦囊
type SilkBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []int32 `protobuf:"varint,1,rep,name=items" json:"items,omitempty"` // 所有锦囊
}

func (x *SilkBag) Reset() {
	*x = SilkBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SilkBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SilkBag) ProtoMessage() {}

func (x *SilkBag) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SilkBag.ProtoReflect.Descriptor instead.
func (*SilkBag) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{125}
}

func (x *SilkBag) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

// 世界事件
type SlayEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *int32 `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"` // slayWorldEvent 表格id
	CityId  *int32 `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`   // 选择的城池id
	PowerId *int32 `protobuf:"varint,3,opt,name=powerId" json:"powerId,omitempty"` // 选择的势力
}

func (x *SlayEvent) Reset() {
	*x = SlayEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayEvent) ProtoMessage() {}

func (x *SlayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayEvent.ProtoReflect.Descriptor instead.
func (*SlayEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{126}
}

func (x *SlayEvent) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *SlayEvent) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *SlayEvent) GetPowerId() int32 {
	if x != nil && x.PowerId != nil {
		return *x.PowerId
	}
	return 0
}

// 1、actionPower攻打了defendPower（0为中立，999为玩家）的city
// 2、actionPower的city扩张了teamNum队level的部队
// 3、actionPower的city将teamNum队部队升级到了level
type SlayFightReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ         *SlayFightReportType `protobuf:"varint,1,opt,name=typ,enum=common.SlayFightReportType" json:"typ,omitempty"`
	ActionPower *int32               `protobuf:"varint,2,opt,name=actionPower" json:"actionPower,omitempty"` // 行动势力id
	DefendPower *int32               `protobuf:"varint,3,opt,name=defendPower" json:"defendPower,omitempty"` // 防守势力id
	City        *int32               `protobuf:"varint,4,opt,name=city" json:"city,omitempty"`               // 城池id
	TeamNum     *int32               `protobuf:"varint,5,opt,name=teamNum" json:"teamNum,omitempty"`         // 多少队
	Level       *int32               `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`             // 等级
}

func (x *SlayFightReport) Reset() {
	*x = SlayFightReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayFightReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayFightReport) ProtoMessage() {}

func (x *SlayFightReport) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayFightReport.ProtoReflect.Descriptor instead.
func (*SlayFightReport) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{127}
}

func (x *SlayFightReport) GetTyp() SlayFightReportType {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return SlayFightReportType_AttackPowerSuccess
}

func (x *SlayFightReport) GetActionPower() int32 {
	if x != nil && x.ActionPower != nil {
		return *x.ActionPower
	}
	return 0
}

func (x *SlayFightReport) GetDefendPower() int32 {
	if x != nil && x.DefendPower != nil {
		return *x.DefendPower
	}
	return 0
}

func (x *SlayFightReport) GetCity() int32 {
	if x != nil && x.City != nil {
		return *x.City
	}
	return 0
}

func (x *SlayFightReport) GetTeamNum() int32 {
	if x != nil && x.TeamNum != nil {
		return *x.TeamNum
	}
	return 0
}

func (x *SlayFightReport) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 每回合战报
type SlayRoundReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round   *int32             `protobuf:"varint,1,opt,name=round" json:"round,omitempty"` // 回合数
	Reports []*SlayFightReport `protobuf:"bytes,2,rep,name=reports" json:"reports,omitempty"`
}

func (x *SlayRoundReport) Reset() {
	*x = SlayRoundReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayRoundReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayRoundReport) ProtoMessage() {}

func (x *SlayRoundReport) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayRoundReport.ProtoReflect.Descriptor instead.
func (*SlayRoundReport) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{128}
}

func (x *SlayRoundReport) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *SlayRoundReport) GetReports() []*SlayFightReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

//--------------------------------------------------------------------------------------------------生涯
// 任务单元
type TaskCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Progress *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
}

func (x *TaskCell) Reset() {
	*x = TaskCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCell) ProtoMessage() {}

func (x *TaskCell) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCell.ProtoReflect.Descriptor instead.
func (*TaskCell) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{129}
}

func (x *TaskCell) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TaskCell) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type DailyBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossDatas   []*DailyBossData `protobuf:"bytes,1,rep,name=bossDatas" json:"bossDatas,omitempty"`
	ActivityAdd *uint32          `protobuf:"varint,2,opt,name=activityAdd" json:"activityAdd,omitempty"` // 活动加成
}

func (x *DailyBoss) Reset() {
	*x = DailyBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBoss) ProtoMessage() {}

func (x *DailyBoss) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBoss.ProtoReflect.Descriptor instead.
func (*DailyBoss) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{130}
}

func (x *DailyBoss) GetBossDatas() []*DailyBossData {
	if x != nil {
		return x.BossDatas
	}
	return nil
}

func (x *DailyBoss) GetActivityAdd() uint32 {
	if x != nil && x.ActivityAdd != nil {
		return *x.ActivityAdd
	}
	return 0
}

type DailyBossData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId                 *int32                `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	FirstKillAwards        []bool                `protobuf:"varint,2,rep,name=firstKillAwards" json:"firstKillAwards,omitempty"`               // 首杀奖励领取记录
	ChallengedTime         *uint32               `protobuf:"varint,3,opt,name=challengedTime" json:"challengedTime,omitempty"`                 // 今日已经挑战过的次数
	BestLevel              *int32                `protobuf:"varint,4,opt,name=bestLevel" json:"bestLevel,omitempty"`                           // 通关最高难度
	BestTime               *uint32               `protobuf:"varint,5,opt,name=bestTime" json:"bestTime,omitempty"`                             // 通关最短用时
	UnlockLevel            *int32                `protobuf:"varint,6,opt,name=unlockLevel" json:"unlockLevel,omitempty"`                       // 解锁难度
	BestDamage             *uint32               `protobuf:"varint,7,opt,name=bestDamage" json:"bestDamage,omitempty"`                         // 历史最高伤害
	LevelDatas             []*DailyBossLevelData `protobuf:"bytes,8,rep,name=levelDatas" json:"levelDatas,omitempty"`                          // 关卡数据
	TodayAddChallengeTimes *uint32               `protobuf:"varint,9,opt,name=todayAddChallengeTimes" json:"todayAddChallengeTimes,omitempty"` // 今日增加挑战次数
}

func (x *DailyBossData) Reset() {
	*x = DailyBossData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBossData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBossData) ProtoMessage() {}

func (x *DailyBossData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBossData.ProtoReflect.Descriptor instead.
func (*DailyBossData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{131}
}

func (x *DailyBossData) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

func (x *DailyBossData) GetFirstKillAwards() []bool {
	if x != nil {
		return x.FirstKillAwards
	}
	return nil
}

func (x *DailyBossData) GetChallengedTime() uint32 {
	if x != nil && x.ChallengedTime != nil {
		return *x.ChallengedTime
	}
	return 0
}

func (x *DailyBossData) GetBestLevel() int32 {
	if x != nil && x.BestLevel != nil {
		return *x.BestLevel
	}
	return 0
}

func (x *DailyBossData) GetBestTime() uint32 {
	if x != nil && x.BestTime != nil {
		return *x.BestTime
	}
	return 0
}

func (x *DailyBossData) GetUnlockLevel() int32 {
	if x != nil && x.UnlockLevel != nil {
		return *x.UnlockLevel
	}
	return 0
}

func (x *DailyBossData) GetBestDamage() uint32 {
	if x != nil && x.BestDamage != nil {
		return *x.BestDamage
	}
	return 0
}

func (x *DailyBossData) GetLevelDatas() []*DailyBossLevelData {
	if x != nil {
		return x.LevelDatas
	}
	return nil
}

func (x *DailyBossData) GetTodayAddChallengeTimes() uint32 {
	if x != nil && x.TodayAddChallengeTimes != nil {
		return *x.TodayAddChallengeTimes
	}
	return 0
}

type DailyBossLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      *int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`           // 关卡
	BestDamage *uint32 `protobuf:"varint,2,opt,name=bestDamage" json:"bestDamage,omitempty"` // 最高伤害
}

func (x *DailyBossLevelData) Reset() {
	*x = DailyBossLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBossLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBossLevelData) ProtoMessage() {}

func (x *DailyBossLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBossLevelData.ProtoReflect.Descriptor instead.
func (*DailyBossLevelData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{132}
}

func (x *DailyBossLevelData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *DailyBossLevelData) GetBestDamage() uint32 {
	if x != nil && x.BestDamage != nil {
		return *x.BestDamage
	}
	return 0
}

type DailyExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengedTime       *uint32 `protobuf:"varint,1,opt,name=challengedTime" json:"challengedTime,omitempty"`             //今日已挑战次数
	DayKillNum           *uint32 `protobuf:"varint,2,opt,name=dayKillNum" json:"dayKillNum,omitempty"`                     //今日累计击杀数
	WeekKillNum          *uint32 `protobuf:"varint,3,opt,name=weekKillNum" json:"weekKillNum,omitempty"`                   //本周累计击杀数
	BestKillNum          *uint32 `protobuf:"varint,4,opt,name=bestKillNum" json:"bestKillNum,omitempty"`                   //历史最高击杀数
	LastChallengePower   *uint32 `protobuf:"varint,5,opt,name=lastChallengePower" json:"lastChallengePower,omitempty"`     //上次挑战时的战斗力
	DayAwardTakenRecords []int32 `protobuf:"varint,7,rep,name=dayAwardTakenRecords" json:"dayAwardTakenRecords,omitempty"` //今日累计奖励领取记录
	BestOutputNum        *uint32 `protobuf:"varint,8,opt,name=bestOutputNum" json:"bestOutputNum,omitempty"`               //历史最高产出
	BestOutputPower      *uint32 `protobuf:"varint,9,opt,name=bestOutputPower" json:"bestOutputPower,omitempty"`           //历史最高产出时的战斗力
	DayAwardMaxLevel     *uint32 `protobuf:"varint,10,opt,name=dayAwardMaxLevel" json:"dayAwardMaxLevel,omitempty"`        // 今日可领奖最高等级
	BestInitOutput       *uint32 `protobuf:"varint,11,opt,name=bestInitOutput" json:"bestInitOutput,omitempty"`            // 历史最高初始产出（不含任何加成）
	ActivityAdd          *uint32 `protobuf:"varint,12,opt,name=activityAdd" json:"activityAdd,omitempty"`                  // 活动加成
}

func (x *DailyExp) Reset() {
	*x = DailyExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyExp) ProtoMessage() {}

func (x *DailyExp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyExp.ProtoReflect.Descriptor instead.
func (*DailyExp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{133}
}

func (x *DailyExp) GetChallengedTime() uint32 {
	if x != nil && x.ChallengedTime != nil {
		return *x.ChallengedTime
	}
	return 0
}

func (x *DailyExp) GetDayKillNum() uint32 {
	if x != nil && x.DayKillNum != nil {
		return *x.DayKillNum
	}
	return 0
}

func (x *DailyExp) GetWeekKillNum() uint32 {
	if x != nil && x.WeekKillNum != nil {
		return *x.WeekKillNum
	}
	return 0
}

func (x *DailyExp) GetBestKillNum() uint32 {
	if x != nil && x.BestKillNum != nil {
		return *x.BestKillNum
	}
	return 0
}

func (x *DailyExp) GetLastChallengePower() uint32 {
	if x != nil && x.LastChallengePower != nil {
		return *x.LastChallengePower
	}
	return 0
}

func (x *DailyExp) GetDayAwardTakenRecords() []int32 {
	if x != nil {
		return x.DayAwardTakenRecords
	}
	return nil
}

func (x *DailyExp) GetBestOutputNum() uint32 {
	if x != nil && x.BestOutputNum != nil {
		return *x.BestOutputNum
	}
	return 0
}

func (x *DailyExp) GetBestOutputPower() uint32 {
	if x != nil && x.BestOutputPower != nil {
		return *x.BestOutputPower
	}
	return 0
}

func (x *DailyExp) GetDayAwardMaxLevel() uint32 {
	if x != nil && x.DayAwardMaxLevel != nil {
		return *x.DayAwardMaxLevel
	}
	return 0
}

func (x *DailyExp) GetBestInitOutput() uint32 {
	if x != nil && x.BestInitOutput != nil {
		return *x.BestInitOutput
	}
	return 0
}

func (x *DailyExp) GetActivityAdd() uint32 {
	if x != nil && x.ActivityAdd != nil {
		return *x.ActivityAdd
	}
	return 0
}

type DailyCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengedTime       *uint32 `protobuf:"varint,1,opt,name=challengedTime" json:"challengedTime,omitempty"`             //今日已挑战次数
	DayDamage            *uint64 `protobuf:"varint,2,opt,name=dayDamage" json:"dayDamage,omitempty"`                       //今日累计伤害
	WeekDamage           *uint64 `protobuf:"varint,3,opt,name=weekDamage" json:"weekDamage,omitempty"`                     //本周累计伤害
	BestDamage           *uint64 `protobuf:"varint,4,opt,name=bestDamage" json:"bestDamage,omitempty"`                     //历史最高伤害
	LastChallengePower   *uint32 `protobuf:"varint,5,opt,name=lastChallengePower" json:"lastChallengePower,omitempty"`     //上次挑战时的战斗力
	DayAwardTakenRecords []int32 `protobuf:"varint,7,rep,name=dayAwardTakenRecords" json:"dayAwardTakenRecords,omitempty"` //今日累计奖励领取记录
	BestOutputNum        *uint32 `protobuf:"varint,8,opt,name=bestOutputNum" json:"bestOutputNum,omitempty"`               //历史最高产出
	BestOutputPower      *uint32 `protobuf:"varint,9,opt,name=bestOutputPower" json:"bestOutputPower,omitempty"`           //历史最高产出时的战斗力
	BestKillNum          *uint32 `protobuf:"varint,10,opt,name=bestKillNum" json:"bestKillNum,omitempty"`                  //历史最高击杀数
	DayAwardMaxLevel     *uint32 `protobuf:"varint,11,opt,name=dayAwardMaxLevel" json:"dayAwardMaxLevel,omitempty"`        // 今日可领奖最高等级
	BestInitOutput       *uint32 `protobuf:"varint,12,opt,name=bestInitOutput" json:"bestInitOutput,omitempty"`            // 历史最高初始产出（不含任何加成）
	ActivityAdd          *uint32 `protobuf:"varint,13,opt,name=activityAdd" json:"activityAdd,omitempty"`                  // 活动加成
}

func (x *DailyCoin) Reset() {
	*x = DailyCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCoin) ProtoMessage() {}

func (x *DailyCoin) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCoin.ProtoReflect.Descriptor instead.
func (*DailyCoin) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{134}
}

func (x *DailyCoin) GetChallengedTime() uint32 {
	if x != nil && x.ChallengedTime != nil {
		return *x.ChallengedTime
	}
	return 0
}

func (x *DailyCoin) GetDayDamage() uint64 {
	if x != nil && x.DayDamage != nil {
		return *x.DayDamage
	}
	return 0
}

func (x *DailyCoin) GetWeekDamage() uint64 {
	if x != nil && x.WeekDamage != nil {
		return *x.WeekDamage
	}
	return 0
}

func (x *DailyCoin) GetBestDamage() uint64 {
	if x != nil && x.BestDamage != nil {
		return *x.BestDamage
	}
	return 0
}

func (x *DailyCoin) GetLastChallengePower() uint32 {
	if x != nil && x.LastChallengePower != nil {
		return *x.LastChallengePower
	}
	return 0
}

func (x *DailyCoin) GetDayAwardTakenRecords() []int32 {
	if x != nil {
		return x.DayAwardTakenRecords
	}
	return nil
}

func (x *DailyCoin) GetBestOutputNum() uint32 {
	if x != nil && x.BestOutputNum != nil {
		return *x.BestOutputNum
	}
	return 0
}

func (x *DailyCoin) GetBestOutputPower() uint32 {
	if x != nil && x.BestOutputPower != nil {
		return *x.BestOutputPower
	}
	return 0
}

func (x *DailyCoin) GetBestKillNum() uint32 {
	if x != nil && x.BestKillNum != nil {
		return *x.BestKillNum
	}
	return 0
}

func (x *DailyCoin) GetDayAwardMaxLevel() uint32 {
	if x != nil && x.DayAwardMaxLevel != nil {
		return *x.DayAwardMaxLevel
	}
	return 0
}

func (x *DailyCoin) GetBestInitOutput() uint32 {
	if x != nil && x.BestInitOutput != nil {
		return *x.BestInitOutput
	}
	return 0
}

func (x *DailyCoin) GetActivityAdd() uint32 {
	if x != nil && x.ActivityAdd != nil {
		return *x.ActivityAdd
	}
	return 0
}

type StrMansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talents []*StrTalent `protobuf:"bytes,1,rep,name=talents" json:"talents,omitempty"`
	Power   *uint32      `protobuf:"varint,2,opt,name=power" json:"power,omitempty"` // 太学总战斗力
}

func (x *StrMansion) Reset() {
	*x = StrMansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrMansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrMansion) ProtoMessage() {}

func (x *StrMansion) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrMansion.ProtoReflect.Descriptor instead.
func (*StrMansion) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{135}
}

func (x *StrMansion) GetTalents() []*StrTalent {
	if x != nil {
		return x.Talents
	}
	return nil
}

func (x *StrMansion) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

type StrTalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *StrTalent) Reset() {
	*x = StrTalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrTalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrTalent) ProtoMessage() {}

func (x *StrTalent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrTalent.ProtoReflect.Descriptor instead.
func (*StrTalent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{136}
}

func (x *StrTalent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StrTalent) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PrivilegeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peerage             *int32               `protobuf:"varint,1,opt,name=peerage" json:"peerage,omitempty"`                         //爵位
	AbilityList         []*PrivilegeAbility  `protobuf:"bytes,2,rep,name=abilityList" json:"abilityList,omitempty"`                  //能力列表
	EffectList          []*PrivilegeEffect   `protobuf:"bytes,3,rep,name=effectList" json:"effectList,omitempty"`                    //效果列表
	Shop                []*PrivilegeShopItem `protobuf:"bytes,4,rep,name=shop" json:"shop,omitempty"`                                //特权商店
	IsPrivilegeWagesGet *bool                `protobuf:"varint,5,opt,name=isPrivilegeWagesGet" json:"isPrivilegeWagesGet,omitempty"` //每日特权俸禄是否领取
}

func (x *PrivilegeData) Reset() {
	*x = PrivilegeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeData) ProtoMessage() {}

func (x *PrivilegeData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeData.ProtoReflect.Descriptor instead.
func (*PrivilegeData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{137}
}

func (x *PrivilegeData) GetPeerage() int32 {
	if x != nil && x.Peerage != nil {
		return *x.Peerage
	}
	return 0
}

func (x *PrivilegeData) GetAbilityList() []*PrivilegeAbility {
	if x != nil {
		return x.AbilityList
	}
	return nil
}

func (x *PrivilegeData) GetEffectList() []*PrivilegeEffect {
	if x != nil {
		return x.EffectList
	}
	return nil
}

func (x *PrivilegeData) GetShop() []*PrivilegeShopItem {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *PrivilegeData) GetIsPrivilegeWagesGet() bool {
	if x != nil && x.IsPrivilegeWagesGet != nil {
		return *x.IsPrivilegeWagesGet
	}
	return false
}

type PrivilegeAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` //等级
}

func (x *PrivilegeAbility) Reset() {
	*x = PrivilegeAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeAbility) ProtoMessage() {}

func (x *PrivilegeAbility) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeAbility.ProtoReflect.Descriptor instead.
func (*PrivilegeAbility) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{138}
}

func (x *PrivilegeAbility) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PrivilegeAbility) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PrivilegeEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` //等级
}

func (x *PrivilegeEffect) Reset() {
	*x = PrivilegeEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeEffect) ProtoMessage() {}

func (x *PrivilegeEffect) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeEffect.ProtoReflect.Descriptor instead.
func (*PrivilegeEffect) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{139}
}

func (x *PrivilegeEffect) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PrivilegeEffect) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PrivilegeShopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsBuy *bool  `protobuf:"varint,2,opt,name=isBuy" json:"isBuy,omitempty"` //是否已购买
}

func (x *PrivilegeShopItem) Reset() {
	*x = PrivilegeShopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeShopItem) ProtoMessage() {}

func (x *PrivilegeShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeShopItem.ProtoReflect.Descriptor instead.
func (*PrivilegeShopItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{140}
}

func (x *PrivilegeShopItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PrivilegeShopItem) GetIsBuy() bool {
	if x != nil && x.IsBuy != nil {
		return *x.IsBuy
	}
	return false
}

type VipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VipLevel       *uint32 `protobuf:"varint,1,opt,name=vipLevel" json:"vipLevel,omitempty"`
	VipExp         *uint32 `protobuf:"varint,2,opt,name=vipExp" json:"vipExp,omitempty"`
	GiftBuyRecord  []int32 `protobuf:"varint,3,rep,name=giftBuyRecord" json:"giftBuyRecord,omitempty"`
	HideVipSystems []int32 `protobuf:"varint,4,rep,name=hideVipSystems" json:"hideVipSystems,omitempty"`
}

func (x *VipData) Reset() {
	*x = VipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipData) ProtoMessage() {}

func (x *VipData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipData.ProtoReflect.Descriptor instead.
func (*VipData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{141}
}

func (x *VipData) GetVipLevel() uint32 {
	if x != nil && x.VipLevel != nil {
		return *x.VipLevel
	}
	return 0
}

func (x *VipData) GetVipExp() uint32 {
	if x != nil && x.VipExp != nil {
		return *x.VipExp
	}
	return 0
}

func (x *VipData) GetGiftBuyRecord() []int32 {
	if x != nil {
		return x.GiftBuyRecord
	}
	return nil
}

func (x *VipData) GetHideVipSystems() []int32 {
	if x != nil {
		return x.HideVipSystems
	}
	return nil
}

type HandBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedPageIds []int32          `protobuf:"varint,1,rep,name=finishedPageIds" json:"finishedPageIds,omitempty"`
	Quests          []*HandBookQuest `protobuf:"bytes,2,rep,name=quests" json:"quests,omitempty"`
}

func (x *HandBook) Reset() {
	*x = HandBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBook) ProtoMessage() {}

func (x *HandBook) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBook.ProtoReflect.Descriptor instead.
func (*HandBook) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{142}
}

func (x *HandBook) GetFinishedPageIds() []int32 {
	if x != nil {
		return x.FinishedPageIds
	}
	return nil
}

func (x *HandBook) GetQuests() []*HandBookQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type HandBookQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Progress *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Finish   *bool   `protobuf:"varint,3,opt,name=finish" json:"finish,omitempty"`
}

func (x *HandBookQuest) Reset() {
	*x = HandBookQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandBookQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBookQuest) ProtoMessage() {}

func (x *HandBookQuest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBookQuest.ProtoReflect.Descriptor instead.
func (*HandBookQuest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{143}
}

func (x *HandBookQuest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *HandBookQuest) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *HandBookQuest) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return false
}

//单条问卷信息
type QuestionnaireInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                                   //问卷id
	Type       *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`                               //问卷类型
	Content    *string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`                          //问卷内容(url)
	Remark     *string `protobuf:"bytes,4,opt,name=remark" json:"remark,omitempty"`                            //备注
	StartTime  *uint32 `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`    //开始时间
	FinishTime *uint32 `protobuf:"varint,6,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"` //结束时间
	MinLevel   *uint32 `protobuf:"varint,7,opt,name=min_level,json=minLevel" json:"min_level,omitempty"`       //最小等级
	MaxLevel   *uint32 `protobuf:"varint,8,opt,name=max_level,json=maxLevel" json:"max_level,omitempty"`       //最高等级
	MinVip     *uint32 `protobuf:"varint,9,opt,name=min_vip,json=minVip" json:"min_vip,omitempty"`             //最小vip
	MaxVip     *uint32 `protobuf:"varint,10,opt,name=max_vip,json=maxVip" json:"max_vip,omitempty"`            //最大vip
	CreateTm   *uint32 `protobuf:"varint,11,opt,name=createTm" json:"createTm,omitempty"`                      //创建时间
	Items      []*Item `protobuf:"bytes,12,rep,name=items" json:"items,omitempty"`                             //物品
}

func (x *QuestionnaireInfo) Reset() {
	*x = QuestionnaireInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireInfo) ProtoMessage() {}

func (x *QuestionnaireInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireInfo.ProtoReflect.Descriptor instead.
func (*QuestionnaireInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{144}
}

func (x *QuestionnaireInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *QuestionnaireInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *QuestionnaireInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *QuestionnaireInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *QuestionnaireInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *QuestionnaireInfo) GetFinishTime() uint32 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *QuestionnaireInfo) GetMinLevel() uint32 {
	if x != nil && x.MinLevel != nil {
		return *x.MinLevel
	}
	return 0
}

func (x *QuestionnaireInfo) GetMaxLevel() uint32 {
	if x != nil && x.MaxLevel != nil {
		return *x.MaxLevel
	}
	return 0
}

func (x *QuestionnaireInfo) GetMinVip() uint32 {
	if x != nil && x.MinVip != nil {
		return *x.MinVip
	}
	return 0
}

func (x *QuestionnaireInfo) GetMaxVip() uint32 {
	if x != nil && x.MaxVip != nil {
		return *x.MaxVip
	}
	return 0
}

func (x *QuestionnaireInfo) GetCreateTm() uint32 {
	if x != nil && x.CreateTm != nil {
		return *x.CreateTm
	}
	return 0
}

func (x *QuestionnaireInfo) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// 沙盘关卡
type DramaStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId *int32        `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"` // 关卡id
	BuildId *int32        `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"` // 建筑id
	Passed  *bool         `protobuf:"varint,3,opt,name=passed" json:"passed,omitempty"`   // true 为通关
	Skills  []*DramaSkill `protobuf:"bytes,4,rep,name=skills" json:"skills,omitempty"`    // buff
	Shop    *DramaShop    `protobuf:"bytes,5,opt,name=shop" json:"shop,omitempty"`        // 神秘商人
	Box     *DramaBox     `protobuf:"bytes,6,opt,name=box" json:"box,omitempty"`          // 宝箱
}

func (x *DramaStage) Reset() {
	*x = DramaStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaStage) ProtoMessage() {}

func (x *DramaStage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaStage.ProtoReflect.Descriptor instead.
func (*DramaStage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{145}
}

func (x *DramaStage) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *DramaStage) GetBuildId() int32 {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return 0
}

func (x *DramaStage) GetPassed() bool {
	if x != nil && x.Passed != nil {
		return *x.Passed
	}
	return false
}

func (x *DramaStage) GetSkills() []*DramaSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *DramaStage) GetShop() *DramaShop {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *DramaStage) GetBox() *DramaBox {
	if x != nil {
		return x.Box
	}
	return nil
}

type DramaSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skill    *Skill `protobuf:"bytes,1,opt,name=skill" json:"skill,omitempty"`
	IsRelive *bool  `protobuf:"varint,2,opt,name=isRelive" json:"isRelive,omitempty"`
	Quality  *int32 `protobuf:"varint,3,opt,name=quality" json:"quality,omitempty"` // 品质
}

func (x *DramaSkill) Reset() {
	*x = DramaSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaSkill) ProtoMessage() {}

func (x *DramaSkill) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaSkill.ProtoReflect.Descriptor instead.
func (*DramaSkill) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{146}
}

func (x *DramaSkill) GetSkill() *Skill {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *DramaSkill) GetIsRelive() bool {
	if x != nil && x.IsRelive != nil {
		return *x.IsRelive
	}
	return false
}

func (x *DramaSkill) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

// 神秘商人
type DramaShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyCount     *int32 `protobuf:"varint,1,opt,name=buyCount" json:"buyCount,omitempty"`         // 购买次数（不包含特权）
	PrivilegeBuy *int32 `protobuf:"varint,2,opt,name=privilegeBuy" json:"privilegeBuy,omitempty"` // 特权购买次数
	FreeBuyCount *int32 `protobuf:"varint,3,opt,name=freeBuyCount" json:"freeBuyCount,omitempty"` // 免费购买次数
}

func (x *DramaShop) Reset() {
	*x = DramaShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaShop) ProtoMessage() {}

func (x *DramaShop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaShop.ProtoReflect.Descriptor instead.
func (*DramaShop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{147}
}

func (x *DramaShop) GetBuyCount() int32 {
	if x != nil && x.BuyCount != nil {
		return *x.BuyCount
	}
	return 0
}

func (x *DramaShop) GetPrivilegeBuy() int32 {
	if x != nil && x.PrivilegeBuy != nil {
		return *x.PrivilegeBuy
	}
	return 0
}

func (x *DramaShop) GetFreeBuyCount() int32 {
	if x != nil && x.FreeBuyCount != nil {
		return *x.FreeBuyCount
	}
	return 0
}

// 宝箱
type DramaBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *DramaBox) Reset() {
	*x = DramaBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaBox) ProtoMessage() {}

func (x *DramaBox) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaBox.ProtoReflect.Descriptor instead.
func (*DramaBox) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{148}
}

func (x *DramaBox) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

//--------------------------------------------------------------------------------------------------etcd
type EtcdValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target []uint64 `protobuf:"varint,1,rep,name=target" json:"target,omitempty"` //目标服务器
	Data   *string  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`      //数据
	Enable *bool    `protobuf:"varint,3,opt,name=enable" json:"enable,omitempty"` //是否启用
}

func (x *EtcdValue) Reset() {
	*x = EtcdValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdValue) ProtoMessage() {}

func (x *EtcdValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdValue.ProtoReflect.Descriptor instead.
func (*EtcdValue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{149}
}

func (x *EtcdValue) GetTarget() []uint64 {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EtcdValue) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *EtcdValue) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalExp         *uint32      `protobuf:"varint,1,opt,name=totalExp" json:"totalExp,omitempty"`                 // 总经验
	TotalLevel       *uint32      `protobuf:"varint,2,opt,name=totalLevel" json:"totalLevel,omitempty"`             // 总等级
	TotalPower       *uint32      `protobuf:"varint,3,opt,name=totalPower" json:"totalPower,omitempty"`             // 总战斗力
	AlbumItems       []*AlbumItem `protobuf:"bytes,4,rep,name=albumItems" json:"albumItems,omitempty"`              // 图鉴
	ActivedAllusions []int32      `protobuf:"varint,5,rep,name=activedAllusions" json:"activedAllusions,omitempty"` // 绘卷
	AlbumQuas        []*AlbumQua  `protobuf:"bytes,6,rep,name=albumQuas" json:"albumQuas,omitempty"`                // 关系谱
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{150}
}

func (x *Album) GetTotalExp() uint32 {
	if x != nil && x.TotalExp != nil {
		return *x.TotalExp
	}
	return 0
}

func (x *Album) GetTotalLevel() uint32 {
	if x != nil && x.TotalLevel != nil {
		return *x.TotalLevel
	}
	return 0
}

func (x *Album) GetTotalPower() uint32 {
	if x != nil && x.TotalPower != nil {
		return *x.TotalPower
	}
	return 0
}

func (x *Album) GetAlbumItems() []*AlbumItem {
	if x != nil {
		return x.AlbumItems
	}
	return nil
}

func (x *Album) GetActivedAllusions() []int32 {
	if x != nil {
		return x.ActivedAllusions
	}
	return nil
}

func (x *Album) GetAlbumQuas() []*AlbumQua {
	if x != nil {
		return x.AlbumQuas
	}
	return nil
}

type AlbumItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *AlbumItem) Reset() {
	*x = AlbumItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumItem) ProtoMessage() {}

func (x *AlbumItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumItem.ProtoReflect.Descriptor instead.
func (*AlbumItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{151}
}

func (x *AlbumItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AlbumItem) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type AlbumQua struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *AlbumQua) Reset() {
	*x = AlbumQua{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumQua) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumQua) ProtoMessage() {}

func (x *AlbumQua) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumQua.ProtoReflect.Descriptor instead.
func (*AlbumQua) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{152}
}

func (x *AlbumQua) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AlbumQua) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 助战主将
type AssistCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commander   *Commander `protobuf:"bytes,1,opt,name=commander" json:"commander,omitempty"`       // 主将
	PlayerId    *uint64    `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`        // 玩家id
	PlayerLevel *uint32    `protobuf:"varint,3,opt,name=playerLevel" json:"playerLevel,omitempty"`  // 玩家等级
	PlayerName  *string    `protobuf:"bytes,4,opt,name=playerName" json:"playerName,omitempty"`     // 玩家名字
	EmployTimes *uint32    `protobuf:"varint,5,opt,name=employTimes" json:"employTimes,omitempty"`  // 今日雇佣次数
	Used        *bool      `protobuf:"varint,6,opt,name=used" json:"used,omitempty"`                // 是否用过
	IsSameGuild *bool      `protobuf:"varint,7,opt,name=isSameGuild" json:"isSameGuild,omitempty"`  //true表示属于联盟，false表示属于好友
	RewardTimes *uint32    `protobuf:"varint,11,opt,name=rewardTimes" json:"rewardTimes,omitempty"` // 奖励次数(客户端计算奖励)
	BeginTime   *int64     `protobuf:"varint,12,opt,name=beginTime" json:"beginTime,omitempty"`     // 派遣时间(客户端计算奖励用)
	Hp          *int32     `protobuf:"varint,13,opt,name=hp" json:"hp,omitempty"`                   // hp
	Soldier     *Soldier   `protobuf:"bytes,14,opt,name=soldier" json:"soldier,omitempty"`          // 士兵
	WuHun       []*WuHun   `protobuf:"bytes,15,rep,name=wuHun" json:"wuHun,omitempty"`
	Mount       *MountItem `protobuf:"bytes,16,opt,name=mount" json:"mount,omitempty"`         // 坐骑
	OnlyEquip   *OnlyEquip `protobuf:"bytes,17,opt,name=onlyEquip" json:"onlyEquip,omitempty"` // 专属装备
	Deputy      *Commander `protobuf:"bytes,18,opt,name=deputy" json:"deputy,omitempty"`       // 副将
}

func (x *AssistCommander) Reset() {
	*x = AssistCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistCommander) ProtoMessage() {}

func (x *AssistCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistCommander.ProtoReflect.Descriptor instead.
func (*AssistCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{153}
}

func (x *AssistCommander) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *AssistCommander) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *AssistCommander) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *AssistCommander) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *AssistCommander) GetEmployTimes() uint32 {
	if x != nil && x.EmployTimes != nil {
		return *x.EmployTimes
	}
	return 0
}

func (x *AssistCommander) GetUsed() bool {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return false
}

func (x *AssistCommander) GetIsSameGuild() bool {
	if x != nil && x.IsSameGuild != nil {
		return *x.IsSameGuild
	}
	return false
}

func (x *AssistCommander) GetRewardTimes() uint32 {
	if x != nil && x.RewardTimes != nil {
		return *x.RewardTimes
	}
	return 0
}

func (x *AssistCommander) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *AssistCommander) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *AssistCommander) GetSoldier() *Soldier {
	if x != nil {
		return x.Soldier
	}
	return nil
}

func (x *AssistCommander) GetWuHun() []*WuHun {
	if x != nil {
		return x.WuHun
	}
	return nil
}

func (x *AssistCommander) GetMount() *MountItem {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *AssistCommander) GetOnlyEquip() *OnlyEquip {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *AssistCommander) GetDeputy() *Commander {
	if x != nil {
		return x.Deputy
	}
	return nil
}

type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`         // 玩家id
	CommanderIds []int32 `protobuf:"varint,2,rep,name=commanderIds" json:"commanderIds,omitempty"` // 用过的主将
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{154}
}

func (x *Employee) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *Employee) GetCommanderIds() []int32 {
	if x != nil {
		return x.CommanderIds
	}
	return nil
}

// 助战记录
type AssistLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogTime          *int64     `protobuf:"varint,1,opt,name=logTime" json:"logTime,omitempty"`                  // 时间
	Commander        *Commander `protobuf:"bytes,2,opt,name=commander" json:"commander,omitempty"`               // 主将
	TargetPlayerName *string    `protobuf:"bytes,3,opt,name=targetPlayerName" json:"targetPlayerName,omitempty"` // 玩家名字
	TargetPlayerId   *uint64    `protobuf:"varint,4,opt,name=targetPlayerId" json:"targetPlayerId,omitempty"`    // 玩家id
	Win              *bool      `protobuf:"varint,5,opt,name=win" json:"win,omitempty"`                          // 胜利
	Thanks           *bool      `protobuf:"varint,6,opt,name=thanks" json:"thanks,omitempty"`                    // 是否感谢
	FuncId           *int32     `protobuf:"varint,7,opt,name=funcId" json:"funcId,omitempty"`                    // 功能id
	CanReqFriend     *bool      `protobuf:"varint,8,opt,name=canReqFriend" json:"canReqFriend,omitempty"`        // true可申请好友
}

func (x *AssistLog) Reset() {
	*x = AssistLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistLog) ProtoMessage() {}

func (x *AssistLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistLog.ProtoReflect.Descriptor instead.
func (*AssistLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{155}
}

func (x *AssistLog) GetLogTime() int64 {
	if x != nil && x.LogTime != nil {
		return *x.LogTime
	}
	return 0
}

func (x *AssistLog) GetCommander() *Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *AssistLog) GetTargetPlayerName() string {
	if x != nil && x.TargetPlayerName != nil {
		return *x.TargetPlayerName
	}
	return ""
}

func (x *AssistLog) GetTargetPlayerId() uint64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *AssistLog) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

func (x *AssistLog) GetThanks() bool {
	if x != nil && x.Thanks != nil {
		return *x.Thanks
	}
	return false
}

func (x *AssistLog) GetFuncId() int32 {
	if x != nil && x.FuncId != nil {
		return *x.FuncId
	}
	return 0
}

func (x *AssistLog) GetCanReqFriend() bool {
	if x != nil && x.CanReqFriend != nil {
		return *x.CanReqFriend
	}
	return false
}

// 弹幕
type Bullet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *int32  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`   // 时间
	Words *string `protobuf:"bytes,2,opt,name=words" json:"words,omitempty"`  // 文字
	Pos   *int32  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`     // 位置
	Color *int32  `protobuf:"varint,4,opt,name=color" json:"color,omitempty"` // 颜色
}

func (x *Bullet) Reset() {
	*x = Bullet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bullet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bullet) ProtoMessage() {}

func (x *Bullet) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bullet.ProtoReflect.Descriptor instead.
func (*Bullet) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{156}
}

func (x *Bullet) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Bullet) GetWords() string {
	if x != nil && x.Words != nil {
		return *x.Words
	}
	return ""
}

func (x *Bullet) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Bullet) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

// 离线奖励
type OfflineReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *int64   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	MailId  *int32   `protobuf:"varint,2,opt,name=mailId" json:"mailId,omitempty"`
	Rewards []*Item  `protobuf:"bytes,7,rep,name=rewards" json:"rewards,omitempty"`
	Params  []string `protobuf:"bytes,8,rep,name=params" json:"params,omitempty"`
}

func (x *OfflineReward) Reset() {
	*x = OfflineReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineReward) ProtoMessage() {}

func (x *OfflineReward) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineReward.ProtoReflect.Descriptor instead.
func (*OfflineReward) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{157}
}

func (x *OfflineReward) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *OfflineReward) GetMailId() int32 {
	if x != nil && x.MailId != nil {
		return *x.MailId
	}
	return 0
}

func (x *OfflineReward) GetRewards() []*Item {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *OfflineReward) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 玩家福利
type UserOfflineReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*OfflineReward `protobuf:"bytes,1,rep,name=rewards" json:"rewards,omitempty"`
}

func (x *UserOfflineReward) Reset() {
	*x = UserOfflineReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOfflineReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOfflineReward) ProtoMessage() {}

func (x *UserOfflineReward) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOfflineReward.ProtoReflect.Descriptor instead.
func (*UserOfflineReward) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{158}
}

func (x *UserOfflineReward) GetRewards() []*OfflineReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// 首次信息字段
type FirstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstThreeStarCommanderId *int32 `protobuf:"varint,1,opt,name=firstThreeStarCommanderId" json:"firstThreeStarCommanderId,omitempty"` // 首个三星主将id
	FirstPackGiftTime         *int64 `protobuf:"varint,2,opt,name=firstPackGiftTime" json:"firstPackGiftTime,omitempty"`                 //首次领取扩展包奖励时间
	OpenSecondStrmansion      *bool  `protobuf:"varint,3,opt,name=openSecondStrmansion" json:"openSecondStrmansion,omitempty"`           //是否开启了二阶太学标签页
}

func (x *FirstInfo) Reset() {
	*x = FirstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstInfo) ProtoMessage() {}

func (x *FirstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstInfo.ProtoReflect.Descriptor instead.
func (*FirstInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{159}
}

func (x *FirstInfo) GetFirstThreeStarCommanderId() int32 {
	if x != nil && x.FirstThreeStarCommanderId != nil {
		return *x.FirstThreeStarCommanderId
	}
	return 0
}

func (x *FirstInfo) GetFirstPackGiftTime() int64 {
	if x != nil && x.FirstPackGiftTime != nil {
		return *x.FirstPackGiftTime
	}
	return 0
}

func (x *FirstInfo) GetOpenSecondStrmansion() bool {
	if x != nil && x.OpenSecondStrmansion != nil {
		return *x.OpenSecondStrmansion
	}
	return false
}

// Gvg战报
type GvgBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64               `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     // 战斗id
	BattleTime *int64                `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` // 战斗时间
	WinUid     *uint64               `protobuf:"varint,3,opt,name=winUid" json:"winUid,omitempty"`         // 胜利者
	MineId     *uint64               `protobuf:"varint,4,opt,name=mineId" json:"mineId,omitempty"`         // 发生战斗的矿id
	Players    []*GvgBattleLogPlayer `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`        // 参战人结构
}

func (x *GvgBattleLog) Reset() {
	*x = GvgBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgBattleLog) ProtoMessage() {}

func (x *GvgBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgBattleLog.ProtoReflect.Descriptor instead.
func (*GvgBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{160}
}

func (x *GvgBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *GvgBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *GvgBattleLog) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *GvgBattleLog) GetMineId() uint64 {
	if x != nil && x.MineId != nil {
		return *x.MineId
	}
	return 0
}

func (x *GvgBattleLog) GetPlayers() []*GvgBattleLogPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type GvgBattleLogPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        *uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`               // 参与者id
	Ft         *uint32 `protobuf:"varint,2,opt,name=ft" json:"ft,omitempty"`                 // 参与者队伍
	Name       *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`              // 参与者名称
	ChangeRank *int32  `protobuf:"varint,4,opt,name=changeRank" json:"changeRank,omitempty"` // 变化名次
	InSafe     *bool   `protobuf:"varint,5,opt,name=inSafe" json:"inSafe,omitempty"`         // 是否被打进安全区
}

func (x *GvgBattleLogPlayer) Reset() {
	*x = GvgBattleLogPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgBattleLogPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgBattleLogPlayer) ProtoMessage() {}

func (x *GvgBattleLogPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgBattleLogPlayer.ProtoReflect.Descriptor instead.
func (*GvgBattleLogPlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{161}
}

func (x *GvgBattleLogPlayer) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *GvgBattleLogPlayer) GetFt() uint32 {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return 0
}

func (x *GvgBattleLogPlayer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GvgBattleLogPlayer) GetChangeRank() int32 {
	if x != nil && x.ChangeRank != nil {
		return *x.ChangeRank
	}
	return 0
}

func (x *GvgBattleLogPlayer) GetInSafe() bool {
	if x != nil && x.InSafe != nil {
		return *x.InSafe
	}
	return false
}

//玩家多布阵数据数据
type PlayerFormationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// -----------个人养成数据
	Id          *uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                   //id
	Name        *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                //数量
	Level       *uint32     `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`             //等级
	Career      *uint32     `protobuf:"varint,4,opt,name=career" json:"career,omitempty"`           //职业
	Avatar      *int32      `protobuf:"varint,5,opt,name=avatar" json:"avatar,omitempty"`           //头像
	AvatarFrame *int32      `protobuf:"varint,6,opt,name=avatarFrame" json:"avatarFrame,omitempty"` //头像框
	Vip         *uint32     `protobuf:"varint,7,opt,name=vip" json:"vip,omitempty"`                 //VIP
	GuildId     *uint64     `protobuf:"varint,8,opt,name=guildId" json:"guildId,omitempty"`         //势力id
	GuildName   *string     `protobuf:"bytes,9,opt,name=guildName" json:"guildName,omitempty"`      //势力名字
	Power       *uint32     `protobuf:"varint,10,opt,name=power" json:"power,omitempty"`            //战斗力
	ServerId    *uint64     `protobuf:"varint,11,opt,name=serverId" json:"serverId,omitempty"`      //服务器id
	Grow        *PlayerGrow `protobuf:"bytes,12,opt,name=grow" json:"grow,omitempty"`               // 养成
	// ------------阵型数据
	FormationDetails []*FormationDetail `protobuf:"bytes,22,rep,name=formationDetails" json:"formationDetails,omitempty"` //详细阵型数据
}

func (x *PlayerFormationData) Reset() {
	*x = PlayerFormationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFormationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFormationData) ProtoMessage() {}

func (x *PlayerFormationData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFormationData.ProtoReflect.Descriptor instead.
func (*PlayerFormationData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{162}
}

func (x *PlayerFormationData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PlayerFormationData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlayerFormationData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PlayerFormationData) GetCareer() uint32 {
	if x != nil && x.Career != nil {
		return *x.Career
	}
	return 0
}

func (x *PlayerFormationData) GetAvatar() int32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *PlayerFormationData) GetAvatarFrame() int32 {
	if x != nil && x.AvatarFrame != nil {
		return *x.AvatarFrame
	}
	return 0
}

func (x *PlayerFormationData) GetVip() uint32 {
	if x != nil && x.Vip != nil {
		return *x.Vip
	}
	return 0
}

func (x *PlayerFormationData) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *PlayerFormationData) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *PlayerFormationData) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PlayerFormationData) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerFormationData) GetGrow() *PlayerGrow {
	if x != nil {
		return x.Grow
	}
	return nil
}

func (x *PlayerFormationData) GetFormationDetails() []*FormationDetail {
	if x != nil {
		return x.FormationDetails
	}
	return nil
}

// 养成
type PlayerGrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderPower   *uint32             `protobuf:"varint,1,opt,name=commanderPower" json:"commanderPower,omitempty"`     // 主将战斗力
	CounsellorPower  *uint32             `protobuf:"varint,2,opt,name=counsellorPower" json:"counsellorPower,omitempty"`   // 军师战斗力
	SoldierTechPower *uint32             `protobuf:"varint,3,opt,name=soldierTechPower" json:"soldierTechPower,omitempty"` // 士兵科技战斗力
	TreasurePower    *uint32             `protobuf:"varint,4,opt,name=treasurePower" json:"treasurePower,omitempty"`       // 宝物战斗力
	AlbumPower       *uint32             `protobuf:"varint,5,opt,name=albumPower" json:"albumPower,omitempty"`             // 图鉴战斗力
	StrMansionPower  *uint32             `protobuf:"varint,6,opt,name=strMansionPower" json:"strMansionPower,omitempty"`   // 太学战斗力
	GuildTechPower   *uint32             `protobuf:"varint,7,opt,name=guildTechPower" json:"guildTechPower,omitempty"`     // 联盟科技战斗力
	BeastPower       *uint32             `protobuf:"varint,8,opt,name=beastPower" json:"beastPower,omitempty"`             // 神兽战斗力
	StrTalents       []*StrTalent        `protobuf:"bytes,12,rep,name=strTalents" json:"strTalents,omitempty"`             // 计谋府
	Treasures        []*Treasure         `protobuf:"bytes,13,rep,name=treasures" json:"treasures,omitempty"`               //宝物数据
	TreasureFates    *TreasureFatesInfo  `protobuf:"bytes,14,opt,name=treasureFates" json:"treasureFates,omitempty"`       //宝物缘分数据
	SoldierTech      []*SoldierTech      `protobuf:"bytes,15,rep,name=soldierTech" json:"soldierTech,omitempty"`           // 兵营科技
	Album            *Album              `protobuf:"bytes,16,opt,name=album" json:"album,omitempty"`                       // 图鉴
	Counsellors      []*Counsellor       `protobuf:"bytes,17,rep,name=counsellors" json:"counsellors,omitempty"`           // 军师数据
	GuildSkills      []*PlayerGuildSkill `protobuf:"bytes,18,rep,name=guildSkills" json:"guildSkills,omitempty"`           //联盟科技技能
	WuHun            []*WuHun            `protobuf:"bytes,19,rep,name=wuHun" json:"wuHun,omitempty"`                       //武魂
	Soldiers         []*Soldier          `protobuf:"bytes,20,rep,name=soldiers" json:"soldiers,omitempty"`                 // 士兵
	Mount            []*MountItem        `protobuf:"bytes,21,rep,name=mount" json:"mount,omitempty"`                       //坐骑
	TreasureRefine   []*TreasureRefine   `protobuf:"bytes,23,rep,name=treasureRefine" json:"treasureRefine,omitempty"`     //宝物洗炼
	Biography        *Biography          `protobuf:"bytes,24,opt,name=biography" json:"biography,omitempty"`               // 名将录
	OnlyEquip        []*OnlyEquip        `protobuf:"bytes,25,rep,name=onlyEquip" json:"onlyEquip,omitempty"`               //专属装备
	Deputys          []*Commander        `protobuf:"bytes,26,rep,name=deputys" json:"deputys,omitempty"`                   //副将信息
}

func (x *PlayerGrow) Reset() {
	*x = PlayerGrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGrow) ProtoMessage() {}

func (x *PlayerGrow) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGrow.ProtoReflect.Descriptor instead.
func (*PlayerGrow) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{163}
}

func (x *PlayerGrow) GetCommanderPower() uint32 {
	if x != nil && x.CommanderPower != nil {
		return *x.CommanderPower
	}
	return 0
}

func (x *PlayerGrow) GetCounsellorPower() uint32 {
	if x != nil && x.CounsellorPower != nil {
		return *x.CounsellorPower
	}
	return 0
}

func (x *PlayerGrow) GetSoldierTechPower() uint32 {
	if x != nil && x.SoldierTechPower != nil {
		return *x.SoldierTechPower
	}
	return 0
}

func (x *PlayerGrow) GetTreasurePower() uint32 {
	if x != nil && x.TreasurePower != nil {
		return *x.TreasurePower
	}
	return 0
}

func (x *PlayerGrow) GetAlbumPower() uint32 {
	if x != nil && x.AlbumPower != nil {
		return *x.AlbumPower
	}
	return 0
}

func (x *PlayerGrow) GetStrMansionPower() uint32 {
	if x != nil && x.StrMansionPower != nil {
		return *x.StrMansionPower
	}
	return 0
}

func (x *PlayerGrow) GetGuildTechPower() uint32 {
	if x != nil && x.GuildTechPower != nil {
		return *x.GuildTechPower
	}
	return 0
}

func (x *PlayerGrow) GetBeastPower() uint32 {
	if x != nil && x.BeastPower != nil {
		return *x.BeastPower
	}
	return 0
}

func (x *PlayerGrow) GetStrTalents() []*StrTalent {
	if x != nil {
		return x.StrTalents
	}
	return nil
}

func (x *PlayerGrow) GetTreasures() []*Treasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

func (x *PlayerGrow) GetTreasureFates() *TreasureFatesInfo {
	if x != nil {
		return x.TreasureFates
	}
	return nil
}

func (x *PlayerGrow) GetSoldierTech() []*SoldierTech {
	if x != nil {
		return x.SoldierTech
	}
	return nil
}

func (x *PlayerGrow) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *PlayerGrow) GetCounsellors() []*Counsellor {
	if x != nil {
		return x.Counsellors
	}
	return nil
}

func (x *PlayerGrow) GetGuildSkills() []*PlayerGuildSkill {
	if x != nil {
		return x.GuildSkills
	}
	return nil
}

func (x *PlayerGrow) GetWuHun() []*WuHun {
	if x != nil {
		return x.WuHun
	}
	return nil
}

func (x *PlayerGrow) GetSoldiers() []*Soldier {
	if x != nil {
		return x.Soldiers
	}
	return nil
}

func (x *PlayerGrow) GetMount() []*MountItem {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *PlayerGrow) GetTreasureRefine() []*TreasureRefine {
	if x != nil {
		return x.TreasureRefine
	}
	return nil
}

func (x *PlayerGrow) GetBiography() *Biography {
	if x != nil {
		return x.Biography
	}
	return nil
}

func (x *PlayerGrow) GetOnlyEquip() []*OnlyEquip {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *PlayerGrow) GetDeputys() []*Commander {
	if x != nil {
		return x.Deputys
	}
	return nil
}

// 赛季基金任务
type SeasonFundTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                 // 任务id
	Conditions []int32 `protobuf:"varint,2,rep,name=conditions" json:"conditions,omitempty"` // 任务条件
	Progress   *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`     // 任务进度
	IsFinished *bool   `protobuf:"varint,4,opt,name=isFinished" json:"isFinished,omitempty"` // 是否完成
	CreateTime *int64  `protobuf:"varint,5,opt,name=createTime" json:"createTime,omitempty"` // 生成时间
}

func (x *SeasonFundTask) Reset() {
	*x = SeasonFundTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonFundTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonFundTask) ProtoMessage() {}

func (x *SeasonFundTask) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonFundTask.ProtoReflect.Descriptor instead.
func (*SeasonFundTask) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{164}
}

func (x *SeasonFundTask) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SeasonFundTask) GetConditions() []int32 {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SeasonFundTask) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *SeasonFundTask) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *SeasonFundTask) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

type StarSealLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogType       *StarSealLogType `protobuf:"varint,1,opt,name=logType,enum=common.StarSealLogType" json:"logType,omitempty"` // 1：玩家伤害 2：星宿封印解除
	PlayerName    *string          `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`
	DamagePercent *float32         `protobuf:"fixed32,3,opt,name=damagePercent" json:"damagePercent,omitempty"`
	UnlockStar    *int32           `protobuf:"varint,4,opt,name=unlockStar" json:"unlockStar,omitempty"`
}

func (x *StarSealLog) Reset() {
	*x = StarSealLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarSealLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarSealLog) ProtoMessage() {}

func (x *StarSealLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarSealLog.ProtoReflect.Descriptor instead.
func (*StarSealLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{165}
}

func (x *StarSealLog) GetLogType() StarSealLogType {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return StarSealLogType_PlayerDamage
}

func (x *StarSealLog) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *StarSealLog) GetDamagePercent() float32 {
	if x != nil && x.DamagePercent != nil {
		return *x.DamagePercent
	}
	return 0
}

func (x *StarSealLog) GetUnlockStar() int32 {
	if x != nil && x.UnlockStar != nil {
		return *x.UnlockStar
	}
	return 0
}

type PlayerLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *int32   `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`      // 事件id
	Timestamp  *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`  // 时间戳
	PlayerId   *uint64  `protobuf:"varint,3,opt,name=playerId" json:"playerId,omitempty"`    // 玩家id
	PlayerName *string  `protobuf:"bytes,4,opt,name=playerName" json:"playerName,omitempty"` // 玩家名字
	Params     []string `protobuf:"bytes,15,rep,name=params" json:"params,omitempty"`        // 参数
}

func (x *PlayerLog) Reset() {
	*x = PlayerLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLog) ProtoMessage() {}

func (x *PlayerLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLog.ProtoReflect.Descriptor instead.
func (*PlayerLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{166}
}

func (x *PlayerLog) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *PlayerLog) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PlayerLog) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerLog) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *PlayerLog) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type PlayerLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogType *int32       `protobuf:"varint,1,opt,name=logType" json:"logType,omitempty"`
	Logs    []*PlayerLog `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
}

func (x *PlayerLogs) Reset() {
	*x = PlayerLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLogs) ProtoMessage() {}

func (x *PlayerLogs) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLogs.ProtoReflect.Descriptor instead.
func (*PlayerLogs) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{167}
}

func (x *PlayerLogs) GetLogType() int32 {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return 0
}

func (x *PlayerLogs) GetLogs() []*PlayerLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type RebateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*RebateData `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (x *RebateInfo) Reset() {
	*x = RebateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebateInfo) ProtoMessage() {}

func (x *RebateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebateInfo.ProtoReflect.Descriptor instead.
func (*RebateInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{168}
}

func (x *RebateInfo) GetInfo() []*RebateData {
	if x != nil {
		return x.Info
	}
	return nil
}

type RebateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`   // 1：精英测 2：定级测
	Money *uint32 `protobuf:"varint,2,opt,name=money" json:"money,omitempty"` // 充值金额
	Items []*Item `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`  // 奖励
}

func (x *RebateData) Reset() {
	*x = RebateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebateData) ProtoMessage() {}

func (x *RebateData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebateData.ProtoReflect.Descriptor instead.
func (*RebateData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{169}
}

func (x *RebateData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *RebateData) GetMoney() uint32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *RebateData) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type Rebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebateInfo *RebateInfo `protobuf:"bytes,1,opt,name=rebateInfo" json:"rebateInfo,omitempty"` // 返利数据
	TakeTime   *int64      `protobuf:"varint,2,opt,name=takeTime" json:"takeTime,omitempty"`    // 领取时间
}

func (x *Rebate) Reset() {
	*x = Rebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rebate) ProtoMessage() {}

func (x *Rebate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rebate.ProtoReflect.Descriptor instead.
func (*Rebate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{170}
}

func (x *Rebate) GetRebateInfo() *RebateInfo {
	if x != nil {
		return x.RebateInfo
	}
	return nil
}

func (x *Rebate) GetTakeTime() int64 {
	if x != nil && x.TakeTime != nil {
		return *x.TakeTime
	}
	return 0
}

// 跨服排行榜gvg参数
type CrossRankGvgArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`     // 1：联盟榜。2、玩家榜。3、阵营榜
	Camp   *uint32 `protobuf:"varint,2,opt,name=camp" json:"camp,omitempty"`     // 阵营
	CityId *uint64 `protobuf:"varint,3,opt,name=cityId" json:"cityId,omitempty"` // 城池id
}

func (x *CrossRankGvgArg) Reset() {
	*x = CrossRankGvgArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRankGvgArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRankGvgArg) ProtoMessage() {}

func (x *CrossRankGvgArg) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRankGvgArg.ProtoReflect.Descriptor instead.
func (*CrossRankGvgArg) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{171}
}

func (x *CrossRankGvgArg) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CrossRankGvgArg) GetCamp() uint32 {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return 0
}

func (x *CrossRankGvgArg) GetCityId() uint64 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

// 跨服排行榜won参数
type CrossRankWonArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *CrossRankWonType `protobuf:"varint,1,opt,name=type,enum=common.CrossRankWonType" json:"type,omitempty"` // 1：联盟榜。2、玩家榜
	MapId   *uint32           `protobuf:"varint,2,opt,name=mapId" json:"mapId,omitempty"`                            // 地图id
	Version *int64            `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`                        // 版本号
	FieldId *uint32           `protobuf:"varint,4,opt,name=fieldId" json:"fieldId,omitempty"`                        // 战场id
}

func (x *CrossRankWonArg) Reset() {
	*x = CrossRankWonArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRankWonArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRankWonArg) ProtoMessage() {}

func (x *CrossRankWonArg) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRankWonArg.ProtoReflect.Descriptor instead.
func (*CrossRankWonArg) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{172}
}

func (x *CrossRankWonArg) GetType() CrossRankWonType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CrossRankWonType_WonRankGuild
}

func (x *CrossRankWonArg) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *CrossRankWonArg) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CrossRankWonArg) GetFieldId() uint32 {
	if x != nil && x.FieldId != nil {
		return *x.FieldId
	}
	return 0
}

// 神兽
type Beast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                           // 神兽id
	Star            *uint32 `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`                       // 星级
	StarExp         *uint32 `protobuf:"varint,3,opt,name=starExp" json:"starExp,omitempty"`                 // 星级经验值
	EvoLv           *uint32 `protobuf:"varint,5,opt,name=evoLv" json:"evoLv,omitempty"`                     // 进化等级 0：未进化；1：已进化；2：突破+1；3：...
	CommanderId     *int32  `protobuf:"varint,6,opt,name=commanderId" json:"commanderId,omitempty"`         // 连携主将id
	DevourItemCount *int32  `protobuf:"varint,7,opt,name=devourItemCount" json:"devourItemCount,omitempty"` // 升星吞噬的道具数量
	BeastPower      *uint32 `protobuf:"varint,8,opt,name=beastPower" json:"beastPower,omitempty"`           // 神兽战力
}

func (x *Beast) Reset() {
	*x = Beast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beast) ProtoMessage() {}

func (x *Beast) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beast.ProtoReflect.Descriptor instead.
func (*Beast) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{173}
}

func (x *Beast) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Beast) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *Beast) GetStarExp() uint32 {
	if x != nil && x.StarExp != nil {
		return *x.StarExp
	}
	return 0
}

func (x *Beast) GetEvoLv() uint32 {
	if x != nil && x.EvoLv != nil {
		return *x.EvoLv
	}
	return 0
}

func (x *Beast) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *Beast) GetDevourItemCount() int32 {
	if x != nil && x.DevourItemCount != nil {
		return *x.DevourItemCount
	}
	return 0
}

func (x *Beast) GetBeastPower() uint32 {
	if x != nil && x.BeastPower != nil {
		return *x.BeastPower
	}
	return 0
}

// 神兽孵化
type BeastLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                         // 位置id
	IsCanOpen      *bool  `protobuf:"varint,2,opt,name=isCanOpen" json:"isCanOpen,omitempty"`           // 是否可领取
	HatchTimeStamp *int64 `protobuf:"varint,3,opt,name=hatchTimeStamp" json:"hatchTimeStamp,omitempty"` //孵化时间戳
}

func (x *BeastLocation) Reset() {
	*x = BeastLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeastLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeastLocation) ProtoMessage() {}

func (x *BeastLocation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeastLocation.ProtoReflect.Descriptor instead.
func (*BeastLocation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{174}
}

func (x *BeastLocation) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BeastLocation) GetIsCanOpen() bool {
	if x != nil && x.IsCanOpen != nil {
		return *x.IsCanOpen
	}
	return false
}

func (x *BeastLocation) GetHatchTimeStamp() int64 {
	if x != nil && x.HatchTimeStamp != nil {
		return *x.HatchTimeStamp
	}
	return 0
}

// 神兽天赋
type BeastTalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *BeastTalent) Reset() {
	*x = BeastTalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeastTalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeastTalent) ProtoMessage() {}

func (x *BeastTalent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeastTalent.ProtoReflect.Descriptor instead.
func (*BeastTalent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{175}
}

func (x *BeastTalent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BeastTalent) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 单个坐骑
type MountItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderId *int32       `protobuf:"varint,1,opt,name=commanderId" json:"commanderId,omitempty"` // 主将Id
	Level       *uint32      `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`             // 等级
	Star        *uint32      `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`               // 大星
	LittleStar  *uint32      `protobuf:"varint,4,opt,name=littleStar" json:"littleStar,omitempty"`   //小星 配表id = 大星*间隔 + 小星 + 1
	Exp         *uint32      `protobuf:"varint,5,opt,name=exp" json:"exp,omitempty"`                 // 当前经验
	Power       *uint32      `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`             // 坐骑战力
	MountId     *int32       `protobuf:"varint,7,opt,name=mountId" json:"mountId,omitempty"`         // 坐骑Id
	BasePower   *uint32      `protobuf:"varint,8,opt,name=basePower" json:"basePower,omitempty"`     // 基础战力
	Refine      *MountRefine `protobuf:"bytes,9,opt,name=refine" json:"refine,omitempty"`            // 洗炼属性
}

func (x *MountItem) Reset() {
	*x = MountItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountItem) ProtoMessage() {}

func (x *MountItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountItem.ProtoReflect.Descriptor instead.
func (*MountItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{176}
}

func (x *MountItem) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *MountItem) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MountItem) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *MountItem) GetLittleStar() uint32 {
	if x != nil && x.LittleStar != nil {
		return *x.LittleStar
	}
	return 0
}

func (x *MountItem) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *MountItem) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *MountItem) GetMountId() int32 {
	if x != nil && x.MountId != nil {
		return *x.MountId
	}
	return 0
}

func (x *MountItem) GetBasePower() uint32 {
	if x != nil && x.BasePower != nil {
		return *x.BasePower
	}
	return 0
}

func (x *MountItem) GetRefine() *MountRefine {
	if x != nil {
		return x.Refine
	}
	return nil
}

type MountRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Own      []*ResignAttr `protobuf:"bytes,1,rep,name=own" json:"own,omitempty"`           // 自己拥有的洗炼属性
	LackWant []*ResignAttr `protobuf:"bytes,2,rep,name=lackWant" json:"lackWant,omitempty"` // 洗炼后但没有保存的
}

func (x *MountRefine) Reset() {
	*x = MountRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRefine) ProtoMessage() {}

func (x *MountRefine) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRefine.ProtoReflect.Descriptor instead.
func (*MountRefine) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{177}
}

func (x *MountRefine) GetOwn() []*ResignAttr {
	if x != nil {
		return x.Own
	}
	return nil
}

func (x *MountRefine) GetLackWant() []*ResignAttr {
	if x != nil {
		return x.LackWant
	}
	return nil
}

// 坐骑洗炼
type ResignAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`           // 属性Id
	Value   *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`     // 属性值
	Type    *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`       // 属性类型
	Index   *int32 `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`     // 位置
	Quality *int32 `protobuf:"varint,5,opt,name=quality" json:"quality,omitempty"` // 品质
	IsLock  *bool  `protobuf:"varint,6,opt,name=isLock" json:"isLock,omitempty"`   // 是否锁定
}

func (x *ResignAttr) Reset() {
	*x = ResignAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResignAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResignAttr) ProtoMessage() {}

func (x *ResignAttr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResignAttr.ProtoReflect.Descriptor instead.
func (*ResignAttr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{178}
}

func (x *ResignAttr) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ResignAttr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ResignAttr) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ResignAttr) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ResignAttr) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *ResignAttr) GetIsLock() bool {
	if x != nil && x.IsLock != nil {
		return *x.IsLock
	}
	return false
}

// 排位赛 历史段位信息
type LadderHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId       *int32  `protobuf:"varint,1,opt,name=seasonId" json:"seasonId,omitempty"`             // 赛季id
	MaxLadderId    *uint32 `protobuf:"varint,2,opt,name=maxLadderId" json:"maxLadderId,omitempty"`       // 赛季结算时小段位ID
	MaxLadderScore *uint32 `protobuf:"varint,3,opt,name=maxLadderScore" json:"maxLadderScore,omitempty"` // 赛季结算时积分
	BattleTimes    *uint32 `protobuf:"varint,4,opt,name=battleTimes" json:"battleTimes,omitempty"`       // 对战总次数
	WinTimes       *uint32 `protobuf:"varint,5,opt,name=winTimes" json:"winTimes,omitempty"`             // 胜场总次数
	MaxWinStreak   *uint32 `protobuf:"varint,6,opt,name=maxWinStreak" json:"maxWinStreak,omitempty"`     // 最高连胜次数
	RankId         *uint32 `protobuf:"varint,7,opt,name=rankId" json:"rankId,omitempty"`                 // 大段位ID
	LadderId       *uint32 `protobuf:"varint,8,opt,name=ladderId" json:"ladderId,omitempty"`             // 小段位ID
}

func (x *LadderHistoryInfo) Reset() {
	*x = LadderHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderHistoryInfo) ProtoMessage() {}

func (x *LadderHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderHistoryInfo.ProtoReflect.Descriptor instead.
func (*LadderHistoryInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{179}
}

func (x *LadderHistoryInfo) GetSeasonId() int32 {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return 0
}

func (x *LadderHistoryInfo) GetMaxLadderId() uint32 {
	if x != nil && x.MaxLadderId != nil {
		return *x.MaxLadderId
	}
	return 0
}

func (x *LadderHistoryInfo) GetMaxLadderScore() uint32 {
	if x != nil && x.MaxLadderScore != nil {
		return *x.MaxLadderScore
	}
	return 0
}

func (x *LadderHistoryInfo) GetBattleTimes() uint32 {
	if x != nil && x.BattleTimes != nil {
		return *x.BattleTimes
	}
	return 0
}

func (x *LadderHistoryInfo) GetWinTimes() uint32 {
	if x != nil && x.WinTimes != nil {
		return *x.WinTimes
	}
	return 0
}

func (x *LadderHistoryInfo) GetMaxWinStreak() uint32 {
	if x != nil && x.MaxWinStreak != nil {
		return *x.MaxWinStreak
	}
	return 0
}

func (x *LadderHistoryInfo) GetRankId() uint32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *LadderHistoryInfo) GetLadderId() uint32 {
	if x != nil && x.LadderId != nil {
		return *x.LadderId
	}
	return 0
}

// 排位赛 战报
type LadderBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64  `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     // 战斗id
	BattleTime *int64   `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` // 战斗时间
	PlayerIds  []uint64 `protobuf:"varint,3,rep,name=playerIds" json:"playerIds,omitempty"`   // 参战人
	WinId      *uint64  `protobuf:"varint,4,opt,name=winId" json:"winId,omitempty"`           // 胜利者
	Score      *uint32  `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`           // 积分
	RobotId    *int32   `protobuf:"varint,7,opt,name=robotId" json:"robotId,omitempty"`       // 机器人id
}

func (x *LadderBattleLog) Reset() {
	*x = LadderBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderBattleLog) ProtoMessage() {}

func (x *LadderBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderBattleLog.ProtoReflect.Descriptor instead.
func (*LadderBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{180}
}

func (x *LadderBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *LadderBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *LadderBattleLog) GetPlayerIds() []uint64 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *LadderBattleLog) GetWinId() uint64 {
	if x != nil && x.WinId != nil {
		return *x.WinId
	}
	return 0
}

func (x *LadderBattleLog) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *LadderBattleLog) GetRobotId() int32 {
	if x != nil && x.RobotId != nil {
		return *x.RobotId
	}
	return 0
}

// 排位赛 大神战报
type LadderGodBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId      *uint64                 `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`                                               // 战斗id
	BattleTime    *int64                  `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"`                                           // 战斗时间
	WinId         *uint64                 `protobuf:"varint,3,opt,name=winId" json:"winId,omitempty"`                                                     // 胜利玩家id
	BattlePlayers []*LadderBattlePlayer   `protobuf:"bytes,4,rep,name=battlePlayers" json:"battlePlayers,omitempty"`                                      // 对战玩家
	BattleLogType *LadderGodBattleLogType `protobuf:"varint,15,opt,name=battleLogType,enum=common.LadderGodBattleLogType" json:"battleLogType,omitempty"` // 战报类型
}

func (x *LadderGodBattleLog) Reset() {
	*x = LadderGodBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderGodBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderGodBattleLog) ProtoMessage() {}

func (x *LadderGodBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderGodBattleLog.ProtoReflect.Descriptor instead.
func (*LadderGodBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{181}
}

func (x *LadderGodBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *LadderGodBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *LadderGodBattleLog) GetWinId() uint64 {
	if x != nil && x.WinId != nil {
		return *x.WinId
	}
	return 0
}

func (x *LadderGodBattleLog) GetBattlePlayers() []*LadderBattlePlayer {
	if x != nil {
		return x.BattlePlayers
	}
	return nil
}

func (x *LadderGodBattleLog) GetBattleLogType() LadderGodBattleLogType {
	if x != nil && x.BattleLogType != nil {
		return *x.BattleLogType
	}
	return LadderGodBattleLogType_LadderGodBattleLog1
}

type LadderGodBattleLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleLogs []*LadderGodBattleLog `protobuf:"bytes,1,rep,name=battleLogs" json:"battleLogs,omitempty"` // 战报
}

func (x *LadderGodBattleLogs) Reset() {
	*x = LadderGodBattleLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderGodBattleLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderGodBattleLogs) ProtoMessage() {}

func (x *LadderGodBattleLogs) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderGodBattleLogs.ProtoReflect.Descriptor instead.
func (*LadderGodBattleLogs) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{182}
}

func (x *LadderGodBattleLogs) GetBattleLogs() []*LadderGodBattleLog {
	if x != nil {
		return x.BattleLogs
	}
	return nil
}

type LadderBattlePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                     // 玩家id
	Score        *uint32                  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`               // 玩家积分
	CounsellorId *int32                   `protobuf:"varint,3,opt,name=counsellorId" json:"counsellorId,omitempty"` // 上阵军师
	Commanders   []*LadderBattleCommander `protobuf:"bytes,15,rep,name=commanders" json:"commanders,omitempty"`     // 上阵主将
}

func (x *LadderBattlePlayer) Reset() {
	*x = LadderBattlePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderBattlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderBattlePlayer) ProtoMessage() {}

func (x *LadderBattlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderBattlePlayer.ProtoReflect.Descriptor instead.
func (*LadderBattlePlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{183}
}

func (x *LadderBattlePlayer) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LadderBattlePlayer) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *LadderBattlePlayer) GetCounsellorId() int32 {
	if x != nil && x.CounsellorId != nil {
		return *x.CounsellorId
	}
	return 0
}

func (x *LadderBattlePlayer) GetCommanders() []*LadderBattleCommander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

type LadderBattleCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderId *int32 `protobuf:"varint,1,opt,name=commanderId" json:"commanderId,omitempty"` // 主将id
	Skin        *int32 `protobuf:"varint,2,opt,name=skin" json:"skin,omitempty"`               // 主将皮肤
}

func (x *LadderBattleCommander) Reset() {
	*x = LadderBattleCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderBattleCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderBattleCommander) ProtoMessage() {}

func (x *LadderBattleCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderBattleCommander.ProtoReflect.Descriptor instead.
func (*LadderBattleCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{184}
}

func (x *LadderBattleCommander) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *LadderBattleCommander) GetSkin() int32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

// 北伐中原速通排行榜单条详情
type ExpeditionRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`     //玩家id
	FinishDate *int64  `protobuf:"varint,2,opt,name=finishDate" json:"finishDate,omitempty"` //到达时间
	GuildName  *string `protobuf:"bytes,3,opt,name=guildName" json:"guildName,omitempty"`    // 联盟名称
}

func (x *ExpeditionRankItem) Reset() {
	*x = ExpeditionRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionRankItem) ProtoMessage() {}

func (x *ExpeditionRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionRankItem.ProtoReflect.Descriptor instead.
func (*ExpeditionRankItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{185}
}

func (x *ExpeditionRankItem) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ExpeditionRankItem) GetFinishDate() int64 {
	if x != nil && x.FinishDate != nil {
		return *x.FinishDate
	}
	return 0
}

func (x *ExpeditionRankItem) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

// 兵种
type BiographyArms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                 // 兵种Id
	Level      *uint32               `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`           // 兵种等级
	Experience *uint32               `protobuf:"varint,3,opt,name=experience" json:"experience,omitempty"` // 兵种经验
	Commanders []*BiographyCommander `protobuf:"bytes,4,rep,name=commanders" json:"commanders,omitempty"`  // 该兵种下的主将信息
}

func (x *BiographyArms) Reset() {
	*x = BiographyArms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiographyArms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiographyArms) ProtoMessage() {}

func (x *BiographyArms) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiographyArms.ProtoReflect.Descriptor instead.
func (*BiographyArms) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{186}
}

func (x *BiographyArms) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BiographyArms) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BiographyArms) GetExperience() uint32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *BiographyArms) GetCommanders() []*BiographyCommander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

// 名将
type BiographyCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`       // 主将ID
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"` // 主将 level
}

func (x *BiographyCommander) Reset() {
	*x = BiographyCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiographyCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiographyCommander) ProtoMessage() {}

func (x *BiographyCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiographyCommander.ProtoReflect.Descriptor instead.
func (*BiographyCommander) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{187}
}

func (x *BiographyCommander) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BiographyCommander) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// 返回给客户端数据
type Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombatPower *uint32          `protobuf:"varint,1,opt,name=combatPower" json:"combatPower,omitempty"` // 战斗力
	Arms        []*BiographyArms `protobuf:"bytes,2,rep,name=arms" json:"arms,omitempty"`                // 名将录下的兵种
}

func (x *Biography) Reset() {
	*x = Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biography) ProtoMessage() {}

func (x *Biography) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biography.ProtoReflect.Descriptor instead.
func (*Biography) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{188}
}

func (x *Biography) GetCombatPower() uint32 {
	if x != nil && x.CombatPower != nil {
		return *x.CombatPower
	}
	return 0
}

func (x *Biography) GetArms() []*BiographyArms {
	if x != nil {
		return x.Arms
	}
	return nil
}

type OpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`               // ID
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`            // 名字
	Url       *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`              // 链接
	Icon      *string `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`            // 图标
	StartTime *int64  `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"` // 开始时间
	CloseTime *int64  `protobuf:"varint,6,opt,name=closeTime" json:"closeTime,omitempty"` // 结束时间
	Enable    *bool   `protobuf:"varint,7,opt,name=enable" json:"enable,omitempty"`       // 是否开启
}

func (x *OpActivity) Reset() {
	*x = OpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpActivity) ProtoMessage() {}

func (x *OpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpActivity.ProtoReflect.Descriptor instead.
func (*OpActivity) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{189}
}

func (x *OpActivity) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OpActivity) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OpActivity) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *OpActivity) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *OpActivity) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *OpActivity) GetCloseTime() int64 {
	if x != nil && x.CloseTime != nil {
		return *x.CloseTime
	}
	return 0
}

func (x *OpActivity) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

// 少年回归
type YouthReturnGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`             // 索引Id
	BuyTimes *int32 `protobuf:"varint,2,opt,name=buyTimes" json:"buyTimes,omitempty"` // 已购买次数
}

func (x *YouthReturnGiftItem) Reset() {
	*x = YouthReturnGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouthReturnGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouthReturnGiftItem) ProtoMessage() {}

func (x *YouthReturnGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouthReturnGiftItem.ProtoReflect.Descriptor instead.
func (*YouthReturnGiftItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{190}
}

func (x *YouthReturnGiftItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *YouthReturnGiftItem) GetBuyTimes() int32 {
	if x != nil && x.BuyTimes != nil {
		return *x.BuyTimes
	}
	return 0
}

type YouthFreeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId *int32 `protobuf:"varint,1,opt,name=indexId" json:"indexId,omitempty"` // 索引
	IsTake  *bool  `protobuf:"varint,2,opt,name=isTake" json:"isTake,omitempty"`   // 是否领取
}

func (x *YouthFreeItem) Reset() {
	*x = YouthFreeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouthFreeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouthFreeItem) ProtoMessage() {}

func (x *YouthFreeItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouthFreeItem.ProtoReflect.Descriptor instead.
func (*YouthFreeItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{191}
}

func (x *YouthFreeItem) GetIndexId() int32 {
	if x != nil && x.IndexId != nil {
		return *x.IndexId
	}
	return 0
}

func (x *YouthFreeItem) GetIsTake() bool {
	if x != nil && x.IsTake != nil {
		return *x.IsTake
	}
	return false
}

// 九州问鼎海选
type LmChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone    *uint32          `protobuf:"varint,1,opt,name=zone" json:"zone,omitempty"`       // 赛区
	Rank    *uint32          `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`       // 排名
	Advance *bool            `protobuf:"varint,3,opt,name=advance" json:"advance,omitempty"` // 是否晋级
	Rounds  []*LmChooseRound `protobuf:"bytes,4,rep,name=rounds" json:"rounds,omitempty"`    // 海选回合
}

func (x *LmChoose) Reset() {
	*x = LmChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmChoose) ProtoMessage() {}

func (x *LmChoose) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmChoose.ProtoReflect.Descriptor instead.
func (*LmChoose) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{192}
}

func (x *LmChoose) GetZone() uint32 {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return 0
}

func (x *LmChoose) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *LmChoose) GetAdvance() bool {
	if x != nil && x.Advance != nil {
		return *x.Advance
	}
	return false
}

func (x *LmChoose) GetRounds() []*LmChooseRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

// 九州问鼎海选回合
type LmChooseRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round    *uint32               `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`       // 回合数
	Rank     *uint32               `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`         // 排名
	TargetId *uint64               `protobuf:"varint,3,opt,name=targetId" json:"targetId,omitempty"` // 对方玩家
	Battles  []*DyPeakBattleResult `protobuf:"bytes,4,rep,name=battles" json:"battles,omitempty"`    // 三场战斗
}

func (x *LmChooseRound) Reset() {
	*x = LmChooseRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmChooseRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmChooseRound) ProtoMessage() {}

func (x *LmChooseRound) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmChooseRound.ProtoReflect.Descriptor instead.
func (*LmChooseRound) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{193}
}

func (x *LmChooseRound) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *LmChooseRound) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *LmChooseRound) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *LmChooseRound) GetBattles() []*DyPeakBattleResult {
	if x != nil {
		return x.Battles
	}
	return nil
}

// 战斗结果
type DyPeakBattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId     *uint64      `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`
	Winner       *uint64      `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
	Commanders1  []*Commander `protobuf:"bytes,3,rep,name=commanders1" json:"commanders1,omitempty"`
	Commanders2  []*Commander `protobuf:"bytes,4,rep,name=commanders2" json:"commanders2,omitempty"`
	Counsellor1  *Counsellor  `protobuf:"bytes,5,opt,name=counsellor1" json:"counsellor1,omitempty"`
	Counsellor2  *Counsellor  `protobuf:"bytes,6,opt,name=counsellor2" json:"counsellor2,omitempty"`
	BattleWinner []uint64     `protobuf:"varint,7,rep,name=battleWinner" json:"battleWinner,omitempty"` // 战斗胜利者
	Beasts1      []*Beast     `protobuf:"bytes,8,rep,name=beasts1" json:"beasts1,omitempty"`            //神兽战斗数据
	Beasts2      []*Beast     `protobuf:"bytes,9,rep,name=beasts2" json:"beasts2,omitempty"`            //神兽战斗数据
}

func (x *DyPeakBattleResult) Reset() {
	*x = DyPeakBattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakBattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakBattleResult) ProtoMessage() {}

func (x *DyPeakBattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakBattleResult.ProtoReflect.Descriptor instead.
func (*DyPeakBattleResult) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{194}
}

func (x *DyPeakBattleResult) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *DyPeakBattleResult) GetWinner() uint64 {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return 0
}

func (x *DyPeakBattleResult) GetCommanders1() []*Commander {
	if x != nil {
		return x.Commanders1
	}
	return nil
}

func (x *DyPeakBattleResult) GetCommanders2() []*Commander {
	if x != nil {
		return x.Commanders2
	}
	return nil
}

func (x *DyPeakBattleResult) GetCounsellor1() *Counsellor {
	if x != nil {
		return x.Counsellor1
	}
	return nil
}

func (x *DyPeakBattleResult) GetCounsellor2() *Counsellor {
	if x != nil {
		return x.Counsellor2
	}
	return nil
}

func (x *DyPeakBattleResult) GetBattleWinner() []uint64 {
	if x != nil {
		return x.BattleWinner
	}
	return nil
}

func (x *DyPeakBattleResult) GetBeasts1() []*Beast {
	if x != nil {
		return x.Beasts1
	}
	return nil
}

func (x *DyPeakBattleResult) GetBeasts2() []*Beast {
	if x != nil {
		return x.Beasts2
	}
	return nil
}

type DyPeakPK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1      *uint64           `protobuf:"varint,1,opt,name=player1" json:"player1,omitempty"`
	Player2      *uint64           `protobuf:"varint,2,opt,name=player2" json:"player2,omitempty"`
	Winner       *uint64           `protobuf:"varint,3,opt,name=winner" json:"winner,omitempty"`
	Support1     *uint32           `protobuf:"varint,4,opt,name=support1" json:"support1,omitempty"`         // 支持
	Support2     *uint32           `protobuf:"varint,5,opt,name=support2" json:"support2,omitempty"`         // 支持
	WinTimes1    *uint32           `protobuf:"varint,6,opt,name=winTimes1" json:"winTimes1,omitempty"`       // 1胜利
	WinTimes2    *uint32           `protobuf:"varint,7,opt,name=winTimes2" json:"winTimes2,omitempty"`       // 2胜利
	BattleIds    []uint64          `protobuf:"varint,8,rep,name=battleIds" json:"battleIds,omitempty"`       // 战斗id
	BattleWinner []uint64          `protobuf:"varint,9,rep,name=battleWinner" json:"battleWinner,omitempty"` // 战斗胜利者
	PkData       []*DyPeakPKPlayer `protobuf:"bytes,10,rep,name=pkData" json:"pkData,omitempty"`             // 战斗数据
	GuessMulId   *int32            `protobuf:"varint,11,opt,name=guessMulId" json:"guessMulId,omitempty"`    // guessMultiple.csv id
}

func (x *DyPeakPK) Reset() {
	*x = DyPeakPK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakPK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakPK) ProtoMessage() {}

func (x *DyPeakPK) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakPK.ProtoReflect.Descriptor instead.
func (*DyPeakPK) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{195}
}

func (x *DyPeakPK) GetPlayer1() uint64 {
	if x != nil && x.Player1 != nil {
		return *x.Player1
	}
	return 0
}

func (x *DyPeakPK) GetPlayer2() uint64 {
	if x != nil && x.Player2 != nil {
		return *x.Player2
	}
	return 0
}

func (x *DyPeakPK) GetWinner() uint64 {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return 0
}

func (x *DyPeakPK) GetSupport1() uint32 {
	if x != nil && x.Support1 != nil {
		return *x.Support1
	}
	return 0
}

func (x *DyPeakPK) GetSupport2() uint32 {
	if x != nil && x.Support2 != nil {
		return *x.Support2
	}
	return 0
}

func (x *DyPeakPK) GetWinTimes1() uint32 {
	if x != nil && x.WinTimes1 != nil {
		return *x.WinTimes1
	}
	return 0
}

func (x *DyPeakPK) GetWinTimes2() uint32 {
	if x != nil && x.WinTimes2 != nil {
		return *x.WinTimes2
	}
	return 0
}

func (x *DyPeakPK) GetBattleIds() []uint64 {
	if x != nil {
		return x.BattleIds
	}
	return nil
}

func (x *DyPeakPK) GetBattleWinner() []uint64 {
	if x != nil {
		return x.BattleWinner
	}
	return nil
}

func (x *DyPeakPK) GetPkData() []*DyPeakPKPlayer {
	if x != nil {
		return x.PkData
	}
	return nil
}

func (x *DyPeakPK) GetGuessMulId() int32 {
	if x != nil && x.GuessMulId != nil {
		return *x.GuessMulId
	}
	return 0
}

type DyPeakPKPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power1 *uint32 `protobuf:"varint,1,opt,name=power1" json:"power1,omitempty"`
	Power2 *uint32 `protobuf:"varint,2,opt,name=power2" json:"power2,omitempty"`
}

func (x *DyPeakPKPlayer) Reset() {
	*x = DyPeakPKPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakPKPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakPKPlayer) ProtoMessage() {}

func (x *DyPeakPKPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakPKPlayer.ProtoReflect.Descriptor instead.
func (*DyPeakPKPlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{196}
}

func (x *DyPeakPKPlayer) GetPower1() uint32 {
	if x != nil && x.Power1 != nil {
		return *x.Power1
	}
	return 0
}

func (x *DyPeakPKPlayer) GetPower2() uint32 {
	if x != nil && x.Power2 != nil {
		return *x.Power2
	}
	return 0
}

// -----------------------------------------------------------------------------------问鼎中原
// 元数据
type WonMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *WonUserMetadata  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Guild *WonGuildMetadata `protobuf:"bytes,2,opt,name=guild" json:"guild,omitempty"`
}

func (x *WonMetadata) Reset() {
	*x = WonMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonMetadata) ProtoMessage() {}

func (x *WonMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonMetadata.ProtoReflect.Descriptor instead.
func (*WonMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{197}
}

func (x *WonMetadata) GetUser() *WonUserMetadata {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WonMetadata) GetGuild() *WonGuildMetadata {
	if x != nil {
		return x.Guild
	}
	return nil
}

type WonUserMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         *uint64          `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`                // uid
	PlayerName  *string          `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`   // 玩家姓名
	FtMetadataS []*WonFtMetadata `protobuf:"bytes,3,rep,name=ftMetadataS" json:"ftMetadataS,omitempty"` // 队伍元数据
}

func (x *WonUserMetadata) Reset() {
	*x = WonUserMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonUserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonUserMetadata) ProtoMessage() {}

func (x *WonUserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonUserMetadata.ProtoReflect.Descriptor instead.
func (*WonUserMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{198}
}

func (x *WonUserMetadata) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *WonUserMetadata) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *WonUserMetadata) GetFtMetadataS() []*WonFtMetadata {
	if x != nil {
		return x.FtMetadataS
	}
	return nil
}

type WonGuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID   *uint64 `protobuf:"varint,1,opt,name=serverID" json:"serverID,omitempty"`     // 服务器ID
	GuildId    *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"`       // 联盟id
	GuildName  *string `protobuf:"bytes,3,opt,name=guildName" json:"guildName,omitempty"`    // 联盟名称
	GuildPower *uint64 `protobuf:"varint,4,opt,name=guildPower" json:"guildPower,omitempty"` // 联盟战力
}

func (x *WonGuildMetadata) Reset() {
	*x = WonGuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonGuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonGuildMetadata) ProtoMessage() {}

func (x *WonGuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonGuildMetadata.ProtoReflect.Descriptor instead.
func (*WonGuildMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{199}
}

func (x *WonGuildMetadata) GetServerID() uint64 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *WonGuildMetadata) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *WonGuildMetadata) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *WonGuildMetadata) GetGuildPower() uint64 {
	if x != nil && x.GuildPower != nil {
		return *x.GuildPower
	}
	return 0
}

// 队伍元数据
type WonFtMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         *uint64        `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`                         // 玩家id
	Ft          *FormationType `protobuf:"varint,2,opt,name=ft,enum=common.FormationType" json:"ft,omitempty"` // 队伍类型
	CommanderId *int32         `protobuf:"varint,3,opt,name=commanderId" json:"commanderId,omitempty"`         // 队伍最强主将
	Power       *uint64        `protobuf:"varint,4,opt,name=power" json:"power,omitempty"`                     // 队伍战斗力
	Level       *uint32        `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`                     // 最强主将的等级
	Star        *uint32        `protobuf:"varint,6,opt,name=star" json:"star,omitempty"`                       // 最强主将的星级
	Quality     *uint32        `protobuf:"varint,7,opt,name=quality" json:"quality,omitempty"`                 // 最强主将的品质
	PlayerName  *string        `protobuf:"bytes,8,opt,name=playerName" json:"playerName,omitempty"`            // 玩家姓名
	ZiZhi       *uint32        `protobuf:"varint,9,opt,name=ziZhi" json:"ziZhi,omitempty"`                     // 最强主将资质
}

func (x *WonFtMetadata) Reset() {
	*x = WonFtMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonFtMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonFtMetadata) ProtoMessage() {}

func (x *WonFtMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonFtMetadata.ProtoReflect.Descriptor instead.
func (*WonFtMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{200}
}

func (x *WonFtMetadata) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *WonFtMetadata) GetFt() FormationType {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return FormationType_pve
}

func (x *WonFtMetadata) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *WonFtMetadata) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *WonFtMetadata) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *WonFtMetadata) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *WonFtMetadata) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *WonFtMetadata) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *WonFtMetadata) GetZiZhi() uint32 {
	if x != nil && x.ZiZhi != nil {
		return *x.ZiZhi
	}
	return 0
}

type WonBattleField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                        // 战场Id
	Version        *int64              `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`              // version
	Servers        []uint64            `protobuf:"varint,3,rep,name=Servers" json:"Servers,omitempty"`              // 战场服务器数据
	MapOccupys     []*WonMapOccupyInfo `protobuf:"bytes,4,rep,name=mapOccupys" json:"mapOccupys,omitempty"`         // 每个地图的霸主
	ConquerorInfos []*WonConquerorInfo `protobuf:"bytes,5,rep,name=conquerorInfos" json:"conquerorInfos,omitempty"` // 霸主数据
}

func (x *WonBattleField) Reset() {
	*x = WonBattleField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonBattleField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonBattleField) ProtoMessage() {}

func (x *WonBattleField) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonBattleField.ProtoReflect.Descriptor instead.
func (*WonBattleField) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{201}
}

func (x *WonBattleField) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WonBattleField) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *WonBattleField) GetServers() []uint64 {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *WonBattleField) GetMapOccupys() []*WonMapOccupyInfo {
	if x != nil {
		return x.MapOccupys
	}
	return nil
}

func (x *WonBattleField) GetConquerorInfos() []*WonConquerorInfo {
	if x != nil {
		return x.ConquerorInfos
	}
	return nil
}

// 地图霸主信息
type WonMapOccupyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId   *uint32 `protobuf:"varint,1,opt,name=mapId" json:"mapId,omitempty"`     // 地图id
	GuildId *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"` // 霸主联盟id
	Force   *uint64 `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`     // 势力值
}

func (x *WonMapOccupyInfo) Reset() {
	*x = WonMapOccupyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonMapOccupyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonMapOccupyInfo) ProtoMessage() {}

func (x *WonMapOccupyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonMapOccupyInfo.ProtoReflect.Descriptor instead.
func (*WonMapOccupyInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{202}
}

func (x *WonMapOccupyInfo) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *WonMapOccupyInfo) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *WonMapOccupyInfo) GetForce() uint64 {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return 0
}

// 霸主信息
type WonConquerorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId                    *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`                                       // 霸主联盟id
	SurrenderApplySuccessCount *uint32 `protobuf:"varint,2,opt,name=surrenderApplySuccessCount" json:"surrenderApplySuccessCount,omitempty"` // 归降申请同意数量
	HasSlave                   *bool   `protobuf:"varint,3,opt,name=hasSlave" json:"hasSlave,omitempty"`                                     // 是否有俘虏
}

func (x *WonConquerorInfo) Reset() {
	*x = WonConquerorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonConquerorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonConquerorInfo) ProtoMessage() {}

func (x *WonConquerorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonConquerorInfo.ProtoReflect.Descriptor instead.
func (*WonConquerorInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{203}
}

func (x *WonConquerorInfo) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *WonConquerorInfo) GetSurrenderApplySuccessCount() uint32 {
	if x != nil && x.SurrenderApplySuccessCount != nil {
		return *x.SurrenderApplySuccessCount
	}
	return 0
}

func (x *WonConquerorInfo) GetHasSlave() bool {
	if x != nil && x.HasSlave != nil {
		return *x.HasSlave
	}
	return false
}

// Won战报
type WonBattleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *uint64     `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`     // 战斗id
	BattleTime *int64      `protobuf:"varint,2,opt,name=battleTime" json:"battleTime,omitempty"` // 战斗时间
	WinUid     *uint64     `protobuf:"varint,3,opt,name=winUid" json:"winUid,omitempty"`         // 胜利者
	GridCoor   *Coordinate `protobuf:"bytes,4,opt,name=gridCoor" json:"gridCoor,omitempty"`      // 战斗的格子坐标
	Players    []*PlayerFt `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`        // 参战人结构
	Dhp        *uint64     `protobuf:"varint,6,opt,name=dhp" json:"dhp,omitempty"`               // 造成的伤害
	Rewards    *uint32     `protobuf:"varint,7,opt,name=rewards" json:"rewards,omitempty"`       // 本次战斗的奖励
	AttackUid  *uint64     `protobuf:"varint,8,opt,name=attackUid" json:"attackUid,omitempty"`   // 攻击者
	IsPvE      *bool       `protobuf:"varint,9,opt,name=isPvE" json:"isPvE,omitempty"`           // 是否pve
}

func (x *WonBattleLog) Reset() {
	*x = WonBattleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonBattleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonBattleLog) ProtoMessage() {}

func (x *WonBattleLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonBattleLog.ProtoReflect.Descriptor instead.
func (*WonBattleLog) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{204}
}

func (x *WonBattleLog) GetBattleId() uint64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *WonBattleLog) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *WonBattleLog) GetWinUid() uint64 {
	if x != nil && x.WinUid != nil {
		return *x.WinUid
	}
	return 0
}

func (x *WonBattleLog) GetGridCoor() *Coordinate {
	if x != nil {
		return x.GridCoor
	}
	return nil
}

func (x *WonBattleLog) GetPlayers() []*PlayerFt {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *WonBattleLog) GetDhp() uint64 {
	if x != nil && x.Dhp != nil {
		return *x.Dhp
	}
	return 0
}

func (x *WonBattleLog) GetRewards() uint32 {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return 0
}

func (x *WonBattleLog) GetAttackUid() uint64 {
	if x != nil && x.AttackUid != nil {
		return *x.AttackUid
	}
	return 0
}

func (x *WonBattleLog) GetIsPvE() bool {
	if x != nil && x.IsPvE != nil {
		return *x.IsPvE
	}
	return false
}

// 玩家和队伍
type PlayerFt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid *uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"` // 参与者id
	Ft  *uint32 `protobuf:"varint,2,opt,name=ft" json:"ft,omitempty"`   // 参与者队伍
}

func (x *PlayerFt) Reset() {
	*x = PlayerFt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFt) ProtoMessage() {}

func (x *PlayerFt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFt.ProtoReflect.Descriptor instead.
func (*PlayerFt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{205}
}

func (x *PlayerFt) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PlayerFt) GetFt() uint32 {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return 0
}

// 归降申请列表结构
type WonSurrenderApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`                                              // 申请id
	ParentGuildId *uint64                  `protobuf:"varint,2,opt,name=parentGuildId" json:"parentGuildId,omitempty"`                       // 征服者
	ApplyGuildId  *uint64                  `protobuf:"varint,3,opt,name=applyGuildId" json:"applyGuildId,omitempty"`                         // 申请者
	Status        *WonSurrenderApplyStatus `protobuf:"varint,4,opt,name=status,enum=common.WonSurrenderApplyStatus" json:"status,omitempty"` // 状态
}

func (x *WonSurrenderApply) Reset() {
	*x = WonSurrenderApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonSurrenderApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonSurrenderApply) ProtoMessage() {}

func (x *WonSurrenderApply) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonSurrenderApply.ProtoReflect.Descriptor instead.
func (*WonSurrenderApply) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{206}
}

func (x *WonSurrenderApply) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WonSurrenderApply) GetParentGuildId() uint64 {
	if x != nil && x.ParentGuildId != nil {
		return *x.ParentGuildId
	}
	return 0
}

func (x *WonSurrenderApply) GetApplyGuildId() uint64 {
	if x != nil && x.ApplyGuildId != nil {
		return *x.ApplyGuildId
	}
	return 0
}

func (x *WonSurrenderApply) GetStatus() WonSurrenderApplyStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return WonSurrenderApplyStatus_ApplyIng
}

type WonDeclareGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId  *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`   // 联盟id
	HasSlave *bool   `protobuf:"varint,2,opt,name=hasSlave" json:"hasSlave,omitempty"` // 是否有俘虏
}

func (x *WonDeclareGuild) Reset() {
	*x = WonDeclareGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonDeclareGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonDeclareGuild) ProtoMessage() {}

func (x *WonDeclareGuild) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonDeclareGuild.ProtoReflect.Descriptor instead.
func (*WonDeclareGuild) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{207}
}

func (x *WonDeclareGuild) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *WonDeclareGuild) GetHasSlave() bool {
	if x != nil && x.HasSlave != nil {
		return *x.HasSlave
	}
	return false
}

type WonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType         *WonMessageType           `protobuf:"varint,1,opt,name=messageType,enum=common.WonMessageType" json:"messageType,omitempty"` // 消息类型
	OccupyMessage       *WonOccupyMessage         `protobuf:"bytes,2,opt,name=occupyMessage" json:"occupyMessage,omitempty"`                         // 占领消息
	TotalKillMessage    *WonTotalKillMessage      `protobuf:"bytes,3,opt,name=totalKillMessage" json:"totalKillMessage,omitempty"`                   // 累计击杀消息
	PlayerReportMessage *WonPlayerFtReportMessage `protobuf:"bytes,4,opt,name=playerReportMessage" json:"playerReportMessage,omitempty"`             // 玩家个人播报
}

func (x *WonMessage) Reset() {
	*x = WonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonMessage) ProtoMessage() {}

func (x *WonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonMessage.ProtoReflect.Descriptor instead.
func (*WonMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{208}
}

func (x *WonMessage) GetMessageType() WonMessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return WonMessageType_Occupy
}

func (x *WonMessage) GetOccupyMessage() *WonOccupyMessage {
	if x != nil {
		return x.OccupyMessage
	}
	return nil
}

func (x *WonMessage) GetTotalKillMessage() *WonTotalKillMessage {
	if x != nil {
		return x.TotalKillMessage
	}
	return nil
}

func (x *WonMessage) GetPlayerReportMessage() *WonPlayerFtReportMessage {
	if x != nil {
		return x.PlayerReportMessage
	}
	return nil
}

// 占领消息
type WonOccupyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackGuildName     *string `protobuf:"bytes,1,opt,name=attackGuildName" json:"attackGuildName,omitempty"`          // 攻击者联盟名字
	DefendGuildName     *string `protobuf:"bytes,2,opt,name=defendGuildName" json:"defendGuildName,omitempty"`          // 防守者联盟名字
	GridTypeId          *uint32 `protobuf:"varint,3,opt,name=gridTypeId" json:"gridTypeId,omitempty"`                   // 格子类型ID
	IsConquer           *bool   `protobuf:"varint,4,opt,name=isConquer" json:"isConquer,omitempty"`                     // 是否发生了征服
	AttackGuildServerId *uint64 `protobuf:"varint,5,opt,name=attackGuildServerId" json:"attackGuildServerId,omitempty"` // 攻击者联盟服务器id
	DefendGuildServerId *uint64 `protobuf:"varint,6,opt,name=defendGuildServerId" json:"defendGuildServerId,omitempty"` // 防守者联盟服务器id
}

func (x *WonOccupyMessage) Reset() {
	*x = WonOccupyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonOccupyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonOccupyMessage) ProtoMessage() {}

func (x *WonOccupyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonOccupyMessage.ProtoReflect.Descriptor instead.
func (*WonOccupyMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{209}
}

func (x *WonOccupyMessage) GetAttackGuildName() string {
	if x != nil && x.AttackGuildName != nil {
		return *x.AttackGuildName
	}
	return ""
}

func (x *WonOccupyMessage) GetDefendGuildName() string {
	if x != nil && x.DefendGuildName != nil {
		return *x.DefendGuildName
	}
	return ""
}

func (x *WonOccupyMessage) GetGridTypeId() uint32 {
	if x != nil && x.GridTypeId != nil {
		return *x.GridTypeId
	}
	return 0
}

func (x *WonOccupyMessage) GetIsConquer() bool {
	if x != nil && x.IsConquer != nil {
		return *x.IsConquer
	}
	return false
}

func (x *WonOccupyMessage) GetAttackGuildServerId() uint64 {
	if x != nil && x.AttackGuildServerId != nil {
		return *x.AttackGuildServerId
	}
	return 0
}

func (x *WonOccupyMessage) GetDefendGuildServerId() uint64 {
	if x != nil && x.DefendGuildServerId != nil {
		return *x.DefendGuildServerId
	}
	return 0
}

// 连杀消息
type WonTotalKillMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName *string `protobuf:"bytes,1,opt,name=playerName" json:"playerName,omitempty"` // 玩家姓名
	ReportId   *int32  `protobuf:"varint,2,opt,name=reportId" json:"reportId,omitempty"`    // 累计击杀数量对应report表的id
	ServerId   *uint64 `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`    // 服务器id
	GuildName  *string `protobuf:"bytes,4,opt,name=guildName" json:"guildName,omitempty"`   // 联盟名字
}

func (x *WonTotalKillMessage) Reset() {
	*x = WonTotalKillMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonTotalKillMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonTotalKillMessage) ProtoMessage() {}

func (x *WonTotalKillMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonTotalKillMessage.ProtoReflect.Descriptor instead.
func (*WonTotalKillMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{210}
}

func (x *WonTotalKillMessage) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *WonTotalKillMessage) GetReportId() int32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *WonTotalKillMessage) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *WonTotalKillMessage) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

// 玩家个人播报
type WonPlayerFtReportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        *uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`               // uid
	PvpCount   *uint32 `protobuf:"varint,2,opt,name=pvpCount" json:"pvpCount,omitempty"`     // 打的pvp数量
	PveCount   *uint32 `protobuf:"varint,3,opt,name=pveCount" json:"pveCount,omitempty"`     // 打的pve数量
	GridTypeId *uint32 `protobuf:"varint,4,opt,name=gridTypeId" json:"gridTypeId,omitempty"` // 格子类型ID
	Dhp        *uint64 `protobuf:"varint,5,opt,name=dhp" json:"dhp,omitempty"`               // 打城池多少血
	Ft         *uint32 `protobuf:"varint,6,opt,name=ft" json:"ft,omitempty"`                 // 队伍号
}

func (x *WonPlayerFtReportMessage) Reset() {
	*x = WonPlayerFtReportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonPlayerFtReportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonPlayerFtReportMessage) ProtoMessage() {}

func (x *WonPlayerFtReportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonPlayerFtReportMessage.ProtoReflect.Descriptor instead.
func (*WonPlayerFtReportMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{211}
}

func (x *WonPlayerFtReportMessage) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *WonPlayerFtReportMessage) GetPvpCount() uint32 {
	if x != nil && x.PvpCount != nil {
		return *x.PvpCount
	}
	return 0
}

func (x *WonPlayerFtReportMessage) GetPveCount() uint32 {
	if x != nil && x.PveCount != nil {
		return *x.PveCount
	}
	return 0
}

func (x *WonPlayerFtReportMessage) GetGridTypeId() uint32 {
	if x != nil && x.GridTypeId != nil {
		return *x.GridTypeId
	}
	return 0
}

func (x *WonPlayerFtReportMessage) GetDhp() uint64 {
	if x != nil && x.Dhp != nil {
		return *x.Dhp
	}
	return 0
}

func (x *WonPlayerFtReportMessage) GetFt() uint32 {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return 0
}

// 预设队伍信息
type WonFtCoor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  *uint64     `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Ft   *uint32     `protobuf:"varint,2,opt,name=ft" json:"ft,omitempty"`    // 队伍
	Coor *Coordinate `protobuf:"bytes,3,opt,name=coor" json:"coor,omitempty"` // 预设坐标点
}

func (x *WonFtCoor) Reset() {
	*x = WonFtCoor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonFtCoor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonFtCoor) ProtoMessage() {}

func (x *WonFtCoor) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonFtCoor.ProtoReflect.Descriptor instead.
func (*WonFtCoor) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{212}
}

func (x *WonFtCoor) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *WonFtCoor) GetFt() uint32 {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return 0
}

func (x *WonFtCoor) GetCoor() *Coordinate {
	if x != nil {
		return x.Coor
	}
	return nil
}

// 成交记录
type AucRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodId   *uint32 `protobuf:"varint,1,opt,name=goodId" json:"goodId,omitempty"`     // 商品id
	Price    *uint32 `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`       // 成交价
	SaleTime *int64  `protobuf:"varint,3,opt,name=saleTime" json:"saleTime,omitempty"` // 成交时间
}

func (x *AucRecord) Reset() {
	*x = AucRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucRecord) ProtoMessage() {}

func (x *AucRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucRecord.ProtoReflect.Descriptor instead.
func (*AucRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{213}
}

func (x *AucRecord) GetGoodId() uint32 {
	if x != nil && x.GoodId != nil {
		return *x.GoodId
	}
	return 0
}

func (x *AucRecord) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AucRecord) GetSaleTime() int64 {
	if x != nil && x.SaleTime != nil {
		return *x.SaleTime
	}
	return 0
}

// 出价人元数据
type AucUserMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId *uint64 `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"` // 玩家的服务器id，子服的话用主服的
	GuildId  *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"`   // 联盟id
}

func (x *AucUserMetadata) Reset() {
	*x = AucUserMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucUserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucUserMetadata) ProtoMessage() {}

func (x *AucUserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucUserMetadata.ProtoReflect.Descriptor instead.
func (*AucUserMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{214}
}

func (x *AucUserMetadata) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *AucUserMetadata) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

// 霸主挑战阶段信息
type GOClearStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    *int32  `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"`       // 阶段ID
	IsReward   *bool   `protobuf:"varint,2,opt,name=isReward" json:"isReward,omitempty"`     // 是否领奖
	ClearTime  *int64  `protobuf:"varint,3,opt,name=clearTime" json:"clearTime,omitempty"`   // 通关时间
	BattleTime *uint32 `protobuf:"varint,4,opt,name=battleTime" json:"battleTime,omitempty"` // 战斗时间
	Score      *uint64 `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`           // 积分
}

func (x *GOClearStage) Reset() {
	*x = GOClearStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GOClearStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GOClearStage) ProtoMessage() {}

func (x *GOClearStage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GOClearStage.ProtoReflect.Descriptor instead.
func (*GOClearStage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{215}
}

func (x *GOClearStage) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *GOClearStage) GetIsReward() bool {
	if x != nil && x.IsReward != nil {
		return *x.IsReward
	}
	return false
}

func (x *GOClearStage) GetClearTime() int64 {
	if x != nil && x.ClearTime != nil {
		return *x.ClearTime
	}
	return 0
}

func (x *GOClearStage) GetBattleTime() uint32 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *GOClearStage) GetScore() uint64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

// 战魂晋升
type WarSoulSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Stages []int32 `protobuf:"varint,2,rep,name=stages" json:"stages,omitempty"` // 已经领取的进度下标，从1开始
}

func (x *WarSoulSchedule) Reset() {
	*x = WarSoulSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarSoulSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarSoulSchedule) ProtoMessage() {}

func (x *WarSoulSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarSoulSchedule.ProtoReflect.Descriptor instead.
func (*WarSoulSchedule) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{216}
}

func (x *WarSoulSchedule) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WarSoulSchedule) GetStages() []int32 {
	if x != nil {
		return x.Stages
	}
	return nil
}

// BazaarItem 活动市场物品
type BazaarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`       // id
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"` // 购买次数
}

func (x *BazaarItem) Reset() {
	*x = BazaarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BazaarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BazaarItem) ProtoMessage() {}

func (x *BazaarItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BazaarItem.ProtoReflect.Descriptor instead.
func (*BazaarItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{217}
}

func (x *BazaarItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BazaarItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// CakeFeast 蛋糕盛宴
type CakeFeast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId *int32           `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"` // 阶段Id
	Process *int32           `protobuf:"varint,2,opt,name=process" json:"process,omitempty"` // 总进度
	Slots   []*CakeFeastSlot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`      // 卡槽
}

func (x *CakeFeast) Reset() {
	*x = CakeFeast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CakeFeast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeFeast) ProtoMessage() {}

func (x *CakeFeast) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeFeast.ProtoReflect.Descriptor instead.
func (*CakeFeast) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{218}
}

func (x *CakeFeast) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *CakeFeast) GetProcess() int32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return 0
}

func (x *CakeFeast) GetSlots() []*CakeFeastSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// CakeFeastSlot 蛋糕盛宴卡槽
type CakeFeastSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId  *int32 `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"`   // 卡槽
	Process *int32 `protobuf:"varint,2,opt,name=process" json:"process,omitempty"` // 进度
}

func (x *CakeFeastSlot) Reset() {
	*x = CakeFeastSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CakeFeastSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeFeastSlot) ProtoMessage() {}

func (x *CakeFeastSlot) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeFeastSlot.ProtoReflect.Descriptor instead.
func (*CakeFeastSlot) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{219}
}

func (x *CakeFeastSlot) GetSlotId() int32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CakeFeastSlot) GetProcess() int32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return 0
}

// 欢乐翻牌
type HappyFlop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *int32           `protobuf:"varint,1,opt,name=times" json:"times,omitempty"`           // 总次数
	TodayTimes *int32           `protobuf:"varint,2,opt,name=todayTimes" json:"todayTimes,omitempty"` // 当天次数
	RewardIds  []int32          `protobuf:"varint,3,rep,name=rewardIds" json:"rewardIds,omitempty"`   // 领奖IDS
	Cards      []*HappyFlopCard `protobuf:"bytes,4,rep,name=cards" json:"cards,omitempty"`            // 卡池
}

func (x *HappyFlop) Reset() {
	*x = HappyFlop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyFlop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyFlop) ProtoMessage() {}

func (x *HappyFlop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyFlop.ProtoReflect.Descriptor instead.
func (*HappyFlop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{220}
}

func (x *HappyFlop) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *HappyFlop) GetTodayTimes() int32 {
	if x != nil && x.TodayTimes != nil {
		return *x.TodayTimes
	}
	return 0
}

func (x *HappyFlop) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *HappyFlop) GetCards() []*HappyFlopCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type HappyFlopCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *int32           `protobuf:"varint,1,opt,name=itemId" json:"itemId,omitempty"`                             // 道具ID
	Status *HappyFlopStatus `protobuf:"varint,2,opt,name=status,enum=common.HappyFlopStatus" json:"status,omitempty"` // 状态 0:反面 1:正面 2:消失
}

func (x *HappyFlopCard) Reset() {
	*x = HappyFlopCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyFlopCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyFlopCard) ProtoMessage() {}

func (x *HappyFlopCard) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyFlopCard.ProtoReflect.Descriptor instead.
func (*HappyFlopCard) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{221}
}

func (x *HappyFlopCard) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *HappyFlopCard) GetStatus() HappyFlopStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return HappyFlopStatus_Card_Negative
}

// 战斗单位血量
type BattleUnitHp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"` // id
	Hp *int32 `protobuf:"varint,2,opt,name=hp" json:"hp,omitempty"` // 血量
}

func (x *BattleUnitHp) Reset() {
	*x = BattleUnitHp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleUnitHp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleUnitHp) ProtoMessage() {}

func (x *BattleUnitHp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleUnitHp.ProtoReflect.Descriptor instead.
func (*BattleUnitHp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{222}
}

func (x *BattleUnitHp) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BattleUnitHp) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

// 神秘商人
type NavalBattleShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyIds []int32 `protobuf:"varint,1,rep,name=buyIds" json:"buyIds,omitempty"` // 以购买的商品id
}

func (x *NavalBattleShop) Reset() {
	*x = NavalBattleShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleShop) ProtoMessage() {}

func (x *NavalBattleShop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleShop.ProtoReflect.Descriptor instead.
func (*NavalBattleShop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{223}
}

func (x *NavalBattleShop) GetBuyIds() []int32 {
	if x != nil {
		return x.BuyIds
	}
	return nil
}

//海战关卡
type NavalStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     *int32                      `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"`                                    // 关卡id
	State       *NavalStage_NavalStageState `protobuf:"varint,2,opt,name=state,enum=common.NavalStage_NavalStageState" json:"state,omitempty"` //状态
	Shop        *NavalBattleShop            `protobuf:"bytes,4,opt,name=shop" json:"shop,omitempty"`
	BattleCount *int32                      `protobuf:"varint,5,opt,name=battleCount" json:"battleCount,omitempty"` //当前关卡以经战斗的次数
	UniteFts    []*NavalBattleUniteFt       `protobuf:"bytes,6,rep,name=uniteFts" json:"uniteFts,omitempty"`        // 合击队伍
}

func (x *NavalStage) Reset() {
	*x = NavalStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalStage) ProtoMessage() {}

func (x *NavalStage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalStage.ProtoReflect.Descriptor instead.
func (*NavalStage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{224}
}

func (x *NavalStage) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *NavalStage) GetState() NavalStage_NavalStageState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return NavalStage_none
}

func (x *NavalStage) GetShop() *NavalBattleShop {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *NavalStage) GetBattleCount() int32 {
	if x != nil && x.BattleCount != nil {
		return *x.BattleCount
	}
	return 0
}

func (x *NavalStage) GetUniteFts() []*NavalBattleUniteFt {
	if x != nil {
		return x.UniteFts
	}
	return nil
}

type NavalBattleUniteFt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ft        *int32                    `protobuf:"varint,1,opt,name=ft" json:"ft,omitempty"`                                            // 队伍Id
	EnemyId   *int32                    `protobuf:"varint,2,opt,name=enemyId" json:"enemyId,omitempty"`                                  // 怪物Id
	Team      *NavalBattleTeam          `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`                                         // 队伍
	State     *NavalBattleUniteFt_State `protobuf:"varint,5,opt,name=state,enum=common.NavalBattleUniteFt_State" json:"state,omitempty"` // 是否战斗过
	PlayerHps []*BattleUnitHp           `protobuf:"bytes,6,rep,name=playerHps" json:"playerHps,omitempty"`                               // 玩家血量
	EnemyHps  []*BattleUnitHp           `protobuf:"bytes,7,rep,name=enemyHps" json:"enemyHps,omitempty"`                                 // 怪物血量
	Assist    []*AssistCommander        `protobuf:"bytes,8,rep,name=assist" json:"assist,omitempty"`                                     // 助战
}

func (x *NavalBattleUniteFt) Reset() {
	*x = NavalBattleUniteFt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleUniteFt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleUniteFt) ProtoMessage() {}

func (x *NavalBattleUniteFt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleUniteFt.ProtoReflect.Descriptor instead.
func (*NavalBattleUniteFt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{225}
}

func (x *NavalBattleUniteFt) GetFt() int32 {
	if x != nil && x.Ft != nil {
		return *x.Ft
	}
	return 0
}

func (x *NavalBattleUniteFt) GetEnemyId() int32 {
	if x != nil && x.EnemyId != nil {
		return *x.EnemyId
	}
	return 0
}

func (x *NavalBattleUniteFt) GetTeam() *NavalBattleTeam {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *NavalBattleUniteFt) GetState() NavalBattleUniteFt_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return NavalBattleUniteFt_unBattle
}

func (x *NavalBattleUniteFt) GetPlayerHps() []*BattleUnitHp {
	if x != nil {
		return x.PlayerHps
	}
	return nil
}

func (x *NavalBattleUniteFt) GetEnemyHps() []*BattleUnitHp {
	if x != nil {
		return x.EnemyHps
	}
	return nil
}

func (x *NavalBattleUniteFt) GetAssist() []*AssistCommander {
	if x != nil {
		return x.Assist
	}
	return nil
}

//敌人数据
type NavalBattleEnemy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                       //敌人id
	CreateStageId *int32            `protobuf:"varint,2,opt,name=createStageId" json:"createStageId,omitempty"` //地图生成时的关卡id，地图重置时使用
	StageId       *int32            `protobuf:"varint,3,opt,name=stageId" json:"stageId,omitempty"`
	BattleInfo    *BattlePlayerInfo `protobuf:"bytes,4,opt,name=battleInfo" json:"battleInfo,omitempty"`
}

func (x *NavalBattleEnemy) Reset() {
	*x = NavalBattleEnemy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleEnemy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleEnemy) ProtoMessage() {}

func (x *NavalBattleEnemy) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleEnemy.ProtoReflect.Descriptor instead.
func (*NavalBattleEnemy) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{226}
}

func (x *NavalBattleEnemy) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NavalBattleEnemy) GetCreateStageId() int32 {
	if x != nil && x.CreateStageId != nil {
		return *x.CreateStageId
	}
	return 0
}

func (x *NavalBattleEnemy) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *NavalBattleEnemy) GetBattleInfo() *BattlePlayerInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

//海战自己队伍
type NavalBattleTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     *int32  `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"`         // 关卡id
	FormationId *int32  `protobuf:"varint,2,opt,name=formationId" json:"formationId,omitempty"` // 布阵信息
	Strength    *int32  `protobuf:"varint,3,opt,name=strength" json:"strength,omitempty"`       // 行动力
	IsDie       *bool   `protobuf:"varint,4,opt,name=isDie" json:"isDie,omitempty"`             // 是否阵亡
	TrapIds     []int32 `protobuf:"varint,5,rep,name=trapIds" json:"trapIds,omitempty"`         // 陷阱Id
}

func (x *NavalBattleTeam) Reset() {
	*x = NavalBattleTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleTeam) ProtoMessage() {}

func (x *NavalBattleTeam) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleTeam.ProtoReflect.Descriptor instead.
func (*NavalBattleTeam) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{227}
}

func (x *NavalBattleTeam) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *NavalBattleTeam) GetFormationId() int32 {
	if x != nil && x.FormationId != nil {
		return *x.FormationId
	}
	return 0
}

func (x *NavalBattleTeam) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *NavalBattleTeam) GetIsDie() bool {
	if x != nil && x.IsDie != nil {
		return *x.IsDie
	}
	return false
}

func (x *NavalBattleTeam) GetTrapIds() []int32 {
	if x != nil {
		return x.TrapIds
	}
	return nil
}

//海战需要查找的布阵
type NavalBattleSearchFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId *int32  `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"` //关卡id
	Power   *uint64 `protobuf:"varint,2,opt,name=power" json:"power,omitempty"`     //战斗力
	EnemyId *int32  `protobuf:"varint,3,opt,name=enemyId" json:"enemyId,omitempty"` //怪物id
	Count   *int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`     //此关卡的个数
}

func (x *NavalBattleSearchFormation) Reset() {
	*x = NavalBattleSearchFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleSearchFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleSearchFormation) ProtoMessage() {}

func (x *NavalBattleSearchFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleSearchFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleSearchFormation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{228}
}

func (x *NavalBattleSearchFormation) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *NavalBattleSearchFormation) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *NavalBattleSearchFormation) GetEnemyId() int32 {
	if x != nil && x.EnemyId != nil {
		return *x.EnemyId
	}
	return 0
}

func (x *NavalBattleSearchFormation) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// 跨服海战玩家队伍存储
type NavalBattleFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    *uint64 `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
	PlayerId    *uint64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`       //玩家id
	FormationId *int32  `protobuf:"varint,3,opt,name=formationId" json:"formationId,omitempty"` //队伍id
	Power       *uint64 `protobuf:"varint,4,opt,name=power" json:"power,omitempty"`             //队伍战力
	Ids         []int32 `protobuf:"varint,5,rep,name=ids" json:"ids,omitempty"`                 //主将或神兽的Id
	Skin        *int32  `protobuf:"varint,6,opt,name=skin" json:"skin,omitempty"`               //最强naval主将皮肤
}

func (x *NavalBattleFormation) Reset() {
	*x = NavalBattleFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleFormation) ProtoMessage() {}

func (x *NavalBattleFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleFormation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{229}
}

func (x *NavalBattleFormation) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *NavalBattleFormation) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *NavalBattleFormation) GetFormationId() int32 {
	if x != nil && x.FormationId != nil {
		return *x.FormationId
	}
	return 0
}

func (x *NavalBattleFormation) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *NavalBattleFormation) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *NavalBattleFormation) GetSkin() int32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

type NavalBattleResultFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId *int32                  `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"` //关卡id
	EnemyId *int32                  `protobuf:"varint,2,opt,name=enemyId" json:"enemyId,omitempty"` //怪物Id
	Fts     []*NavalBattleFormation `protobuf:"bytes,3,rep,name=fts" json:"fts,omitempty"`
}

func (x *NavalBattleResultFormation) Reset() {
	*x = NavalBattleResultFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleResultFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleResultFormation) ProtoMessage() {}

func (x *NavalBattleResultFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleResultFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleResultFormation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{230}
}

func (x *NavalBattleResultFormation) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *NavalBattleResultFormation) GetEnemyId() int32 {
	if x != nil && x.EnemyId != nil {
		return *x.EnemyId
	}
	return 0
}

func (x *NavalBattleResultFormation) GetFts() []*NavalBattleFormation {
	if x != nil {
		return x.Fts
	}
	return nil
}

//海战玩家排名
type NavalBattleRankPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	RoundNum        *int32  `protobuf:"varint,2,opt,name=roundNum" json:"roundNum,omitempty"`               //完成回合数
	DieCommanderNum *int32  `protobuf:"varint,3,opt,name=dieCommanderNum" json:"dieCommanderNum,omitempty"` //死亡主将数量
	PassTime        *int32  `protobuf:"varint,4,opt,name=passTime" json:"passTime,omitempty"`               //通关时长
}

func (x *NavalBattleRankPlayer) Reset() {
	*x = NavalBattleRankPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleRankPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleRankPlayer) ProtoMessage() {}

func (x *NavalBattleRankPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleRankPlayer.ProtoReflect.Descriptor instead.
func (*NavalBattleRankPlayer) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{231}
}

func (x *NavalBattleRankPlayer) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *NavalBattleRankPlayer) GetRoundNum() int32 {
	if x != nil && x.RoundNum != nil {
		return *x.RoundNum
	}
	return 0
}

func (x *NavalBattleRankPlayer) GetDieCommanderNum() int32 {
	if x != nil && x.DieCommanderNum != nil {
		return *x.DieCommanderNum
	}
	return 0
}

func (x *NavalBattleRankPlayer) GetPassTime() int32 {
	if x != nil && x.PassTime != nil {
		return *x.PassTime
	}
	return 0
}

type NavalBattleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *int32             `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"` // 事件Id
	Assists []*AssistCommander `protobuf:"bytes,2,rep,name=assists" json:"assists,omitempty"`  // 助战的主将
	BuffIds []int32            `protobuf:"varint,4,rep,name=buffIds" json:"buffIds,omitempty"` // buffIds
	StageId *int32             `protobuf:"varint,5,opt,name=stageId" json:"stageId,omitempty"` // stagedId
}

func (x *NavalBattleEvent) Reset() {
	*x = NavalBattleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleEvent) ProtoMessage() {}

func (x *NavalBattleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleEvent.ProtoReflect.Descriptor instead.
func (*NavalBattleEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{232}
}

func (x *NavalBattleEvent) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *NavalBattleEvent) GetAssists() []*AssistCommander {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *NavalBattleEvent) GetBuffIds() []int32 {
	if x != nil {
		return x.BuffIds
	}
	return nil
}

func (x *NavalBattleEvent) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

// 断路
type NavalBattleCircuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  *int32  `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`   // 事件ID
	StageIds []int32 `protobuf:"varint,2,rep,name=stageIds" json:"stageIds,omitempty"` // 断路的点
}

func (x *NavalBattleCircuit) Reset() {
	*x = NavalBattleCircuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleCircuit) ProtoMessage() {}

func (x *NavalBattleCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleCircuit.ProtoReflect.Descriptor instead.
func (*NavalBattleCircuit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{233}
}

func (x *NavalBattleCircuit) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *NavalBattleCircuit) GetStageIds() []int32 {
	if x != nil {
		return x.StageIds
	}
	return nil
}

type AssistCommanderHp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    *uint64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	CommanderId *int32  `protobuf:"varint,2,opt,name=commanderId" json:"commanderId,omitempty"`
	Hp          *int32  `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`
}

func (x *AssistCommanderHp) Reset() {
	*x = AssistCommanderHp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistCommanderHp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistCommanderHp) ProtoMessage() {}

func (x *AssistCommanderHp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistCommanderHp.ProtoReflect.Descriptor instead.
func (*AssistCommanderHp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{234}
}

func (x *AssistCommanderHp) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *AssistCommanderHp) GetCommanderId() int32 {
	if x != nil && x.CommanderId != nil {
		return *x.CommanderId
	}
	return 0
}

func (x *AssistCommanderHp) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

type NavalBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime *int64            `protobuf:"varint,1,opt,name=updateTime" json:"updateTime,omitempty"`
	Info       *BattlePlayerInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *NavalBattleInfo) Reset() {
	*x = NavalBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleInfo) ProtoMessage() {}

func (x *NavalBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleInfo.ProtoReflect.Descriptor instead.
func (*NavalBattleInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{235}
}

func (x *NavalBattleInfo) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *NavalBattleInfo) GetInfo() *BattlePlayerInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x4c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x69, 0x70, 0x4c, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0x9a, 0x09, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69,
	0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x50, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52,
	0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0b, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x45,
	0x78, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x56, 0x69, 0x70, 0x45, 0x78, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xe2, 0x09, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x78, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x50, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x50,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x61,
	0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x61,
	0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x68,
	0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x31, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f,
	0x73, 0x73, 0x31, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x32, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x32, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x33, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f,
	0x73, 0x73, 0x33, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x0d, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x13, 0x62, 0x65, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x13, 0x62, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x73, 0x74, 0x49, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x73,
	0x74, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x67, 0x72, 0x6f,
	0x77, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x04, 0x67, 0x72, 0x6f,
	0x77, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x05, 0x62, 0x65, 0x61, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0b, 0x62, 0x65, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x73, 0x74, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x53,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x53,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x70, 0x4c, 0x76, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x4c, 0x76,
	0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x7a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x7a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x61, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x09,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78,
	0x70, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x53,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0xbb, 0x08, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65,
	0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x69, 0x7a, 0x68, 0x69, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x7a, 0x69, 0x7a, 0x68, 0x69, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x75, 0x48, 0x75, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x79, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x79, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x75,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x70, 0x75,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x7a, 0x69, 0x7a, 0x68, 0x69, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x7a, 0x69, 0x7a,
	0x68, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x04, 0x47,
	0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04, 0x67, 0x72, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12,
	0x4c, 0x0a, 0x13, 0x62, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x62, 0x65, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x69, 0x0a,
	0x12, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x07, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x76,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x75, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x45, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x01,
	0x0a, 0x09, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x72, 0x45, 0x78,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a,
	0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12,
	0x2f, 0x0a, 0x06, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x69, 0x4d, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x51, 0x69, 0x4d, 0x65, 0x6e, 0x52, 0x05,
	0x71, 0x69, 0x4d, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x69, 0x4a, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x71, 0x69, 0x4a, 0x69, 0x22, 0x53, 0x0a, 0x0f, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x27,
	0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x51, 0x69, 0x4d, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8e, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x46, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15,
	0x69, 0x73, 0x44, 0x6f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x44,
	0x6f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x36,
	0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x63, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x65, 0x73, 0x63, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x60, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6c,
	0x69, 0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5a,
	0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xa4, 0x02, 0x0a, 0x04, 0x4d,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x47, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x22, 0x75, 0x0a, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x10, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x32, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x32, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x56, 0x69,
	0x70, 0x22, 0x3b, 0x0a, 0x09, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb,
	0x05, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x67,
	0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x76, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x07, 0x67, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x76, 0x67, 0x43, 0x69, 0x74, 0x79, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6d, 0x54, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x0c, 0x77, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x52, 0x0c,
	0x77, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x10,
	0x4c, 0x6d, 0x54, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x22, 0xda, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x22, 0x83, 0x01,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x47, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x47, 0x76, 0x67, 0x43, 0x69,
	0x74, 0x79, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x97, 0x02,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x32, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32,
	0x12, 0x27, 0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4e, 0x70, 0x63, 0x52, 0x03, 0x6e, 0x70, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x22, 0x66, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x6f,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x22, 0x52,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x78, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xb4, 0x02, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64,
	0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x89, 0x05, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x46,
	0x72, 0x65, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x6f, 0x6c, 0x64, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67,
	0x6f, 0x6c, 0x64, 0x46, 0x72, 0x65, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6f,
	0x6f, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x46,
	0x72, 0x65, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x6b, 0x65,
	0x48, 0x73, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x48, 0x73, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x7b, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x28, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01,
	0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0a,
	0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x28, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0x4d, 0x0a, 0x0f, 0x47,
	0x76, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x69, 0x64, 0x48, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64,
	0x69, 0x64, 0x48, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x77, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x46, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3e, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x42, 0x0a,
	0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x66, 0x66, 0x69, 0x78, 0x52,
	0x0a, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x03, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x03, 0x74, 0x6d, 0x70, 0x22, 0x54, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x18,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x77,
	0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8e, 0x02,
	0x0a, 0x0f, 0x50, 0x65, 0x61, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x69,
	0x0a, 0x11, 0x50, 0x65, 0x61, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x0e, 0x50, 0x65, 0x61,
	0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x50,
	0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0d,
	0x70, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x61,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0d, 0x70, 0x65, 0x61, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x65, 0x61,
	0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x61, 0x6b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x65, 0x61,
	0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11,
	0x70, 0x65, 0x61, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x61, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x04, 0x0a, 0x10, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x1e, 0x6e, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1e, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65,
	0x66, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x50,
	0x65, 0x61, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x22, 0x46, 0x0a, 0x0a, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x0f,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x22, 0x5e, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x05, 0x62, 0x65, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x05, 0x62, 0x65, 0x61,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x22, 0x39, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x68, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x4b, 0x69, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6c, 0x69, 0x74,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x76, 0x22, 0x83, 0x10,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x52, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x13, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x47, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x46, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x0c,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0c, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x6c, 0x69, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6e,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x18,
	0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x75, 0x48, 0x75, 0x6e, 0x52, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x57, 0x75, 0x48, 0x75,
	0x6e, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42,
	0x65, 0x61, 0x73, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73,
	0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x65,
	0x61, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18,
	0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x3b, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x57, 0x75, 0x48,
	0x75, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e,
	0x52, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x6e,
	0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x03,
	0x76, 0x65, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x22,
	0x55, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x5c, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x79, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x6d, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x65, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xa8,
	0x06, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x52, 0x08, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x52, 0x05, 0x62, 0x65, 0x61, 0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x75, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x75, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x75, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x75, 0x72, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72,
	0x69, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x82, 0x02, 0x0a, 0x10, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x68, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x78, 0x48, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x6d, 0x67,
	0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x12, 0x2c, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x9e,
	0x03, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x11, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a,
	0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x13, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x42, 0x65, 0x61, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73,
	0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6b, 0x69,
	0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x22, 0x58, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x69,
	0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x0d, 0x53, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x6c, 0x0a, 0x08, 0x53, 0x6c, 0x61, 0x79, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x50,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x22, 0x51, 0x0a, 0x13, 0x53, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x68, 0x70, 0x22, 0x2f, 0x0a, 0x09, 0x53, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x67, 0x6f, 0x6c, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x53, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x6c,
	0x61, 0x79, 0x53, 0x69, 0x6c, 0x6b, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x22, 0x1f, 0x0a, 0x07, 0x53, 0x69, 0x6c,
	0x6b, 0x42, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x53, 0x6c,
	0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x53, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6c,
	0x61, 0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5a,
	0x0a, 0x0f, 0x53, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x62, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x41, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xc0,
	0x03, 0x0a, 0x08, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4b, 0x69, 0x6c, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x22, 0xdd, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x79, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x73,
	0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x22, 0x4f, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x57, 0x61, 0x67, 0x65, 0x73, 0x47, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x57,
	0x61, 0x67, 0x65, 0x73, 0x47, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x37, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x11, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x42, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x42, 0x75, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76,
	0x69, 0x70, 0x45, 0x78, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x69,
	0x66, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68,
	0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x48, 0x61, 0x6e, 0x64,
	0x42, 0x6f, 0x6f, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xd9, 0x02,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x44, 0x72,
	0x61, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x72,
	0x61, 0x6d, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x53, 0x68, 0x6f,
	0x70, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x72,
	0x61, 0x6d, 0x61, 0x42, 0x6f, 0x78, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x22, 0x67, 0x0a, 0x0a, 0x44,
	0x72, 0x61, 0x6d, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x6f, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x53, 0x68, 0x6f,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x75, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x75,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x42, 0x6f,
	0x78, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x45, 0x74, 0x63, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6c,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x51, 0x75, 0x61, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x73, 0x22,
	0x31, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x30, 0x0a, 0x08, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x9d, 0x04, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12,
	0x29, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x75,
	0x48, 0x75, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x65, 0x70,
	0x75, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65,
	0x70, 0x75, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x90, 0x02, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x22, 0x5a, 0x0a, 0x06, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x7b, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x44, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x69, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x6d, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x6d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x47, 0x76, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77,
	0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x47, 0x76, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x72, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x65,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x67, 0x72, 0x6f, 0x77,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x04, 0x67, 0x72, 0x6f, 0x77,
	0x12, 0x43, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xfe, 0x07, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x4d,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x63, 0x68, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x65, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73,
	0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x77, 0x75, 0x48, 0x75, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x05, 0x77, 0x75, 0x48, 0x75,
	0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x09, 0x62,
	0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x75, 0x74, 0x79, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x75, 0x74, 0x79, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x53, 0x65,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x22, 0x97,
	0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4d, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a,
	0x0a, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x06, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b,
	0x47, 0x76, 0x67, 0x41, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x57, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x57, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x05, 0x42, 0x65, 0x61, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76,
	0x6f, 0x4c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x76, 0x6f, 0x4c, 0x76,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x76,
	0x6f, 0x75, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x65, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x65, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x0d,
	0x42, 0x65, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x68,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x33, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x84, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x22,
	0x63, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x03, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x6b,
	0x57, 0x61, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x12,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x13,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x12, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x4d, 0x0a, 0x15, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x22, 0x6e,
	0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x0d, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x41, 0x72, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x58,
	0x0a, 0x09, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x04, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x41, 0x72,
	0x6d, 0x73, 0x52, 0x04, 0x61, 0x72, 0x6d, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x59, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x59, 0x6f, 0x75, 0x74,
	0x68, 0x46, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x22, 0x7b, 0x0a, 0x08, 0x4c,
	0x6d, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6d, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x4c, 0x6d, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x12, 0x44, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x31,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x31, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x31, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x73, 0x74, 0x73, 0x31, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x07, 0x62, 0x65, 0x61,
	0x73, 0x74, 0x73, 0x31, 0x12, 0x27, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x73, 0x32, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x65, 0x61, 0x73, 0x74, 0x52, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x73, 0x32, 0x22, 0xdc, 0x02,
	0x0a, 0x08, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x4b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x31, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06,
	0x70, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x4b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x75, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0e,
	0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x4b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x32, 0x22, 0x6a,
	0x0a, 0x0b, 0x57, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x7c, 0x0a, 0x0f, 0x57, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f,
	0x6e, 0x46, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0xfa, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x6e, 0x46, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x69, 0x5a, 0x68,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x7a, 0x69, 0x5a, 0x68, 0x69, 0x22, 0xd0,
	0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x73, 0x12,
	0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x58, 0x0a, 0x10, 0x57, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10,
	0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x68, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x68, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x50, 0x76, 0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x50, 0x76, 0x45, 0x22, 0x2c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x46, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x66, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x57, 0x6f, 0x6e, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x6f, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47,
	0x0a, 0x0f, 0x57, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0a, 0x57, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x6e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69,
	0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x02,
	0x0a, 0x10, 0x57, 0x6f, 0x6e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x71, 0x75, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x57, 0x6f, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x76, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x68, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74, 0x22,
	0x55, 0x0a, 0x09, 0x57, 0x6f, 0x6e, 0x46, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x09, 0x41, 0x75, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a,
	0x0f, 0x41, 0x75, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x47, 0x4f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x39, 0x0a, 0x0f, 0x57, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0a,
	0x42, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x6c, 0x0a, 0x09, 0x43, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x46, 0x65,
	0x61, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x41,
	0x0a, 0x0d, 0x43, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x48, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70,
	0x79, 0x46, 0x6c, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x58, 0x0a, 0x0d, 0x48, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x22, 0x29, 0x0a, 0x0f, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x79, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x75, 0x79, 0x49, 0x64, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x65,
	0x46, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x65, 0x46, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x46, 0x74, 0x73, 0x22,
	0x52, 0x0a, 0x0f, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x72, 0x61, 0x70,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x22, 0xe4, 0x02, 0x0a, 0x12, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x46, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x46, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x48, 0x70, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x70, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x48, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x70, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x48, 0x70, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x22, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x4e,
	0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x70, 0x49, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x1a, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x66, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x64, 0x69, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x10, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x12, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x61, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x68, 0x70, 0x22, 0x5f, 0x0a, 0x0f, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x2a, 0x8d, 0x06, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x68,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x69, 0x70, 0x45, 0x78, 0x70, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x78, 0x70, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x10, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08,
	0x70, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x10, 0x1c, 0x12, 0x11, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x1d,
	0x12, 0x10, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x10, 0x1e, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x77,
	0x75, 0x48, 0x75, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x2b, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x76, 0x65, 0x6e, 0x69, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x24, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x69, 0x6e, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x75, 0x63, 0x6b, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x53, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x2f, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x69,
	0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x73, 0x10, 0x30,
	0x12, 0x15, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x33, 0x12, 0x13, 0x0a,
	0x0f, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x10, 0x3c, 0x12, 0x16, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xe5, 0x07, 0x12, 0x09, 0x0a, 0x04, 0x63, 0x61,
	0x73, 0x68, 0x10, 0xe6, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0xe7, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xa8, 0x46, 0x12, 0x0a, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x99, 0x4a, 0x12, 0x0a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x9a, 0x4a, 0x12, 0x0d, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x9b, 0x4a, 0x2a, 0xda, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x48, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x45, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x45, 0x76, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73,
	0x73, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x76, 0x55, 0x70, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x10,
	0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x10, 0x80, 0x01,
	0x2a, 0x23, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x10, 0x01, 0x2a, 0xd2, 0x05, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x65, 0x61, 0x6b, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x31, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x32, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x33, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x73, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x76,
	0x65, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x10,
	0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x0e,
	0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x32, 0x10,
	0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x33,
	0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x62, 0x69, 0x31, 0x10, 0x11, 0x12, 0x0a,
	0x0a, 0x06, 0x63, 0x68, 0x69, 0x62, 0x69, 0x32, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x67, 0x76,
	0x65, 0x53, 0x69, 0x65, 0x67, 0x65, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x79, 0x50, 0x65,
	0x61, 0x6b, 0x31, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x32,
	0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x33, 0x10, 0x16, 0x12,
	0x09, 0x0a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x31, 0x10, 0x18,
	0x12, 0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x32, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x71, 0x69, 0x65, 0x63, 0x75, 0x6f,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x71, 0x69, 0x65, 0x63,
	0x75, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x67,
	0x76, 0x67, 0x31, 0x10, 0x1c, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x76, 0x67, 0x32, 0x10, 0x1d, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x76, 0x67, 0x33, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x79, 0x50,
	0x65, 0x61, 0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x32, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x33, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x34, 0x10, 0x22, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x23, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x24, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x25,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6d, 0x31, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6d, 0x32,
	0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6d, 0x33, 0x10, 0x29, 0x12, 0x08, 0x0a, 0x04, 0x77,
	0x6f, 0x6e, 0x31, 0x10, 0x2a, 0x12, 0x08, 0x0a, 0x04, 0x77, 0x6f, 0x6e, 0x32, 0x10, 0x2b, 0x12,
	0x08, 0x0a, 0x04, 0x77, 0x6f, 0x6e, 0x33, 0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x31, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x32, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x33, 0x10, 0x2f, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x31, 0x10, 0x30, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x61, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x32, 0x10, 0x31, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x33, 0x10, 0x32, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x33, 0x2a, 0x30, 0x0a, 0x08, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x03, 0x2a, 0x7d, 0x0a, 0x08,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x76, 0x69,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x10, 0x09, 0x2a, 0xcc, 0x01, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x69, 0x74, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x33,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x41,
	0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69,
	0x66, 0x74, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x2a, 0x2a, 0x0a, 0x0b, 0x41, 0x77,
	0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x55, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x0d,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x4b, 0x0a, 0x0a, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x10, 0x05, 0x2a, 0x85, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x6d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x10, 0xff, 0x07, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x80, 0x08, 0x2a, 0x96,
	0x05, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x54, 0x68, 0x69, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x10, 0x64,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x47, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x10, 0xc8, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x10, 0xc9, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x54, 0x68, 0x61, 0x6e, 0x6b,
	0x73, 0x10, 0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x73, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x10, 0xcb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0xcc, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0xcd,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x4d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0xe7,
	0x07, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x72, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x10, 0xac, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0xe9, 0x07, 0x12,
	0x13, 0x0a, 0x0e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x70, 0x31, 0x36, 0x47, 0x65,
	0x6e, 0x10, 0xea, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x54, 0x6f,
	0x70, 0x31, 0x36, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x12, 0x0a, 0x0d,
	0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x70, 0x38, 0x47, 0x65, 0x6e, 0x10, 0xec, 0x07,
	0x12, 0x15, 0x0a, 0x10, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x70, 0x38, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x10, 0xed, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x54, 0x6f, 0x70, 0x34, 0x47, 0x65, 0x6e, 0x10, 0xee, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x44,
	0x79, 0x50, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x70, 0x34, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10,
	0xef, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x4c, 0x61, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x10, 0xf0, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0xf1, 0x07, 0x12, 0x13, 0x0a,
	0x0e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x10,
	0xf2, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x10, 0xd1, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x53,
	0x65, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0xb9, 0x17, 0x12, 0x0c, 0x0a, 0x07, 0x47,
	0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x10, 0x91, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x92, 0x4e, 0x12,
	0x12, 0x0a, 0x0d, 0x47, 0x76, 0x67, 0x43, 0x69, 0x74, 0x79, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x10, 0x93, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x6d, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x45, 0x6e,
	0x64, 0x10, 0xa1, 0x1f, 0x12, 0x11, 0x0a, 0x0c, 0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x6f, 0x72, 0x10, 0x94, 0x4e, 0x2a, 0xf9, 0x04, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73,
	0x73, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x6f, 0x73, 0x73, 0x32, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x33, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x53, 0x75,
	0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70,
	0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0c, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x10, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x62, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x12, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x31, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x32, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x32, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x33, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x34, 0x10, 0x17, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x10, 0x18, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x10,
	0x19, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x63, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x65,
	0x61, 0x6b, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x70, 0x10, 0x66, 0x12, 0x14, 0x0a,
	0x10, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x48,
	0x70, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c,
	0x10, 0x68, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x10, 0x69,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x10, 0x78, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0x79, 0x12, 0x08, 0x0a,
	0x03, 0x47, 0x76, 0x67, 0x10, 0xc9, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x57, 0x6f, 0x6e, 0x10, 0xca,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x10, 0xcb, 0x01, 0x2a, 0x90, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x65, 0x79, 0x6f, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x6b, 0x65,
	0x48, 0x73, 0x63, 0x68, 0x10, 0x09, 0x2a, 0x3e, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x65, 0x63, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x06, 0x2a, 0x40, 0x0a, 0x07, 0x47,
	0x76, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x76, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x5f, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x76, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x5f, 0x53, 0x69, 0x65, 0x67, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x76, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x10, 0x02, 0x2a, 0xa8, 0x01,
	0x0a, 0x0a, 0x47, 0x76, 0x65, 0x43, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x48, 0x61, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x61, 0x73, 0x42, 0x6f, 0x78, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69,
	0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x69, 0x65, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x69, 0x65, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x47,
	0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x76, 0x65,
	0x54, 0x61, 0x78, 0x42, 0x6f, 0x78, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x42, 0x6f, 0x78, 0x10, 0x09, 0x2a, 0x53, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x6c, 0x64,
	0x65, 0x6e, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x30, 0x0a,
	0x12, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x02, 0x2a,
	0x41, 0x0a, 0x0d, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x10, 0x06, 0x2a, 0x38, 0x0a, 0x10, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0d,
	0x50, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x2a, 0x37, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x6c,
	0x61, 0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x6d, 0x79, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x41, 0x72, 0x6d, 0x79, 0x10, 0x06, 0x2a, 0x45,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x69, 0x72, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x69, 0x72, 0x74, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x61, 0x78, 0x10, 0x0a, 0x2a, 0x44, 0x0a, 0x09, 0x48, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70,
	0x55, 0x49, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x49, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x68, 0x61, 0x74, 0x55, 0x49, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x49, 0x10, 0x04, 0x2a, 0x2e, 0x0a, 0x0d, 0x43,
	0x68, 0x69, 0x62, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x3a, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x53,
	0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x4d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x10, 0x06, 0x2a, 0x69, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x6c, 0x75, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x06,
	0x2a, 0x37, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x57, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0b, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x03, 0x2a, 0x7c, 0x0a, 0x16, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f,
	0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x32, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x33, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x34, 0x10, 0x04, 0x2a,
	0x5f, 0x0a, 0x0b, 0x57, 0x6f, 0x6e, 0x46, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x06,
	0x2a, 0x29, 0x0a, 0x0a, 0x57, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x63, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x17, 0x57,
	0x6f, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0e, 0x57, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x07, 0x41, 0x75, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x57, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0f, 0x48,
	0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x10, 0x02, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x75, 0x75, 0x7a, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x2f, 0x70, 0x62, 0x74,
	0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 44)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 236)
var file_common_proto_goTypes = []interface{}{
	(PlayerPropertyType)(0),            // 0: common.PlayerPropertyType
	(UsedFunction)(0),                  // 1: common.UsedFunction
	(OverlordStatus)(0),                // 2: common.OverlordStatus
	(FormationType)(0),                 // 3: common.FormationType
	(SwitchID)(0),                      // 4: common.SwitchID
	(Division)(0),                      // 5: common.Division
	(ItemShow)(0),                      // 6: common.ItemShow
	(AwakeStatus)(0),                   // 7: common.AwakeStatus
	(CommanderAwakeTaskStatus)(0),      // 8: common.CommanderAwakeTaskStatus
	(MissionStatus)(0),                 // 9: common.MissionStatus
	(FriendType)(0),                    // 10: common.FriendType
	(ChatChannel)(0),                   // 11: common.ChatChannel
	(ChatCellType)(0),                  // 12: common.ChatCellType
	(RankType)(0),                      // 13: common.RankType
	(ShopType)(0),                      // 14: common.ShopType
	(GuildPowerType)(0),                // 15: common.GuildPowerType
	(GuildHonorType)(0),                // 16: common.GuildHonorType
	(GveStep)(0),                       // 17: common.GveStep
	(GveCueType)(0),                    // 18: common.GveCueType
	(TreasureQuality)(0),               // 19: common.TreasureQuality
	(TreasureRefineType)(0),            // 20: common.TreasureRefineType
	(TreasureAffix)(0),                 // 21: common.TreasureAffix
	(TreasureFateType)(0),              // 22: common.TreasureFateType
	(PeakStateStep)(0),                 // 23: common.PeakStateStep
	(BattleResultErrorCode)(0),         // 24: common.BattleResultErrorCode
	(SlayFightReportType)(0),           // 25: common.SlayFightReportType
	(StrMansionTabType)(0),             // 26: common.StrMansionTabType
	(HideVipUI)(0),                     // 27: common.HideVipUI
	(ChibiRankType)(0),                 // 28: common.ChibiRankType
	(SeasonFundTaskType)(0),            // 29: common.SeasonFundTaskType
	(StarSealLogType)(0),               // 30: common.StarSealLogType
	(SeasonTaskType)(0),                // 31: common.SeasonTaskType
	(DrawPoolType)(0),                  // 32: common.DrawPoolType
	(CrossRankWonType)(0),              // 33: common.CrossRankWonType
	(LadderState)(0),                   // 34: common.LadderState
	(LadderGodBattleLogType)(0),        // 35: common.LadderGodBattleLogType
	(WonFtStatus)(0),                   // 36: common.WonFtStatus
	(WonActType)(0),                    // 37: common.WonActType
	(WonSurrenderApplyStatus)(0),       // 38: common.WonSurrenderApplyStatus
	(WonMessageType)(0),                // 39: common.WonMessageType
	(AucType)(0),                       // 40: common.AucType
	(HappyFlopStatus)(0),               // 41: common.HappyFlopStatus
	(NavalStage_NavalStageState)(0),    // 42: common.NavalStage.NavalStageState
	(NavalBattleUniteFt_State)(0),      // 43: common.NavalBattleUniteFt.State
	(*PlayerHeadPortrait)(nil),         // 44: common.PlayerHeadPortrait
	(*PlayerSimpleData)(nil),           // 45: common.PlayerSimpleData
	(*PlayerSimpleDataEx)(nil),         // 46: common.PlayerSimpleDataEx
	(*BeastCommanderInfo)(nil),         // 47: common.BeastCommanderInfo
	(*DeviceInfo)(nil),                 // 48: common.DeviceInfo
	(*FormationCounsellor)(nil),        // 49: common.FormationCounsellor
	(*ItemExtra)(nil),                  // 50: common.ItemExtra
	(*Item)(nil),                       // 51: common.Item
	(*CommanderSkill)(nil),             // 52: common.CommanderSkill
	(*CommanderEquip)(nil),             // 53: common.CommanderEquip
	(*CommanderMedication)(nil),        // 54: common.CommanderMedication
	(*CommanderPotential)(nil),         // 55: common.CommanderPotential
	(*CommanderImprove)(nil),           // 56: common.CommanderImprove
	(*CommanderDestiny)(nil),           // 57: common.CommanderDestiny
	(*Commander)(nil),                  // 58: common.Commander
	(*Grid)(nil),                       // 59: common.Grid
	(*Formation)(nil),                  // 60: common.Formation
	(*FormationDetail)(nil),            // 61: common.FormationDetail
	(*FormationGroupItem)(nil),         // 62: common.FormationGroupItem
	(*Soldier)(nil),                    // 63: common.Soldier
	(*WuHun)(nil),                      // 64: common.WuHun
	(*OnlyEquip)(nil),                  // 65: common.OnlyEquip
	(*SoldierTech)(nil),                // 66: common.SoldierTech
	(*Counsellor)(nil),                 // 67: common.Counsellor
	(*CounsellorMagic)(nil),            // 68: common.CounsellorMagic
	(*CounsellorQiMen)(nil),            // 69: common.CounsellorQiMen
	(*MissionUnit)(nil),                // 70: common.MissionUnit
	(*MissionTargetChapter)(nil),       // 71: common.MissionTargetChapter
	(*MissionChapter)(nil),             // 72: common.MissionChapter
	(*Position)(nil),                   // 73: common.Position
	(*WorldMap)(nil),                   // 74: common.WorldMap
	(*Fortress)(nil),                   // 75: common.Fortress
	(*District)(nil),                   // 76: common.District
	(*TimeMission)(nil),                // 77: common.TimeMission
	(*DungeonLevel)(nil),               // 78: common.DungeonLevel
	(*DungeonChapter)(nil),             // 79: common.DungeonChapter
	(*MailCondition)(nil),              // 80: common.MailCondition
	(*Mail)(nil),                       // 81: common.Mail
	(*Friends)(nil),                    // 82: common.Friends
	(*FriendCommonData)(nil),           // 83: common.FriendCommonData
	(*VoiceData)(nil),                  // 84: common.VoiceData
	(*ChatCell)(nil),                   // 85: common.ChatCell
	(*LmTopThreePlayer)(nil),           // 86: common.LmTopThreePlayer
	(*ChatSender)(nil),                 // 87: common.ChatSender
	(*ChatGvePass)(nil),                // 88: common.ChatGvePass
	(*ChatWorldBossKilled)(nil),        // 89: common.ChatWorldBossKilled
	(*ChatGvgCityOccupy)(nil),          // 90: common.ChatGvgCityOccupy
	(*ChatWonConqueror)(nil),           // 91: common.ChatWonConqueror
	(*ChatBattle)(nil),                 // 92: common.ChatBattle
	(*ChatBattlePlayer)(nil),           // 93: common.ChatBattlePlayer
	(*ChatBattleNpc)(nil),              // 94: common.ChatBattleNpc
	(*Announce)(nil),                   // 95: common.Announce
	(*LoopTime)(nil),                   // 96: common.LoopTime
	(*AnnounceMessage)(nil),            // 97: common.AnnounceMessage
	(*PlayerRankReward)(nil),           // 98: common.PlayerRankReward
	(*MarketGrid)(nil),                 // 99: common.MarketGrid
	(*ItemMarket)(nil),                 // 100: common.ItemMarket
	(*ShopDailyRecord)(nil),            // 101: common.ShopDailyRecord
	(*TrainItem)(nil),                  // 102: common.TrainItem
	(*TrainBarrage)(nil),               // 103: common.TrainBarrage
	(*ReplaySimple)(nil),               // 104: common.ReplaySimple
	(*GuildHonorPlayer)(nil),           // 105: common.GuildHonorPlayer
	(*GuildLog)(nil),                   // 106: common.GuildLog
	(*SoulBoxLog)(nil),                 // 107: common.SoulBoxLog
	(*GuildAnnouncement)(nil),          // 108: common.GuildAnnouncement
	(*Coordinate)(nil),                 // 109: common.Coordinate
	(*GveDamageRecord)(nil),            // 110: common.GveDamageRecord
	(*Treasure)(nil),                   // 111: common.Treasure
	(*TreasureFate)(nil),               // 112: common.TreasureFate
	(*TreasureFatesInfo)(nil),          // 113: common.TreasureFatesInfo
	(*TreasureRefine)(nil),             // 114: common.TreasureRefine
	(*TreasureRefineSlot)(nil),         // 115: common.TreasureRefineSlot
	(*TreasureRefineAttr)(nil),         // 116: common.TreasureRefineAttr
	(*ArenaBattleLogPlayerInfo)(nil),   // 117: common.ArenaBattleLogPlayerInfo
	(*ArenaBattleLog)(nil),             // 118: common.ArenaBattleLog
	(*ArenaBattleInfo)(nil),            // 119: common.ArenaBattleInfo
	(*PeakMatchPlayer)(nil),            // 120: common.PeakMatchPlayer
	(*PeakFormationData)(nil),          // 121: common.PeakFormationData
	(*PeakBattleData)(nil),             // 122: common.PeakBattleData
	(*PeakStateData)(nil),              // 123: common.PeakStateData
	(*PeakBattleResult)(nil),           // 124: common.PeakBattleResult
	(*PeakBattleLogPlayerInfo)(nil),    // 125: common.PeakBattleLogPlayerInfo
	(*PeakBattleLog)(nil),              // 126: common.PeakBattleLog
	(*BattleAttr)(nil),                 // 127: common.BattleAttr
	(*SoldierTechSkill)(nil),           // 128: common.SoldierTechSkill
	(*PlayerGuildSkill)(nil),           // 129: common.PlayerGuildSkill
	(*BattleCommander)(nil),            // 130: common.BattleCommander
	(*BattleNpcCommander)(nil),         // 131: common.BattleNpcCommander
	(*BattleCounsellor)(nil),           // 132: common.BattleCounsellor
	(*BattleBeast)(nil),                // 133: common.BattleBeast
	(*BattleDailyBoss)(nil),            // 134: common.BattleDailyBoss
	(*BattleDailyExp)(nil),             // 135: common.BattleDailyExp
	(*BattleDailyCoin)(nil),            // 136: common.BattleDailyCoin
	(*Skill)(nil),                      // 137: common.Skill
	(*BattlePlayerInfo)(nil),           // 138: common.BattlePlayerInfo
	(*AssistWuHun)(nil),                // 139: common.AssistWuHun
	(*AssistMount)(nil),                // 140: common.AssistMount
	(*AssistOnlyEquip)(nil),            // 141: common.AssistOnlyEquip
	(*SoliderSkill)(nil),               // 142: common.SoliderSkill
	(*ProfessionSkill)(nil),            // 143: common.ProfessionSkill
	(*BattleStartInfo)(nil),            // 144: common.BattleStartInfo
	(*BattlePlayerInput)(nil),          // 145: common.BattlePlayerInput
	(*BattleFrameData)(nil),            // 146: common.BattleFrameData
	(*BattleResultCommander)(nil),      // 147: common.BattleResultCommander
	(*BattleResultBeast)(nil),          // 148: common.BattleResultBeast
	(*BattleResultInfo)(nil),           // 149: common.BattleResultInfo
	(*BattleSkillDamage)(nil),          // 150: common.BattleSkillDamage
	(*BattleSoldierDamage)(nil),        // 151: common.BattleSoldierDamage
	(*BattleTeamDamage)(nil),           // 152: common.BattleTeamDamage
	(*BattleCounsellorDamage)(nil),     // 153: common.BattleCounsellorDamage
	(*BattleReplay)(nil),               // 154: common.BattleReplay
	(*BattleDamageData)(nil),           // 155: common.BattleDamageData
	(*BattlePlayerDamage)(nil),         // 156: common.BattlePlayerDamage
	(*BattleShareDamage)(nil),          // 157: common.BattleShareDamage
	(*BattleStat)(nil),                 // 158: common.BattleStat
	(*BattleCommanderStat)(nil),        // 159: common.BattleCommanderStat
	(*BattleCommanderKillSoldier)(nil), // 160: common.BattleCommanderKillSoldier
	(*BattleCommanderKillTeam)(nil),    // 161: common.BattleCommanderKillTeam
	(*BattleCommanderSkill)(nil),       // 162: common.BattleCommanderSkill
	(*SlayCommander)(nil),              // 163: common.SlayCommander
	(*SlayCity)(nil),                   // 164: common.SlayCity
	(*SlayPlayerCommander)(nil),        // 165: common.SlayPlayerCommander
	(*SlayPower)(nil),                  // 166: common.SlayPower
	(*SlayAttack)(nil),                 // 167: common.SlayAttack
	(*SlaySilkBuy)(nil),                // 168: common.SlaySilkBuy
	(*SilkBag)(nil),                    // 169: common.SilkBag
	(*SlayEvent)(nil),                  // 170: common.SlayEvent
	(*SlayFightReport)(nil),            // 171: common.SlayFightReport
	(*SlayRoundReport)(nil),            // 172: common.SlayRoundReport
	(*TaskCell)(nil),                   // 173: common.TaskCell
	(*DailyBoss)(nil),                  // 174: common.DailyBoss
	(*DailyBossData)(nil),              // 175: common.DailyBossData
	(*DailyBossLevelData)(nil),         // 176: common.DailyBossLevelData
	(*DailyExp)(nil),                   // 177: common.DailyExp
	(*DailyCoin)(nil),                  // 178: common.DailyCoin
	(*StrMansion)(nil),                 // 179: common.StrMansion
	(*StrTalent)(nil),                  // 180: common.StrTalent
	(*PrivilegeData)(nil),              // 181: common.PrivilegeData
	(*PrivilegeAbility)(nil),           // 182: common.PrivilegeAbility
	(*PrivilegeEffect)(nil),            // 183: common.PrivilegeEffect
	(*PrivilegeShopItem)(nil),          // 184: common.PrivilegeShopItem
	(*VipData)(nil),                    // 185: common.VipData
	(*HandBook)(nil),                   // 186: common.HandBook
	(*HandBookQuest)(nil),              // 187: common.HandBookQuest
	(*QuestionnaireInfo)(nil),          // 188: common.QuestionnaireInfo
	(*DramaStage)(nil),                 // 189: common.DramaStage
	(*DramaSkill)(nil),                 // 190: common.DramaSkill
	(*DramaShop)(nil),                  // 191: common.DramaShop
	(*DramaBox)(nil),                   // 192: common.DramaBox
	(*EtcdValue)(nil),                  // 193: common.EtcdValue
	(*Album)(nil),                      // 194: common.Album
	(*AlbumItem)(nil),                  // 195: common.AlbumItem
	(*AlbumQua)(nil),                   // 196: common.AlbumQua
	(*AssistCommander)(nil),            // 197: common.AssistCommander
	(*Employee)(nil),                   // 198: common.Employee
	(*AssistLog)(nil),                  // 199: common.AssistLog
	(*Bullet)(nil),                     // 200: common.Bullet
	(*OfflineReward)(nil),              // 201: common.OfflineReward
	(*UserOfflineReward)(nil),          // 202: common.UserOfflineReward
	(*FirstInfo)(nil),                  // 203: common.FirstInfo
	(*GvgBattleLog)(nil),               // 204: common.GvgBattleLog
	(*GvgBattleLogPlayer)(nil),         // 205: common.GvgBattleLogPlayer
	(*PlayerFormationData)(nil),        // 206: common.PlayerFormationData
	(*PlayerGrow)(nil),                 // 207: common.PlayerGrow
	(*SeasonFundTask)(nil),             // 208: common.SeasonFundTask
	(*StarSealLog)(nil),                // 209: common.StarSealLog
	(*PlayerLog)(nil),                  // 210: common.PlayerLog
	(*PlayerLogs)(nil),                 // 211: common.PlayerLogs
	(*RebateInfo)(nil),                 // 212: common.RebateInfo
	(*RebateData)(nil),                 // 213: common.RebateData
	(*Rebate)(nil),                     // 214: common.Rebate
	(*CrossRankGvgArg)(nil),            // 215: common.CrossRankGvgArg
	(*CrossRankWonArg)(nil),            // 216: common.CrossRankWonArg
	(*Beast)(nil),                      // 217: common.Beast
	(*BeastLocation)(nil),              // 218: common.BeastLocation
	(*BeastTalent)(nil),                // 219: common.BeastTalent
	(*MountItem)(nil),                  // 220: common.MountItem
	(*MountRefine)(nil),                // 221: common.MountRefine
	(*ResignAttr)(nil),                 // 222: common.ResignAttr
	(*LadderHistoryInfo)(nil),          // 223: common.LadderHistoryInfo
	(*LadderBattleLog)(nil),            // 224: common.LadderBattleLog
	(*LadderGodBattleLog)(nil),         // 225: common.LadderGodBattleLog
	(*LadderGodBattleLogs)(nil),        // 226: common.LadderGodBattleLogs
	(*LadderBattlePlayer)(nil),         // 227: common.LadderBattlePlayer
	(*LadderBattleCommander)(nil),      // 228: common.LadderBattleCommander
	(*ExpeditionRankItem)(nil),         // 229: common.ExpeditionRankItem
	(*BiographyArms)(nil),              // 230: common.BiographyArms
	(*BiographyCommander)(nil),         // 231: common.BiographyCommander
	(*Biography)(nil),                  // 232: common.Biography
	(*OpActivity)(nil),                 // 233: common.OpActivity
	(*YouthReturnGiftItem)(nil),        // 234: common.YouthReturnGiftItem
	(*YouthFreeItem)(nil),              // 235: common.YouthFreeItem
	(*LmChoose)(nil),                   // 236: common.LmChoose
	(*LmChooseRound)(nil),              // 237: common.LmChooseRound
	(*DyPeakBattleResult)(nil),         // 238: common.DyPeakBattleResult
	(*DyPeakPK)(nil),                   // 239: common.DyPeakPK
	(*DyPeakPKPlayer)(nil),             // 240: common.DyPeakPKPlayer
	(*WonMetadata)(nil),                // 241: common.WonMetadata
	(*WonUserMetadata)(nil),            // 242: common.WonUserMetadata
	(*WonGuildMetadata)(nil),           // 243: common.WonGuildMetadata
	(*WonFtMetadata)(nil),              // 244: common.WonFtMetadata
	(*WonBattleField)(nil),             // 245: common.WonBattleField
	(*WonMapOccupyInfo)(nil),           // 246: common.WonMapOccupyInfo
	(*WonConquerorInfo)(nil),           // 247: common.WonConquerorInfo
	(*WonBattleLog)(nil),               // 248: common.WonBattleLog
	(*PlayerFt)(nil),                   // 249: common.PlayerFt
	(*WonSurrenderApply)(nil),          // 250: common.WonSurrenderApply
	(*WonDeclareGuild)(nil),            // 251: common.WonDeclareGuild
	(*WonMessage)(nil),                 // 252: common.WonMessage
	(*WonOccupyMessage)(nil),           // 253: common.WonOccupyMessage
	(*WonTotalKillMessage)(nil),        // 254: common.WonTotalKillMessage
	(*WonPlayerFtReportMessage)(nil),   // 255: common.WonPlayerFtReportMessage
	(*WonFtCoor)(nil),                  // 256: common.WonFtCoor
	(*AucRecord)(nil),                  // 257: common.AucRecord
	(*AucUserMetadata)(nil),            // 258: common.AucUserMetadata
	(*GOClearStage)(nil),               // 259: common.GOClearStage
	(*WarSoulSchedule)(nil),            // 260: common.WarSoulSchedule
	(*BazaarItem)(nil),                 // 261: common.BazaarItem
	(*CakeFeast)(nil),                  // 262: common.CakeFeast
	(*CakeFeastSlot)(nil),              // 263: common.CakeFeastSlot
	(*HappyFlop)(nil),                  // 264: common.HappyFlop
	(*HappyFlopCard)(nil),              // 265: common.HappyFlopCard
	(*BattleUnitHp)(nil),               // 266: common.BattleUnitHp
	(*NavalBattleShop)(nil),            // 267: common.NavalBattleShop
	(*NavalStage)(nil),                 // 268: common.NavalStage
	(*NavalBattleUniteFt)(nil),         // 269: common.NavalBattleUniteFt
	(*NavalBattleEnemy)(nil),           // 270: common.NavalBattleEnemy
	(*NavalBattleTeam)(nil),            // 271: common.NavalBattleTeam
	(*NavalBattleSearchFormation)(nil), // 272: common.NavalBattleSearchFormation
	(*NavalBattleFormation)(nil),       // 273: common.NavalBattleFormation
	(*NavalBattleResultFormation)(nil), // 274: common.NavalBattleResultFormation
	(*NavalBattleRankPlayer)(nil),      // 275: common.NavalBattleRankPlayer
	(*NavalBattleEvent)(nil),           // 276: common.NavalBattleEvent
	(*NavalBattleCircuit)(nil),         // 277: common.NavalBattleCircuit
	(*AssistCommanderHp)(nil),          // 278: common.AssistCommanderHp
	(*NavalBattleInfo)(nil),            // 279: common.NavalBattleInfo
}
var file_common_proto_depIdxs = []int32{
	82,  // 0: common.PlayerSimpleData.friends:type_name -> common.Friends
	49,  // 1: common.PlayerSimpleData.formationCounsellor:type_name -> common.FormationCounsellor
	129, // 2: common.PlayerSimpleData.guildSkills:type_name -> common.PlayerGuildSkill
	58,  // 3: common.PlayerSimpleDataEx.commanders:type_name -> common.Commander
	60,  // 4: common.PlayerSimpleDataEx.formation:type_name -> common.Formation
	67,  // 5: common.PlayerSimpleDataEx.hotCounsellor:type_name -> common.Counsellor
	47,  // 6: common.PlayerSimpleDataEx.beastCommanderInfos:type_name -> common.BeastCommanderInfo
	207, // 7: common.PlayerSimpleDataEx.grow:type_name -> common.PlayerGrow
	217, // 8: common.BeastCommanderInfo.beast:type_name -> common.Beast
	58,  // 9: common.BeastCommanderInfo.commander:type_name -> common.Commander
	219, // 10: common.BeastCommanderInfo.beastTalent:type_name -> common.BeastTalent
	3,   // 11: common.FormationCounsellor.formationType:type_name -> common.FormationType
	6,   // 12: common.Item.show:type_name -> common.ItemShow
	50,  // 13: common.Item.extra:type_name -> common.ItemExtra
	52,  // 14: common.Commander.skills:type_name -> common.CommanderSkill
	53,  // 15: common.Commander.equips:type_name -> common.CommanderEquip
	55,  // 16: common.Commander.potentials:type_name -> common.CommanderPotential
	54,  // 17: common.Commander.medications:type_name -> common.CommanderMedication
	7,   // 18: common.Commander.awakeStatus:type_name -> common.AwakeStatus
	52,  // 19: common.Commander.awakeSkill:type_name -> common.CommanderSkill
	57,  // 20: common.Commander.destinys:type_name -> common.CommanderDestiny
	59,  // 21: common.Formation.grid:type_name -> common.Grid
	58,  // 22: common.FormationDetail.commanders:type_name -> common.Commander
	60,  // 23: common.FormationDetail.formation:type_name -> common.Formation
	67,  // 24: common.FormationDetail.counsellor:type_name -> common.Counsellor
	47,  // 25: common.FormationDetail.beastCommanderInfos:type_name -> common.BeastCommanderInfo
	60,  // 26: common.FormationGroupItem.formation:type_name -> common.Formation
	68,  // 27: common.Counsellor.magics:type_name -> common.CounsellorMagic
	69,  // 28: common.Counsellor.qiMen:type_name -> common.CounsellorQiMen
	9,   // 29: common.MissionUnit.Status:type_name -> common.MissionStatus
	73,  // 30: common.Fortress.pos:type_name -> common.Position
	70,  // 31: common.TimeMission.missions:type_name -> common.MissionUnit
	51,  // 32: common.Mail.atachments:type_name -> common.Item
	10,  // 33: common.FriendCommonData.friendType:type_name -> common.FriendType
	12,  // 34: common.ChatCell.type:type_name -> common.ChatCellType
	92,  // 35: common.ChatCell.battle:type_name -> common.ChatBattle
	88,  // 36: common.ChatCell.gvePass:type_name -> common.ChatGvePass
	89,  // 37: common.ChatCell.worldBossKilled:type_name -> common.ChatWorldBossKilled
	90,  // 38: common.ChatCell.cityOccupy:type_name -> common.ChatGvgCityOccupy
	86,  // 39: common.ChatCell.player:type_name -> common.LmTopThreePlayer
	91,  // 40: common.ChatCell.wonConqueror:type_name -> common.ChatWonConqueror
	93,  // 41: common.ChatBattle.player1:type_name -> common.ChatBattlePlayer
	93,  // 42: common.ChatBattle.player2:type_name -> common.ChatBattlePlayer
	94,  // 43: common.ChatBattle.npc:type_name -> common.ChatBattleNpc
	97,  // 44: common.Announce.msgs:type_name -> common.AnnounceMessage
	96,  // 45: common.AnnounceMessage.loopTime:type_name -> common.LoopTime
	85,  // 46: common.AnnounceMessage.msg:type_name -> common.ChatCell
	13,  // 47: common.PlayerRankReward.rankType:type_name -> common.RankType
	99,  // 48: common.ItemMarket.grids:type_name -> common.MarketGrid
	60,  // 49: common.ReplaySimple.formation:type_name -> common.Formation
	60,  // 50: common.ReplaySimple.targetFormation:type_name -> common.Formation
	44,  // 51: common.GuildHonorPlayer.icon:type_name -> common.PlayerHeadPortrait
	16,  // 52: common.GuildHonorPlayer.guildHonorType:type_name -> common.GuildHonorType
	112, // 53: common.TreasureFatesInfo.positiveFateSkills:type_name -> common.TreasureFate
	112, // 54: common.TreasureFatesInfo.startFateSkills:type_name -> common.TreasureFate
	112, // 55: common.TreasureFatesInfo.passiveFateSkills:type_name -> common.TreasureFate
	21,  // 56: common.TreasureRefine.ownQuality:type_name -> common.TreasureAffix
	115, // 57: common.TreasureRefine.slots:type_name -> common.TreasureRefineSlot
	116, // 58: common.TreasureRefineSlot.own:type_name -> common.TreasureRefineAttr
	116, // 59: common.TreasureRefineSlot.tmp:type_name -> common.TreasureRefineAttr
	117, // 60: common.ArenaBattleLog.players:type_name -> common.ArenaBattleLogPlayerInfo
	117, // 61: common.ArenaBattleInfo.players:type_name -> common.ArenaBattleLogPlayerInfo
	44,  // 62: common.PeakMatchPlayer.icon:type_name -> common.PlayerHeadPortrait
	58,  // 63: common.PeakMatchPlayer.commanders:type_name -> common.Commander
	67,  // 64: common.PeakFormationData.counsellors:type_name -> common.Counsellor
	144, // 65: common.PeakBattleData.info:type_name -> common.BattleStartInfo
	23,  // 66: common.PeakStateData.peakStateStep:type_name -> common.PeakStateStep
	120, // 67: common.PeakStateData.peakMatchPlayer:type_name -> common.PeakMatchPlayer
	121, // 68: common.PeakStateData.peakFormationData:type_name -> common.PeakFormationData
	122, // 69: common.PeakStateData.peakBattleData:type_name -> common.PeakBattleData
	44,  // 70: common.PeakBattleLogPlayerInfo.icon:type_name -> common.PlayerHeadPortrait
	125, // 71: common.PeakBattleLog.players:type_name -> common.PeakBattleLogPlayerInfo
	58,  // 72: common.BattleCommander.commander:type_name -> common.Commander
	127, // 73: common.BattleCommander.attrs:type_name -> common.BattleAttr
	67,  // 74: common.BattleCounsellor.counsellor:type_name -> common.Counsellor
	217, // 75: common.BattleBeast.beast:type_name -> common.Beast
	58,  // 76: common.BattleBeast.commander:type_name -> common.Commander
	3,   // 77: common.BattlePlayerInfo.formationType:type_name -> common.FormationType
	132, // 78: common.BattlePlayerInfo.battleCounsellors:type_name -> common.BattleCounsellor
	130, // 79: common.BattlePlayerInfo.battleCommanders:type_name -> common.BattleCommander
	131, // 80: common.BattlePlayerInfo.battleNpcCommanders:type_name -> common.BattleNpcCommander
	113, // 81: common.BattlePlayerInfo.treasureFatesInfo:type_name -> common.TreasureFatesInfo
	111, // 82: common.BattlePlayerInfo.treasures:type_name -> common.Treasure
	180, // 83: common.BattlePlayerInfo.strTalents:type_name -> common.StrTalent
	129, // 84: common.BattlePlayerInfo.guild:type_name -> common.PlayerGuildSkill
	128, // 85: common.BattlePlayerInfo.soldierTechs:type_name -> common.SoldierTechSkill
	137, // 86: common.BattlePlayerInfo.extralSkills:type_name -> common.Skill
	194, // 87: common.BattlePlayerInfo.album:type_name -> common.Album
	112, // 88: common.BattlePlayerInfo.treasureFates:type_name -> common.TreasureFate
	142, // 89: common.BattlePlayerInfo.soldierSkill:type_name -> common.SoliderSkill
	143, // 90: common.BattlePlayerInfo.professionSkill:type_name -> common.ProfessionSkill
	63,  // 91: common.BattlePlayerInfo.soldier:type_name -> common.Soldier
	64,  // 92: common.BattlePlayerInfo.wuHun:type_name -> common.WuHun
	63,  // 93: common.BattlePlayerInfo.assistSoldier:type_name -> common.Soldier
	139, // 94: common.BattlePlayerInfo.assistWuHun:type_name -> common.AssistWuHun
	133, // 95: common.BattlePlayerInfo.battleBeasts:type_name -> common.BattleBeast
	219, // 96: common.BattlePlayerInfo.beastTalent:type_name -> common.BeastTalent
	220, // 97: common.BattlePlayerInfo.mountInfo:type_name -> common.MountItem
	140, // 98: common.BattlePlayerInfo.assistMount:type_name -> common.AssistMount
	232, // 99: common.BattlePlayerInfo.biography:type_name -> common.Biography
	114, // 100: common.BattlePlayerInfo.treasureRefine:type_name -> common.TreasureRefine
	65,  // 101: common.BattlePlayerInfo.onlyEquip:type_name -> common.OnlyEquip
	141, // 102: common.BattlePlayerInfo.assistOnlyEquip:type_name -> common.AssistOnlyEquip
	58,  // 103: common.BattlePlayerInfo.deputyCommander:type_name -> common.Commander
	64,  // 104: common.AssistWuHun.wuHun:type_name -> common.WuHun
	220, // 105: common.AssistMount.assistMount:type_name -> common.MountItem
	65,  // 106: common.AssistOnlyEquip.onlyEquip:type_name -> common.OnlyEquip
	138, // 107: common.BattleStartInfo.fighter:type_name -> common.BattlePlayerInfo
	145, // 108: common.BattleFrameData.input:type_name -> common.BattlePlayerInput
	130, // 109: common.BattleResultCommander.player:type_name -> common.BattleCommander
	130, // 110: common.BattleResultCommander.target:type_name -> common.BattleCommander
	133, // 111: common.BattleResultBeast.player:type_name -> common.BattleBeast
	133, // 112: common.BattleResultBeast.target:type_name -> common.BattleBeast
	156, // 113: common.BattleResultInfo.playerDamage:type_name -> common.BattlePlayerDamage
	146, // 114: common.BattleResultInfo.frames:type_name -> common.BattleFrameData
	147, // 115: common.BattleResultInfo.commander:type_name -> common.BattleResultCommander
	134, // 116: common.BattleResultInfo.dailyBoss:type_name -> common.BattleDailyBoss
	135, // 117: common.BattleResultInfo.dailyExp:type_name -> common.BattleDailyExp
	136, // 118: common.BattleResultInfo.dailyCoin:type_name -> common.BattleDailyCoin
	158, // 119: common.BattleResultInfo.battleStat:type_name -> common.BattleStat
	24,  // 120: common.BattleResultInfo.code:type_name -> common.BattleResultErrorCode
	148, // 121: common.BattleResultInfo.beast:type_name -> common.BattleResultBeast
	151, // 122: common.BattleTeamDamage.commander:type_name -> common.BattleSoldierDamage
	151, // 123: common.BattleTeamDamage.soldier:type_name -> common.BattleSoldierDamage
	150, // 124: common.BattleTeamDamage.commanderSkills:type_name -> common.BattleSkillDamage
	150, // 125: common.BattleCounsellorDamage.skills:type_name -> common.BattleSkillDamage
	144, // 126: common.BattleReplay.info:type_name -> common.BattleStartInfo
	146, // 127: common.BattleReplay.frames:type_name -> common.BattleFrameData
	149, // 128: common.BattleReplay.resultInfo:type_name -> common.BattleResultInfo
	153, // 129: common.BattleDamageData.counsellor:type_name -> common.BattleCounsellorDamage
	152, // 130: common.BattleDamageData.team:type_name -> common.BattleTeamDamage
	132, // 131: common.BattlePlayerDamage.battleCounsellors:type_name -> common.BattleCounsellor
	130, // 132: common.BattlePlayerDamage.battleCommanders:type_name -> common.BattleCommander
	131, // 133: common.BattlePlayerDamage.battleNpcCommanders:type_name -> common.BattleNpcCommander
	155, // 134: common.BattlePlayerDamage.damageData:type_name -> common.BattleDamageData
	133, // 135: common.BattlePlayerDamage.battleBeasts:type_name -> common.BattleBeast
	156, // 136: common.BattleShareDamage.playerDamage:type_name -> common.BattlePlayerDamage
	159, // 137: common.BattleStat.commanderStats:type_name -> common.BattleCommanderStat
	160, // 138: common.BattleCommanderStat.killSoldiers:type_name -> common.BattleCommanderKillSoldier
	161, // 139: common.BattleCommanderStat.killTeams:type_name -> common.BattleCommanderKillTeam
	162, // 140: common.BattleCommanderStat.commanderSkills:type_name -> common.BattleCommanderSkill
	58,  // 141: common.SlayCommander.commander:type_name -> common.Commander
	25,  // 142: common.SlayFightReport.typ:type_name -> common.SlayFightReportType
	171, // 143: common.SlayRoundReport.reports:type_name -> common.SlayFightReport
	175, // 144: common.DailyBoss.bossDatas:type_name -> common.DailyBossData
	176, // 145: common.DailyBossData.levelDatas:type_name -> common.DailyBossLevelData
	180, // 146: common.StrMansion.talents:type_name -> common.StrTalent
	182, // 147: common.PrivilegeData.abilityList:type_name -> common.PrivilegeAbility
	183, // 148: common.PrivilegeData.effectList:type_name -> common.PrivilegeEffect
	184, // 149: common.PrivilegeData.shop:type_name -> common.PrivilegeShopItem
	187, // 150: common.HandBook.quests:type_name -> common.HandBookQuest
	51,  // 151: common.QuestionnaireInfo.items:type_name -> common.Item
	190, // 152: common.DramaStage.skills:type_name -> common.DramaSkill
	191, // 153: common.DramaStage.shop:type_name -> common.DramaShop
	192, // 154: common.DramaStage.box:type_name -> common.DramaBox
	137, // 155: common.DramaSkill.skill:type_name -> common.Skill
	51,  // 156: common.DramaBox.items:type_name -> common.Item
	195, // 157: common.Album.albumItems:type_name -> common.AlbumItem
	196, // 158: common.Album.albumQuas:type_name -> common.AlbumQua
	58,  // 159: common.AssistCommander.commander:type_name -> common.Commander
	63,  // 160: common.AssistCommander.soldier:type_name -> common.Soldier
	64,  // 161: common.AssistCommander.wuHun:type_name -> common.WuHun
	220, // 162: common.AssistCommander.mount:type_name -> common.MountItem
	65,  // 163: common.AssistCommander.onlyEquip:type_name -> common.OnlyEquip
	58,  // 164: common.AssistCommander.deputy:type_name -> common.Commander
	58,  // 165: common.AssistLog.commander:type_name -> common.Commander
	51,  // 166: common.OfflineReward.rewards:type_name -> common.Item
	201, // 167: common.UserOfflineReward.rewards:type_name -> common.OfflineReward
	205, // 168: common.GvgBattleLog.players:type_name -> common.GvgBattleLogPlayer
	207, // 169: common.PlayerFormationData.grow:type_name -> common.PlayerGrow
	61,  // 170: common.PlayerFormationData.formationDetails:type_name -> common.FormationDetail
	180, // 171: common.PlayerGrow.strTalents:type_name -> common.StrTalent
	111, // 172: common.PlayerGrow.treasures:type_name -> common.Treasure
	113, // 173: common.PlayerGrow.treasureFates:type_name -> common.TreasureFatesInfo
	66,  // 174: common.PlayerGrow.soldierTech:type_name -> common.SoldierTech
	194, // 175: common.PlayerGrow.album:type_name -> common.Album
	67,  // 176: common.PlayerGrow.counsellors:type_name -> common.Counsellor
	129, // 177: common.PlayerGrow.guildSkills:type_name -> common.PlayerGuildSkill
	64,  // 178: common.PlayerGrow.wuHun:type_name -> common.WuHun
	63,  // 179: common.PlayerGrow.soldiers:type_name -> common.Soldier
	220, // 180: common.PlayerGrow.mount:type_name -> common.MountItem
	114, // 181: common.PlayerGrow.treasureRefine:type_name -> common.TreasureRefine
	232, // 182: common.PlayerGrow.biography:type_name -> common.Biography
	65,  // 183: common.PlayerGrow.onlyEquip:type_name -> common.OnlyEquip
	58,  // 184: common.PlayerGrow.deputys:type_name -> common.Commander
	30,  // 185: common.StarSealLog.logType:type_name -> common.StarSealLogType
	210, // 186: common.PlayerLogs.logs:type_name -> common.PlayerLog
	213, // 187: common.RebateInfo.info:type_name -> common.RebateData
	51,  // 188: common.RebateData.items:type_name -> common.Item
	212, // 189: common.Rebate.rebateInfo:type_name -> common.RebateInfo
	33,  // 190: common.CrossRankWonArg.type:type_name -> common.CrossRankWonType
	221, // 191: common.MountItem.refine:type_name -> common.MountRefine
	222, // 192: common.MountRefine.own:type_name -> common.ResignAttr
	222, // 193: common.MountRefine.lackWant:type_name -> common.ResignAttr
	227, // 194: common.LadderGodBattleLog.battlePlayers:type_name -> common.LadderBattlePlayer
	35,  // 195: common.LadderGodBattleLog.battleLogType:type_name -> common.LadderGodBattleLogType
	225, // 196: common.LadderGodBattleLogs.battleLogs:type_name -> common.LadderGodBattleLog
	228, // 197: common.LadderBattlePlayer.commanders:type_name -> common.LadderBattleCommander
	231, // 198: common.BiographyArms.commanders:type_name -> common.BiographyCommander
	230, // 199: common.Biography.arms:type_name -> common.BiographyArms
	237, // 200: common.LmChoose.rounds:type_name -> common.LmChooseRound
	238, // 201: common.LmChooseRound.battles:type_name -> common.DyPeakBattleResult
	58,  // 202: common.DyPeakBattleResult.commanders1:type_name -> common.Commander
	58,  // 203: common.DyPeakBattleResult.commanders2:type_name -> common.Commander
	67,  // 204: common.DyPeakBattleResult.counsellor1:type_name -> common.Counsellor
	67,  // 205: common.DyPeakBattleResult.counsellor2:type_name -> common.Counsellor
	217, // 206: common.DyPeakBattleResult.beasts1:type_name -> common.Beast
	217, // 207: common.DyPeakBattleResult.beasts2:type_name -> common.Beast
	240, // 208: common.DyPeakPK.pkData:type_name -> common.DyPeakPKPlayer
	242, // 209: common.WonMetadata.user:type_name -> common.WonUserMetadata
	243, // 210: common.WonMetadata.guild:type_name -> common.WonGuildMetadata
	244, // 211: common.WonUserMetadata.ftMetadataS:type_name -> common.WonFtMetadata
	3,   // 212: common.WonFtMetadata.ft:type_name -> common.FormationType
	246, // 213: common.WonBattleField.mapOccupys:type_name -> common.WonMapOccupyInfo
	247, // 214: common.WonBattleField.conquerorInfos:type_name -> common.WonConquerorInfo
	109, // 215: common.WonBattleLog.gridCoor:type_name -> common.Coordinate
	249, // 216: common.WonBattleLog.players:type_name -> common.PlayerFt
	38,  // 217: common.WonSurrenderApply.status:type_name -> common.WonSurrenderApplyStatus
	39,  // 218: common.WonMessage.messageType:type_name -> common.WonMessageType
	253, // 219: common.WonMessage.occupyMessage:type_name -> common.WonOccupyMessage
	254, // 220: common.WonMessage.totalKillMessage:type_name -> common.WonTotalKillMessage
	255, // 221: common.WonMessage.playerReportMessage:type_name -> common.WonPlayerFtReportMessage
	109, // 222: common.WonFtCoor.coor:type_name -> common.Coordinate
	263, // 223: common.CakeFeast.slots:type_name -> common.CakeFeastSlot
	265, // 224: common.HappyFlop.cards:type_name -> common.HappyFlopCard
	41,  // 225: common.HappyFlopCard.status:type_name -> common.HappyFlopStatus
	42,  // 226: common.NavalStage.state:type_name -> common.NavalStage.NavalStageState
	267, // 227: common.NavalStage.shop:type_name -> common.NavalBattleShop
	269, // 228: common.NavalStage.uniteFts:type_name -> common.NavalBattleUniteFt
	271, // 229: common.NavalBattleUniteFt.team:type_name -> common.NavalBattleTeam
	43,  // 230: common.NavalBattleUniteFt.state:type_name -> common.NavalBattleUniteFt.State
	266, // 231: common.NavalBattleUniteFt.playerHps:type_name -> common.BattleUnitHp
	266, // 232: common.NavalBattleUniteFt.enemyHps:type_name -> common.BattleUnitHp
	197, // 233: common.NavalBattleUniteFt.assist:type_name -> common.AssistCommander
	138, // 234: common.NavalBattleEnemy.battleInfo:type_name -> common.BattlePlayerInfo
	273, // 235: common.NavalBattleResultFormation.fts:type_name -> common.NavalBattleFormation
	197, // 236: common.NavalBattleEvent.assists:type_name -> common.AssistCommander
	138, // 237: common.NavalBattleInfo.info:type_name -> common.BattlePlayerInfo
	238, // [238:238] is the sub-list for method output_type
	238, // [238:238] is the sub-list for method input_type
	238, // [238:238] is the sub-list for extension type_name
	238, // [238:238] is the sub-list for extension extendee
	0,   // [0:238] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHeadPortrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSimpleDataEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeastCommanderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormationCounsellor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderMedication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderPotential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderImprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderDestiny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormationGroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soldier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WuHun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoldierTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counsellor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounsellorMagic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounsellorQiMen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionTargetChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fortress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*District); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeMission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendCommonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmTopThreePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatGvePass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWorldBossKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatGvgCityOccupy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWonConqueror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBattlePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBattleNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoopTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopDailyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainBarrage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaySimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildHonorPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulBoxLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveDamageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureFate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureFatesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureRefineSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureRefineAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaBattleLogPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakMatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakFormationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakBattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakBattleLogPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoldierTechSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGuildSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleNpcCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCounsellor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleBeast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleDailyBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleDailyExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleDailyCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistWuHun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistOnlyEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoliderSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleStartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePlayerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleFrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleResultCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleResultBeast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleSkillDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleSoldierDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleTeamDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCounsellorDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleDamageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePlayerDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleShareDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCommanderStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCommanderKillSoldier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCommanderKillTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCommanderSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayPlayerCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaySilkBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SilkBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayFightReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayRoundReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBossData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBossLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrMansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrTalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeShopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandBookQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumQua); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bullet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOfflineReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgBattleLogPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFormationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonFundTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarSealLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRankGvgArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRankWonArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeastLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeastTalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResignAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderGodBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderGodBattleLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderBattlePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderBattleCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiographyArms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiographyCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouthReturnGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouthFreeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmChooseRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakBattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakPK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakPKPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonUserMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonGuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonFtMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonBattleField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonMapOccupyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonConquerorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonBattleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonSurrenderApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonDeclareGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonOccupyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonTotalKillMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonPlayerFtReportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonFtCoor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucUserMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GOClearStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarSoulSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BazaarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CakeFeast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CakeFeastSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyFlop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyFlopCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleUnitHp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleUniteFt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleEnemy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleSearchFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleResultFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleRankPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleCircuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistCommanderHp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      44,
			NumMessages:   236,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
