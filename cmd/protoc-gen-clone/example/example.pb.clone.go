// Code generated by protoc-gen-clone. DO NOT EDIT.
// source: example.proto

package example

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "gitlab.uuzu.com/war/pbtool/cmd/protoc-gen-clone/example/common"
	common1 "gitlab.uuzu.com/war/pbtool/cmd/protoc-gen-clone/example/common1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func (in *DrawOnlyEquipBack) Clone() *DrawOnlyEquipBack {
	if in == nil {
		return nil
	}
	out := &DrawOnlyEquipBack{}
	out.DrawData = clone_DrawOnlyEquipBack_Map_int32_example_DrawOnlyEquipBack_DrawData(in.DrawData)
	out.SpecialDrawCount = clone_DrawOnlyEquipBack_Map_int32_String(in.SpecialDrawCount)
	out.Stu = clone_DrawOnlyEquipBack_Map_int32_example_StudentMc(in.Stu)
	return out
}

func (in *User) Clone() *User {
	if in == nil {
		return nil
	}
	out := &User{}
	out.User = clone_User_common1_User(in.User)
	return out
}

func clone_User_common1_ActAnniversary(in *common1.ActAnniversary) *common1.ActAnniversary {
	if in == nil {
		return nil
	}
	out := &common1.ActAnniversary{}
	out.LikedCount = in.LikedCount
	return out
}

func clone_User_common1_ActCommonSignIn(in *common1.ActCommonSignIn) *common1.ActCommonSignIn {
	if in == nil {
		return nil
	}
	out := &common1.ActCommonSignIn{}
	out.SignInTime = in.SignInTime
	out.SignInTimes = in.SignInTimes
	return out
}

func clone_User_common1_ActMainSsr(in *common1.ActMainSsr) *common1.ActMainSsr {
	if in == nil {
		return nil
	}
	out := &common1.ActMainSsr{}
	out.BuyTimes = in.BuyTimes
	return out
}

func clone_User_common1_ActWrapper(in *common1.ActWrapper) *common1.ActWrapper {
	if in == nil {
		return nil
	}
	out := &common1.ActWrapper{}
	out.Anniversary = clone_User_common1_ActAnniversary(in.Anniversary)
	out.CakeFeast = clone_User_common_CakeFeast(in.CakeFeast)
	out.Explorer = clone_User_common1_ZmSnExplore(in.Explorer)
	out.HappyFlop = clone_User_common_HappyFlop(in.HappyFlop)
	out.MainSsr = clone_User_common1_ActMainSsr(in.MainSsr)
	out.OpenId = in.OpenId
	out.SignIn = clone_User_common1_ActCommonSignIn(in.SignIn)
	out.Task = clone_User_common1_ActivityCommon(in.Task)
	out.Zmsn = clone_User_common1_ActZmsn(in.Zmsn)
	return out
}

func clone_User_common1_ActZmsn(in *common1.ActZmsn) *common1.ActZmsn {
	if in == nil {
		return nil
	}
	out := &common1.ActZmsn{}
	return out
}

func clone_User_common1_Activity(in *common1.Activity) *common1.Activity {
	if in == nil {
		return nil
	}
	out := &common1.Activity{}
	out.ActRechargeGift = clone_User_Array_common1_ActivityRechargeGift(in.ActRechargeGift)
	out.Activities = clone_User_Array_common1_ActivityCommon(in.Activities)
	out.Acts = clone_User_Array_common1_ActWrapper(in.Acts)
	out.AppComment = clone_User_common1_AppComment(in.AppComment)
	out.CashGift = clone_User_Array_common1_CashGift(in.CashGift)
	out.CityItems = clone_User_common1_CityGiftAct(in.CityItems)
	out.CollectWord = clone_User_common1_CollectWord(in.CollectWord)
	out.CommonTowerFund = clone_User_Array_common1_CommonTowerFundAct(in.CommonTowerFund)
	out.DailyDiscount = clone_User_common1_DailyDiscount(in.DailyDiscount)
	out.DailyRecharge = clone_User_common1_DailyRecharge(in.DailyRecharge)
	out.Extra = clone_User_common1_ActivityExtra(in.Extra)
	out.Foundation = clone_User_common1_Foundation(in.Foundation)
	out.GiftRain = clone_User_Array_common1_GiftRainAct(in.GiftRain)
	out.GoldenDragon = clone_User_Array_common1_GoldenDragon(in.GoldenDragon)
	out.LevelGift = clone_User_common1_LevelGift(in.LevelGift)
	out.LuckDraw = clone_User_Array_common1_LuckDrawAct(in.LuckDraw)
	out.PlayerCheat = clone_User_Array_common1_PlayerCheatData(in.PlayerCheat)
	out.RechargeRank = clone_User_common1_RechargeRank(in.RechargeRank)
	out.RecruitCard = clone_User_common1_RecruitCard(in.RecruitCard)
	out.ResourceRecover = clone_User_common1_ResourceRecover(in.ResourceRecover)
	out.SeasonFund = clone_User_common1_SeasonFund(in.SeasonFund)
	out.ShiLengJigsaw = clone_User_common1_ShiLengJigsaw(in.ShiLengJigsaw)
	out.ShiLengSignIn = clone_User_common1_ShiLengSignIn(in.ShiLengSignIn)
	out.SoulBox = clone_User_Array_common1_SoulBox(in.SoulBox)
	out.Star = clone_User_Array_common1_StarActivity(in.Star)
	out.SuperDraw = clone_User_common1_SuperDraw(in.SuperDraw)
	out.SuperWelGift = clone_User_common1_SuperWelGift(in.SuperWelGift)
	out.TianGongFund = clone_User_common1_TianGongFund(in.TianGongFund)
	out.TotalCommander = clone_User_Array_common1_ActivityTotalCommander(in.TotalCommander)
	out.TotalLogin = clone_User_common1_TotalLogin(in.TotalLogin)
	out.TowerFund = clone_User_common1_TowerFund(in.TowerFund)
	out.VipCashGift = clone_User_Array_common1_VipCashGift(in.VipCashGift)
	out.VisitList = clone_User_Array_common1_CommanderVisit(in.VisitList)
	out.WuHunAstrolabe = clone_User_Array_common1_WuHunAstrolabe(in.WuHunAstrolabe)
	return out
}

func clone_User_common1_ActivityCommon(in *common1.ActivityCommon) *common1.ActivityCommon {
	if in == nil {
		return nil
	}
	out := &common1.ActivityCommon{}
	out.ActivityId = in.ActivityId
	out.ContinueDays = in.ContinueDays
	out.ContinueLoginTime = in.ContinueLoginTime
	out.ContinuePay = in.ContinuePay
	out.ContinuePayTime = in.ContinuePayTime
	out.CumulativeLoginTime = in.CumulativeLoginTime
	out.CumulativePayDaysTime = in.CumulativePayDaysTime
	out.OpenId = in.OpenId
	out.PeakContinueWin = in.PeakContinueWin
	out.Tasks = clone_User_Array_common1_ActivityTask(in.Tasks)
	return out
}

func clone_User_common1_ActivityData(in *common1.ActivityData) *common1.ActivityData {
	if in == nil {
		return nil
	}
	out := &common1.ActivityData{}
	out.SoulBoxWarCount = in.SoulBoxWarCount
	return out
}

func clone_User_common1_ActivityExtra(in *common1.ActivityExtra) *common1.ActivityExtra {
	if in == nil {
		return nil
	}
	out := &common1.ActivityExtra{}
	out.Items = clone_User_Array_common1_ActivityExtraItem(in.Items)
	return out
}

func clone_User_common1_ActivityExtraItem(in *common1.ActivityExtraItem) *common1.ActivityExtraItem {
	if in == nil {
		return nil
	}
	out := &common1.ActivityExtraItem{}
	out.ActivityId = in.ActivityId
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_ActivityRechargeGift(in *common1.ActivityRechargeGift) *common1.ActivityRechargeGift {
	if in == nil {
		return nil
	}
	out := &common1.ActivityRechargeGift{}
	out.ActivityID = in.ActivityID
	out.Items = clone_User_Array_common1_ActivityRechargeGiftItem(in.Items)
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_ActivityRechargeGiftItem(in *common1.ActivityRechargeGiftItem) *common1.ActivityRechargeGiftItem {
	if in == nil {
		return nil
	}
	out := &common1.ActivityRechargeGiftItem{}
	out.BuyTimes = in.BuyTimes
	out.Id = in.Id
	return out
}

func clone_User_common1_ActivityTask(in *common1.ActivityTask) *common1.ActivityTask {
	if in == nil {
		return nil
	}
	out := &common1.ActivityTask{}
	out.Finish = in.Finish
	out.Id = in.Id
	out.Progress = in.Progress
	return out
}

func clone_User_common1_ActivityTotalCommander(in *common1.ActivityTotalCommander) *common1.ActivityTotalCommander {
	if in == nil {
		return nil
	}
	out := &common1.ActivityTotalCommander{}
	out.Common = clone_User_common1_ActivityCommon(in.Common)
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	return out
}

func clone_User_common1_Album(in *common1.Album) *common1.Album {
	if in == nil {
		return nil
	}
	out := &common1.Album{}
	out.ActivedAllusions = append(in.ActivedAllusions[:0:0], in.ActivedAllusions...)
	out.AlbumItems = clone_User_Array_common1_AlbumItem(in.AlbumItems)
	out.AlbumQuas = clone_User_Array_common1_AlbumQua(in.AlbumQuas)
	out.TotalExp = in.TotalExp
	out.TotalLevel = in.TotalLevel
	out.TotalPower = in.TotalPower
	return out
}

func clone_User_common_Album(in *common.Album) *common.Album {
	if in == nil {
		return nil
	}
	out := &common.Album{}
	out.ActivedAllusions = append(in.ActivedAllusions[:0:0], in.ActivedAllusions...)
	out.AlbumItems = clone_User_Array_common_AlbumItem(in.AlbumItems)
	out.AlbumQuas = clone_User_Array_common_AlbumQua(in.AlbumQuas)
	out.TotalExp = cloneUint32Pointer(in.TotalExp)
	out.TotalLevel = cloneUint32Pointer(in.TotalLevel)
	out.TotalPower = cloneUint32Pointer(in.TotalPower)
	return out
}

func clone_User_common1_AlbumItem(in *common1.AlbumItem) *common1.AlbumItem {
	if in == nil {
		return nil
	}
	out := &common1.AlbumItem{}
	out.Id = in.Id
	out.Level = in.Level
	return out
}

func clone_User_common_AlbumItem(in *common.AlbumItem) *common.AlbumItem {
	if in == nil {
		return nil
	}
	out := &common.AlbumItem{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common1_AlbumQua(in *common1.AlbumQua) *common1.AlbumQua {
	if in == nil {
		return nil
	}
	out := &common1.AlbumQua{}
	out.Id = in.Id
	out.Level = in.Level
	return out
}

func clone_User_common_AlbumQua(in *common.AlbumQua) *common.AlbumQua {
	if in == nil {
		return nil
	}
	out := &common.AlbumQua{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common1_AppComment(in *common1.AppComment) *common1.AppComment {
	if in == nil {
		return nil
	}
	out := &common1.AppComment{}
	out.ActID = in.ActID
	out.ActTask = clone_User_Array_common1_ActivityTask(in.ActTask)
	return out
}

func clone_User_common_ArenaBattleInfo(in *common.ArenaBattleInfo) *common.ArenaBattleInfo {
	if in == nil {
		return nil
	}
	out := &common.ArenaBattleInfo{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.Complete = cloneBoolPointer(in.Complete)
	out.Players = clone_User_Array_common_ArenaBattleLogPlayerInfo(in.Players)
	out.WinUid = cloneUint64Pointer(in.WinUid)
	return out
}

func clone_User_common_ArenaBattleLog(in *common.ArenaBattleLog) *common.ArenaBattleLog {
	if in == nil {
		return nil
	}
	out := &common.ArenaBattleLog{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.Complete = cloneBoolPointer(in.Complete)
	out.Players = clone_User_Array_common_ArenaBattleLogPlayerInfo(in.Players)
	out.WinUid = cloneUint64Pointer(in.WinUid)
	return out
}

func clone_User_common_ArenaBattleLogPlayerInfo(in *common.ArenaBattleLogPlayerInfo) *common.ArenaBattleLogPlayerInfo {
	if in == nil {
		return nil
	}
	out := &common.ArenaBattleLogPlayerInfo{}
	out.AfterRank = cloneUint32Pointer(in.AfterRank)
	out.Avatar = cloneInt32Pointer(in.Avatar)
	out.AvatarFrame = cloneInt32Pointer(in.AvatarFrame)
	out.BeforeRank = cloneUint32Pointer(in.BeforeRank)
	out.CounsellorId = cloneInt32Pointer(in.CounsellorId)
	out.GuildName = cloneStringPointer(in.GuildName)
	out.Level = cloneUint32Pointer(in.Level)
	out.Msg = cloneStringPointer(in.Msg)
	out.Name = cloneStringPointer(in.Name)
	out.Power = cloneUint32Pointer(in.Power)
	out.Uid = cloneUint64Pointer(in.Uid)
	out.VipLevel = cloneUint32Pointer(in.VipLevel)
	return out
}

func clone_User_common1_Assist(in *common1.Assist) *common1.Assist {
	if in == nil {
		return nil
	}
	out := &common1.Assist{}
	out.EmployLog = clone_User_Array_common_AssistLog(in.EmployLog)
	out.EmployedLog = clone_User_Array_common_AssistLog(in.EmployedLog)
	out.Employees = clone_User_Array_common_Employee(in.Employees)
	return out
}

func clone_User_common_AssistCommander(in *common.AssistCommander) *common.AssistCommander {
	if in == nil {
		return nil
	}
	out := &common.AssistCommander{}
	out.BeginTime = cloneInt64Pointer(in.BeginTime)
	out.Commander = clone_User_common_Commander(in.Commander)
	out.Deputy = clone_User_common_Commander(in.Deputy)
	out.EmployTimes = cloneUint32Pointer(in.EmployTimes)
	out.Hp = cloneInt32Pointer(in.Hp)
	out.IsSameGuild = cloneBoolPointer(in.IsSameGuild)
	out.Mount = clone_User_common_MountItem(in.Mount)
	out.OnlyEquip = clone_User_common_OnlyEquip(in.OnlyEquip)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	out.PlayerLevel = cloneUint32Pointer(in.PlayerLevel)
	out.PlayerName = cloneStringPointer(in.PlayerName)
	out.RewardTimes = cloneUint32Pointer(in.RewardTimes)
	out.Soldier = clone_User_common_Soldier(in.Soldier)
	out.Used = cloneBoolPointer(in.Used)
	out.WuHun = clone_User_Array_common_WuHun(in.WuHun)
	return out
}

func clone_User_common_AssistLog(in *common.AssistLog) *common.AssistLog {
	if in == nil {
		return nil
	}
	out := &common.AssistLog{}
	out.CanReqFriend = cloneBoolPointer(in.CanReqFriend)
	out.Commander = clone_User_common_Commander(in.Commander)
	out.FuncId = cloneInt32Pointer(in.FuncId)
	out.LogTime = cloneInt64Pointer(in.LogTime)
	out.TargetPlayerId = cloneUint64Pointer(in.TargetPlayerId)
	out.TargetPlayerName = cloneStringPointer(in.TargetPlayerName)
	out.Thanks = cloneBoolPointer(in.Thanks)
	out.Win = cloneBoolPointer(in.Win)
	return out
}

func clone_User_common_AssistMount(in *common.AssistMount) *common.AssistMount {
	if in == nil {
		return nil
	}
	out := &common.AssistMount{}
	out.AssistMount = clone_User_common_MountItem(in.AssistMount)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	return out
}

func clone_User_common_AssistOnlyEquip(in *common.AssistOnlyEquip) *common.AssistOnlyEquip {
	if in == nil {
		return nil
	}
	out := &common.AssistOnlyEquip{}
	out.OnlyEquip = clone_User_common_OnlyEquip(in.OnlyEquip)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	return out
}

func clone_User_common1_AssistReward(in *common1.AssistReward) *common1.AssistReward {
	if in == nil {
		return nil
	}
	out := &common1.AssistReward{}
	out.CommanderID = in.CommanderID
	out.PlayerID = in.PlayerID
	return out
}

func clone_User_common_AssistWuHun(in *common.AssistWuHun) *common.AssistWuHun {
	if in == nil {
		return nil
	}
	out := &common.AssistWuHun{}
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	out.WuHun = clone_User_Array_common_WuHun(in.WuHun)
	return out
}

func clone_User_common_AucRecord(in *common.AucRecord) *common.AucRecord {
	if in == nil {
		return nil
	}
	out := &common.AucRecord{}
	out.GoodId = cloneUint32Pointer(in.GoodId)
	out.Price = cloneUint32Pointer(in.Price)
	out.SaleTime = cloneInt64Pointer(in.SaleTime)
	return out
}

func clone_User_common1_Bag(in *common1.Bag) *common1.Bag {
	if in == nil {
		return nil
	}
	out := &common1.Bag{}
	out.Items = clone_User_Array_common_Item(in.Items)
	return out
}

func clone_User_common1_BanChannel(in *common1.BanChannel) *common1.BanChannel {
	if in == nil {
		return nil
	}
	out := &common1.BanChannel{}
	out.Channel = in.Channel
	out.Duration = in.Duration
	out.Reason = in.Reason
	out.StartTime = in.StartTime
	return out
}

func clone_User_common1_Battle(in *common1.Battle) *common1.Battle {
	if in == nil {
		return nil
	}
	out := &common1.Battle{}
	out.Info = clone_User_common_BattleStartInfo(in.Info)
	out.ResultInfo = clone_User_common_BattleResultInfo(in.ResultInfo)
	out.Saved = in.Saved
	return out
}

func clone_User_common_BattleAttr(in *common.BattleAttr) *common.BattleAttr {
	if in == nil {
		return nil
	}
	out := &common.BattleAttr{}
	out.AttrType = cloneInt32Pointer(in.AttrType)
	out.AttrValue = cloneInt32Pointer(in.AttrValue)
	return out
}

func clone_User_common_BattleBeast(in *common.BattleBeast) *common.BattleBeast {
	if in == nil {
		return nil
	}
	out := &common.BattleBeast{}
	out.Armor = cloneInt32Pointer(in.Armor)
	out.Beast = clone_User_common_Beast(in.Beast)
	out.Commander = clone_User_common_Commander(in.Commander)
	out.GridId = cloneInt32Pointer(in.GridId)
	out.Hp = cloneInt32Pointer(in.Hp)
	return out
}

func clone_User_common_BattleCommander(in *common.BattleCommander) *common.BattleCommander {
	if in == nil {
		return nil
	}
	out := &common.BattleCommander{}
	out.Armor = cloneInt32Pointer(in.Armor)
	out.AssistPlayerId = cloneUint64Pointer(in.AssistPlayerId)
	out.AssistPlayerName = cloneStringPointer(in.AssistPlayerName)
	out.Attrs = clone_User_Array_common_BattleAttr(in.Attrs)
	out.Commander = clone_User_common_Commander(in.Commander)
	out.GridId = cloneInt32Pointer(in.GridId)
	out.Hp = cloneInt32Pointer(in.Hp)
	return out
}

func clone_User_common_BattleCommanderKillSoldier(in *common.BattleCommanderKillSoldier) *common.BattleCommanderKillSoldier {
	if in == nil {
		return nil
	}
	out := &common.BattleCommanderKillSoldier{}
	out.KillCount = cloneUint32Pointer(in.KillCount)
	out.SoldierId = cloneInt32Pointer(in.SoldierId)
	return out
}

func clone_User_common_BattleCommanderKillTeam(in *common.BattleCommanderKillTeam) *common.BattleCommanderKillTeam {
	if in == nil {
		return nil
	}
	out := &common.BattleCommanderKillTeam{}
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.KillCount = cloneUint32Pointer(in.KillCount)
	out.SoldierId = cloneInt32Pointer(in.SoldierId)
	return out
}

func clone_User_common_BattleCommanderSkill(in *common.BattleCommanderSkill) *common.BattleCommanderSkill {
	if in == nil {
		return nil
	}
	out := &common.BattleCommanderSkill{}
	out.ReleaseCount = cloneUint32Pointer(in.ReleaseCount)
	out.SkillId = cloneInt32Pointer(in.SkillId)
	return out
}

func clone_User_common_BattleCommanderStat(in *common.BattleCommanderStat) *common.BattleCommanderStat {
	if in == nil {
		return nil
	}
	out := &common.BattleCommanderStat{}
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.CommanderSkills = clone_User_Array_common_BattleCommanderSkill(in.CommanderSkills)
	out.KillSoldiers = clone_User_Array_common_BattleCommanderKillSoldier(in.KillSoldiers)
	out.KillTeams = clone_User_Array_common_BattleCommanderKillTeam(in.KillTeams)
	return out
}

func clone_User_common_BattleCounsellor(in *common.BattleCounsellor) *common.BattleCounsellor {
	if in == nil {
		return nil
	}
	out := &common.BattleCounsellor{}
	out.Assist = cloneBoolPointer(in.Assist)
	out.Counsellor = clone_User_common_Counsellor(in.Counsellor)
	return out
}

func clone_User_common_BattleCounsellorDamage(in *common.BattleCounsellorDamage) *common.BattleCounsellorDamage {
	if in == nil {
		return nil
	}
	out := &common.BattleCounsellorDamage{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Skills = clone_User_Array_common_BattleSkillDamage(in.Skills)
	return out
}

func clone_User_common_BattleDailyBoss(in *common.BattleDailyBoss) *common.BattleDailyBoss {
	if in == nil {
		return nil
	}
	out := &common.BattleDailyBoss{}
	out.Damage = cloneUint32Pointer(in.Damage)
	out.Hp = cloneUint32Pointer(in.Hp)
	return out
}

func clone_User_common_BattleDailyCoin(in *common.BattleDailyCoin) *common.BattleDailyCoin {
	if in == nil {
		return nil
	}
	out := &common.BattleDailyCoin{}
	out.Damage = cloneUint64Pointer(in.Damage)
	out.EliteKillNum = cloneUint32Pointer(in.EliteKillNum)
	out.NormalKillNum = cloneUint32Pointer(in.NormalKillNum)
	out.RoundNum = cloneUint32Pointer(in.RoundNum)
	return out
}

func clone_User_common_BattleDailyExp(in *common.BattleDailyExp) *common.BattleDailyExp {
	if in == nil {
		return nil
	}
	out := &common.BattleDailyExp{}
	out.EliteKillNum = cloneUint32Pointer(in.EliteKillNum)
	out.NormalKillNum = cloneUint32Pointer(in.NormalKillNum)
	out.RoundNum = cloneUint32Pointer(in.RoundNum)
	return out
}

func clone_User_common_BattleDamageData(in *common.BattleDamageData) *common.BattleDamageData {
	if in == nil {
		return nil
	}
	out := &common.BattleDamageData{}
	out.Counsellor = clone_User_common_BattleCounsellorDamage(in.Counsellor)
	out.Hp = cloneUint32Pointer(in.Hp)
	out.MaxHp = cloneUint32Pointer(in.MaxHp)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	out.Team = clone_User_Array_common_BattleTeamDamage(in.Team)
	out.TotalDmg = cloneUint64Pointer(in.TotalDmg)
	out.TotalRealDmg = cloneUint64Pointer(in.TotalRealDmg)
	return out
}

func clone_User_common_BattleFrameData(in *common.BattleFrameData) *common.BattleFrameData {
	if in == nil {
		return nil
	}
	out := &common.BattleFrameData{}
	out.FrameId = cloneUint32Pointer(in.FrameId)
	out.Input = clone_User_Array_common_BattlePlayerInput(in.Input)
	return out
}

func clone_User_common_BattleNpcCommander(in *common.BattleNpcCommander) *common.BattleNpcCommander {
	if in == nil {
		return nil
	}
	out := &common.BattleNpcCommander{}
	out.GridId = cloneInt32Pointer(in.GridId)
	out.Hp = cloneInt32Pointer(in.Hp)
	out.Id = cloneInt32Pointer(in.Id)
	out.Skin = cloneInt32Pointer(in.Skin)
	out.SoldierId = cloneInt32Pointer(in.SoldierId)
	out.SoldierNum = cloneInt32Pointer(in.SoldierNum)
	return out
}

func clone_User_common_BattlePlayerDamage(in *common.BattlePlayerDamage) *common.BattlePlayerDamage {
	if in == nil {
		return nil
	}
	out := &common.BattlePlayerDamage{}
	out.BattleBeasts = clone_User_Array_common_BattleBeast(in.BattleBeasts)
	out.BattleCommanders = clone_User_Array_common_BattleCommander(in.BattleCommanders)
	out.BattleCounsellors = clone_User_Array_common_BattleCounsellor(in.BattleCounsellors)
	out.BattleNpcCommanders = clone_User_Array_common_BattleNpcCommander(in.BattleNpcCommanders)
	out.DamageData = clone_User_common_BattleDamageData(in.DamageData)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	out.PlayerName = cloneStringPointer(in.PlayerName)
	return out
}

func clone_User_common_BattlePlayerInfo(in *common.BattlePlayerInfo) *common.BattlePlayerInfo {
	if in == nil {
		return nil
	}
	out := &common.BattlePlayerInfo{}
	out.Album = clone_User_common_Album(in.Album)
	out.AssistMount = clone_User_Array_common_AssistMount(in.AssistMount)
	out.AssistOnlyEquip = clone_User_Array_common_AssistOnlyEquip(in.AssistOnlyEquip)
	out.AssistSoldier = clone_User_Array_common_Soldier(in.AssistSoldier)
	out.AssistWuHun = clone_User_Array_common_AssistWuHun(in.AssistWuHun)
	out.AttributeCoefficient = cloneUint32Pointer(in.AttributeCoefficient)
	out.Avatar = cloneInt32Pointer(in.Avatar)
	out.AvatarFrame = cloneInt32Pointer(in.AvatarFrame)
	out.BattleBeasts = clone_User_Array_common_BattleBeast(in.BattleBeasts)
	out.BattleCommanders = clone_User_Array_common_BattleCommander(in.BattleCommanders)
	out.BattleCounsellors = clone_User_Array_common_BattleCounsellor(in.BattleCounsellors)
	out.BattleNpcCommanders = clone_User_Array_common_BattleNpcCommander(in.BattleNpcCommanders)
	out.BeastTalent = clone_User_common_BeastTalent(in.BeastTalent)
	out.Biography = clone_User_common_Biography(in.Biography)
	out.CommanderItemSkins = append(in.CommanderItemSkins[:0:0], in.CommanderItemSkins...)
	out.CounsellorId = cloneInt32Pointer(in.CounsellorId)
	out.DeputyCommander = clone_User_Array_common_Commander(in.DeputyCommander)
	out.ExtralSkills = clone_User_Array_common_Skill(in.ExtralSkills)
	out.FormationType = cloneEnumUserFormationType(in.FormationType)
	out.Guild = clone_User_Array_common_PlayerGuildSkill(in.Guild)
	out.GuildName = cloneStringPointer(in.GuildName)
	out.Id = cloneUint64Pointer(in.Id)
	out.IsRobot = cloneBoolPointer(in.IsRobot)
	out.Level = cloneUint32Pointer(in.Level)
	out.Model = cloneInt32Pointer(in.Model)
	out.MountInfo = clone_User_Array_common_MountItem(in.MountInfo)
	out.Msg = cloneStringPointer(in.Msg)
	out.Name = cloneStringPointer(in.Name)
	out.OnlyEquip = clone_User_Array_common_OnlyEquip(in.OnlyEquip)
	out.Power = cloneUint32Pointer(in.Power)
	out.ProfessionSkill = clone_User_common_ProfessionSkill(in.ProfessionSkill)
	out.RealPower = cloneUint32Pointer(in.RealPower)
	out.ServerId = cloneUint64Pointer(in.ServerId)
	out.Soldier = clone_User_Array_common_Soldier(in.Soldier)
	out.SoldierSkill = clone_User_common_SoliderSkill(in.SoldierSkill)
	out.SoldierTechs = clone_User_Array_common_SoldierTechSkill(in.SoldierTechs)
	out.StrTalents = clone_User_Array_common_StrTalent(in.StrTalents)
	out.TreasureFates = clone_User_Array_common_TreasureFate(in.TreasureFates)
	out.TreasureFatesInfo = clone_User_common_TreasureFatesInfo(in.TreasureFatesInfo)
	out.TreasureGroup = cloneUint32Pointer(in.TreasureGroup)
	out.TreasureRefine = clone_User_Array_common_TreasureRefine(in.TreasureRefine)
	out.Treasures = clone_User_Array_common_Treasure(in.Treasures)
	out.VipLevel = cloneUint32Pointer(in.VipLevel)
	out.WuHun = clone_User_Array_common_WuHun(in.WuHun)
	return out
}

func clone_User_common_BattlePlayerInput(in *common.BattlePlayerInput) *common.BattlePlayerInput {
	if in == nil {
		return nil
	}
	out := &common.BattlePlayerInput{}
	out.Id = cloneUint64Pointer(in.Id)
	out.Sid = cloneInt32Pointer(in.Sid)
	out.X = cloneInt32Pointer(in.X)
	out.Y = cloneInt32Pointer(in.Y)
	return out
}

func clone_User_common_BattleResultBeast(in *common.BattleResultBeast) *common.BattleResultBeast {
	if in == nil {
		return nil
	}
	out := &common.BattleResultBeast{}
	out.Player = clone_User_Array_common_BattleBeast(in.Player)
	out.Target = clone_User_Array_common_BattleBeast(in.Target)
	return out
}

func clone_User_common_BattleResultCommander(in *common.BattleResultCommander) *common.BattleResultCommander {
	if in == nil {
		return nil
	}
	out := &common.BattleResultCommander{}
	out.Player = clone_User_Array_common_BattleCommander(in.Player)
	out.Target = clone_User_Array_common_BattleCommander(in.Target)
	return out
}

func clone_User_common_BattleResultInfo(in *common.BattleResultInfo) *common.BattleResultInfo {
	if in == nil {
		return nil
	}
	out := &common.BattleResultInfo{}
	out.BattleStat = clone_User_common_BattleStat(in.BattleStat)
	out.BattleTime = cloneUint32Pointer(in.BattleTime)
	out.Beast = clone_User_common_BattleResultBeast(in.Beast)
	out.Code = cloneEnumUserBattleResultErrorCode(in.Code)
	out.Commander = clone_User_common_BattleResultCommander(in.Commander)
	out.CommanderDieNum = cloneUint32Pointer(in.CommanderDieNum)
	out.DailyBoss = clone_User_common_BattleDailyBoss(in.DailyBoss)
	out.DailyCoin = clone_User_common_BattleDailyCoin(in.DailyCoin)
	out.DailyExp = clone_User_common_BattleDailyExp(in.DailyExp)
	out.Frames = clone_User_Array_common_BattleFrameData(in.Frames)
	out.Id = cloneUint64Pointer(in.Id)
	out.PlayerDamage = clone_User_Array_common_BattlePlayerDamage(in.PlayerDamage)
	out.Review = cloneStringPointer(in.Review)
	out.Star = cloneInt32Pointer(in.Star)
	out.StarSlot = append(in.StarSlot[:0:0], in.StarSlot...)
	out.TargetCommanderDieNum = cloneUint32Pointer(in.TargetCommanderDieNum)
	out.TotalDamage = cloneUint64Pointer(in.TotalDamage)
	out.TotalTime = cloneUint32Pointer(in.TotalTime)
	out.Win = cloneBoolPointer(in.Win)
	return out
}

func clone_User_common_BattleSkillDamage(in *common.BattleSkillDamage) *common.BattleSkillDamage {
	if in == nil {
		return nil
	}
	out := &common.BattleSkillDamage{}
	out.CastCount = cloneInt32Pointer(in.CastCount)
	out.Damage = cloneUint64Pointer(in.Damage)
	out.Heal = cloneUint64Pointer(in.Heal)
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	out.RealDamage = cloneUint64Pointer(in.RealDamage)
	out.RealHeal = cloneUint64Pointer(in.RealHeal)
	out.RealValue = cloneInt32Pointer(in.RealValue)
	out.SlotId = cloneInt32Pointer(in.SlotId)
	out.Value = cloneInt32Pointer(in.Value)
	return out
}

func clone_User_common_BattleSoldierDamage(in *common.BattleSoldierDamage) *common.BattleSoldierDamage {
	if in == nil {
		return nil
	}
	out := &common.BattleSoldierDamage{}
	out.Damage = cloneUint64Pointer(in.Damage)
	out.Heal = cloneUint64Pointer(in.Heal)
	out.Hurt = cloneUint64Pointer(in.Hurt)
	out.Id = cloneInt32Pointer(in.Id)
	out.RealDamage = cloneUint64Pointer(in.RealDamage)
	out.RealHeal = cloneUint64Pointer(in.RealHeal)
	out.RealHurt = cloneUint64Pointer(in.RealHurt)
	return out
}

func clone_User_common_BattleStartInfo(in *common.BattleStartInfo) *common.BattleStartInfo {
	if in == nil {
		return nil
	}
	out := &common.BattleStartInfo{}
	out.BeginTime = cloneInt64Pointer(in.BeginTime)
	out.Fighter = clone_User_Array_common_BattlePlayerInfo(in.Fighter)
	out.Id = cloneUint64Pointer(in.Id)
	out.RandomSeed = cloneInt32Pointer(in.RandomSeed)
	out.ServerId = cloneUint64Pointer(in.ServerId)
	out.Speed = cloneInt32Pointer(in.Speed)
	out.StageId = cloneInt32Pointer(in.StageId)
	out.Subscribes = append(in.Subscribes[:0:0], in.Subscribes...)
	out.TypeId = cloneInt32Pointer(in.TypeId)
	out.Ver = cloneStringPointer(in.Ver)
	return out
}

func clone_User_common_BattleStat(in *common.BattleStat) *common.BattleStat {
	if in == nil {
		return nil
	}
	out := &common.BattleStat{}
	out.CommanderStats = clone_User_Array_common_BattleCommanderStat(in.CommanderStats)
	return out
}

func clone_User_common_BattleTeamDamage(in *common.BattleTeamDamage) *common.BattleTeamDamage {
	if in == nil {
		return nil
	}
	out := &common.BattleTeamDamage{}
	out.Commander = clone_User_common_BattleSoldierDamage(in.Commander)
	out.CommanderSkills = clone_User_Array_common_BattleSkillDamage(in.CommanderSkills)
	out.DieTime = cloneInt32Pointer(in.DieTime)
	out.GridId = cloneInt32Pointer(in.GridId)
	out.Soldier = clone_User_common_BattleSoldierDamage(in.Soldier)
	return out
}

func clone_User_common_BattleUnitHp(in *common.BattleUnitHp) *common.BattleUnitHp {
	if in == nil {
		return nil
	}
	out := &common.BattleUnitHp{}
	out.Hp = cloneInt32Pointer(in.Hp)
	out.Id = cloneInt32Pointer(in.Id)
	return out
}

func clone_User_common1_Bazaar(in *common1.Bazaar) *common1.Bazaar {
	if in == nil {
		return nil
	}
	out := &common1.Bazaar{}
	out.Records = clone_User_Map_int32_common1_BazaarRecord(in.Records)
	return out
}

func clone_User_common_BazaarItem(in *common.BazaarItem) *common.BazaarItem {
	if in == nil {
		return nil
	}
	out := &common.BazaarItem{}
	out.Count = cloneUint32Pointer(in.Count)
	out.Id = cloneInt32Pointer(in.Id)
	return out
}

func clone_User_common1_BazaarRecord(in *common1.BazaarRecord) *common1.BazaarRecord {
	if in == nil {
		return nil
	}
	out := &common1.BazaarRecord{}
	out.Items = clone_User_Array_common_BazaarItem(in.Items)
	return out
}

func clone_User_common_Beast(in *common.Beast) *common.Beast {
	if in == nil {
		return nil
	}
	out := &common.Beast{}
	out.BeastPower = cloneUint32Pointer(in.BeastPower)
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.DevourItemCount = cloneInt32Pointer(in.DevourItemCount)
	out.EvoLv = cloneUint32Pointer(in.EvoLv)
	out.Id = cloneInt32Pointer(in.Id)
	out.Star = cloneUint32Pointer(in.Star)
	out.StarExp = cloneUint32Pointer(in.StarExp)
	return out
}

func clone_User_common1_BeastGroup(in *common1.BeastGroup) *common1.BeastGroup {
	if in == nil {
		return nil
	}
	out := &common1.BeastGroup{}
	out.EnterHatchStatus = in.EnterHatchStatus
	out.LocationInfo = clone_User_Map_int32_common1_BeastLocation(in.LocationInfo)
	out.NoviceGuideStatus = in.NoviceGuideStatus
	out.OwnBeast = clone_User_Array_common_Beast(in.OwnBeast)
	out.Power = in.Power
	out.Talents = clone_User_common_BeastTalent(in.Talents)
	return out
}

func clone_User_common1_BeastLocation(in *common1.BeastLocation) *common1.BeastLocation {
	if in == nil {
		return nil
	}
	out := &common1.BeastLocation{}
	out.HatchTimeStamp = in.HatchTimeStamp
	out.IsAccelerate = in.IsAccelerate
	return out
}

func clone_User_common_BeastTalent(in *common.BeastTalent) *common.BeastTalent {
	if in == nil {
		return nil
	}
	out := &common.BeastTalent{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common1_Biography(in *common1.Biography) *common1.Biography {
	if in == nil {
		return nil
	}
	out := &common1.Biography{}
	out.Arms = clone_User_Map_uint32_common1_BiographyArms(in.Arms)
	out.CombatPower = in.CombatPower
	return out
}

func clone_User_common_Biography(in *common.Biography) *common.Biography {
	if in == nil {
		return nil
	}
	out := &common.Biography{}
	out.Arms = clone_User_Array_common_BiographyArms(in.Arms)
	out.CombatPower = cloneUint32Pointer(in.CombatPower)
	return out
}

func clone_User_common1_BiographyArms(in *common1.BiographyArms) *common1.BiographyArms {
	if in == nil {
		return nil
	}
	out := &common1.BiographyArms{}
	out.Commanders = clone_User_Map_uint32_common1_BiographyCommander(in.Commanders)
	out.Experience = in.Experience
	out.Level = in.Level
	return out
}

func clone_User_common_BiographyArms(in *common.BiographyArms) *common.BiographyArms {
	if in == nil {
		return nil
	}
	out := &common.BiographyArms{}
	out.Commanders = clone_User_Array_common_BiographyCommander(in.Commanders)
	out.Experience = cloneUint32Pointer(in.Experience)
	out.Id = cloneUint32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common_BiographyCommander(in *common.BiographyCommander) *common.BiographyCommander {
	if in == nil {
		return nil
	}
	out := &common.BiographyCommander{}
	out.Id = cloneUint32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common1_BiographyCommander(in *common1.BiographyCommander) *common1.BiographyCommander {
	if in == nil {
		return nil
	}
	out := &common1.BiographyCommander{}
	out.Level = in.Level
	return out
}

func clone_User_common1_BuyDrawInfo(in *common1.BuyDrawInfo) *common1.BuyDrawInfo {
	if in == nil {
		return nil
	}
	out := &common1.BuyDrawInfo{}
	out.BuyTimes = in.BuyTimes
	out.Id = in.Id
	return out
}

func clone_User_common_CakeFeast(in *common.CakeFeast) *common.CakeFeast {
	if in == nil {
		return nil
	}
	out := &common.CakeFeast{}
	out.Process = cloneInt32Pointer(in.Process)
	out.Slots = clone_User_Array_common_CakeFeastSlot(in.Slots)
	out.StageId = cloneInt32Pointer(in.StageId)
	return out
}

func clone_User_common_CakeFeastSlot(in *common.CakeFeastSlot) *common.CakeFeastSlot {
	if in == nil {
		return nil
	}
	out := &common.CakeFeastSlot{}
	out.Process = cloneInt32Pointer(in.Process)
	out.SlotId = cloneInt32Pointer(in.SlotId)
	return out
}

func clone_User_common1_CashGift(in *common1.CashGift) *common1.CashGift {
	if in == nil {
		return nil
	}
	out := &common1.CashGift{}
	out.ActID = in.ActID
	out.Items = clone_User_Array_common1_CashGiftItem(in.Items)
	out.OpenId = in.OpenId
	out.Rebate = clone_User_Map_int32_Int32(in.Rebate)
	return out
}

func clone_User_common1_CashGiftItem(in *common1.CashGiftItem) *common1.CashGiftItem {
	if in == nil {
		return nil
	}
	out := &common1.CashGiftItem{}
	out.Id = in.Id
	out.RechargeTimes = in.RechargeTimes
	out.RewardTimes = in.RewardTimes
	return out
}

func clone_User_common1_CashShop(in *common1.CashShop) *common1.CashShop {
	if in == nil {
		return nil
	}
	out := &common1.CashShop{}
	out.BuyRecords = clone_User_Map_int32_Uint32(in.BuyRecords)
	return out
}

func clone_User_common1_CellEvent(in *common1.CellEvent) *common1.CellEvent {
	if in == nil {
		return nil
	}
	out := &common1.CellEvent{}
	out.Id = in.Id
	out.Parameter = append(in.Parameter[:0:0], in.Parameter...)
	return out
}

func clone_User_common1_Chat(in *common1.Chat) *common1.Chat {
	if in == nil {
		return nil
	}
	out := &common1.Chat{}
	out.BanChannel = clone_User_Array_common1_BanChannel(in.BanChannel)
	out.BeChatedId = append(in.BeChatedId[:0:0], in.BeChatedId...)
	out.ClearTargetTime = in.ClearTargetTime
	out.LastAnnounceId = in.LastAnnounceId
	out.PrivateMsg = clone_User_Array_common1_PrivateMessage(in.PrivateMsg)
	out.PrivateTargetId = append(in.PrivateTargetId[:0:0], in.PrivateTargetId...)
	out.ReadMessageTime = append(in.ReadMessageTime[:0:0], in.ReadMessageTime...)
	return out
}

func clone_User_common_ChatBattle(in *common.ChatBattle) *common.ChatBattle {
	if in == nil {
		return nil
	}
	out := &common.ChatBattle{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleType = cloneInt32Pointer(in.BattleType)
	out.Npc = clone_User_common_ChatBattleNpc(in.Npc)
	out.Player1 = clone_User_common_ChatBattlePlayer(in.Player1)
	out.Player2 = clone_User_common_ChatBattlePlayer(in.Player2)
	out.TowerLevel = cloneInt32Pointer(in.TowerLevel)
	out.TowerType = cloneInt32Pointer(in.TowerType)
	return out
}

func clone_User_common_ChatBattleNpc(in *common.ChatBattleNpc) *common.ChatBattleNpc {
	if in == nil {
		return nil
	}
	out := &common.ChatBattleNpc{}
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	return out
}

func clone_User_common_ChatBattlePlayer(in *common.ChatBattlePlayer) *common.ChatBattlePlayer {
	if in == nil {
		return nil
	}
	out := &common.ChatBattlePlayer{}
	out.Avatar = cloneInt32Pointer(in.Avatar)
	out.AvatarFrame = cloneInt32Pointer(in.AvatarFrame)
	out.Level = cloneUint32Pointer(in.Level)
	out.Name = cloneStringPointer(in.Name)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	return out
}

func clone_User_common_ChatCell(in *common.ChatCell) *common.ChatCell {
	if in == nil {
		return nil
	}
	out := &common.ChatCell{}
	out.Battle = clone_User_common_ChatBattle(in.Battle)
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.Camp = cloneInt32Pointer(in.Camp)
	out.CityOccupy = clone_User_common_ChatGvgCityOccupy(in.CityOccupy)
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.Confirm = cloneBoolPointer(in.Confirm)
	out.GuildOfficial = cloneInt32Pointer(in.GuildOfficial)
	out.GvePass = clone_User_common_ChatGvePass(in.GvePass)
	out.LevelLimit = cloneUint32Pointer(in.LevelLimit)
	out.Msg = cloneStringPointer(in.Msg)
	out.Params = append(in.Params[:0:0], in.Params...)
	out.Player = clone_User_common_LmTopThreePlayer(in.Player)
	out.SendTime = cloneInt64Pointer(in.SendTime)
	out.SenderID = cloneUint64Pointer(in.SenderID)
	out.ServerName = cloneStringPointer(in.ServerName)
	out.TargetId = cloneUint64Pointer(in.TargetId)
	out.Type = cloneEnumUserChatCellType(in.Type)
	out.UnionID = cloneUint64Pointer(in.UnionID)
	out.WonConqueror = clone_User_common_ChatWonConqueror(in.WonConqueror)
	out.WorldBossKilled = clone_User_common_ChatWorldBossKilled(in.WorldBossKilled)
	return out
}

func clone_User_common_ChatGvePass(in *common.ChatGvePass) *common.ChatGvePass {
	if in == nil {
		return nil
	}
	out := &common.ChatGvePass{}
	out.Badge = cloneInt32Pointer(in.Badge)
	out.CityId = cloneUint32Pointer(in.CityId)
	out.Color = cloneInt32Pointer(in.Color)
	out.GuildName = cloneStringPointer(in.GuildName)
	out.Word = cloneStringPointer(in.Word)
	return out
}

func clone_User_common_ChatGvgCityOccupy(in *common.ChatGvgCityOccupy) *common.ChatGvgCityOccupy {
	if in == nil {
		return nil
	}
	out := &common.ChatGvgCityOccupy{}
	out.Badge = cloneInt32Pointer(in.Badge)
	out.CityId = cloneUint64Pointer(in.CityId)
	out.Color = cloneInt32Pointer(in.Color)
	out.GuildCamp = cloneUint32Pointer(in.GuildCamp)
	out.GuildName = cloneStringPointer(in.GuildName)
	out.LastGuildCamp = cloneUint32Pointer(in.LastGuildCamp)
	out.LastGuildName = cloneStringPointer(in.LastGuildName)
	out.Word = cloneStringPointer(in.Word)
	return out
}

func clone_User_common_ChatWonConqueror(in *common.ChatWonConqueror) *common.ChatWonConqueror {
	if in == nil {
		return nil
	}
	out := &common.ChatWonConqueror{}
	out.Badge = cloneInt32Pointer(in.Badge)
	out.Color = cloneInt32Pointer(in.Color)
	out.GuildName = cloneStringPointer(in.GuildName)
	out.MapId = cloneUint32Pointer(in.MapId)
	out.ServerId = cloneUint64Pointer(in.ServerId)
	out.Word = cloneStringPointer(in.Word)
	return out
}

func clone_User_common_ChatWorldBossKilled(in *common.ChatWorldBossKilled) *common.ChatWorldBossKilled {
	if in == nil {
		return nil
	}
	out := &common.ChatWorldBossKilled{}
	out.BossId = cloneInt32Pointer(in.BossId)
	out.Id = cloneUint64Pointer(in.Id)
	return out
}

func clone_User_common1_Checkin(in *common1.Checkin) *common1.Checkin {
	if in == nil {
		return nil
	}
	out := &common1.Checkin{}
	out.CheckinTimes = in.CheckinTimes
	out.Days = append(in.Days[:0:0], in.Days...)
	out.DoCheckinTime = in.DoCheckinTime
	out.LastCheckinTime = in.LastCheckinTime
	out.MonthReplenishNum = in.MonthReplenishNum
	out.MonthReplenishTime = in.MonthReplenishTime
	out.Replenish = in.Replenish
	out.ReplenishNum = in.ReplenishNum
	out.TakedWard = append(in.TakedWard[:0:0], in.TakedWard...)
	return out
}

func clone_User_common1_Chibi(in *common1.Chibi) *common1.Chibi {
	if in == nil {
		return nil
	}
	out := &common1.Chibi{}
	out.Assist = clone_User_common1_ChibiAssist(in.Assist)
	out.BuyChallengeTimes = in.BuyChallengeTimes
	out.ChallengedTimes = in.ChallengedTimes
	out.CurStageID = in.CurStageID
	out.CurStageStartTime = in.CurStageStartTime
	out.FightProgress = clone_User_common1_ChibiFightProgress(in.FightProgress)
	out.FinishedStages = clone_User_Map_int32_common1_ChibiFinishedStage(in.FinishedStages)
	out.Formation1 = clone_User_common_Formation(in.Formation1)
	out.Formation2 = clone_User_common_Formation(in.Formation2)
	out.TargetAwardTakenIds = append(in.TargetAwardTakenIds[:0:0], in.TargetAwardTakenIds...)
	return out
}

func clone_User_common1_ChibiAssist(in *common1.ChibiAssist) *common1.ChibiAssist {
	if in == nil {
		return nil
	}
	out := &common1.ChibiAssist{}
	out.BattleCommander = clone_User_common_BattleCommander(in.BattleCommander)
	out.FuncID = in.FuncID
	out.PlayerID = in.PlayerID
	return out
}

func clone_User_common1_ChibiFight(in *common1.ChibiFight) *common1.ChibiFight {
	if in == nil {
		return nil
	}
	out := &common1.ChibiFight{}
	out.BattleId = in.BattleId
	out.FightIndex = in.FightIndex
	out.FinishPower = in.FinishPower
	out.FinishTime = in.FinishTime
	return out
}

func clone_User_common1_ChibiFightProgress(in *common1.ChibiFightProgress) *common1.ChibiFightProgress {
	if in == nil {
		return nil
	}
	out := &common1.ChibiFightProgress{}
	out.Fights = clone_User_Array_common1_ChibiFight(in.Fights)
	out.FinishDate = in.FinishDate
	out.StageId = in.StageId
	return out
}

func clone_User_common1_ChibiFinishedStage(in *common1.ChibiFinishedStage) *common1.ChibiFinishedStage {
	if in == nil {
		return nil
	}
	out := &common1.ChibiFinishedStage{}
	out.LastFinishDate = in.LastFinishDate
	out.MinFinishPower = in.MinFinishPower
	out.MinFinishTime = in.MinFinishTime
	return out
}

func clone_User_common1_CityGiftAct(in *common1.CityGiftAct) *common1.CityGiftAct {
	if in == nil {
		return nil
	}
	out := &common1.CityGiftAct{}
	out.ActID = in.ActID
	out.CdTime = in.CdTime
	out.HasGenItems = append(in.HasGenItems[:0:0], in.HasGenItems...)
	out.Item = clone_User_Map_uint32_common1_CityGiftInfo(in.Item)
	out.OpenId = in.OpenId
	out.RewardTimes = in.RewardTimes
	out.Score = in.Score
	return out
}

func clone_User_common1_CityGiftInfo(in *common1.CityGiftInfo) *common1.CityGiftInfo {
	if in == nil {
		return nil
	}
	out := &common1.CityGiftInfo{}
	out.ExpireTime = in.ExpireTime
	out.GenTime = in.GenTime
	out.Id = in.Id
	out.IndexId = in.IndexId
	out.PicId = in.PicId
	return out
}

func clone_User_common1_CollectWord(in *common1.CollectWord) *common1.CollectWord {
	if in == nil {
		return nil
	}
	out := &common1.CollectWord{}
	out.ActivityId = in.ActivityId
	out.ExchangeTimes = clone_User_Map_int32_Uint32(in.ExchangeTimes)
	out.GotAwards = in.GotAwards
	out.OpenId = in.OpenId
	out.UseGiftCount = in.UseGiftCount
	out.WordScore = in.WordScore
	return out
}

func clone_User_common1_Commander(in *common1.Commander) *common1.Commander {
	if in == nil {
		return nil
	}
	out := &common1.Commander{}
	out.AwakeLevel = in.AwakeLevel
	out.AwakeSkill = clone_User_common_CommanderSkill(in.AwakeSkill)
	out.AwakeStatus = in.AwakeStatus
	out.BasePower = in.BasePower
	out.DeputyId = in.DeputyId
	out.DestinyFloats = clone_User_Map_uint32_Float64(in.DestinyFloats)
	out.DestinyProgress = in.DestinyProgress
	out.Destinys = clone_User_Map_uint32_Uint32(in.Destinys)
	out.Equips = clone_User_Map_uint32_common_CommanderEquip(in.Equips)
	out.Exp = in.Exp
	out.Genius = in.Genius
	out.Id = in.Id
	out.LeadershipLevel = in.LeadershipLevel
	out.Level = in.Level
	out.LittleStarLevel = in.LittleStarLevel
	out.MedicationProgress = in.MedicationProgress
	out.Medications = clone_User_Map_uint32_Uint32(in.Medications)
	out.MountId = in.MountId
	out.OnlyEquipId = in.OnlyEquipId
	out.Potential = in.Potential
	out.Potentials = clone_User_Map_uint32_common_CommanderPotential(in.Potentials)
	out.Power = in.Power
	out.Quality = in.Quality
	out.SeeStrategy = in.SeeStrategy
	out.Skills = clone_User_Map_uint32_common_CommanderSkill(in.Skills)
	out.Skin = in.Skin
	out.SoldierId = in.SoldierId
	out.StarLevel = in.StarLevel
	out.WuHuns = append(in.WuHuns[:0:0], in.WuHuns...)
	out.Zizhi = in.Zizhi
	out.ZizhiProgress = in.ZizhiProgress
	return out
}

func clone_User_common_Commander(in *common.Commander) *common.Commander {
	if in == nil {
		return nil
	}
	out := &common.Commander{}
	out.AwakeLevel = cloneUint32Pointer(in.AwakeLevel)
	out.AwakeSkill = clone_User_common_CommanderSkill(in.AwakeSkill)
	out.AwakeStatus = cloneEnumUserAwakeStatus(in.AwakeStatus)
	out.BasePower = cloneUint32Pointer(in.BasePower)
	out.DeputyId = cloneInt32Pointer(in.DeputyId)
	out.DestinyProgress = cloneUint32Pointer(in.DestinyProgress)
	out.Destinys = clone_User_Array_common_CommanderDestiny(in.Destinys)
	out.Equips = clone_User_Array_common_CommanderEquip(in.Equips)
	out.Exp = cloneUint32Pointer(in.Exp)
	out.Genius = cloneUint32Pointer(in.Genius)
	out.Id = cloneInt32Pointer(in.Id)
	out.LeadershipLevel = cloneUint32Pointer(in.LeadershipLevel)
	out.Level = cloneUint32Pointer(in.Level)
	out.LittleStarLevel = cloneUint32Pointer(in.LittleStarLevel)
	out.MedicationProgress = cloneUint32Pointer(in.MedicationProgress)
	out.Medications = clone_User_Array_common_CommanderMedication(in.Medications)
	out.MountId = cloneInt32Pointer(in.MountId)
	out.OnlyEquipId = cloneUint32Pointer(in.OnlyEquipId)
	out.Potential = cloneUint32Pointer(in.Potential)
	out.Potentials = clone_User_Array_common_CommanderPotential(in.Potentials)
	out.Power = cloneUint32Pointer(in.Power)
	out.Quality = cloneUint32Pointer(in.Quality)
	out.SeeStrategy = cloneInt32Pointer(in.SeeStrategy)
	out.Skills = clone_User_Array_common_CommanderSkill(in.Skills)
	out.Skin = cloneInt32Pointer(in.Skin)
	out.SoldierId = cloneInt32Pointer(in.SoldierId)
	out.StarLevel = cloneUint32Pointer(in.StarLevel)
	out.WuHunEquip = append(in.WuHunEquip[:0:0], in.WuHunEquip...)
	out.Zizhi = cloneUint32Pointer(in.Zizhi)
	out.ZizhiProgress = cloneInt32Pointer(in.ZizhiProgress)
	return out
}

func clone_User_common1_CommanderAwakeTaskProgress(in *common1.CommanderAwakeTaskProgress) *common1.CommanderAwakeTaskProgress {
	if in == nil {
		return nil
	}
	out := &common1.CommanderAwakeTaskProgress{}
	out.CurrentProgress = in.CurrentProgress
	out.CurrentTaskId = in.CurrentTaskId
	return out
}

func clone_User_common1_CommanderBattle(in *common1.CommanderBattle) *common1.CommanderBattle {
	if in == nil {
		return nil
	}
	out := &common1.CommanderBattle{}
	out.BattleDatas = clone_User_Array_common1_CommanderBattleData(in.BattleDatas)
	return out
}

func clone_User_common1_CommanderBattleData(in *common1.CommanderBattleData) *common1.CommanderBattleData {
	if in == nil {
		return nil
	}
	out := &common1.CommanderBattleData{}
	out.BattleType = in.BattleType
	out.CurLevel = in.CurLevel
	out.GotStageRewards = append(in.GotStageRewards[:0:0], in.GotStageRewards...)
	out.TodaySweepTimes = in.TodaySweepTimes
	return out
}

func clone_User_common1_CommanderData(in *common1.CommanderData) *common1.CommanderData {
	if in == nil {
		return nil
	}
	out := &common1.CommanderData{}
	out.CommanderAwakeSkins = append(in.CommanderAwakeSkins[:0:0], in.CommanderAwakeSkins...)
	out.CommanderDefaultSkins = append(in.CommanderDefaultSkins[:0:0], in.CommanderDefaultSkins...)
	out.CommanderItemSkins = append(in.CommanderItemSkins[:0:0], in.CommanderItemSkins...)
	out.CurrentAwakeCommanderId = in.CurrentAwakeCommanderId
	out.CurrentAwakeCommanderTaskProgress = clone_User_common1_CommanderAwakeTaskProgress(in.CurrentAwakeCommanderTaskProgress)
	out.CurrentAwakeCommanderTaskStatus = clone_User_Map_uint32_Uint32(in.CurrentAwakeCommanderTaskStatus)
	out.RankCommander = append(in.RankCommander[:0:0], in.RankCommander...)
	return out
}

func clone_User_common_CommanderDestiny(in *common.CommanderDestiny) *common.CommanderDestiny {
	if in == nil {
		return nil
	}
	out := &common.CommanderDestiny{}
	out.SlotId = cloneUint32Pointer(in.SlotId)
	out.Value = cloneUint32Pointer(in.Value)
	out.ValueFloat = cloneFloat64Pointer(in.ValueFloat)
	return out
}

func clone_User_common_CommanderEquip(in *common.CommanderEquip) *common.CommanderEquip {
	if in == nil {
		return nil
	}
	out := &common.CommanderEquip{}
	out.EquipSlotId = cloneUint32Pointer(in.EquipSlotId)
	out.Synthetical = cloneBoolPointer(in.Synthetical)
	return out
}

func clone_User_common_CommanderMedication(in *common.CommanderMedication) *common.CommanderMedication {
	if in == nil {
		return nil
	}
	out := &common.CommanderMedication{}
	out.Level = cloneUint32Pointer(in.Level)
	out.SlotId = cloneUint32Pointer(in.SlotId)
	return out
}

func clone_User_common_CommanderPotential(in *common.CommanderPotential) *common.CommanderPotential {
	if in == nil {
		return nil
	}
	out := &common.CommanderPotential{}
	out.Level = cloneUint32Pointer(in.Level)
	out.SlotId = cloneUint32Pointer(in.SlotId)
	return out
}

func clone_User_common_CommanderSkill(in *common.CommanderSkill) *common.CommanderSkill {
	if in == nil {
		return nil
	}
	out := &common.CommanderSkill{}
	out.Exp = cloneUint32Pointer(in.Exp)
	out.Level = cloneUint32Pointer(in.Level)
	out.SkillSlotId = cloneUint32Pointer(in.SkillSlotId)
	return out
}

func clone_User_common1_CommanderVisit(in *common1.CommanderVisit) *common1.CommanderVisit {
	if in == nil {
		return nil
	}
	out := &common1.CommanderVisit{}
	out.ActId = in.ActId
	out.CritTimes = in.CritTimes
	out.OpenId = in.OpenId
	out.Score = in.Score
	out.TodayPlayTimes = in.TodayPlayTimes
	return out
}

func clone_User_common1_CommonTowerFundAct(in *common1.CommonTowerFundAct) *common1.CommonTowerFundAct {
	if in == nil {
		return nil
	}
	out := &common1.CommonTowerFundAct{}
	out.ActId = in.ActId
	out.Funds = clone_User_Array_common1_CommonTowerFundData(in.Funds)
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_CommonTowerFundData(in *common1.CommonTowerFundData) *common1.CommonTowerFundData {
	if in == nil {
		return nil
	}
	out := &common1.CommonTowerFundData{}
	out.GotFreeGifts = append(in.GotFreeGifts[:0:0], in.GotFreeGifts...)
	out.GotPayGifts = append(in.GotPayGifts[:0:0], in.GotPayGifts...)
	out.Id = in.Id
	out.IsPaid = in.IsPaid
	return out
}

func clone_User_common_Coordinate(in *common.Coordinate) *common.Coordinate {
	if in == nil {
		return nil
	}
	out := &common.Coordinate{}
	out.X = cloneUint32Pointer(in.X)
	out.Y = cloneUint32Pointer(in.Y)
	return out
}

func clone_User_common_Counsellor(in *common.Counsellor) *common.Counsellor {
	if in == nil {
		return nil
	}
	out := &common.Counsellor{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Magics = clone_User_Array_common_CounsellorMagic(in.Magics)
	out.Power = cloneUint32Pointer(in.Power)
	out.QiJi = cloneUint32Pointer(in.QiJi)
	out.QiMen = clone_User_Array_common_CounsellorQiMen(in.QiMen)
	out.Star = cloneUint32Pointer(in.Star)
	return out
}

func clone_User_common1_CounsellorGroup(in *common1.CounsellorGroup) *common1.CounsellorGroup {
	if in == nil {
		return nil
	}
	out := &common1.CounsellorGroup{}
	out.OwnCounsellors = clone_User_Array_common_Counsellor(in.OwnCounsellors)
	out.TopCounsellorID = in.TopCounsellorID
	out.TopCounsellorPower = in.TopCounsellorPower
	out.UnlockMagic3 = in.UnlockMagic3
	out.UnlockMagic4 = in.UnlockMagic4
	out.UnlockMagic5 = in.UnlockMagic5
	return out
}

func clone_User_common_CounsellorMagic(in *common.CounsellorMagic) *common.CounsellorMagic {
	if in == nil {
		return nil
	}
	out := &common.CounsellorMagic{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	out.Progress = cloneUint32Pointer(in.Progress)
	return out
}

func clone_User_common_CounsellorQiMen(in *common.CounsellorQiMen) *common.CounsellorQiMen {
	if in == nil {
		return nil
	}
	out := &common.CounsellorQiMen{}
	out.Level = cloneInt32Pointer(in.Level)
	return out
}

func clone_User_common_DailyBoss(in *common.DailyBoss) *common.DailyBoss {
	if in == nil {
		return nil
	}
	out := &common.DailyBoss{}
	out.ActivityAdd = cloneUint32Pointer(in.ActivityAdd)
	out.BossDatas = clone_User_Array_common_DailyBossData(in.BossDatas)
	return out
}

func clone_User_common_DailyBossData(in *common.DailyBossData) *common.DailyBossData {
	if in == nil {
		return nil
	}
	out := &common.DailyBossData{}
	out.BestDamage = cloneUint32Pointer(in.BestDamage)
	out.BestLevel = cloneInt32Pointer(in.BestLevel)
	out.BestTime = cloneUint32Pointer(in.BestTime)
	out.BossId = cloneInt32Pointer(in.BossId)
	out.ChallengedTime = cloneUint32Pointer(in.ChallengedTime)
	out.FirstKillAwards = append(in.FirstKillAwards[:0:0], in.FirstKillAwards...)
	out.LevelDatas = clone_User_Array_common_DailyBossLevelData(in.LevelDatas)
	out.TodayAddChallengeTimes = cloneUint32Pointer(in.TodayAddChallengeTimes)
	out.UnlockLevel = cloneInt32Pointer(in.UnlockLevel)
	return out
}

func clone_User_common_DailyBossLevelData(in *common.DailyBossLevelData) *common.DailyBossLevelData {
	if in == nil {
		return nil
	}
	out := &common.DailyBossLevelData{}
	out.BestDamage = cloneUint32Pointer(in.BestDamage)
	out.Level = cloneInt32Pointer(in.Level)
	return out
}

func clone_User_common1_DailyCoin(in *common1.DailyCoin) *common1.DailyCoin {
	if in == nil {
		return nil
	}
	out := &common1.DailyCoin{}
	out.ActivityAdd = in.ActivityAdd
	out.BestDamage = in.BestDamage
	out.BestInitOutput = in.BestInitOutput
	out.BestKillNum = in.BestKillNum
	out.BestOutputNum = in.BestOutputNum
	out.BestOutputPower = in.BestOutputPower
	out.BestRank = in.BestRank
	out.BestRoundNum = in.BestRoundNum
	out.ChallengedTime = in.ChallengedTime
	out.DayAwardMaxLevel = in.DayAwardMaxLevel
	out.DayAwardTakenRecords = append(in.DayAwardTakenRecords[:0:0], in.DayAwardTakenRecords...)
	out.DayDamage = in.DayDamage
	out.LastChallengePower = in.LastChallengePower
	out.WeekDamage = in.WeekDamage
	return out
}

func clone_User_common1_DailyDiscount(in *common1.DailyDiscount) *common1.DailyDiscount {
	if in == nil {
		return nil
	}
	out := &common1.DailyDiscount{}
	out.Acts = clone_User_Array_common1_DailyDiscountAct(in.Acts)
	return out
}

func clone_User_common1_DailyDiscountAct(in *common1.DailyDiscountAct) *common1.DailyDiscountAct {
	if in == nil {
		return nil
	}
	out := &common1.DailyDiscountAct{}
	out.ActID = in.ActID
	out.Items = clone_User_Array_common1_DailyDiscountItem(in.Items)
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_DailyDiscountItem(in *common1.DailyDiscountItem) *common1.DailyDiscountItem {
	if in == nil {
		return nil
	}
	out := &common1.DailyDiscountItem{}
	out.Bought = in.Bought
	out.Id = in.Id
	return out
}

func clone_User_common1_DailyExp(in *common1.DailyExp) *common1.DailyExp {
	if in == nil {
		return nil
	}
	out := &common1.DailyExp{}
	out.ActivityAdd = in.ActivityAdd
	out.BestInitOutput = in.BestInitOutput
	out.BestKillNum = in.BestKillNum
	out.BestOutputNum = in.BestOutputNum
	out.BestOutputPower = in.BestOutputPower
	out.BestRank = in.BestRank
	out.ChallengedTime = in.ChallengedTime
	out.DayAwardMaxLevel = in.DayAwardMaxLevel
	out.DayAwardTakenRecords = append(in.DayAwardTakenRecords[:0:0], in.DayAwardTakenRecords...)
	out.DayKillNum = in.DayKillNum
	out.LastChallengePower = in.LastChallengePower
	out.WeekKillNum = in.WeekKillNum
	return out
}

func clone_User_common1_DailyPhysical(in *common1.DailyPhysical) *common1.DailyPhysical {
	if in == nil {
		return nil
	}
	out := &common1.DailyPhysical{}
	out.FullAttendGiftId = in.FullAttendGiftId
	out.FullAttendGifts = clone_User_Array_common_Item(in.FullAttendGifts)
	out.FullAttendTimes = in.FullAttendTimes
	out.IsFullAttendGiftsTaken = in.IsFullAttendGiftsTaken
	out.LuckyGiftRecords = clone_User_Map_int32_common1_PhysicalLuckyGiftRecord(in.LuckyGiftRecords)
	out.LuckyTimes = clone_User_Map_int32_Uint32(in.LuckyTimes)
	out.OverdueTakeRecords = append(in.OverdueTakeRecords[:0:0], in.OverdueTakeRecords...)
	out.TakeRecords = append(in.TakeRecords[:0:0], in.TakeRecords...)
	return out
}

func clone_User_common1_DailyRecharge(in *common1.DailyRecharge) *common1.DailyRecharge {
	if in == nil {
		return nil
	}
	out := &common1.DailyRecharge{}
	out.Act = clone_User_Array_common1_DailyRechargeAct(in.Act)
	return out
}

func clone_User_common1_DailyRechargeAct(in *common1.DailyRechargeAct) *common1.DailyRechargeAct {
	if in == nil {
		return nil
	}
	out := &common1.DailyRechargeAct{}
	out.ActID = in.ActID
	out.Items = clone_User_Array_common1_DailyRechargeItem(in.Items)
	out.OpenId = in.OpenId
	out.RechargeDay = in.RechargeDay
	out.RechargeTime = in.RechargeTime
	out.SurpriseTime = in.SurpriseTime
	return out
}

func clone_User_common1_DailyRechargeItem(in *common1.DailyRechargeItem) *common1.DailyRechargeItem {
	if in == nil {
		return nil
	}
	out := &common1.DailyRechargeItem{}
	out.Id = in.Id
	out.RechargeNum = in.RechargeNum
	out.Reward = in.Reward
	return out
}

func clone_User_common1_DailyStatsData(in *common1.DailyStatsData) *common1.DailyStatsData {
	if in == nil {
		return nil
	}
	out := &common1.DailyStatsData{}
	out.ActiveScore = in.ActiveScore
	out.ArenaTimes = in.ArenaTimes
	out.AssistRewardNum = in.AssistRewardNum
	out.AutoFinishPutOn = in.AutoFinishPutOn
	out.BossTimes = in.BossTimes
	out.BuildGuildTimes = in.BuildGuildTimes
	out.BuyPhysicalTimes = in.BuyPhysicalTimes
	out.ChibiWin = in.ChibiWin
	out.ChooseDrawCount = in.ChooseDrawCount
	out.CommanderBattleSweepTimes = in.CommanderBattleSweepTimes
	out.CostDiamond = in.CostDiamond
	out.CostGold = in.CostGold
	out.CostPhysical = in.CostPhysical
	out.DiamondDrawTimes = in.DiamondDrawTimes
	out.DramaTimes = in.DramaTimes
	out.DrawCardTimes = in.DrawCardTimes
	out.EliteDungeon = in.EliteDungeon
	out.EliteDungeonSweep = in.EliteDungeonSweep
	out.EnterWon = in.EnterWon
	out.ExpeditionSweepTimes = in.ExpeditionSweepTimes
	out.GveChallengeTimes = in.GveChallengeTimes
	out.GvgOccupyMineTimes = in.GvgOccupyMineTimes
	out.LimitChallgeTimes = in.LimitChallgeTimes
	out.LoginTimes = in.LoginTimes
	out.NavalBattleTimes = in.NavalBattleTimes
	out.NormalDungeon = in.NormalDungeon
	out.NormalDungeonSweep = in.NormalDungeonSweep
	out.OverlordBattleTimes = in.OverlordBattleTimes
	out.Recharge = clone_User_common1_RechargeStatDaily(in.Recharge)
	out.RechargeReal = clone_User_common1_RechargeStatDaily(in.RechargeReal)
	out.ShopBuyTimes = in.ShopBuyTimes
	out.ShopRefreshTimes = in.ShopRefreshTimes
	out.SlayTimes = in.SlayTimes
	out.TakePhysicalTimes = in.TakePhysicalTimes
	out.TowerTakeRewardsTimes = in.TowerTakeRewardsTimes
	out.WorldBossChallengeTimes = in.WorldBossChallengeTimes
	return out
}

func clone_User_common1_DigitalMatrix(in *common1.DigitalMatrix) *common1.DigitalMatrix {
	if in == nil {
		return nil
	}
	out := &common1.DigitalMatrix{}
	out.ActivationNumber = append(in.ActivationNumber[:0:0], in.ActivationNumber...)
	out.ActivationTimes = in.ActivationTimes
	out.OnlineCollectionRecord = clone_User_Map_uint32_Uint32(in.OnlineCollectionRecord)
	out.Position = clone_User_Map_uint32_Uint32(in.Position)
	out.ScoreCollectionRecord = in.ScoreCollectionRecord
	out.Stage = in.Stage
	return out
}

func clone_User_common_District(in *common.District) *common.District {
	if in == nil {
		return nil
	}
	out := &common.District{}
	out.Id = cloneInt32Pointer(in.Id)
	out.NationID = cloneInt32Pointer(in.NationID)
	out.Unlock = cloneBoolPointer(in.Unlock)
	return out
}

func clone_User_common1_Drama(in *common1.Drama) *common1.Drama {
	if in == nil {
		return nil
	}
	out := &common1.Drama{}
	out.ActRewardTimes = in.ActRewardTimes
	out.AssistCommanders = clone_User_Array_common_AssistCommander(in.AssistCommanders)
	out.AssistRewards = clone_User_Array_common1_AssistReward(in.AssistRewards)
	out.BeastHp = clone_User_Map_int32_Int32(in.BeastHp)
	out.BoxCount = in.BoxCount
	out.BoxItemScore = append(in.BoxItemScore[:0:0], in.BoxItemScore...)
	out.BoxScore = in.BoxScore
	out.CanStartTimes = in.CanStartTimes
	out.CommanderHp = clone_User_Map_int32_Int32(in.CommanderHp)
	out.CurOneClickSweep = in.CurOneClickSweep
	out.DieBeasts = append(in.DieBeasts[:0:0], in.DieBeasts...)
	out.DieCommanders = append(in.DieCommanders[:0:0], in.DieCommanders...)
	out.EmperorId = in.EmperorId
	out.Enemy = clone_User_Array_common1_DramaBattle(in.Enemy)
	out.GainBuffFlag = clone_User_Map_int32_Bool(in.GainBuffFlag)
	out.IsPassLastLevel = in.IsPassLastLevel
	out.MaxSweepLevel = in.MaxSweepLevel
	out.NeedPieceNum = in.NeedPieceNum
	out.OpenBoxCount = in.OpenBoxCount
	out.OwnSkills = clone_User_Array_common_Skill(in.OwnSkills)
	out.PlayerLevel = in.PlayerLevel
	out.ResetPower = in.ResetPower
	out.ResetTime = in.ResetTime
	out.SeasonID = in.SeasonID
	out.Stages = clone_User_Array_common_DramaStage(in.Stages)
	out.StartTimes = in.StartTimes
	out.TreasurePieceCount = in.TreasurePieceCount
	out.TreasurePos = in.TreasurePos
	out.TreasureTimes = in.TreasureTimes
	return out
}

func clone_User_common1_DramaBattle(in *common1.DramaBattle) *common1.DramaBattle {
	if in == nil {
		return nil
	}
	out := &common1.DramaBattle{}
	out.BattleInfo = clone_User_common_BattlePlayerInfo(in.BattleInfo)
	out.DieBeasts = clone_User_Array_common_BattleBeast(in.DieBeasts)
	out.DieCommanders = clone_User_Array_common_BattleCommander(in.DieCommanders)
	out.EnemyPlayerID = in.EnemyPlayerID
	out.GenPower = in.GenPower
	out.Power = in.Power
	out.StageID = in.StageID
	return out
}

func clone_User_common_DramaBox(in *common.DramaBox) *common.DramaBox {
	if in == nil {
		return nil
	}
	out := &common.DramaBox{}
	out.Items = clone_User_Array_common_Item(in.Items)
	return out
}

func clone_User_common_DramaShop(in *common.DramaShop) *common.DramaShop {
	if in == nil {
		return nil
	}
	out := &common.DramaShop{}
	out.BuyCount = cloneInt32Pointer(in.BuyCount)
	out.FreeBuyCount = cloneInt32Pointer(in.FreeBuyCount)
	out.PrivilegeBuy = cloneInt32Pointer(in.PrivilegeBuy)
	return out
}

func clone_User_common_DramaSkill(in *common.DramaSkill) *common.DramaSkill {
	if in == nil {
		return nil
	}
	out := &common.DramaSkill{}
	out.IsRelive = cloneBoolPointer(in.IsRelive)
	out.Quality = cloneInt32Pointer(in.Quality)
	out.Skill = clone_User_common_Skill(in.Skill)
	return out
}

func clone_User_common_DramaStage(in *common.DramaStage) *common.DramaStage {
	if in == nil {
		return nil
	}
	out := &common.DramaStage{}
	out.Box = clone_User_common_DramaBox(in.Box)
	out.BuildId = cloneInt32Pointer(in.BuildId)
	out.Passed = cloneBoolPointer(in.Passed)
	out.Shop = clone_User_common_DramaShop(in.Shop)
	out.Skills = clone_User_Array_common_DramaSkill(in.Skills)
	out.StageId = cloneInt32Pointer(in.StageId)
	return out
}

func clone_User_common1_Draw(in *common1.Draw) *common1.Draw {
	if in == nil {
		return nil
	}
	out := &common1.Draw{}
	out.Diamond = clone_User_common1_DrawDiamond(in.Diamond)
	out.DiamondWuHun = clone_User_common1_DrawWuHun(in.DiamondWuHun)
	out.DrawMount = clone_User_common1_DrawMount(in.DrawMount)
	out.DrawOnlyEquip = clone_User_common1_DrawOnlyEquip(in.DrawOnlyEquip)
	out.Normal = clone_User_common1_DrawNormal(in.Normal)
	out.NormalWuHun = clone_User_common1_DrawWuHun(in.NormalWuHun)
	out.Select = clone_User_common1_DrawChoose(in.Select)
	out.Treasure = clone_User_common1_DrawTreasure(in.Treasure)
	return out
}

func clone_User_common1_DrawChoose(in *common1.DrawChoose) *common1.DrawChoose {
	if in == nil {
		return nil
	}
	out := &common1.DrawChoose{}
	out.Quality15 = append(in.Quality15[:0:0], in.Quality15...)
	out.Quality16 = append(in.Quality16[:0:0], in.Quality16...)
	out.Score = clone_User_common1_DrawScore(in.Score)
	return out
}

func clone_User_common1_DrawDiamond(in *common1.DrawDiamond) *common1.DrawDiamond {
	if in == nil {
		return nil
	}
	out := &common1.DrawDiamond{}
	out.DiamondScore = clone_User_common1_DrawScore(in.DiamondScore)
	out.HalfPriceNum = in.HalfPriceNum
	out.LastFreeTime = in.LastFreeTime
	out.LastHalfPriceTime = in.LastHalfPriceTime
	out.LevelDrawTimes = in.LevelDrawTimes
	out.LevelUse = append(in.LevelUse[:0:0], in.LevelUse...)
	out.TotalFreeTimes = in.TotalFreeTimes
	return out
}

func clone_User_common1_DrawLowActive(in *common1.DrawLowActive) *common1.DrawLowActive {
	if in == nil {
		return nil
	}
	out := &common1.DrawLowActive{}
	out.Count = in.Count
	out.LastTime = in.LastTime
	return out
}

func clone_User_common1_DrawMount(in *common1.DrawMount) *common1.DrawMount {
	if in == nil {
		return nil
	}
	out := &common1.DrawMount{}
	out.CardScore = clone_User_Map_int32_Uint32(in.CardScore)
	out.DrawNum = clone_User_Map_int32_Uint32(in.DrawNum)
	out.DrawTimes = in.DrawTimes
	out.TodayBuyTimes = in.TodayBuyTimes
	out.TodayDrawTimes = in.TodayDrawTimes
	return out
}

func clone_User_common1_DrawNormal(in *common1.DrawNormal) *common1.DrawNormal {
	if in == nil {
		return nil
	}
	out := &common1.DrawNormal{}
	out.FreeNum = in.FreeNum
	out.LastFreeTime = in.LastFreeTime
	out.Score = clone_User_common1_DrawScore(in.Score)
	return out
}

func clone_User_common1_DrawOnlyEquip(in *common1.DrawOnlyEquip) *common1.DrawOnlyEquip {
	if in == nil {
		return nil
	}
	out := &common1.DrawOnlyEquip{}
	out.DrawData = clone_User_Map_int32_common1_DrawOnlyEquip_DrawData(in.DrawData)
	return out
}

func clone_DrawOnlyEquipBack_example_DrawOnlyEquipBack_DrawData(in *DrawOnlyEquipBack_DrawData) *DrawOnlyEquipBack_DrawData {
	if in == nil {
		return nil
	}
	out := &DrawOnlyEquipBack_DrawData{}
	out.HistoryDrawCount = in.HistoryDrawCount
	out.ResId = in.ResId
	out.SpecialDrawCount = clone_DrawOnlyEquipBack_Map_string_Int32(in.SpecialDrawCount)
	return out
}

func clone_User_common1_DrawOnlyEquip_DrawData(in *common1.DrawOnlyEquip_DrawData) *common1.DrawOnlyEquip_DrawData {
	if in == nil {
		return nil
	}
	out := &common1.DrawOnlyEquip_DrawData{}
	out.DrawCount = in.DrawCount
	out.DrawRedCount = in.DrawRedCount
	out.HistoryDrawCount = in.HistoryDrawCount
	out.IsDrawRedEquip = in.IsDrawRedEquip
	out.NextFreeTime = in.NextFreeTime
	out.ResId = in.ResId
	out.SpecialDrawCount = clone_User_Map_string_Int32(in.SpecialDrawCount)
	out.TodayBuyLimitTimes = in.TodayBuyLimitTimes
	out.TodayBuyTimes = in.TodayBuyTimes
	out.TodayDrawCount = in.TodayDrawCount
	out.TodayFreeCount = in.TodayFreeCount
	return out
}

func clone_User_common1_DrawScore(in *common1.DrawScore) *common1.DrawScore {
	if in == nil {
		return nil
	}
	out := &common1.DrawScore{}
	out.DrawCount = in.DrawCount
	out.FirstCount = in.FirstCount
	out.FirstScore = in.FirstScore
	out.LowActive = clone_User_Map_int32_common1_DrawLowActive(in.LowActive)
	out.SecondCount = in.SecondCount
	out.SecondScore = in.SecondScore
	out.ThirdCount = in.ThirdCount
	out.ThirdScore = in.ThirdScore
	return out
}

func clone_User_common1_DrawTreasure(in *common1.DrawTreasure) *common1.DrawTreasure {
	if in == nil {
		return nil
	}
	out := &common1.DrawTreasure{}
	out.DrawGoldTimes = in.DrawGoldTimes
	out.DrawOrangeTimes = in.DrawOrangeTimes
	out.DrawTimes = in.DrawTimes
	out.EnterTime = in.EnterTime
	out.GoldScore = in.GoldScore
	out.HalfPriceTime = in.HalfPriceTime
	out.HitGoldHotTimes = in.HitGoldHotTimes
	out.HitOrangeHotTimes = in.HitOrangeHotTimes
	out.HotActId = in.HotActId
	out.OrangeScore = in.OrangeScore
	out.PurpleScore = in.PurpleScore
	out.RefreshTime = in.RefreshTime
	out.TodayBuyCount = in.TodayBuyCount
	out.TodayNormalFreeCount = in.TodayNormalFreeCount
	out.TotalCount = in.TotalCount
	return out
}

func clone_User_common1_DrawWuHun(in *common1.DrawWuHun) *common1.DrawWuHun {
	if in == nil {
		return nil
	}
	out := &common1.DrawWuHun{}
	out.RefreshTime = in.RefreshTime
	out.Score = clone_User_Map_int32_Int32(in.Score)
	out.TodayBuyCount = in.TodayBuyCount
	out.TodayDrawCount = in.TodayDrawCount
	out.TotalCount = in.TotalCount
	out.TriggerTimes = clone_User_Map_int32_Int32(in.TriggerTimes)
	out.WishId = in.WishId
	return out
}

func clone_User_common1_Dungeon(in *common1.Dungeon) *common1.Dungeon {
	if in == nil {
		return nil
	}
	out := &common1.Dungeon{}
	out.BeginEliteTime = in.BeginEliteTime
	out.Chapters = clone_User_Array_common_DungeonChapter(in.Chapters)
	out.DropTimes = in.DropTimes
	out.DropType = in.DropType
	out.Levels = clone_User_Array_common_DungeonLevel(in.Levels)
	out.ResetTime = in.ResetTime
	return out
}

func clone_User_common_DungeonChapter(in *common.DungeonChapter) *common.DungeonChapter {
	if in == nil {
		return nil
	}
	out := &common.DungeonChapter{}
	out.ConnectStageId = append(in.ConnectStageId[:0:0], in.ConnectStageId...)
	out.Id = cloneInt32Pointer(in.Id)
	out.StarRewards = append(in.StarRewards[:0:0], in.StarRewards...)
	return out
}

func clone_User_common_DungeonLevel(in *common.DungeonLevel) *common.DungeonLevel {
	if in == nil {
		return nil
	}
	out := &common.DungeonLevel{}
	out.EliteDungeonBuyTimes = cloneUint32Pointer(in.EliteDungeonBuyTimes)
	out.FightCount = cloneInt32Pointer(in.FightCount)
	out.Id = cloneInt32Pointer(in.Id)
	out.Star = cloneUint32Pointer(in.Star)
	return out
}

func clone_User_common1_DyPeakSignUp(in *common1.DyPeakSignUp) *common1.DyPeakSignUp {
	if in == nil {
		return nil
	}
	out := &common1.DyPeakSignUp{}
	out.ChooseReward = in.ChooseReward
	out.Season = in.Season
	out.SignUpTime = in.SignUpTime
	out.SyncFormationPower = in.SyncFormationPower
	out.SyncFormationTime = in.SyncFormationTime
	out.SyncMaxPower = in.SyncMaxPower
	return out
}

func clone_User_common1_DynamicGift(in *common1.DynamicGift) *common1.DynamicGift {
	if in == nil {
		return nil
	}
	out := &common1.DynamicGift{}
	out.Gifts = clone_User_Array_common1_DynamicGiftItem(in.Gifts)
	out.WeightAdd = clone_User_Map_int32_Int32(in.WeightAdd)
	return out
}

func clone_User_common1_DynamicGiftItem(in *common1.DynamicGiftItem) *common1.DynamicGiftItem {
	if in == nil {
		return nil
	}
	out := &common1.DynamicGiftItem{}
	out.ActID = in.ActID
	out.BeginBuyTime = in.BeginBuyTime
	out.CreateTime = in.CreateTime
	out.ExceptItem = append(in.ExceptItem[:0:0], in.ExceptItem...)
	out.GiftId = in.GiftId
	out.Id = in.Id
	out.Items = clone_User_Array_common1_DynamicGiftRangeItem(in.Items)
	out.ReactiveTimes = in.ReactiveTimes
	out.Status = in.Status
	out.Times = in.Times
	out.UnbuyTimes = in.UnbuyTimes
	return out
}

func clone_User_common1_DynamicGiftRangeItem(in *common1.DynamicGiftRangeItem) *common1.DynamicGiftRangeItem {
	if in == nil {
		return nil
	}
	out := &common1.DynamicGiftRangeItem{}
	out.Item = clone_User_common_Item(in.Item)
	out.RangeID = in.RangeID
	return out
}

func clone_User_common_Employee(in *common.Employee) *common.Employee {
	if in == nil {
		return nil
	}
	out := &common.Employee{}
	out.CommanderIds = append(in.CommanderIds[:0:0], in.CommanderIds...)
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	return out
}

func clone_User_common1_Expedition(in *common1.Expedition) *common1.Expedition {
	if in == nil {
		return nil
	}
	out := &common1.Expedition{}
	out.Chapter = clone_User_Map_int32_common1_ExpeditionChapter(in.Chapter)
	out.ShowTime = in.ShowTime
	out.TodayBuyTimes = in.TodayBuyTimes
	out.TodaySweepTimes = in.TodaySweepTimes
	return out
}

func clone_User_common1_ExpeditionBattleUnit(in *common1.ExpeditionBattleUnit) *common1.ExpeditionBattleUnit {
	if in == nil {
		return nil
	}
	out := &common1.ExpeditionBattleUnit{}
	out.Hp = in.Hp
	return out
}

func clone_User_common1_ExpeditionChapter(in *common1.ExpeditionChapter) *common1.ExpeditionChapter {
	if in == nil {
		return nil
	}
	out := &common1.ExpeditionChapter{}
	out.BuyShop = clone_User_Map_int32_Bool(in.BuyShop)
	out.EverReset = in.EverReset
	out.Formation = clone_User_common_Formation(in.Formation)
	out.GotTopReward = in.GotTopReward
	out.GotWelfareReward = in.GotWelfareReward
	out.Grids = clone_User_Map_int32_common1_ExpeditionGrid(in.Grids)
	out.HasPass = in.HasPass
	out.HistoryMaxStar = in.HistoryMaxStar
	out.HistoryStarGrids = append(in.HistoryStarGrids[:0:0], in.HistoryStarGrids...)
	out.MyBattleUnits = clone_User_Map_int32_common1_ExpeditionBattleUnit(in.MyBattleUnits)
	out.OwnSkills = clone_User_Array_common_Skill(in.OwnSkills)
	out.RoundStar = append(in.RoundStar[:0:0], in.RoundStar...)
	out.StarGift = append(in.StarGift[:0:0], in.StarGift...)
	out.UsedAssistId = append(in.UsedAssistId[:0:0], in.UsedAssistId...)
	return out
}

func clone_User_common1_ExpeditionGrid(in *common1.ExpeditionGrid) *common1.ExpeditionGrid {
	if in == nil {
		return nil
	}
	out := &common1.ExpeditionGrid{}
	out.BuffIds = append(in.BuffIds[:0:0], in.BuffIds...)
	out.EmeryBattleUnits = clone_User_Map_int32_common1_ExpeditionBattleUnit(in.EmeryBattleUnits)
	out.Event = clone_User_common1_CellEvent(in.Event)
	out.Status = in.Status
	return out
}

func clone_User_common1_ExploreItem(in *common1.ExploreItem) *common1.ExploreItem {
	if in == nil {
		return nil
	}
	out := &common1.ExploreItem{}
	out.ItemIndex = in.ItemIndex
	out.RewardIndex = in.RewardIndex
	out.SelectId = in.SelectId
	out.Special = in.Special
	return out
}

func clone_User_common_FirstInfo(in *common.FirstInfo) *common.FirstInfo {
	if in == nil {
		return nil
	}
	out := &common.FirstInfo{}
	out.FirstPackGiftTime = cloneInt64Pointer(in.FirstPackGiftTime)
	out.FirstThreeStarCommanderId = cloneInt32Pointer(in.FirstThreeStarCommanderId)
	out.OpenSecondStrmansion = cloneBoolPointer(in.OpenSecondStrmansion)
	return out
}

func clone_User_common_Formation(in *common.Formation) *common.Formation {
	if in == nil {
		return nil
	}
	out := &common.Formation{}
	out.CounsellorId = cloneInt32Pointer(in.CounsellorId)
	out.Grid = clone_User_Array_common_Grid(in.Grid)
	out.IllustratedGroup = cloneUint32Pointer(in.IllustratedGroup)
	out.Team = cloneInt32Pointer(in.Team)
	out.TreasureGroup = cloneUint32Pointer(in.TreasureGroup)
	out.Type = cloneInt32Pointer(in.Type)
	return out
}

func clone_User_common1_FormationGroup(in *common1.FormationGroup) *common1.FormationGroup {
	if in == nil {
		return nil
	}
	out := &common1.FormationGroup{}
	out.Items = clone_User_Array_common_FormationGroupItem(in.Items)
	return out
}

func clone_User_common_FormationGroupItem(in *common.FormationGroupItem) *common.FormationGroupItem {
	if in == nil {
		return nil
	}
	out := &common.FormationGroupItem{}
	out.Formation = clone_User_common_Formation(in.Formation)
	out.Id = cloneInt32Pointer(in.Id)
	out.Name = cloneStringPointer(in.Name)
	return out
}

func clone_User_common_Fortress(in *common.Fortress) *common.Fortress {
	if in == nil {
		return nil
	}
	out := &common.Fortress{}
	out.Action = cloneInt32Pointer(in.Action)
	out.DescID = cloneInt32Pointer(in.DescID)
	out.Dir = cloneInt32Pointer(in.Dir)
	out.Id = cloneInt32Pointer(in.Id)
	out.NationID = cloneInt32Pointer(in.NationID)
	out.Pos = clone_User_common_Position(in.Pos)
	out.ResId = cloneInt32Pointer(in.ResId)
	out.Show = cloneBoolPointer(in.Show)
	out.Status = cloneInt32Pointer(in.Status)
	return out
}

func clone_User_common1_Foundation(in *common1.Foundation) *common1.Foundation {
	if in == nil {
		return nil
	}
	out := &common1.Foundation{}
	out.ActivityID = in.ActivityID
	out.Items = clone_User_Array_common1_FoundationItem(in.Items)
	out.OpenId = in.OpenId
	out.RechargeID = in.RechargeID
	out.Recharged = in.Recharged
	out.TotalRewardID = append(in.TotalRewardID[:0:0], in.TotalRewardID...)
	return out
}

func clone_User_common1_FoundationItem(in *common1.FoundationItem) *common1.FoundationItem {
	if in == nil {
		return nil
	}
	out := &common1.FoundationItem{}
	out.FreeReward = in.FreeReward
	out.Id = in.Id
	out.PayReward = in.PayReward
	return out
}

func clone_User_common1_Friends(in *common1.Friends) *common1.Friends {
	if in == nil {
		return nil
	}
	out := &common1.Friends{}
	out.BlackList = append(in.BlackList[:0:0], in.BlackList...)
	out.CrossBlackList = append(in.CrossBlackList[:0:0], in.CrossBlackList...)
	out.FriendList = append(in.FriendList[:0:0], in.FriendList...)
	out.RequestList = append(in.RequestList[:0:0], in.RequestList...)
	return out
}

func clone_User_common1_FundCommon(in *common1.FundCommon) *common1.FundCommon {
	if in == nil {
		return nil
	}
	out := &common1.FundCommon{}
	out.ActivityId = in.ActivityId
	out.GotFreeGifts = append(in.GotFreeGifts[:0:0], in.GotFreeGifts...)
	out.GotPayGifts = append(in.GotPayGifts[:0:0], in.GotPayGifts...)
	out.IsRecharged = in.IsRecharged
	return out
}

func clone_User_common1_GiftRainAct(in *common1.GiftRainAct) *common1.GiftRainAct {
	if in == nil {
		return nil
	}
	out := &common1.GiftRainAct{}
	out.ActId = in.ActId
	out.DoubleGiftTimes = in.DoubleGiftTimes
	out.HasServiceReward = in.HasServiceReward
	out.OpenId = in.OpenId
	out.TakeRewardTime = append(in.TakeRewardTime[:0:0], in.TakeRewardTime...)
	return out
}

func clone_User_common1_GoldenDragon(in *common1.GoldenDragon) *common1.GoldenDragon {
	if in == nil {
		return nil
	}
	out := &common1.GoldenDragon{}
	out.Common = clone_User_common1_ActivityCommon(in.Common)
	out.DailyScore = in.DailyScore
	out.GoldCloud = append(in.GoldCloud[:0:0], in.GoldCloud...)
	out.OldScore = in.OldScore
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	return out
}

func clone_User_common_Grid(in *common.Grid) *common.Grid {
	if in == nil {
		return nil
	}
	out := &common.Grid{}
	out.AssistPlayerId = cloneUint64Pointer(in.AssistPlayerId)
	out.BeastId = cloneInt32Pointer(in.BeastId)
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.Id = cloneInt32Pointer(in.Id)
	out.SoldierId = cloneInt32Pointer(in.SoldierId)
	out.SoldierNum = cloneInt32Pointer(in.SoldierNum)
	return out
}

func clone_User_common1_GuildGoods(in *common1.GuildGoods) *common1.GuildGoods {
	if in == nil {
		return nil
	}
	out := &common1.GuildGoods{}
	out.HasSold = in.HasSold
	out.Owner = in.Owner
	out.PriceShift = in.PriceShift
	out.Tid = in.Tid
	out.Time = in.Time
	out.Uid = in.Uid
	return out
}

func clone_User_common1_GveChange(in *common1.GveChange) *common1.GveChange {
	if in == nil {
		return nil
	}
	out := &common1.GveChange{}
	out.Cues = clone_User_Map_int32_Bool(in.Cues)
	out.Grids = clone_User_Map_int32_common1_GveGrid(in.Grids)
	return out
}

func clone_User_common_GveDamageRecord(in *common.GveDamageRecord) *common.GveDamageRecord {
	if in == nil {
		return nil
	}
	out := &common.GveDamageRecord{}
	out.DidHp = cloneUint64Pointer(in.DidHp)
	out.DidRealDamage = cloneUint64Pointer(in.DidRealDamage)
	return out
}

func clone_User_common1_GveGrid(in *common1.GveGrid) *common1.GveGrid {
	if in == nil {
		return nil
	}
	out := &common1.GveGrid{}
	out.DidHp = clone_User_Map_uint64_common_GveDamageRecord(in.DidHp)
	out.Hp = in.Hp
	out.LastInteractiveTime = clone_User_Map_uint64_Int64(in.LastInteractiveTime)
	out.MapGrid = clone_User_common1_GveMapGrid(in.MapGrid)
	out.Occupied = in.Occupied
	out.OccupiedTime = in.OccupiedTime
	out.RiceGetTime = clone_User_Map_uint64_Int64(in.RiceGetTime)
	out.TaxGetTime = clone_User_Map_uint64_Int64(in.TaxGetTime)
	return out
}

func clone_User_common1_GveMapGrid(in *common1.GveMapGrid) *common1.GveMapGrid {
	if in == nil {
		return nil
	}
	out := &common1.GveMapGrid{}
	out.Coordinate = clone_User_common_Coordinate(in.Coordinate)
	out.IsBirth = in.IsBirth
	out.Shape = clone_User_Array_common_Coordinate(in.Shape)
	out.TypeId = in.TypeId
	out.Uid = in.Uid
	return out
}

func clone_User_common_GvgBattleLog(in *common.GvgBattleLog) *common.GvgBattleLog {
	if in == nil {
		return nil
	}
	out := &common.GvgBattleLog{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.MineId = cloneUint64Pointer(in.MineId)
	out.Players = clone_User_Array_common_GvgBattleLogPlayer(in.Players)
	out.WinUid = cloneUint64Pointer(in.WinUid)
	return out
}

func clone_User_common_GvgBattleLogPlayer(in *common.GvgBattleLogPlayer) *common.GvgBattleLogPlayer {
	if in == nil {
		return nil
	}
	out := &common.GvgBattleLogPlayer{}
	out.ChangeRank = cloneInt32Pointer(in.ChangeRank)
	out.Ft = cloneUint32Pointer(in.Ft)
	out.InSafe = cloneBoolPointer(in.InSafe)
	out.Name = cloneStringPointer(in.Name)
	out.Uid = cloneUint64Pointer(in.Uid)
	return out
}

func clone_User_common1_GvgBeginBattleData(in *common1.GvgBeginBattleData) *common1.GvgBeginBattleData {
	if in == nil {
		return nil
	}
	out := &common1.GvgBeginBattleData{}
	out.BeforeMineId = in.BeforeMineId
	out.Ft = in.Ft
	out.MineId = in.MineId
	out.TargetFt = in.TargetFt
	out.TargetUid = in.TargetUid
	out.Uid = in.Uid
	return out
}

func clone_User_common1_HandBook(in *common1.HandBook) *common1.HandBook {
	if in == nil {
		return nil
	}
	out := &common1.HandBook{}
	out.FinishedPageIds = append(in.FinishedPageIds[:0:0], in.FinishedPageIds...)
	out.Quests = clone_User_Map_int32_common_HandBookQuest(in.Quests)
	return out
}

func clone_User_common_HandBookQuest(in *common.HandBookQuest) *common.HandBookQuest {
	if in == nil {
		return nil
	}
	out := &common.HandBookQuest{}
	out.Finish = cloneBoolPointer(in.Finish)
	out.Id = cloneInt32Pointer(in.Id)
	out.Progress = cloneUint32Pointer(in.Progress)
	return out
}

func clone_User_common_HappyFlop(in *common.HappyFlop) *common.HappyFlop {
	if in == nil {
		return nil
	}
	out := &common.HappyFlop{}
	out.Cards = clone_User_Array_common_HappyFlopCard(in.Cards)
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.Times = cloneInt32Pointer(in.Times)
	out.TodayTimes = cloneInt32Pointer(in.TodayTimes)
	return out
}

func clone_User_common_HappyFlopCard(in *common.HappyFlopCard) *common.HappyFlopCard {
	if in == nil {
		return nil
	}
	out := &common.HappyFlopCard{}
	out.ItemId = cloneInt32Pointer(in.ItemId)
	out.Status = cloneEnumUserHappyFlopStatus(in.Status)
	return out
}

func clone_User_common1_History(in *common1.History) *common1.History {
	if in == nil {
		return nil
	}
	out := &common1.History{}
	out.CurChapterId = in.CurChapterId
	out.HistoryChapters = clone_User_Array_common1_HistoryChapter(in.HistoryChapters)
	return out
}

func clone_User_common1_HistoryChapter(in *common1.HistoryChapter) *common1.HistoryChapter {
	if in == nil {
		return nil
	}
	out := &common1.HistoryChapter{}
	out.ChapterID = in.ChapterID
	out.FinishMissions = append(in.FinishMissions[:0:0], in.FinishMissions...)
	out.TakenAwardIds = append(in.TakenAwardIds[:0:0], in.TakenAwardIds...)
	return out
}

func clone_User_common_Item(in *common.Item) *common.Item {
	if in == nil {
		return nil
	}
	out := &common.Item{}
	out.Count = cloneUint32Pointer(in.Count)
	out.Extra = clone_User_common_ItemExtra(in.Extra)
	out.Id = cloneInt32Pointer(in.Id)
	out.Show = cloneEnumUserItemShow(in.Show)
	out.ValidTime = cloneInt64Pointer(in.ValidTime)
	return out
}

func clone_User_common_ItemExtra(in *common.ItemExtra) *common.ItemExtra {
	if in == nil {
		return nil
	}
	out := &common.ItemExtra{}
	out.CritCount = cloneInt32Pointer(in.CritCount)
	out.ItemGroup = cloneInt32Pointer(in.ItemGroup)
	return out
}

func clone_User_common1_ItemGift(in *common1.ItemGift) *common1.ItemGift {
	if in == nil {
		return nil
	}
	out := &common1.ItemGift{}
	out.Items = clone_User_Array_common1_ItemGiftScore(in.Items)
	return out
}

func clone_User_common1_ItemGiftScore(in *common1.ItemGiftScore) *common1.ItemGiftScore {
	if in == nil {
		return nil
	}
	out := &common1.ItemGiftScore{}
	out.ItemID = in.ItemID
	out.Scores = clone_User_Array_common1_ItemGiftScoreItem(in.Scores)
	return out
}

func clone_User_common1_ItemGiftScoreItem(in *common1.ItemGiftScoreItem) *common1.ItemGiftScoreItem {
	if in == nil {
		return nil
	}
	out := &common1.ItemGiftScoreItem{}
	out.Id = in.Id
	out.Score = in.Score
	return out
}

func clone_User_common_ItemMarket(in *common.ItemMarket) *common.ItemMarket {
	if in == nil {
		return nil
	}
	out := &common.ItemMarket{}
	out.AutoRefreshTime = cloneInt64Pointer(in.AutoRefreshTime)
	out.FreeRefreshCount = cloneInt32Pointer(in.FreeRefreshCount)
	out.Grids = clone_User_Array_common_MarketGrid(in.Grids)
	out.LastCycleRefreshTime = cloneInt64Pointer(in.LastCycleRefreshTime)
	out.ManualRefreshCount = cloneInt32Pointer(in.ManualRefreshCount)
	out.MarketId = cloneInt32Pointer(in.MarketId)
	out.RefreshLevel = cloneUint32Pointer(in.RefreshLevel)
	return out
}

func clone_User_common1_Ladder(in *common1.Ladder) *common1.Ladder {
	if in == nil {
		return nil
	}
	out := &common1.Ladder{}
	out.BanCommander = append(in.BanCommander[:0:0], in.BanCommander...)
	out.BattleLogs = clone_User_Array_common_LadderBattleLog(in.BattleLogs)
	out.BattleTimes = in.BattleTimes
	out.CurWinStreak = in.CurWinStreak
	out.FirstIntoSeasonId = in.FirstIntoSeasonId
	out.HisInfo = clone_User_Array_common_LadderHistoryInfo(in.HisInfo)
	out.LastCancelMatchTime = in.LastCancelMatchTime
	out.LastCloseSeasonId = in.LastCloseSeasonId
	out.LastMatchTime = in.LastMatchTime
	out.LastMatchedTime = in.LastMatchedTime
	out.LastTakeFirstWinReward = in.LastTakeFirstWinReward
	out.LastWinTimeStamp = in.LastWinTimeStamp
	out.LoseStreakTimes = in.LoseStreakTimes
	out.MaxScore = in.MaxScore
	out.MaxWinStreak = in.MaxWinStreak
	out.Score = in.Score
	out.SeasonFirstTime = in.SeasonFirstTime
	out.SeasonId = in.SeasonId
	out.SeasonLadderIds = append(in.SeasonLadderIds[:0:0], in.SeasonLadderIds...)
	out.SeasonWinTimes = in.SeasonWinTimes
	out.SeasonWinTimesIds = append(in.SeasonWinTimesIds[:0:0], in.SeasonWinTimesIds...)
	out.SecondPickTimes = in.SecondPickTimes
	out.TakeRewardSeasonId = in.TakeRewardSeasonId
	return out
}

func clone_User_common_LadderBattleLog(in *common.LadderBattleLog) *common.LadderBattleLog {
	if in == nil {
		return nil
	}
	out := &common.LadderBattleLog{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.PlayerIds = append(in.PlayerIds[:0:0], in.PlayerIds...)
	out.RobotId = cloneInt32Pointer(in.RobotId)
	out.Score = cloneUint32Pointer(in.Score)
	out.WinId = cloneUint64Pointer(in.WinId)
	return out
}

func clone_User_common_LadderHistoryInfo(in *common.LadderHistoryInfo) *common.LadderHistoryInfo {
	if in == nil {
		return nil
	}
	out := &common.LadderHistoryInfo{}
	out.BattleTimes = cloneUint32Pointer(in.BattleTimes)
	out.LadderId = cloneUint32Pointer(in.LadderId)
	out.MaxLadderId = cloneUint32Pointer(in.MaxLadderId)
	out.MaxLadderScore = cloneUint32Pointer(in.MaxLadderScore)
	out.MaxWinStreak = cloneUint32Pointer(in.MaxWinStreak)
	out.RankId = cloneUint32Pointer(in.RankId)
	out.SeasonId = cloneInt32Pointer(in.SeasonId)
	out.WinTimes = cloneUint32Pointer(in.WinTimes)
	return out
}

func clone_User_common1_LevelGift(in *common1.LevelGift) *common1.LevelGift {
	if in == nil {
		return nil
	}
	out := &common1.LevelGift{}
	out.TakeRewards = append(in.TakeRewards[:0:0], in.TakeRewards...)
	return out
}

func clone_User_common_LmTopThreePlayer(in *common.LmTopThreePlayer) *common.LmTopThreePlayer {
	if in == nil {
		return nil
	}
	out := &common.LmTopThreePlayer{}
	out.PlayerId = cloneUint64Pointer(in.PlayerId)
	out.Rank = cloneInt32Pointer(in.Rank)
	return out
}

func clone_User_common1_LuckDrawAct(in *common1.LuckDrawAct) *common1.LuckDrawAct {
	if in == nil {
		return nil
	}
	out := &common1.LuckDrawAct{}
	out.ActId = in.ActId
	out.AwardTimes = clone_User_Map_int32_Uint32(in.AwardTimes)
	out.BuyCoin = clone_User_Array_common1_BuyDrawInfo(in.BuyCoin)
	out.BuyItem = clone_User_Array_common1_BuyDrawInfo(in.BuyItem)
	out.GotGifts = append(in.GotGifts[:0:0], in.GotGifts...)
	out.HasLastTime = in.HasLastTime
	out.HasServiceReward = in.HasServiceReward
	out.LuckInfo = clone_User_common1_LuckDrawInfo(in.LuckInfo)
	out.OpenId = in.OpenId
	out.PlayTimes = in.PlayTimes
	out.Score = in.Score
	return out
}

func clone_User_common1_LuckDrawInfo(in *common1.LuckDrawInfo) *common1.LuckDrawInfo {
	if in == nil {
		return nil
	}
	out := &common1.LuckDrawInfo{}
	out.Level = in.Level
	out.Score = in.Score
	return out
}

func clone_User_common_Mail(in *common.Mail) *common.Mail {
	if in == nil {
		return nil
	}
	out := &common.Mail{}
	out.Atachments = clone_User_Array_common_Item(in.Atachments)
	out.Content = cloneStringPointer(in.Content)
	out.GuildWord = cloneStringPointer(in.GuildWord)
	out.HasGet = cloneBoolPointer(in.HasGet)
	out.HasRead = cloneBoolPointer(in.HasRead)
	out.Id = cloneUint64Pointer(in.Id)
	out.ReceiveTime = cloneInt64Pointer(in.ReceiveTime)
	out.StringParams = append(in.StringParams[:0:0], in.StringParams...)
	out.TID = cloneInt32Pointer(in.TID)
	out.Title = cloneStringPointer(in.Title)
	return out
}

func clone_User_common1_Market(in *common1.Market) *common1.Market {
	if in == nil {
		return nil
	}
	out := &common1.Market{}
	out.ItemMarkets = clone_User_Array_common_ItemMarket(in.ItemMarkets)
	out.ShopDailyRecord = clone_User_common_ShopDailyRecord(in.ShopDailyRecord)
	return out
}

func clone_User_common_MarketGrid(in *common.MarketGrid) *common.MarketGrid {
	if in == nil {
		return nil
	}
	out := &common.MarketGrid{}
	out.BuyTimes = cloneInt32Pointer(in.BuyTimes)
	out.ItemId = cloneInt32Pointer(in.ItemId)
	out.Lock = cloneBoolPointer(in.Lock)
	out.MarketItemID = cloneInt32Pointer(in.MarketItemID)
	return out
}

func clone_User_common1_Mission(in *common1.Mission) *common1.Mission {
	if in == nil {
		return nil
	}
	out := &common1.Mission{}
	out.BranchMission = clone_User_Array_common_MissionUnit(in.BranchMission)
	out.District = clone_User_Array_common_District(in.District)
	out.Exploratory = in.Exploratory
	out.ExploratoryRewardId = in.ExploratoryRewardId
	out.FinishBit = clone_User_Map_int32_Bool(in.FinishBit)
	out.Fortress = clone_User_Array_common_Fortress(in.Fortress)
	out.LastMainMission = in.LastMainMission
	out.Level = in.Level
	out.MainMission = clone_User_common_MissionUnit(in.MainMission)
	out.Maps = clone_User_Array_common_WorldMap(in.Maps)
	out.MaxPower = in.MaxPower
	out.NationList = append(in.NationList[:0:0], in.NationList...)
	out.TargetChapter = clone_User_Array_common_MissionTargetChapter(in.TargetChapter)
	out.TimeLimitMission = clone_User_common1_MissionTimeLimit(in.TimeLimitMission)
	return out
}

func clone_User_common_MissionTargetChapter(in *common.MissionTargetChapter) *common.MissionTargetChapter {
	if in == nil {
		return nil
	}
	out := &common.MissionTargetChapter{}
	out.Reward = cloneBoolPointer(in.Reward)
	out.TargetId = cloneInt32Pointer(in.TargetId)
	return out
}

func clone_User_common1_MissionTimeLimit(in *common1.MissionTimeLimit) *common1.MissionTimeLimit {
	if in == nil {
		return nil
	}
	out := &common1.MissionTimeLimit{}
	out.BoxReward = in.BoxReward
	out.FinishMissions = append(in.FinishMissions[:0:0], in.FinishMissions...)
	out.Mission = clone_User_Array_common_TimeMission(in.Mission)
	out.RefreshTime = in.RefreshTime
	out.Score = in.Score
	out.UsedTargetId = append(in.UsedTargetId[:0:0], in.UsedTargetId...)
	return out
}

func clone_User_common_MissionUnit(in *common.MissionUnit) *common.MissionUnit {
	if in == nil {
		return nil
	}
	out := &common.MissionUnit{}
	out.Id = cloneInt32Pointer(in.Id)
	out.InteractFortress = append(in.InteractFortress[:0:0], in.InteractFortress...)
	out.IsDoFightEventTrigger = cloneBoolPointer(in.IsDoFightEventTrigger)
	out.SelectedFightID = cloneInt32Pointer(in.SelectedFightID)
	out.Star = cloneUint32Pointer(in.Star)
	out.StarRewards = append(in.StarRewards[:0:0], in.StarRewards...)
	out.Status = cloneEnumUserMissionStatus(in.Status)
	return out
}

func clone_User_common1_MonthCard(in *common1.MonthCard) *common1.MonthCard {
	if in == nil {
		return nil
	}
	out := &common1.MonthCard{}
	out.DueTime = in.DueTime
	out.Id = in.Id
	out.LastActiveTime = in.LastActiveTime
	out.LastTakePrizeTime = in.LastTakePrizeTime
	return out
}

func clone_User_common1_MonthCards(in *common1.MonthCards) *common1.MonthCards {
	if in == nil {
		return nil
	}
	out := &common1.MonthCards{}
	out.CardAct = clone_User_Array_common1_MonthCardsAct(in.CardAct)
	out.Cards = clone_User_Array_common1_MonthCard(in.Cards)
	out.LastTakeBoxTime = in.LastTakeBoxTime
	return out
}

func clone_User_common1_MonthCardsAct(in *common1.MonthCardsAct) *common1.MonthCardsAct {
	if in == nil {
		return nil
	}
	out := &common1.MonthCardsAct{}
	out.BuyTimes = in.BuyTimes
	out.CommonBuyTimes = in.CommonBuyTimes
	out.LastBuyTime = in.LastBuyTime
	out.LastCommonBuyTime = in.LastCommonBuyTime
	out.LastRenewTime = in.LastRenewTime
	out.MonthCardId = in.MonthCardId
	out.ReNewTimes = in.ReNewTimes
	return out
}

func clone_User_common1_MountGroup(in *common1.MountGroup) *common1.MountGroup {
	if in == nil {
		return nil
	}
	out := &common1.MountGroup{}
	out.MountInfo = clone_User_Map_int32_common_MountItem(in.MountInfo)
	return out
}

func clone_User_common_MountItem(in *common.MountItem) *common.MountItem {
	if in == nil {
		return nil
	}
	out := &common.MountItem{}
	out.BasePower = cloneUint32Pointer(in.BasePower)
	out.CommanderId = cloneInt32Pointer(in.CommanderId)
	out.Exp = cloneUint32Pointer(in.Exp)
	out.Level = cloneUint32Pointer(in.Level)
	out.LittleStar = cloneUint32Pointer(in.LittleStar)
	out.MountId = cloneInt32Pointer(in.MountId)
	out.Power = cloneUint32Pointer(in.Power)
	out.Refine = clone_User_common_MountRefine(in.Refine)
	out.Star = cloneUint32Pointer(in.Star)
	return out
}

func clone_User_common1_MountRefine(in *common1.MountRefine) *common1.MountRefine {
	if in == nil {
		return nil
	}
	out := &common1.MountRefine{}
	out.Times = clone_User_Map_int32_Int32(in.Times)
	return out
}

func clone_User_common_MountRefine(in *common.MountRefine) *common.MountRefine {
	if in == nil {
		return nil
	}
	out := &common.MountRefine{}
	out.LackWant = clone_User_Array_common_ResignAttr(in.LackWant)
	out.Own = clone_User_Array_common_ResignAttr(in.Own)
	return out
}

func clone_User_common1_MsgCache(in *common1.MsgCache) *common1.MsgCache {
	if in == nil {
		return nil
	}
	out := &common1.MsgCache{}
	out.CmdID = in.CmdID
	out.MsgData = in.MsgData
	out.Sn = in.Sn
	return out
}

func clone_User_common1_NavalBattle(in *common1.NavalBattle) *common1.NavalBattle {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattle{}
	out.Ai = clone_User_common1_NavalBattleAI(in.Ai)
	out.Assist = clone_User_common1_NavalBattleAssist(in.Assist)
	out.BeginTime = in.BeginTime
	out.CurrentRoundPlayer = in.CurrentRoundPlayer
	out.EnemyStrength = in.EnemyStrength
	out.Enemys = clone_User_Map_int32_common1_NavalBattleEnemy(in.Enemys)
	out.Events = clone_User_Map_int32_common_NavalBattleEvent(in.Events)
	out.FoundPlayerFts = clone_User_Map_string_Int32(in.FoundPlayerFts)
	out.FoundPlayerIds = clone_User_Map_uint64_Int32(in.FoundPlayerIds)
	out.Hps = clone_User_Map_int32_common_BattleUnitHp(in.Hps)
	out.IsPass = in.IsPass
	out.MaxWinCount = in.MaxWinCount
	out.NegativeEvents = clone_User_Array_common_NavalBattleEvent(in.NegativeEvents)
	out.NpcBuffs = clone_User_Array_common_Skill(in.NpcBuffs)
	out.OldEnemys = clone_User_Map_int32_common1_NavalBattleEnemy(in.OldEnemys)
	out.OldFormations = clone_User_Array_common_Formation(in.OldFormations)
	out.PassPath = clone_User_Map_int32_common1_NavalBattlePath(in.PassPath)
	out.PlayerBuffs = clone_User_Array_common_Skill(in.PlayerBuffs)
	out.PreResetTime = in.PreResetTime
	out.ResetCount = in.ResetCount
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.RoundCount = in.RoundCount
	out.SelfTeams = clone_User_Array_common_NavalBattleTeam(in.SelfTeams)
	out.Stages = clone_User_Map_int32_common_NavalStage(in.Stages)
	out.Status = in.Status
	out.StopPath = clone_User_Map_int32_common1_NavalBattlePath(in.StopPath)
	out.WinCount = in.WinCount
	return out
}

func clone_User_common1_NavalBattleAI(in *common1.NavalBattleAI) *common1.NavalBattleAI {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattleAI{}
	out.AttackNum = in.AttackNum
	out.EnemyIds = append(in.EnemyIds[:0:0], in.EnemyIds...)
	out.EventIds = append(in.EventIds[:0:0], in.EventIds...)
	return out
}

func clone_User_common1_NavalBattleAssist(in *common1.NavalBattleAssist) *common1.NavalBattleAssist {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattleAssist{}
	out.Commanders = clone_User_Array_common_AssistCommander(in.Commanders)
	out.Pools = clone_User_Array_common1_NavalBattleAssistPool(in.Pools)
	return out
}

func clone_User_common1_NavalBattleAssistPool(in *common1.NavalBattleAssistPool) *common1.NavalBattleAssistPool {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattleAssistPool{}
	out.FormationId = in.FormationId
	out.PlayerId = in.PlayerId
	out.Power = in.Power
	out.ServerId = in.ServerId
	return out
}

func clone_User_common1_NavalBattleEnemy(in *common1.NavalBattleEnemy) *common1.NavalBattleEnemy {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattleEnemy{}
	out.BattleUnitHps = clone_User_Map_int32_common_BattleUnitHp(in.BattleUnitHps)
	out.CreateStageId = in.CreateStageId
	out.FormationId = in.FormationId
	out.Id = in.Id
	out.IsDie = in.IsDie
	out.PlayerId = in.PlayerId
	out.Power = in.Power
	out.ServerId = in.ServerId
	out.Skin = in.Skin
	out.StageId = in.StageId
	return out
}

func clone_User_common_NavalBattleEvent(in *common.NavalBattleEvent) *common.NavalBattleEvent {
	if in == nil {
		return nil
	}
	out := &common.NavalBattleEvent{}
	out.Assists = clone_User_Array_common_AssistCommander(in.Assists)
	out.BuffIds = append(in.BuffIds[:0:0], in.BuffIds...)
	out.EventId = cloneInt32Pointer(in.EventId)
	out.StageId = cloneInt32Pointer(in.StageId)
	return out
}

func clone_User_common1_NavalBattlePath(in *common1.NavalBattlePath) *common1.NavalBattlePath {
	if in == nil {
		return nil
	}
	out := &common1.NavalBattlePath{}
	out.AroundIds = clone_User_Map_int32_Int32(in.AroundIds)
	out.StageId = in.StageId
	return out
}

func clone_User_common_NavalBattleShop(in *common.NavalBattleShop) *common.NavalBattleShop {
	if in == nil {
		return nil
	}
	out := &common.NavalBattleShop{}
	out.BuyIds = append(in.BuyIds[:0:0], in.BuyIds...)
	return out
}

func clone_User_common_NavalBattleTeam(in *common.NavalBattleTeam) *common.NavalBattleTeam {
	if in == nil {
		return nil
	}
	out := &common.NavalBattleTeam{}
	out.FormationId = cloneInt32Pointer(in.FormationId)
	out.IsDie = cloneBoolPointer(in.IsDie)
	out.StageId = cloneInt32Pointer(in.StageId)
	out.Strength = cloneInt32Pointer(in.Strength)
	out.TrapIds = append(in.TrapIds[:0:0], in.TrapIds...)
	return out
}

func clone_User_common_NavalBattleUniteFt(in *common.NavalBattleUniteFt) *common.NavalBattleUniteFt {
	if in == nil {
		return nil
	}
	out := &common.NavalBattleUniteFt{}
	out.Assist = clone_User_Array_common_AssistCommander(in.Assist)
	out.EnemyHps = clone_User_Array_common_BattleUnitHp(in.EnemyHps)
	out.EnemyId = cloneInt32Pointer(in.EnemyId)
	out.Ft = cloneInt32Pointer(in.Ft)
	out.PlayerHps = clone_User_Array_common_BattleUnitHp(in.PlayerHps)
	out.State = cloneEnumUserNavalBattleUniteFt_State(in.State)
	out.Team = clone_User_common_NavalBattleTeam(in.Team)
	return out
}

func clone_User_common_NavalStage(in *common.NavalStage) *common.NavalStage {
	if in == nil {
		return nil
	}
	out := &common.NavalStage{}
	out.BattleCount = cloneInt32Pointer(in.BattleCount)
	out.Shop = clone_User_common_NavalBattleShop(in.Shop)
	out.StageId = cloneInt32Pointer(in.StageId)
	out.State = cloneEnumUserNavalStage_NavalStageState(in.State)
	out.UniteFts = clone_User_Array_common_NavalBattleUniteFt(in.UniteFts)
	return out
}

func clone_User_common1_NumberTreasureChest(in *common1.NumberTreasureChest) *common1.NumberTreasureChest {
	if in == nil {
		return nil
	}
	out := &common1.NumberTreasureChest{}
	out.ActivationTimes = in.ActivationTimes
	out.ErrorChest = append(in.ErrorChest[:0:0], in.ErrorChest...)
	out.LuckyNumber = append(in.LuckyNumber[:0:0], in.LuckyNumber...)
	out.NumberCount = append(in.NumberCount[:0:0], in.NumberCount...)
	out.Stage = in.Stage
	out.StageProgress = in.StageProgress
	return out
}

func clone_User_common1_OBSOLETE_Tower(in *common1.OBSOLETE_Tower) *common1.OBSOLETE_Tower {
	if in == nil {
		return nil
	}
	out := &common1.OBSOLETE_Tower{}
	out.BuyFastHangUpTimes = in.BuyFastHangUpTimes
	out.CurLevel = in.CurLevel
	out.CurLevelKeepHangUpTime = in.CurLevelKeepHangUpTime
	out.FreeFastHangUpTimes = in.FreeFastHangUpTimes
	out.HandUpData = clone_User_Array_common1_TowerHangUp(in.HandUpData)
	out.LastPassTime = in.LastPassTime
	out.StartHangUpTime = in.StartHangUpTime
	out.TakenTotalPassRewards = append(in.TakenTotalPassRewards[:0:0], in.TakenTotalPassRewards...)
	return out
}

func clone_User_common_OfflineReward(in *common.OfflineReward) *common.OfflineReward {
	if in == nil {
		return nil
	}
	out := &common.OfflineReward{}
	out.MailId = cloneInt32Pointer(in.MailId)
	out.Params = append(in.Params[:0:0], in.Params...)
	out.Rewards = clone_User_Array_common_Item(in.Rewards)
	out.Time = cloneInt64Pointer(in.Time)
	return out
}

func clone_User_common_OnlyEquip(in *common.OnlyEquip) *common.OnlyEquip {
	if in == nil {
		return nil
	}
	out := &common.OnlyEquip{}
	out.BreakLevel = cloneUint32Pointer(in.BreakLevel)
	out.CurExp = cloneUint32Pointer(in.CurExp)
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	out.Power = cloneUint32Pointer(in.Power)
	out.Star = cloneUint32Pointer(in.Star)
	out.Uuid = cloneUint32Pointer(in.Uuid)
	return out
}

func clone_User_common1_OnlyEquipGroup(in *common1.OnlyEquipGroup) *common1.OnlyEquipGroup {
	if in == nil {
		return nil
	}
	out := &common1.OnlyEquipGroup{}
	out.OwnOnlyEquips = clone_User_Map_uint32_common_OnlyEquip(in.OwnOnlyEquips)
	out.UuId = in.UuId
	return out
}

func clone_User_common1_OrderData(in *common1.OrderData) *common1.OrderData {
	if in == nil {
		return nil
	}
	out := &common1.OrderData{}
	out.Amount = in.Amount
	out.RechargeID = in.RechargeID
	out.Time = in.Time
	return out
}

func clone_User_common1_PayerOverlordStage(in *common1.PayerOverlordStage) *common1.PayerOverlordStage {
	if in == nil {
		return nil
	}
	out := &common1.PayerOverlordStage{}
	out.Formation = clone_User_common_Formation(in.Formation)
	out.Magics = clone_User_Map_int32_Int32(in.Magics)
	out.StageId = in.StageId
	return out
}

func clone_User_common_PeakBattleLog(in *common.PeakBattleLog) *common.PeakBattleLog {
	if in == nil {
		return nil
	}
	out := &common.PeakBattleLog{}
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.GiveIn = cloneBoolPointer(in.GiveIn)
	out.Players = clone_User_Array_common_PeakBattleLogPlayerInfo(in.Players)
	out.WinUid = cloneUint64Pointer(in.WinUid)
	return out
}

func clone_User_common_PeakBattleLogPlayerInfo(in *common.PeakBattleLogPlayerInfo) *common.PeakBattleLogPlayerInfo {
	if in == nil {
		return nil
	}
	out := &common.PeakBattleLogPlayerInfo{}
	out.AfterScore = cloneUint32Pointer(in.AfterScore)
	out.BeforeScore = cloneUint32Pointer(in.BeforeScore)
	out.Icon = clone_User_common_PlayerHeadPortrait(in.Icon)
	out.Power = cloneUint32Pointer(in.Power)
	out.Uid = cloneUint64Pointer(in.Uid)
	return out
}

func clone_User_common1_PhysicalLuckyGiftRecord(in *common1.PhysicalLuckyGiftRecord) *common1.PhysicalLuckyGiftRecord {
	if in == nil {
		return nil
	}
	out := &common1.PhysicalLuckyGiftRecord{}
	out.ItemIds = append(in.ItemIds[:0:0], in.ItemIds...)
	return out
}

func clone_User_common1_PlaceFinish(in *common1.PlaceFinish) *common1.PlaceFinish {
	if in == nil {
		return nil
	}
	out := &common1.PlaceFinish{}
	out.Task1EverFinished = in.Task1EverFinished
	out.TaskList = clone_User_Array_common1_PlaceFinishTask(in.TaskList)
	return out
}

func clone_User_common1_PlaceFinishTask(in *common1.PlaceFinishTask) *common1.PlaceFinishTask {
	if in == nil {
		return nil
	}
	out := &common1.PlaceFinishTask{}
	out.BaseReward = clone_User_common_Item(in.BaseReward)
	out.CityId = in.CityId
	out.StartTime = in.StartTime
	out.TaskType = in.TaskType
	return out
}

func clone_User_common1_PlayerArena(in *common1.PlayerArena) *common1.PlayerArena {
	if in == nil {
		return nil
	}
	out := &common1.PlayerArena{}
	out.ArenaBattleInfo = clone_User_common_ArenaBattleInfo(in.ArenaBattleInfo)
	out.BattleLogs = clone_User_Array_common_ArenaBattleLog(in.BattleLogs)
	out.BattleTimesExchangeIds = append(in.BattleTimesExchangeIds[:0:0], in.BattleTimesExchangeIds...)
	out.ChallengeBuyTimes = in.ChallengeBuyTimes
	out.ChallengeTimes = in.ChallengeTimes
	out.ExchangeIds = append(in.ExchangeIds[:0:0], in.ExchangeIds...)
	out.IsOfflineRankChangeAsked = in.IsOfflineRankChangeAsked
	out.MaxRank = in.MaxRank
	out.RewardScore = clone_User_Map_int32_Int32(in.RewardScore)
	return out
}

func clone_User_common1_PlayerAuc(in *common1.PlayerAuc) *common1.PlayerAuc {
	if in == nil {
		return nil
	}
	out := &common1.PlayerAuc{}
	out.AucRecord = clone_User_Array_common_AucRecord(in.AucRecord)
	return out
}

func clone_User_common1_PlayerCheatData(in *common1.PlayerCheatData) *common1.PlayerCheatData {
	if in == nil {
		return nil
	}
	out := &common1.PlayerCheatData{}
	out.OpenId = in.OpenId
	out.TakeCheatBox = append(in.TakeCheatBox[:0:0], in.TakeCheatBox...)
	return out
}

func clone_User_common1_PlayerDyPeak(in *common1.PlayerDyPeak) *common1.PlayerDyPeak {
	if in == nil {
		return nil
	}
	out := &common1.PlayerDyPeak{}
	out.ChampReward = in.ChampReward
	out.SecondReward = in.SecondReward
	out.SignUp = clone_User_common1_DyPeakSignUp(in.SignUp)
	out.ThirdReward = in.ThirdReward
	return out
}

func clone_User_common_PlayerFt(in *common.PlayerFt) *common.PlayerFt {
	if in == nil {
		return nil
	}
	out := &common.PlayerFt{}
	out.Ft = cloneUint32Pointer(in.Ft)
	out.Uid = cloneUint64Pointer(in.Uid)
	return out
}

func clone_User_common1_PlayerGuildRoll(in *common1.PlayerGuildRoll) *common1.PlayerGuildRoll {
	if in == nil {
		return nil
	}
	out := &common1.PlayerGuildRoll{}
	out.LastEndTime = in.LastEndTime
	out.LastGuildID = in.LastGuildID
	out.RollCount = in.RollCount
	return out
}

func clone_User_common_PlayerGuildSkill(in *common.PlayerGuildSkill) *common.PlayerGuildSkill {
	if in == nil {
		return nil
	}
	out := &common.PlayerGuildSkill{}
	out.Level = cloneUint32Pointer(in.Level)
	out.SlotId = cloneInt32Pointer(in.SlotId)
	return out
}

func clone_User_common1_PlayerGvg(in *common1.PlayerGvg) *common1.PlayerGvg {
	if in == nil {
		return nil
	}
	out := &common1.PlayerGvg{}
	out.AttackLogs = clone_User_Array_common_GvgBattleLog(in.AttackLogs)
	out.BeginBattleData = clone_User_common1_GvgBeginBattleData(in.BeginBattleData)
	out.BuyMoves = in.BuyMoves
	out.DefendLogs = clone_User_Array_common_GvgBattleLog(in.DefendLogs)
	out.HasGvgDefendMessage = in.HasGvgDefendMessage
	out.HasWeekEnterGvg = in.HasWeekEnterGvg
	out.Holys = clone_User_Map_uint32_Uint32(in.Holys)
	out.IsDealCrossSeasonTask = in.IsDealCrossSeasonTask
	out.KilledLogs = clone_User_Array_common_GvgBattleLog(in.KilledLogs)
	out.LastSeeGvgFlagTime = in.LastSeeGvgFlagTime
	out.Moves = in.Moves
	out.OverflowMoves = in.OverflowMoves
	out.Score = in.Score
	out.SeeDefendMessageTime = in.SeeDefendMessageTime
	out.Tasks = clone_User_Map_uint32_Bool(in.Tasks)
	return out
}

func clone_User_common_PlayerHeadPortrait(in *common.PlayerHeadPortrait) *common.PlayerHeadPortrait {
	if in == nil {
		return nil
	}
	out := &common.PlayerHeadPortrait{}
	out.Avatar = cloneInt32Pointer(in.Avatar)
	out.AvatarFrame = cloneInt32Pointer(in.AvatarFrame)
	out.Level = cloneUint32Pointer(in.Level)
	out.Model = cloneInt32Pointer(in.Model)
	out.Name = cloneStringPointer(in.Name)
	out.Uid = cloneUint64Pointer(in.Uid)
	out.VipLv = cloneUint32Pointer(in.VipLv)
	return out
}

func clone_User_common1_PlayerLmPeak(in *common1.PlayerLmPeak) *common1.PlayerLmPeak {
	if in == nil {
		return nil
	}
	out := &common1.PlayerLmPeak{}
	out.ChampReward = in.ChampReward
	out.SecondReward = in.SecondReward
	out.SignUp = clone_User_common1_DyPeakSignUp(in.SignUp)
	out.ThirdReward = in.ThirdReward
	return out
}

func clone_User_common1_PlayerOverlord(in *common1.PlayerOverlord) *common1.PlayerOverlord {
	if in == nil {
		return nil
	}
	out := &common1.PlayerOverlord{}
	out.Stages = clone_User_Map_int32_common1_PayerOverlordStage(in.Stages)
	return out
}

func clone_User_common1_PlayerPeak(in *common1.PlayerPeak) *common1.PlayerPeak {
	if in == nil {
		return nil
	}
	out := &common1.PlayerPeak{}
	out.BattleLogs = clone_User_Array_common_PeakBattleLog(in.BattleLogs)
	out.BattleUids = append(in.BattleUids[:0:0], in.BattleUids...)
	out.ChallengeBuyTimes = in.ChallengeBuyTimes
	out.ChallengeTimes = in.ChallengeTimes
	out.ExchangeIds = append(in.ExchangeIds[:0:0], in.ExchangeIds...)
	out.ExchangeMailIds = append(in.ExchangeMailIds[:0:0], in.ExchangeMailIds...)
	out.HasChallengeList = append(in.HasChallengeList[:0:0], in.HasChallengeList...)
	out.LastAccumulatePeakCoin = in.LastAccumulatePeakCoin
	out.LastConsecutiveWinTimes = in.LastConsecutiveWinTimes
	out.LastWin = in.LastWin
	out.MaxScore = in.MaxScore
	out.NowAccumulatePeakCoinBeginTime = in.NowAccumulatePeakCoinBeginTime
	out.PeakRank = in.PeakRank
	out.TotalBattleTimes = in.TotalBattleTimes
	out.TotalBattleWinTimes = in.TotalBattleWinTimes
	out.VersionID = in.VersionID
	return out
}

func clone_User_common1_PlayerQieCuo(in *common1.PlayerQieCuo) *common1.PlayerQieCuo {
	if in == nil {
		return nil
	}
	out := &common1.PlayerQieCuo{}
	out.ChallengeTimes = in.ChallengeTimes
	return out
}

func clone_User_common_PlayerRankReward(in *common.PlayerRankReward) *common.PlayerRankReward {
	if in == nil {
		return nil
	}
	out := &common.PlayerRankReward{}
	out.Ids = append(in.Ids[:0:0], in.Ids...)
	out.RankType = cloneEnumUserRankType(in.RankType)
	return out
}

func clone_User_common1_PlayerWon(in *common1.PlayerWon) *common1.PlayerWon {
	if in == nil {
		return nil
	}
	out := &common1.PlayerWon{}
	out.BattleLogs = clone_User_Array_common_WonBattleLog(in.BattleLogs)
	out.BuyMoves = in.BuyMoves
	out.ClearMoveTime = in.ClearMoveTime
	out.HasWeekEnterWon = in.HasWeekEnterWon
	out.MeritorNum = in.MeritorNum
	out.Moves = in.Moves
	out.OverflowMoves = in.OverflowMoves
	out.Worship = clone_User_common1_WonWorship(in.Worship)
	return out
}

func clone_User_common_Position(in *common.Position) *common.Position {
	if in == nil {
		return nil
	}
	out := &common.Position{}
	out.X = cloneFloat32Pointer(in.X)
	out.Y = cloneFloat32Pointer(in.Y)
	return out
}

func clone_User_common1_PrivateMessage(in *common1.PrivateMessage) *common1.PrivateMessage {
	if in == nil {
		return nil
	}
	out := &common1.PrivateMessage{}
	out.Msg = clone_User_Array_common_ChatCell(in.Msg)
	out.OpID = in.OpID
	out.ReadTime = in.ReadTime
	return out
}

func clone_User_common1_Privilege(in *common1.Privilege) *common1.Privilege {
	if in == nil {
		return nil
	}
	out := &common1.Privilege{}
	out.AbilityList = clone_User_Array_common_PrivilegeAbility(in.AbilityList)
	out.BuyBuffList = append(in.BuyBuffList[:0:0], in.BuyBuffList...)
	out.GetWagesTime = in.GetWagesTime
	out.Peerage = in.Peerage
	return out
}

func clone_User_common_PrivilegeAbility(in *common.PrivilegeAbility) *common.PrivilegeAbility {
	if in == nil {
		return nil
	}
	out := &common.PrivilegeAbility{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_User_common_ProfessionSkill(in *common.ProfessionSkill) *common.ProfessionSkill {
	if in == nil {
		return nil
	}
	out := &common.ProfessionSkill{}
	out.Levels = append(in.Levels[:0:0], in.Levels...)
	return out
}

func clone_User_common_Rebate(in *common.Rebate) *common.Rebate {
	if in == nil {
		return nil
	}
	out := &common.Rebate{}
	out.RebateInfo = clone_User_common_RebateInfo(in.RebateInfo)
	out.TakeTime = cloneInt64Pointer(in.TakeTime)
	return out
}

func clone_User_common_RebateData(in *common.RebateData) *common.RebateData {
	if in == nil {
		return nil
	}
	out := &common.RebateData{}
	out.Items = clone_User_Array_common_Item(in.Items)
	out.Money = cloneUint32Pointer(in.Money)
	out.Type = cloneInt32Pointer(in.Type)
	return out
}

func clone_User_common_RebateInfo(in *common.RebateInfo) *common.RebateInfo {
	if in == nil {
		return nil
	}
	out := &common.RebateInfo{}
	out.Info = clone_User_Array_common_RebateData(in.Info)
	return out
}

func clone_User_common1_Recharge(in *common1.Recharge) *common1.Recharge {
	if in == nil {
		return nil
	}
	out := &common1.Recharge{}
	out.FirstRecharges = append(in.FirstRecharges[:0:0], in.FirstRecharges...)
	out.IsFirstRechargeFinished = in.IsFirstRechargeFinished
	out.IsFirstRechargeGiftTaken = in.IsFirstRechargeGiftTaken
	out.IsRefundWarned = in.IsRefundWarned
	out.IsWelcomeGiftTaken = in.IsWelcomeGiftTaken
	out.MonthCards = clone_User_common1_MonthCards(in.MonthCards)
	out.Order = clone_User_Map_string_common1_OrderData(in.Order)
	out.Subscribes = clone_User_common1_Subscribes(in.Subscribes)
	out.TotalRechargeDiamond = in.TotalRechargeDiamond
	return out
}

func clone_User_common1_RechargeGift(in *common1.RechargeGift) *common1.RechargeGift {
	if in == nil {
		return nil
	}
	out := &common1.RechargeGift{}
	out.Items = clone_User_Array_common1_RechargeGiftItem(in.Items)
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_RechargeGiftItem(in *common1.RechargeGiftItem) *common1.RechargeGiftItem {
	if in == nil {
		return nil
	}
	out := &common1.RechargeGiftItem{}
	out.BuyCount = in.BuyCount
	out.GiftId = in.GiftId
	return out
}

func clone_User_common1_RechargeRank(in *common1.RechargeRank) *common1.RechargeRank {
	if in == nil {
		return nil
	}
	out := &common1.RechargeRank{}
	out.ActID = in.ActID
	out.Money = in.Money
	out.OpenID = in.OpenID
	return out
}

func clone_User_common1_RechargeStatDaily(in *common1.RechargeStatDaily) *common1.RechargeStatDaily {
	if in == nil {
		return nil
	}
	out := &common1.RechargeStatDaily{}
	out.RechargeDiamond = in.RechargeDiamond
	out.RechargeMoney = in.RechargeMoney
	return out
}

func clone_User_common1_RechargeStatTotal(in *common1.RechargeStatTotal) *common1.RechargeStatTotal {
	if in == nil {
		return nil
	}
	out := &common1.RechargeStatTotal{}
	out.FirstRechargeDiamond = in.FirstRechargeDiamond
	out.FirstRechargeTime = in.FirstRechargeTime
	out.LastRechargeTime = in.LastRechargeTime
	out.MaxSingleDayRechargeDiamond = in.MaxSingleDayRechargeDiamond
	out.MaxSingleTimeRechargeDiamond = in.MaxSingleTimeRechargeDiamond
	out.RechargeDays = in.RechargeDays
	out.RechargeDiamond = in.RechargeDiamond
	out.RechargeMoney = in.RechargeMoney
	out.RechargeTimes = in.RechargeTimes
	return out
}

func clone_User_common1_RecruitCard(in *common1.RecruitCard) *common1.RecruitCard {
	if in == nil {
		return nil
	}
	out := &common1.RecruitCard{}
	out.ActID = in.ActID
	out.HasActive = in.HasActive
	out.OpenID = in.OpenID
	return out
}

func clone_User_common_ReplaySimple(in *common.ReplaySimple) *common.ReplaySimple {
	if in == nil {
		return nil
	}
	out := &common.ReplaySimple{}
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.Formation = clone_User_common_Formation(in.Formation)
	out.Id = cloneUint64Pointer(in.Id)
	out.TargetFormation = clone_User_common_Formation(in.TargetFormation)
	return out
}

func clone_User_common_ResignAttr(in *common.ResignAttr) *common.ResignAttr {
	if in == nil {
		return nil
	}
	out := &common.ResignAttr{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Index = cloneInt32Pointer(in.Index)
	out.IsLock = cloneBoolPointer(in.IsLock)
	out.Quality = cloneInt32Pointer(in.Quality)
	out.Type = cloneInt32Pointer(in.Type)
	out.Value = cloneInt32Pointer(in.Value)
	return out
}

func clone_User_common1_ResourceCommon(in *common1.ResourceCommon) *common1.ResourceCommon {
	if in == nil {
		return nil
	}
	out := &common1.ResourceCommon{}
	out.Count = in.Count
	out.FreeCount = in.FreeCount
	out.FreeFlag = in.FreeFlag
	out.MoneyCount = in.MoneyCount
	out.MoneyFlag = in.MoneyFlag
	out.Spend = in.Spend
	return out
}

func clone_User_common1_ResourceRecover(in *common1.ResourceRecover) *common1.ResourceRecover {
	if in == nil {
		return nil
	}
	out := &common1.ResourceRecover{}
	out.ActID = in.ActID
	out.LastRecoverTime = in.LastRecoverTime
	out.Resource = clone_User_Map_int32_common1_ResourceCommon(in.Resource)
	return out
}

func clone_User_common1_Season(in *common1.Season) *common1.Season {
	if in == nil {
		return nil
	}
	out := &common1.Season{}
	out.Reward = clone_User_common1_SeasonReward(in.Reward)
	out.SeasonId = in.SeasonId
	out.StoreItem = clone_User_Map_int32_common1_SeasonStoreItem(in.StoreItem)
	out.TaskInfo = clone_User_Map_int32_common1_SeasonTaskInfo(in.TaskInfo)
	return out
}

func clone_User_common1_SeasonFund(in *common1.SeasonFund) *common1.SeasonFund {
	if in == nil {
		return nil
	}
	out := &common1.SeasonFund{}
	out.CurSeason = clone_User_common1_SeasonFundData(in.CurSeason)
	out.LastSeason = clone_User_common1_SeasonFundData(in.LastSeason)
	out.WaitOpenId = in.WaitOpenId
	return out
}

func clone_User_common1_SeasonFundData(in *common1.SeasonFundData) *common1.SeasonFundData {
	if in == nil {
		return nil
	}
	out := &common1.SeasonFundData{}
	out.ActivityId = in.ActivityId
	out.DailyTask = clone_User_common_SeasonFundTask(in.DailyTask)
	out.ExclusiveTasks = clone_User_Array_common_SeasonFundTask(in.ExclusiveTasks)
	out.GotFreeRewards = append(in.GotFreeRewards[:0:0], in.GotFreeRewards...)
	out.GotRechargeRewards = append(in.GotRechargeRewards[:0:0], in.GotRechargeRewards...)
	out.IsClosed = in.IsClosed
	out.IsRecharged = in.IsRecharged
	out.LastGenTaskTime = in.LastGenTaskTime
	out.Level = in.Level
	out.OpenId = in.OpenId
	out.Score = in.Score
	out.SeasonId = in.SeasonId
	out.SeasonTasks = clone_User_Array_common_SeasonFundTask(in.SeasonTasks)
	out.UsedTaskIds = append(in.UsedTaskIds[:0:0], in.UsedTaskIds...)
	return out
}

func clone_User_common_SeasonFundTask(in *common.SeasonFundTask) *common.SeasonFundTask {
	if in == nil {
		return nil
	}
	out := &common.SeasonFundTask{}
	out.Conditions = append(in.Conditions[:0:0], in.Conditions...)
	out.CreateTime = cloneInt64Pointer(in.CreateTime)
	out.Id = cloneInt32Pointer(in.Id)
	out.IsFinished = cloneBoolPointer(in.IsFinished)
	out.Progress = cloneUint32Pointer(in.Progress)
	return out
}

func clone_User_common1_SeasonReward(in *common1.SeasonReward) *common1.SeasonReward {
	if in == nil {
		return nil
	}
	out := &common1.SeasonReward{}
	out.HasGainLoginRewardList = append(in.HasGainLoginRewardList[:0:0], in.HasGainLoginRewardList...)
	out.HasGainRedEnvelope = in.HasGainRedEnvelope
	out.LastGetRandomGiftTime = in.LastGetRandomGiftTime
	out.LoginRewardTimes = in.LoginRewardTimes
	return out
}

func clone_User_common1_SeasonStoreItem(in *common1.SeasonStoreItem) *common1.SeasonStoreItem {
	if in == nil {
		return nil
	}
	out := &common1.SeasonStoreItem{}
	out.HasBuyTimes = in.HasBuyTimes
	return out
}

func clone_User_common1_SeasonTaskInfo(in *common1.SeasonTaskInfo) *common1.SeasonTaskInfo {
	if in == nil {
		return nil
	}
	out := &common1.SeasonTaskInfo{}
	out.GainReward = append(in.GainReward[:0:0], in.GainReward...)
	out.Times = in.Times
	return out
}

func clone_User_common1_Share(in *common1.Share) *common1.Share {
	if in == nil {
		return nil
	}
	out := &common1.Share{}
	out.ShareDatas = clone_User_Array_common1_ShareData(in.ShareDatas)
	return out
}

func clone_User_common1_ShareData(in *common1.ShareData) *common1.ShareData {
	if in == nil {
		return nil
	}
	out := &common1.ShareData{}
	out.ShareId = in.ShareId
	out.ShareTimes = in.ShareTimes
	return out
}

func clone_User_common1_ShiLengJigsaw(in *common1.ShiLengJigsaw) *common1.ShiLengJigsaw {
	if in == nil {
		return nil
	}
	out := &common1.ShiLengJigsaw{}
	out.ActId = in.ActId
	out.ClientRewardIds = append(in.ClientRewardIds[:0:0], in.ClientRewardIds...)
	out.Common = clone_User_common1_ActivityCommon(in.Common)
	out.IsTakeFinallyReward = in.IsTakeFinallyReward
	out.OpenId = in.OpenId
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.StageID = in.StageID
	return out
}

func clone_User_common1_ShiLengSignIn(in *common1.ShiLengSignIn) *common1.ShiLengSignIn {
	if in == nil {
		return nil
	}
	out := &common1.ShiLengSignIn{}
	out.ActId = in.ActId
	out.OpenId = in.OpenId
	out.SignInTime = in.SignInTime
	out.SignInTimes = in.SignInTimes
	return out
}

func clone_User_common_ShopDailyRecord(in *common.ShopDailyRecord) *common.ShopDailyRecord {
	if in == nil {
		return nil
	}
	out := &common.ShopDailyRecord{}
	out.AdvanceStoneBuyTimes = cloneUint32Pointer(in.AdvanceStoneBuyTimes)
	out.AdvanceStoneFreeBuyTimes = cloneUint32Pointer(in.AdvanceStoneFreeBuyTimes)
	out.AlbumEssenceBuyTimes = cloneUint32Pointer(in.AlbumEssenceBuyTimes)
	out.AwakeHschTimes = cloneUint32Pointer(in.AwakeHschTimes)
	out.BeyondBuyTimes = cloneUint32Pointer(in.BeyondBuyTimes)
	out.CommanderExpBuyTimes = cloneUint32Pointer(in.CommanderExpBuyTimes)
	out.CommanderExpFreeBuyTimes = cloneUint32Pointer(in.CommanderExpFreeBuyTimes)
	out.GoldBuyTimes = cloneUint32Pointer(in.GoldBuyTimes)
	out.GoldFreeBuyTimes = cloneUint32Pointer(in.GoldFreeBuyTimes)
	out.MagicBookBuyTimes = cloneUint32Pointer(in.MagicBookBuyTimes)
	out.MagicBookFreeBuyTimes = cloneUint32Pointer(in.MagicBookFreeBuyTimes)
	out.PhysicalBuyTimes = cloneUint32Pointer(in.PhysicalBuyTimes)
	out.PhysicalFreeBuyTimes = cloneUint32Pointer(in.PhysicalFreeBuyTimes)
	return out
}

func clone_User_common_SilkBag(in *common.SilkBag) *common.SilkBag {
	if in == nil {
		return nil
	}
	out := &common.SilkBag{}
	out.Items = append(in.Items[:0:0], in.Items...)
	return out
}

func clone_User_common_Skill(in *common.Skill) *common.Skill {
	if in == nil {
		return nil
	}
	out := &common.Skill{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Lv = cloneUint32Pointer(in.Lv)
	out.TableType = cloneInt32Pointer(in.TableType)
	return out
}

func clone_User_common1_Slay(in *common1.Slay) *common1.Slay {
	if in == nil {
		return nil
	}
	out := &common1.Slay{}
	out.Actions = clone_User_Array_common1_SlayAction(in.Actions)
	out.AiCount = in.AiCount
	out.AiTemplate = clone_User_common_BattlePlayerInfo(in.AiTemplate)
	out.Cities = clone_User_Array_common1_SlayCity(in.Cities)
	out.Credit = in.Credit
	out.DefendCityId = in.DefendCityId
	out.EffectSilkBag = in.EffectSilkBag
	out.End = in.End
	out.Event = clone_User_common_SlayEvent(in.Event)
	out.Forces = clone_User_Array_common_SlayPower(in.Forces)
	out.Level = in.Level
	out.PlayerBeAttacked = in.PlayerBeAttacked
	out.PlayerCommanders = clone_User_Array_common_SlayPlayerCommander(in.PlayerCommanders)
	out.Round = in.Round
	out.RoundDoAIForces = append(in.RoundDoAIForces[:0:0], in.RoundDoAIForces...)
	out.RoundReports = clone_User_Array_common_SlayRoundReport(in.RoundReports)
	out.SelectBags = clone_User_Array_common_SlaySilkBuy(in.SelectBags)
	out.SilkBag = clone_User_common_SilkBag(in.SilkBag)
	out.StartTime = in.StartTime
	out.TopCommanders = clone_User_Array_common_Commander(in.TopCommanders)
	out.UsedFormation = append(in.UsedFormation[:0:0], in.UsedFormation...)
	return out
}

func clone_User_common1_SlayAction(in *common1.SlayAction) *common1.SlayAction {
	if in == nil {
		return nil
	}
	out := &common1.SlayAction{}
	out.ActionType = in.ActionType
	out.Attack = clone_User_common_SlayAttack(in.Attack)
	out.PowerId = in.PowerId
	return out
}

func clone_User_common_SlayAttack(in *common.SlayAttack) *common.SlayAttack {
	if in == nil {
		return nil
	}
	out := &common.SlayAttack{}
	out.AttackCityId = cloneInt32Pointer(in.AttackCityId)
	out.DefendCityId = cloneInt32Pointer(in.DefendCityId)
	return out
}

func clone_User_common1_SlayCity(in *common1.SlayCity) *common1.SlayCity {
	if in == nil {
		return nil
	}
	out := &common1.SlayCity{}
	out.BanCallArmy = in.BanCallArmy
	out.FightPower = in.FightPower
	out.Formation = clone_User_common_Formation(in.Formation)
	out.Id = in.Id
	out.NotUsedGrid = clone_User_Array_common_Grid(in.NotUsedGrid)
	out.PowerId = in.PowerId
	out.SlayCommanders = clone_User_Array_common1_SlayCommander(in.SlayCommanders)
	out.TaxPer = in.TaxPer
	return out
}

func clone_User_common1_SlayCommander(in *common1.SlayCommander) *common1.SlayCommander {
	if in == nil {
		return nil
	}
	out := &common1.SlayCommander{}
	out.CommanderId = in.CommanderId
	out.Hp = in.Hp
	out.Level = in.Level
	out.TplIndex = in.TplIndex
	return out
}

func clone_User_common_SlayEvent(in *common.SlayEvent) *common.SlayEvent {
	if in == nil {
		return nil
	}
	out := &common.SlayEvent{}
	out.CityId = cloneInt32Pointer(in.CityId)
	out.EventId = cloneInt32Pointer(in.EventId)
	out.PowerId = cloneInt32Pointer(in.PowerId)
	return out
}

func clone_User_common_SlayFightReport(in *common.SlayFightReport) *common.SlayFightReport {
	if in == nil {
		return nil
	}
	out := &common.SlayFightReport{}
	out.ActionPower = cloneInt32Pointer(in.ActionPower)
	out.City = cloneInt32Pointer(in.City)
	out.DefendPower = cloneInt32Pointer(in.DefendPower)
	out.Level = cloneInt32Pointer(in.Level)
	out.TeamNum = cloneInt32Pointer(in.TeamNum)
	out.Typ = cloneEnumUserSlayFightReportType(in.Typ)
	return out
}

func clone_User_common_SlayPlayerCommander(in *common.SlayPlayerCommander) *common.SlayPlayerCommander {
	if in == nil {
		return nil
	}
	out := &common.SlayPlayerCommander{}
	out.Hp = cloneInt32Pointer(in.Hp)
	out.Id = cloneInt32Pointer(in.Id)
	out.Strength = cloneInt32Pointer(in.Strength)
	return out
}

func clone_User_common_SlayPower(in *common.SlayPower) *common.SlayPower {
	if in == nil {
		return nil
	}
	out := &common.SlayPower{}
	out.Gold = cloneInt32Pointer(in.Gold)
	out.Id = cloneInt32Pointer(in.Id)
	return out
}

func clone_User_common_SlayRoundReport(in *common.SlayRoundReport) *common.SlayRoundReport {
	if in == nil {
		return nil
	}
	out := &common.SlayRoundReport{}
	out.Reports = clone_User_Array_common_SlayFightReport(in.Reports)
	out.Round = cloneInt32Pointer(in.Round)
	return out
}

func clone_User_common_SlaySilkBuy(in *common.SlaySilkBuy) *common.SlaySilkBuy {
	if in == nil {
		return nil
	}
	out := &common.SlaySilkBuy{}
	out.Bought = cloneBoolPointer(in.Bought)
	out.SilkId = cloneInt32Pointer(in.SilkId)
	return out
}

func clone_User_common_Soldier(in *common.Soldier) *common.Soldier {
	if in == nil {
		return nil
	}
	out := &common.Soldier{}
	out.EvolutionFlag = cloneBoolPointer(in.EvolutionFlag)
	out.Id = cloneInt32Pointer(in.Id)
	out.SkillActive = cloneBoolPointer(in.SkillActive)
	out.Stars = cloneInt32Pointer(in.Stars)
	return out
}

func clone_User_common1_Soldier(in *common1.Soldier) *common1.Soldier {
	if in == nil {
		return nil
	}
	out := &common1.Soldier{}
	out.ClassTechs = clone_User_Array_common1_SoldierClassTech(in.ClassTechs)
	out.Soldiers = clone_User_Array_common_Soldier(in.Soldiers)
	return out
}

func clone_User_common1_SoldierClassTech(in *common1.SoldierClassTech) *common1.SoldierClassTech {
	if in == nil {
		return nil
	}
	out := &common1.SoldierClassTech{}
	out.Power = in.Power
	out.ProfessionLevel = in.ProfessionLevel
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.Techs = clone_User_Array_common_SoldierTech(in.Techs)
	return out
}

func clone_User_common_SoldierTech(in *common.SoldierTech) *common.SoldierTech {
	if in == nil {
		return nil
	}
	out := &common.SoldierTech{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneInt32Pointer(in.Level)
	return out
}

func clone_User_common_SoldierTechSkill(in *common.SoldierTechSkill) *common.SoldierTechSkill {
	if in == nil {
		return nil
	}
	out := &common.SoldierTechSkill{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneInt32Pointer(in.Level)
	out.SkillType = cloneInt32Pointer(in.SkillType)
	return out
}

func clone_User_common_SoliderSkill(in *common.SoliderSkill) *common.SoliderSkill {
	if in == nil {
		return nil
	}
	out := &common.SoliderSkill{}
	out.UnlockSoldiers = append(in.UnlockSoldiers[:0:0], in.UnlockSoldiers...)
	return out
}

func clone_User_common1_SoulBox(in *common1.SoulBox) *common1.SoulBox {
	if in == nil {
		return nil
	}
	out := &common1.SoulBox{}
	out.ActID = in.ActID
	out.Count = in.Count
	out.CritLimitId = in.CritLimitId
	out.CritNum = in.CritNum
	out.Gift4CritData = clone_User_Map_int32_common1_SoulBoxGift4Crit(in.Gift4CritData)
	out.Gift4Remainder = in.Gift4Remainder
	out.GiftTotalArray = append(in.GiftTotalArray[:0:0], in.GiftTotalArray...)
	out.IsHitServerSoul = in.IsHitServerSoul
	out.KillTotalCount = in.KillTotalCount
	out.OpenId = in.OpenId
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.Stage16Flag = in.Stage16Flag
	out.Times = in.Times
	return out
}

func clone_User_common1_SoulBoxGift4Crit(in *common1.SoulBoxGift4Crit) *common1.SoulBoxGift4Crit {
	if in == nil {
		return nil
	}
	out := &common1.SoulBoxGift4Crit{}
	out.Gift4CritHitCount = in.Gift4CritHitCount
	out.Gift4CritTotalCount = in.Gift4CritTotalCount
	out.UseFreeCf = in.UseFreeCf
	return out
}

func clone_User_common1_SpecialBuyGift(in *common1.SpecialBuyGift) *common1.SpecialBuyGift {
	if in == nil {
		return nil
	}
	out := &common1.SpecialBuyGift{}
	out.Items = clone_User_Array_common1_SpecialBuyGiftItem(in.Items)
	return out
}

func clone_User_common1_SpecialBuyGiftItem(in *common1.SpecialBuyGiftItem) *common1.SpecialBuyGiftItem {
	if in == nil {
		return nil
	}
	out := &common1.SpecialBuyGiftItem{}
	out.BuyTimes = in.BuyTimes
	out.Id = in.Id
	return out
}

func clone_User_common1_SpecialBuyGiftRecord(in *common1.SpecialBuyGiftRecord) *common1.SpecialBuyGiftRecord {
	if in == nil {
		return nil
	}
	out := &common1.SpecialBuyGiftRecord{}
	out.BuyRecord = clone_User_Map_uint32_common1_SpecialBuyGift(in.BuyRecord)
	return out
}

func clone_User_common1_StarActivity(in *common1.StarActivity) *common1.StarActivity {
	if in == nil {
		return nil
	}
	out := &common1.StarActivity{}
	out.ActID = in.ActID
	out.Diamond = in.Diamond
	out.LuckyCode = in.LuckyCode
	out.OpenID = in.OpenID
	out.OpenTime = in.OpenTime
	return out
}

func clone_User_common1_Stats(in *common1.Stats) *common1.Stats {
	if in == nil {
		return nil
	}
	out := &common1.Stats{}
	out.Act = clone_User_common1_ActivityData(in.Act)
	out.Daily = clone_User_common1_DailyStatsData(in.Daily)
	out.DailyActive = in.DailyActive
	out.DailyOnlineTime = in.DailyOnlineTime
	out.LowActiveScore = in.LowActiveScore
	out.Total = clone_User_common1_StatsData(in.Total)
	return out
}

func clone_User_common1_StatsData(in *common1.StatsData) *common1.StatsData {
	if in == nil {
		return nil
	}
	out := &common1.StatsData{}
	out.ActiveScore = in.ActiveScore
	out.ArenaExchangeMarketBuyTimes = in.ArenaExchangeMarketBuyTimes
	out.ArenaMarketBuyTimes = in.ArenaMarketBuyTimes
	out.ArenaTimes = in.ArenaTimes
	out.ArenaWinTimes = in.ArenaWinTimes
	out.AutoFinishComplete = in.AutoFinishComplete
	out.AutoFinishPutOn = in.AutoFinishPutOn
	out.BlackDiamond = in.BlackDiamond
	out.Book50009 = in.Book50009
	out.Book50010 = in.Book50010
	out.Book50011 = in.Book50011
	out.Book50012 = in.Book50012
	out.BossDamage = in.BossDamage
	out.BossTimes = in.BossTimes
	out.BuyGoldTimes = in.BuyGoldTimes
	out.BuyStrengthTimes = in.BuyStrengthTimes
	out.ChangeName = in.ChangeName
	out.CoinDamage = in.CoinDamage
	out.CoinKill = in.CoinKill
	out.CoinTimes = in.CoinTimes
	out.CommanderSkillUpTimes = in.CommanderSkillUpTimes
	out.CostDiamond = in.CostDiamond
	out.CostGveDamage = in.CostGveDamage
	out.CostLimitChallgeTimes = in.CostLimitChallgeTimes
	out.DailyExpTimes = in.DailyExpTimes
	out.DramaMarketBuyTimes = in.DramaMarketBuyTimes
	out.DramaTimes = in.DramaTimes
	out.DramaTreasurePiece = in.DramaTreasurePiece
	out.EliteDungeonStar = in.EliteDungeonStar
	out.ExpKill = in.ExpKill
	out.ExpeditionStar = in.ExpeditionStar
	out.ExploreMissionNum = in.ExploreMissionNum
	out.GvgOccupyMineTimes = in.GvgOccupyMineTimes
	out.HasPassCommanderBattle1 = in.HasPassCommanderBattle1
	out.HasPassCommanderBattle2 = in.HasPassCommanderBattle2
	out.JoinGuild = in.JoinGuild
	out.MysteryMarketBuyTimes = in.MysteryMarketBuyTimes
	out.NavalPassTimes = in.NavalPassTimes
	out.NormalDungeonStar = in.NormalDungeonStar
	out.PeakMarketBuyTimes = in.PeakMarketBuyTimes
	out.PeakTimes = in.PeakTimes
	out.Recharge = clone_User_common1_RechargeStatTotal(in.Recharge)
	out.RechargeReal = clone_User_common1_RechargeStatTotal(in.RechargeReal)
	out.SoldierBookArcher = in.SoldierBookArcher
	out.SoldierBookHeavyCavalry = in.SoldierBookHeavyCavalry
	out.SoldierBookInfantry = in.SoldierBookInfantry
	out.SoldierBookLightCavalry = in.SoldierBookLightCavalry
	out.SoldierBookShield = in.SoldierBookShield
	out.SoldierBookTactician = in.SoldierBookTactician
	out.TotalGiveDiamond = in.TotalGiveDiamond
	return out
}

func clone_User_common1_StrMansion(in *common1.StrMansion) *common1.StrMansion {
	if in == nil {
		return nil
	}
	out := &common1.StrMansion{}
	out.Talents = clone_User_Array_common_StrTalent(in.Talents)
	return out
}

func clone_User_common_StrTalent(in *common.StrTalent) *common.StrTalent {
	if in == nil {
		return nil
	}
	out := &common.StrTalent{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	return out
}

func clone_DrawOnlyEquipBack_example_StudentMc(in *StudentMc) *StudentMc {
	if in == nil {
		return nil
	}
	out := &StudentMc{}
	out.Name = in.Name
	return out
}

func clone_User_common1_Subscribe(in *common1.Subscribe) *common1.Subscribe {
	if in == nil {
		return nil
	}
	out := &common1.Subscribe{}
	out.DueTime = in.DueTime
	out.FirstActiveTime = in.FirstActiveTime
	out.Id = in.Id
	out.LastActiveTime = in.LastActiveTime
	out.LastTakeGiftBagTime = in.LastTakeGiftBagTime
	return out
}

func clone_User_common1_Subscribes(in *common1.Subscribes) *common1.Subscribes {
	if in == nil {
		return nil
	}
	out := &common1.Subscribes{}
	out.Subs = clone_User_Array_common1_Subscribe(in.Subs)
	return out
}

func clone_User_common1_SuperDraw(in *common1.SuperDraw) *common1.SuperDraw {
	if in == nil {
		return nil
	}
	out := &common1.SuperDraw{}
	out.UrDraw = clone_User_common1_UrDraw(in.UrDraw)
	return out
}

func clone_User_common1_SuperWelGift(in *common1.SuperWelGift) *common1.SuperWelGift {
	if in == nil {
		return nil
	}
	out := &common1.SuperWelGift{}
	out.ActID = in.ActID
	out.DrawTimes = in.DrawTimes
	out.HaveGainCommander = append(in.HaveGainCommander[:0:0], in.HaveGainCommander...)
	out.LastDrawTime = in.LastDrawTime
	out.LastLoginOnlineTime = in.LastLoginOnlineTime
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_SystemOpenData(in *common1.SystemOpenData) *common1.SystemOpenData {
	if in == nil {
		return nil
	}
	out := &common1.SystemOpenData{}
	out.OpenData = clone_User_Map_int32_Int32(in.OpenData)
	return out
}

func clone_User_common1_Task(in *common1.Task) *common1.Task {
	if in == nil {
		return nil
	}
	out := &common1.Task{}
	out.Daily = clone_User_common1_TaskUnit(in.Daily)
	out.Grow = clone_User_common1_TaskUnit(in.Grow)
	out.LastRefreshTime = in.LastRefreshTime
	out.Story = clone_User_common1_TaskUnit(in.Story)
	out.TargetChapter = clone_User_Array_common_MissionTargetChapter(in.TargetChapter)
	out.Week = clone_User_common1_TaskWeek(in.Week)
	return out
}

func clone_User_common_TaskCell(in *common.TaskCell) *common.TaskCell {
	if in == nil {
		return nil
	}
	out := &common.TaskCell{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Progress = cloneUint32Pointer(in.Progress)
	return out
}

func clone_User_common1_TaskUnit(in *common1.TaskUnit) *common1.TaskUnit {
	if in == nil {
		return nil
	}
	out := &common1.TaskUnit{}
	out.FinishedTask = clone_User_Map_int32_Bool(in.FinishedTask)
	out.GotReward = append(in.GotReward[:0:0], in.GotReward...)
	out.RewardProgress = in.RewardProgress
	out.RewardType = in.RewardType
	out.Score = in.Score
	out.Tasks = clone_User_Array_common_TaskCell(in.Tasks)
	out.Version = in.Version
	return out
}

func clone_User_common1_TaskWeek(in *common1.TaskWeek) *common1.TaskWeek {
	if in == nil {
		return nil
	}
	out := &common1.TaskWeek{}
	out.Level = in.Level
	out.RewardIds = append(in.RewardIds[:0:0], in.RewardIds...)
	out.Score = in.Score
	return out
}

func clone_User_common1_TianGongFund(in *common1.TianGongFund) *common1.TianGongFund {
	if in == nil {
		return nil
	}
	out := &common1.TianGongFund{}
	out.FundCommon = clone_User_common1_FundCommon(in.FundCommon)
	out.HasReset = in.HasReset
	out.LastActiveScore = in.LastActiveScore
	return out
}

func clone_User_common_TimeMission(in *common.TimeMission) *common.TimeMission {
	if in == nil {
		return nil
	}
	out := &common.TimeMission{}
	out.Missions = clone_User_Array_common_MissionUnit(in.Missions)
	out.RefreshTime = cloneInt32Pointer(in.RefreshTime)
	return out
}

func clone_User_common1_TotalLogin(in *common1.TotalLogin) *common1.TotalLogin {
	if in == nil {
		return nil
	}
	out := &common1.TotalLogin{}
	out.TakeRewards = append(in.TakeRewards[:0:0], in.TakeRewards...)
	return out
}

func clone_User_common1_Tower(in *common1.Tower) *common1.Tower {
	if in == nil {
		return nil
	}
	out := &common1.Tower{}
	out.BuyFastHangUpTimes = in.BuyFastHangUpTimes
	out.FreeFastHangUpTimes = in.FreeFastHangUpTimes
	out.StartHangUpTime = in.StartHangUpTime
	out.TowerDatas = clone_User_Array_common1_TowerData(in.TowerDatas)
	return out
}

func clone_User_common1_TowerData(in *common1.TowerData) *common1.TowerData {
	if in == nil {
		return nil
	}
	out := &common1.TowerData{}
	out.CurLevel = in.CurLevel
	out.HangUpTime = clone_User_Map_int32_Int64(in.HangUpTime)
	out.LastPassTime = in.LastPassTime
	out.LastUpdateTime = in.LastUpdateTime
	out.TakenTotalPassRewards = append(in.TakenTotalPassRewards[:0:0], in.TakenTotalPassRewards...)
	out.TowerType = in.TowerType
	return out
}

func clone_User_common1_TowerFund(in *common1.TowerFund) *common1.TowerFund {
	if in == nil {
		return nil
	}
	out := &common1.TowerFund{}
	out.ActivityId = in.ActivityId
	out.Funds = clone_User_Array_common1_TowerFundData(in.Funds)
	return out
}

func clone_User_common1_TowerFundData(in *common1.TowerFundData) *common1.TowerFundData {
	if in == nil {
		return nil
	}
	out := &common1.TowerFundData{}
	out.GotFreeGifts = append(in.GotFreeGifts[:0:0], in.GotFreeGifts...)
	out.GotPayGifts = append(in.GotPayGifts[:0:0], in.GotPayGifts...)
	out.Id = in.Id
	out.IsPaid = in.IsPaid
	return out
}

func clone_User_common1_TowerHangUp(in *common1.TowerHangUp) *common1.TowerHangUp {
	if in == nil {
		return nil
	}
	out := &common1.TowerHangUp{}
	out.HangUpTime = in.HangUpTime
	out.Level = in.Level
	return out
}

func clone_User_common1_Train(in *common1.Train) *common1.Train {
	if in == nil {
		return nil
	}
	out := &common1.Train{}
	out.Barrage = clone_User_Map_int32_common_TrainBarrage(in.Barrage)
	out.ChapterReward = append(in.ChapterReward[:0:0], in.ChapterReward...)
	out.Items = clone_User_Array_common_TrainItem(in.Items)
	out.Replays = clone_User_Array_common_ReplaySimple(in.Replays)
	return out
}

func clone_User_common_TrainBarrage(in *common.TrainBarrage) *common.TrainBarrage {
	if in == nil {
		return nil
	}
	out := &common.TrainBarrage{}
	out.Content = append(in.Content[:0:0], in.Content...)
	return out
}

func clone_User_common_TrainItem(in *common.TrainItem) *common.TrainItem {
	if in == nil {
		return nil
	}
	out := &common.TrainItem{}
	out.Evaluate = cloneInt32Pointer(in.Evaluate)
	out.Exceed = cloneFloat32Pointer(in.Exceed)
	out.Id = cloneInt32Pointer(in.Id)
	out.Reward = cloneBoolPointer(in.Reward)
	out.Star = cloneInt32Pointer(in.Star)
	return out
}

func clone_User_common1_Treasure(in *common1.Treasure) *common1.Treasure {
	if in == nil {
		return nil
	}
	out := &common1.Treasure{}
	out.Fates = clone_User_Array_common_TreasureFate(in.Fates)
	out.Refine = clone_User_Array_common_TreasureRefine(in.Refine)
	out.Treasures = clone_User_Array_common_Treasure(in.Treasures)
	return out
}

func clone_User_common_Treasure(in *common.Treasure) *common.Treasure {
	if in == nil {
		return nil
	}
	out := &common.Treasure{}
	out.AdvanceLevel = cloneUint32Pointer(in.AdvanceLevel)
	out.Id = cloneInt32Pointer(in.Id)
	out.IsAwake = cloneBoolPointer(in.IsAwake)
	out.Power = cloneUint32Pointer(in.Power)
	out.StarLevel = cloneUint32Pointer(in.StarLevel)
	out.StarTrainPercent = cloneUint32Pointer(in.StarTrainPercent)
	return out
}

func clone_User_common_TreasureFate(in *common.TreasureFate) *common.TreasureFate {
	if in == nil {
		return nil
	}
	out := &common.TreasureFate{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	out.Power = cloneUint32Pointer(in.Power)
	return out
}

func clone_User_common_TreasureFatesInfo(in *common.TreasureFatesInfo) *common.TreasureFatesInfo {
	if in == nil {
		return nil
	}
	out := &common.TreasureFatesInfo{}
	out.PassiveFateSkills = clone_User_Array_common_TreasureFate(in.PassiveFateSkills)
	out.PositiveFateSkills = clone_User_Array_common_TreasureFate(in.PositiveFateSkills)
	out.StartFateSkills = clone_User_Array_common_TreasureFate(in.StartFateSkills)
	return out
}

func clone_User_common_TreasureRefine(in *common.TreasureRefine) *common.TreasureRefine {
	if in == nil {
		return nil
	}
	out := &common.TreasureRefine{}
	out.Id = cloneInt32Pointer(in.Id)
	out.OwnQuality = cloneEnumUserTreasureAffix(in.OwnQuality)
	out.Power = cloneUint32Pointer(in.Power)
	out.RefineType = cloneInt32Pointer(in.RefineType)
	out.Slots = clone_User_Array_common_TreasureRefineSlot(in.Slots)
	return out
}

func clone_User_common_TreasureRefineAttr(in *common.TreasureRefineAttr) *common.TreasureRefineAttr {
	if in == nil {
		return nil
	}
	out := &common.TreasureRefineAttr{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Quality = cloneInt32Pointer(in.Quality)
	out.Value = cloneInt32Pointer(in.Value)
	return out
}

func clone_User_common_TreasureRefineSlot(in *common.TreasureRefineSlot) *common.TreasureRefineSlot {
	if in == nil {
		return nil
	}
	out := &common.TreasureRefineSlot{}
	out.Own = clone_User_common_TreasureRefineAttr(in.Own)
	out.Tmp = clone_User_common_TreasureRefineAttr(in.Tmp)
	return out
}

func clone_User_common1_UrDraw(in *common1.UrDraw) *common1.UrDraw {
	if in == nil {
		return nil
	}
	out := &common1.UrDraw{}
	out.ActId = in.ActId
	out.DrawCount = in.DrawCount
	out.DrawData = clone_User_Map_int32_Int32(in.DrawData)
	out.IsHitServerSoul = in.IsHitServerSoul
	out.ItemCount = clone_User_Map_int32_Uint32(in.ItemCount)
	out.KillTotalCount = in.KillTotalCount
	out.OpenId = in.OpenId
	out.TakeRewards = append(in.TakeRewards[:0:0], in.TakeRewards...)
	out.TenDrawDataPer = clone_User_Map_int32_Int32(in.TenDrawDataPer)
	return out
}

func clone_User_common1_User(in *common1.User) *common1.User {
	if in == nil {
		return nil
	}
	out := &common1.User{}
	out.Base = clone_User_common1_UserBaseDB(in.Base)
	out.Extra = clone_User_common1_UserExtraDB(in.Extra)
	out.Game = clone_User_common1_UserGameDB(in.Game)
	return out
}

func clone_User_common1_UserAvatarFrameSetting(in *common1.UserAvatarFrameSetting) *common1.UserAvatarFrameSetting {
	if in == nil {
		return nil
	}
	out := &common1.UserAvatarFrameSetting{}
	out.AvatarFrame = in.AvatarFrame
	out.DueTime = in.DueTime
	return out
}

func clone_User_common1_UserBaseDB(in *common1.UserBaseDB) *common1.UserBaseDB {
	if in == nil {
		return nil
	}
	out := &common1.UserBaseDB{}
	out.Account = in.Account
	out.ArenaDefencePower = in.ArenaDefencePower
	out.Avatar = in.Avatar
	out.AvatarFrame = in.AvatarFrame
	out.Career = in.Career
	out.Counsellor = clone_User_Map_int32_Int32(in.Counsellor)
	out.CreateTime = in.CreateTime
	out.DailyOnlineTime = in.DailyOnlineTime
	out.Guide = in.Guide
	out.HideVipSystems = append(in.HideVipSystems[:0:0], in.HideVipSystems...)
	out.Id = in.Id
	out.InitDeviceId = in.InitDeviceId
	out.IsRobot = in.IsRobot
	out.LastLogin = in.LastLogin
	out.LastLogout = in.LastLogout
	out.LastMergeServerTime = in.LastMergeServerTime
	out.LastPhyscalRecoveryTime = in.LastPhyscalRecoveryTime
	out.LastSaveTime = in.LastSaveTime
	out.LastToken = in.LastToken
	out.LevelReward = clone_User_Map_int32_Bool(in.LevelReward)
	out.Model = in.Model
	out.Msg = in.Msg
	out.Name = in.Name
	out.OnlineTime = in.OnlineTime
	out.OpID = in.OpID
	out.Power = in.Power
	out.Praise = in.Praise
	out.PraiseRecord = clone_User_Map_uint64_Uint32(in.PraiseRecord)
	out.RankPower = in.RankPower
	out.Resource = clone_User_Map_int32_Uint32(in.Resource)
	out.ServerId = in.ServerId
	out.ShowCommanderId = in.ShowCommanderId
	out.SpecialRewardFlag = in.SpecialRewardFlag
	out.SvipBind = in.SvipBind
	out.Top8RankPower = in.Top8RankPower
	out.TopCounsellorId = in.TopCounsellorId
	out.TotalLoginDays = in.TotalLoginDays
	out.Version = in.Version
	out.YouthReturnExpired = in.YouthReturnExpired
	return out
}

func clone_User_common1_UserBattle(in *common1.UserBattle) *common1.UserBattle {
	if in == nil {
		return nil
	}
	out := &common1.UserBattle{}
	out.Battle = clone_User_common_BattleStartInfo(in.Battle)
	out.BattleFormation = clone_User_common_Formation(in.BattleFormation)
	out.LastBattle = clone_User_common1_Battle(in.LastBattle)
	return out
}

func clone_User_common1_UserExtraDB(in *common1.UserExtraDB) *common1.UserExtraDB {
	if in == nil {
		return nil
	}
	out := &common1.UserExtraDB{}
	out.Friends = clone_User_common1_Friends(in.Friends)
	out.OfflineRewards = clone_User_Map_int32_common_UserOfflineReward(in.OfflineRewards)
	return out
}

func clone_User_common1_UserGameDB(in *common1.UserGameDB) *common1.UserGameDB {
	if in == nil {
		return nil
	}
	out := &common1.UserGameDB{}
	out.Activity = clone_User_common1_Activity(in.Activity)
	out.Album = clone_User_common1_Album(in.Album)
	out.Arena = clone_User_common1_PlayerArena(in.Arena)
	out.Assist = clone_User_common1_Assist(in.Assist)
	out.AttributeCoefficient = in.AttributeCoefficient
	out.Auc = clone_User_common1_PlayerAuc(in.Auc)
	out.Bag = clone_User_common1_Bag(in.Bag)
	out.Battle = clone_User_common1_UserBattle(in.Battle)
	out.Bazaar = clone_User_common1_Bazaar(in.Bazaar)
	out.BeastGroup = clone_User_common1_BeastGroup(in.BeastGroup)
	out.Biography = clone_User_common1_Biography(in.Biography)
	out.CashShop = clone_User_common1_CashShop(in.CashShop)
	out.Chat = clone_User_common1_Chat(in.Chat)
	out.Checkin = clone_User_common1_Checkin(in.Checkin)
	out.Chibi = clone_User_common1_Chibi(in.Chibi)
	out.ClientEcho = in.ClientEcho
	out.Commander = clone_User_common1_CommanderData(in.Commander)
	out.CommanderBattle = clone_User_common1_CommanderBattle(in.CommanderBattle)
	out.CommanderDB = clone_User_Map_int32_common1_Commander(in.CommanderDB)
	out.CounsellorGroup = clone_User_common1_CounsellorGroup(in.CounsellorGroup)
	out.DailyBoss = clone_User_common_DailyBoss(in.DailyBoss)
	out.DailyCoin = clone_User_common1_DailyCoin(in.DailyCoin)
	out.DailyExp = clone_User_common1_DailyExp(in.DailyExp)
	out.DailyPhysical = clone_User_common1_DailyPhysical(in.DailyPhysical)
	out.Drama = clone_User_common1_Drama(in.Drama)
	out.Draw = clone_User_common1_Draw(in.Draw)
	out.Dungeon = clone_User_common1_Dungeon(in.Dungeon)
	out.DyPeak = clone_User_common1_PlayerDyPeak(in.DyPeak)
	out.Expedition = clone_User_common1_Expedition(in.Expedition)
	out.FirstInfo = clone_User_common_FirstInfo(in.FirstInfo)
	out.FormationDB = clone_User_Map_int32_common_Formation(in.FormationDB)
	out.FormationGroup = clone_User_common1_FormationGroup(in.FormationGroup)
	out.Gift = clone_User_common1_DynamicGift(in.Gift)
	out.GiftScore = clone_User_Map_int32_Uint32(in.GiftScore)
	out.GuideTrigger = append(in.GuideTrigger[:0:0], in.GuideTrigger...)
	out.Guild = clone_User_common1_UserGuild(in.Guild)
	out.GuildRoll = clone_User_common1_PlayerGuildRoll(in.GuildRoll)
	out.Gvg = clone_User_common1_PlayerGvg(in.Gvg)
	out.Handbook = clone_User_common1_HandBook(in.Handbook)
	out.History = clone_User_common1_History(in.History)
	out.ItemGift = clone_User_common1_ItemGift(in.ItemGift)
	out.Ladder = clone_User_common1_Ladder(in.Ladder)
	out.LastSendBulletTime = clone_User_Map_int32_Int64(in.LastSendBulletTime)
	out.LmPeak = clone_User_common1_PlayerLmPeak(in.LmPeak)
	out.LogCacheDate = in.LogCacheDate
	out.MailDB = clone_User_common1_UserMail(in.MailDB)
	out.MailDemand = clone_User_Map_int32_Int64(in.MailDemand)
	out.Market = clone_User_common1_Market(in.Market)
	out.Mission = clone_User_common1_Mission(in.Mission)
	out.Mount = clone_User_common1_MountGroup(in.Mount)
	out.MountRefine = clone_User_common1_MountRefine(in.MountRefine)
	out.MsgCache = clone_User_common1_MsgCache(in.MsgCache)
	out.NavalBattle = clone_User_common1_NavalBattle(in.NavalBattle)
	out.OBSOLETETower = clone_User_common1_OBSOLETE_Tower(in.OBSOLETETower)
	out.OnlyEquip = clone_User_common1_OnlyEquipGroup(in.OnlyEquip)
	out.Overlord = clone_User_common1_PlayerOverlord(in.Overlord)
	out.Peak = clone_User_common1_PlayerPeak(in.Peak)
	out.PlaceFinish = clone_User_common1_PlaceFinish(in.PlaceFinish)
	out.Privilege = clone_User_common1_Privilege(in.Privilege)
	out.PushMsgCache = clone_User_Array_common1_MsgCache(in.PushMsgCache)
	out.Qiecuo = clone_User_common1_PlayerQieCuo(in.Qiecuo)
	out.Rank = clone_User_common1_UserRank(in.Rank)
	out.Rebate = clone_User_common_Rebate(in.Rebate)
	out.Recharge = clone_User_common1_Recharge(in.Recharge)
	out.RechargeGift = clone_User_common1_RechargeGift(in.RechargeGift)
	out.Season = clone_User_common1_Season(in.Season)
	out.Setting = clone_User_common1_UserSetting(in.Setting)
	out.Share = clone_User_common1_Share(in.Share)
	out.Slay = clone_User_common1_Slay(in.Slay)
	out.Soldier = clone_User_common1_Soldier(in.Soldier)
	out.SpecialBuyGiftRecord = clone_User_common1_SpecialBuyGiftRecord(in.SpecialBuyGiftRecord)
	out.Stats = clone_User_common1_Stats(in.Stats)
	out.StrMansion = clone_User_common1_StrMansion(in.StrMansion)
	out.SystemOpenData = clone_User_common1_SystemOpenData(in.SystemOpenData)
	out.Task = clone_User_common1_Task(in.Task)
	out.Tower = clone_User_common1_Tower(in.Tower)
	out.Train = clone_User_common1_Train(in.Train)
	out.Treasure = clone_User_common1_Treasure(in.Treasure)
	out.Trigger = in.Trigger
	out.UsedFunction = clone_User_Map_int32_Bool(in.UsedFunction)
	out.Vip = clone_User_common1_Vip(in.Vip)
	out.WarSoul = clone_User_common1_WarSoul(in.WarSoul)
	out.Web = clone_User_common1_UserWeb(in.Web)
	out.Won = clone_User_common1_PlayerWon(in.Won)
	out.WorldBoss = clone_User_common1_WorldBossPlayer(in.WorldBoss)
	out.WuHunGroup = clone_User_common1_WuHunGroup(in.WuHunGroup)
	out.YouthReturns = clone_User_common1_YouthReturns(in.YouthReturns)
	return out
}

func clone_User_common1_UserGuild(in *common1.UserGuild) *common1.UserGuild {
	if in == nil {
		return nil
	}
	out := &common1.UserGuild{}
	out.ActivitySubscribeDueTime = in.ActivitySubscribeDueTime
	out.AutoFormationSiegeTeam = in.AutoFormationSiegeTeam
	out.BuyMoveTimes = in.BuyMoveTimes
	out.CurrentWeekGveId = in.CurrentWeekGveId
	out.DayBuildTimes = in.DayBuildTimes
	out.DayDamageRecord = clone_User_common_GveDamageRecord(in.DayDamageRecord)
	out.ExchangeGoods = clone_User_Map_uint64_common1_GuildGoods(in.ExchangeGoods)
	out.GuildGveBuffs = clone_User_Map_uint32_Uint32(in.GuildGveBuffs)
	out.GveChange = clone_User_common1_GveChange(in.GveChange)
	out.GveHistoryMaxDmg = clone_User_Map_uint32_Uint64(in.GveHistoryMaxDmg)
	out.GveHistoryMaxPower = clone_User_Map_uint32_Uint64(in.GveHistoryMaxPower)
	out.HeroicMail = clone_User_common_Mail(in.HeroicMail)
	out.IsAutoFormationSiege = in.IsAutoFormationSiege
	out.LastDealCrossDayTime = in.LastDealCrossDayTime
	out.LastDealCrossWeekTime = in.LastDealCrossWeekTime
	out.LastExchangeRefresh = in.LastExchangeRefresh
	out.LastGetDayDidHpRewardPos = in.LastGetDayDidHpRewardPos
	out.LastGetSalaryTime = in.LastGetSalaryTime
	out.LastNoticeId = in.LastNoticeId
	out.MoveTimes = in.MoveTimes
	out.NextCrit = in.NextCrit
	out.OccupiedProgressState = clone_User_Map_uint32_Bool(in.OccupiedProgressState)
	out.OverflowTimes = in.OverflowTimes
	out.PubExchangeTimes = in.PubExchangeTimes
	out.ReceivedActivityTag = append(in.ReceivedActivityTag[:0:0], in.ReceivedActivityTag...)
	out.SameGveInteractiveBoxAndTrans = clone_User_Array_common_Coordinate(in.SameGveInteractiveBoxAndTrans)
	out.Skills = clone_User_Map_int32_Uint32(in.Skills)
	out.TaskComplete = clone_User_Map_uint32_Bool(in.TaskComplete)
	out.TodayPubExchangeBaseTimes = in.TodayPubExchangeBaseTimes
	out.TotalDamageRecord = clone_User_common_GveDamageRecord(in.TotalDamageRecord)
	out.TotalOfflineMail = clone_User_common_Mail(in.TotalOfflineMail)
	out.WeekFirstEnterGuild = in.WeekFirstEnterGuild
	return out
}

func clone_User_common1_UserMail(in *common1.UserMail) *common1.UserMail {
	if in == nil {
		return nil
	}
	out := &common1.UserMail{}
	out.HasGetInitMail = in.HasGetInitMail
	out.LastMailId = in.LastMailId
	out.Mails = clone_User_Map_uint64_common_Mail(in.Mails)
	return out
}

func clone_User_common_UserOfflineReward(in *common.UserOfflineReward) *common.UserOfflineReward {
	if in == nil {
		return nil
	}
	out := &common.UserOfflineReward{}
	out.Rewards = clone_User_Array_common_OfflineReward(in.Rewards)
	return out
}

func clone_User_common1_UserRank(in *common1.UserRank) *common1.UserRank {
	if in == nil {
		return nil
	}
	out := &common1.UserRank{}
	out.Rewards = clone_User_Array_common_PlayerRankReward(in.Rewards)
	return out
}

func clone_User_common1_UserSetting(in *common1.UserSetting) *common1.UserSetting {
	if in == nil {
		return nil
	}
	out := &common1.UserSetting{}
	out.AvatarFrameSettings = clone_User_Map_int32_common1_UserAvatarFrameSetting(in.AvatarFrameSettings)
	out.AvatarFrames = append(in.AvatarFrames[:0:0], in.AvatarFrames...)
	out.Avatars = append(in.Avatars[:0:0], in.Avatars...)
	out.Models = append(in.Models[:0:0], in.Models...)
	out.RenameTimes = in.RenameTimes
	out.UserSwitch = clone_User_Map_int32_Bool(in.UserSwitch)
	return out
}

func clone_User_common1_UserWeb(in *common1.UserWeb) *common1.UserWeb {
	if in == nil {
		return nil
	}
	out := &common1.UserWeb{}
	out.Questionnaires = clone_User_Map_uint64_Bool(in.Questionnaires)
	out.UsedCode = clone_User_Map_string_Bool(in.UsedCode)
	return out
}

func clone_User_common1_Vip(in *common1.Vip) *common1.Vip {
	if in == nil {
		return nil
	}
	out := &common1.Vip{}
	out.GiftBuyRecord = append(in.GiftBuyRecord[:0:0], in.GiftBuyRecord...)
	return out
}

func clone_User_common1_VipCashGift(in *common1.VipCashGift) *common1.VipCashGift {
	if in == nil {
		return nil
	}
	out := &common1.VipCashGift{}
	out.ActID = in.ActID
	out.GenVipLevel = in.GenVipLevel
	out.Items = clone_User_Array_common1_CashGiftItem(in.Items)
	out.OpenId = in.OpenId
	return out
}

func clone_User_common1_WarSoul(in *common1.WarSoul) *common1.WarSoul {
	if in == nil {
		return nil
	}
	out := &common1.WarSoul{}
	out.CurId = in.CurId
	out.Schedules = clone_User_Map_int32_common_WarSoulSchedule(in.Schedules)
	return out
}

func clone_User_common_WarSoulSchedule(in *common.WarSoulSchedule) *common.WarSoulSchedule {
	if in == nil {
		return nil
	}
	out := &common.WarSoulSchedule{}
	out.Id = cloneInt32Pointer(in.Id)
	out.Stages = append(in.Stages[:0:0], in.Stages...)
	return out
}

func clone_User_common_WonBattleLog(in *common.WonBattleLog) *common.WonBattleLog {
	if in == nil {
		return nil
	}
	out := &common.WonBattleLog{}
	out.AttackUid = cloneUint64Pointer(in.AttackUid)
	out.BattleId = cloneUint64Pointer(in.BattleId)
	out.BattleTime = cloneInt64Pointer(in.BattleTime)
	out.Dhp = cloneUint64Pointer(in.Dhp)
	out.GridCoor = clone_User_common_Coordinate(in.GridCoor)
	out.IsPvE = cloneBoolPointer(in.IsPvE)
	out.Players = clone_User_Array_common_PlayerFt(in.Players)
	out.Rewards = cloneUint32Pointer(in.Rewards)
	out.WinUid = cloneUint64Pointer(in.WinUid)
	return out
}

func clone_User_common1_WonWorship(in *common1.WonWorship) *common1.WonWorship {
	if in == nil {
		return nil
	}
	out := &common1.WonWorship{}
	out.MapIds = append(in.MapIds[:0:0], in.MapIds...)
	return out
}

func clone_User_common1_WorldBossHisInfo(in *common1.WorldBossHisInfo) *common1.WorldBossHisInfo {
	if in == nil {
		return nil
	}
	out := &common1.WorldBossHisInfo{}
	out.CurCausedHp = in.CurCausedHp
	out.CurUsedBeast = append(in.CurUsedBeast[:0:0], in.CurUsedBeast...)
	out.CurUsedCommanders = append(in.CurUsedCommanders[:0:0], in.CurUsedCommanders...)
	out.CurUsedCounsellor = append(in.CurUsedCounsellor[:0:0], in.CurUsedCounsellor...)
	out.MaxHpCurBoss = in.MaxHpCurBoss
	out.MaxHpPower = in.MaxHpPower
	out.MaxHpUsedBeast = append(in.MaxHpUsedBeast[:0:0], in.MaxHpUsedBeast...)
	out.MaxHpUsedCommanders = append(in.MaxHpUsedCommanders[:0:0], in.MaxHpUsedCommanders...)
	out.MaxHpUsedCounsellor = append(in.MaxHpUsedCounsellor[:0:0], in.MaxHpUsedCounsellor...)
	return out
}

func clone_User_common1_WorldBossPlayer(in *common1.WorldBossPlayer) *common1.WorldBossPlayer {
	if in == nil {
		return nil
	}
	out := &common1.WorldBossPlayer{}
	out.BestRank = in.BestRank
	out.ChallengeTimes = in.ChallengeTimes
	out.ChallengeTimesReward = append(in.ChallengeTimesReward[:0:0], in.ChallengeTimesReward...)
	out.KilledBossReward = append(in.KilledBossReward[:0:0], in.KilledBossReward...)
	out.RewardIndex = in.RewardIndex
	out.SweepInfo = clone_User_Map_int32_common1_WorldBossHisInfo(in.SweepInfo)
	out.TotalCaseHp = in.TotalCaseHp
	out.TotalRealDmg = in.TotalRealDmg
	out.UsedBeast = append(in.UsedBeast[:0:0], in.UsedBeast...)
	out.UsedCommanders = append(in.UsedCommanders[:0:0], in.UsedCommanders...)
	out.UsedCounsellor = append(in.UsedCounsellor[:0:0], in.UsedCounsellor...)
	return out
}

func clone_User_common_WorldMap(in *common.WorldMap) *common.WorldMap {
	if in == nil {
		return nil
	}
	out := &common.WorldMap{}
	out.Index = cloneInt32Pointer(in.Index)
	out.ResId = cloneInt32Pointer(in.ResId)
	return out
}

func clone_User_common_WuHun(in *common.WuHun) *common.WuHun {
	if in == nil {
		return nil
	}
	out := &common.WuHun{}
	out.Count = cloneUint32Pointer(in.Count)
	out.CurExp = cloneUint32Pointer(in.CurExp)
	out.Id = cloneInt32Pointer(in.Id)
	out.Level = cloneUint32Pointer(in.Level)
	out.Power = cloneUint32Pointer(in.Power)
	out.Star = cloneUint32Pointer(in.Star)
	out.UuId = cloneUint32Pointer(in.UuId)
	return out
}

func clone_User_common1_WuHunAstrolabe(in *common1.WuHunAstrolabe) *common1.WuHunAstrolabe {
	if in == nil {
		return nil
	}
	out := &common1.WuHunAstrolabe{}
	out.ActId = in.ActId
	out.BuyTimes = in.BuyTimes
	out.DigitalMatrix = clone_User_common1_DigitalMatrix(in.DigitalMatrix)
	out.NumberTreasureChest = clone_User_common1_NumberTreasureChest(in.NumberTreasureChest)
	out.OpenId = in.OpenId
	out.ScoreProgress = append(in.ScoreProgress[:0:0], in.ScoreProgress...)
	return out
}

func clone_User_common1_WuHunGroup(in *common1.WuHunGroup) *common1.WuHunGroup {
	if in == nil {
		return nil
	}
	out := &common1.WuHunGroup{}
	out.MaterialWuHuns = clone_User_Array_common_WuHun(in.MaterialWuHuns)
	out.OwnWuHuns = clone_User_Map_uint32_common_WuHun(in.OwnWuHuns)
	out.UuId = in.UuId
	return out
}

func clone_User_common1_YouthReturn(in *common1.YouthReturn) *common1.YouthReturn {
	if in == nil {
		return nil
	}
	out := &common1.YouthReturn{}
	out.BeginTimes = in.BeginTimes
	out.DiscountCard = in.DiscountCard
	out.Id = in.Id
	out.Items = clone_User_Array_common_YouthReturnGiftItem(in.Items)
	out.LastAddLoginTime = in.LastAddLoginTime
	out.LoginTimes = in.LoginTimes
	out.SignIds = append(in.SignIds[:0:0], in.SignIds...)
	out.SpecialGift = in.SpecialGift
	out.SubId = in.SubId
	return out
}

func clone_User_common_YouthReturnGiftItem(in *common.YouthReturnGiftItem) *common.YouthReturnGiftItem {
	if in == nil {
		return nil
	}
	out := &common.YouthReturnGiftItem{}
	out.BuyTimes = cloneInt32Pointer(in.BuyTimes)
	out.Id = cloneInt32Pointer(in.Id)
	return out
}

func clone_User_common1_YouthReturns(in *common1.YouthReturns) *common1.YouthReturns {
	if in == nil {
		return nil
	}
	out := &common1.YouthReturns{}
	out.YouthReturn = clone_User_Array_common1_YouthReturn(in.YouthReturn)
	return out
}

func clone_User_common1_ZmSnExplore(in *common1.ZmSnExplore) *common1.ZmSnExplore {
	if in == nil {
		return nil
	}
	out := &common1.ZmSnExplore{}
	out.Info = clone_User_Map_int32_common1_ZmSnExploreInfo(in.Info)
	return out
}

func clone_User_common1_ZmSnExploreInfo(in *common1.ZmSnExploreInfo) *common1.ZmSnExploreInfo {
	if in == nil {
		return nil
	}
	out := &common1.ZmSnExploreInfo{}
	out.CurRewardIndex = in.CurRewardIndex
	out.Rewards = clone_User_Array_common1_ExploreItem(in.Rewards)
	return out
}

func cloneBoolPointer(m *bool) *bool {
	if m == nil {
		return nil
	}
	p := new(bool)
	*p = *m
	return p
}

func cloneEnumUserAwakeStatus(m *common.AwakeStatus) *common.AwakeStatus {
	if m == nil {
		return nil
	}
	p := new(common.AwakeStatus)
	*p = *m
	return p
}

func cloneEnumUserBattleResultErrorCode(m *common.BattleResultErrorCode) *common.BattleResultErrorCode {
	if m == nil {
		return nil
	}
	p := new(common.BattleResultErrorCode)
	*p = *m
	return p
}

func cloneEnumUserChatCellType(m *common.ChatCellType) *common.ChatCellType {
	if m == nil {
		return nil
	}
	p := new(common.ChatCellType)
	*p = *m
	return p
}

func cloneEnumUserFormationType(m *common.FormationType) *common.FormationType {
	if m == nil {
		return nil
	}
	p := new(common.FormationType)
	*p = *m
	return p
}

func cloneEnumUserHappyFlopStatus(m *common.HappyFlopStatus) *common.HappyFlopStatus {
	if m == nil {
		return nil
	}
	p := new(common.HappyFlopStatus)
	*p = *m
	return p
}

func cloneEnumUserItemShow(m *common.ItemShow) *common.ItemShow {
	if m == nil {
		return nil
	}
	p := new(common.ItemShow)
	*p = *m
	return p
}

func cloneEnumUserMissionStatus(m *common.MissionStatus) *common.MissionStatus {
	if m == nil {
		return nil
	}
	p := new(common.MissionStatus)
	*p = *m
	return p
}

func cloneEnumUserNavalBattleUniteFt_State(m *common.NavalBattleUniteFt_State) *common.NavalBattleUniteFt_State {
	if m == nil {
		return nil
	}
	p := new(common.NavalBattleUniteFt_State)
	*p = *m
	return p
}

func cloneEnumUserNavalStage_NavalStageState(m *common.NavalStage_NavalStageState) *common.NavalStage_NavalStageState {
	if m == nil {
		return nil
	}
	p := new(common.NavalStage_NavalStageState)
	*p = *m
	return p
}

func cloneEnumUserRankType(m *common.RankType) *common.RankType {
	if m == nil {
		return nil
	}
	p := new(common.RankType)
	*p = *m
	return p
}

func cloneEnumUserSlayFightReportType(m *common.SlayFightReportType) *common.SlayFightReportType {
	if m == nil {
		return nil
	}
	p := new(common.SlayFightReportType)
	*p = *m
	return p
}

func cloneEnumUserTreasureAffix(m *common.TreasureAffix) *common.TreasureAffix {
	if m == nil {
		return nil
	}
	p := new(common.TreasureAffix)
	*p = *m
	return p
}

func cloneFloat32Pointer(m *float32) *float32 {
	if m == nil {
		return nil
	}
	p := new(float32)
	*p = *m
	return p
}

func cloneFloat64Pointer(m *float64) *float64 {
	if m == nil {
		return nil
	}
	p := new(float64)
	*p = *m
	return p
}

func cloneInt32Pointer(m *int32) *int32 {
	if m == nil {
		return nil
	}
	p := new(int32)
	*p = *m
	return p
}

func cloneInt64Pointer(m *int64) *int64 {
	if m == nil {
		return nil
	}
	p := new(int64)
	*p = *m
	return p
}

func cloneStringPointer(m *string) *string {
	if m == nil {
		return nil
	}
	p := new(string)
	*p = *m
	return p
}

func cloneUint32Pointer(m *uint32) *uint32 {
	if m == nil {
		return nil
	}
	p := new(uint32)
	*p = *m
	return p
}

func cloneUint64Pointer(m *uint64) *uint64 {
	if m == nil {
		return nil
	}
	p := new(uint64)
	*p = *m
	return p
}

func clone_DrawOnlyEquipBack_Map_int32_String(in map[int32]string) map[int32]string {
	if in == nil {
		return nil
	}
	a := make(map[int32]string, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_DrawOnlyEquipBack_Map_int32_example_DrawOnlyEquipBack_DrawData(in map[int32]*DrawOnlyEquipBack_DrawData) map[int32]*DrawOnlyEquipBack_DrawData {
	if in == nil {
		return nil
	}
	a := make(map[int32]*DrawOnlyEquipBack_DrawData, len(in))
	for k, v := range in {
		a[k] = clone_DrawOnlyEquipBack_example_DrawOnlyEquipBack_DrawData(v)
	}
	return a
}

func clone_DrawOnlyEquipBack_Map_int32_example_StudentMc(in map[int32]*StudentMc) map[int32]*StudentMc {
	if in == nil {
		return nil
	}
	a := make(map[int32]*StudentMc, len(in))
	for k, v := range in {
		a[k] = clone_DrawOnlyEquipBack_example_StudentMc(v)
	}
	return a
}

func clone_DrawOnlyEquipBack_Map_string_Int32(in map[string]int32) map[string]int32 {
	if in == nil {
		return nil
	}
	a := make(map[string]int32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Array_common1_ActWrapper(in []*common1.ActWrapper) []*common1.ActWrapper {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActWrapper, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActWrapper(v)
	}
	return a
}

func clone_User_Array_common1_ActivityCommon(in []*common1.ActivityCommon) []*common1.ActivityCommon {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityCommon, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityCommon(v)
	}
	return a
}

func clone_User_Array_common1_ActivityExtraItem(in []*common1.ActivityExtraItem) []*common1.ActivityExtraItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityExtraItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityExtraItem(v)
	}
	return a
}

func clone_User_Array_common1_ActivityRechargeGift(in []*common1.ActivityRechargeGift) []*common1.ActivityRechargeGift {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityRechargeGift, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityRechargeGift(v)
	}
	return a
}

func clone_User_Array_common1_ActivityRechargeGiftItem(in []*common1.ActivityRechargeGiftItem) []*common1.ActivityRechargeGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityRechargeGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityRechargeGiftItem(v)
	}
	return a
}

func clone_User_Array_common1_ActivityTask(in []*common1.ActivityTask) []*common1.ActivityTask {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityTask, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityTask(v)
	}
	return a
}

func clone_User_Array_common1_ActivityTotalCommander(in []*common1.ActivityTotalCommander) []*common1.ActivityTotalCommander {
	if in == nil {
		return nil
	}
	a := make([]*common1.ActivityTotalCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ActivityTotalCommander(v)
	}
	return a
}

func clone_User_Array_common1_AlbumItem(in []*common1.AlbumItem) []*common1.AlbumItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.AlbumItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_AlbumItem(v)
	}
	return a
}

func clone_User_Array_common1_AlbumQua(in []*common1.AlbumQua) []*common1.AlbumQua {
	if in == nil {
		return nil
	}
	a := make([]*common1.AlbumQua, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_AlbumQua(v)
	}
	return a
}

func clone_User_Array_common1_AssistReward(in []*common1.AssistReward) []*common1.AssistReward {
	if in == nil {
		return nil
	}
	a := make([]*common1.AssistReward, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_AssistReward(v)
	}
	return a
}

func clone_User_Array_common1_BanChannel(in []*common1.BanChannel) []*common1.BanChannel {
	if in == nil {
		return nil
	}
	a := make([]*common1.BanChannel, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BanChannel(v)
	}
	return a
}

func clone_User_Array_common1_BuyDrawInfo(in []*common1.BuyDrawInfo) []*common1.BuyDrawInfo {
	if in == nil {
		return nil
	}
	a := make([]*common1.BuyDrawInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BuyDrawInfo(v)
	}
	return a
}

func clone_User_Array_common1_CashGift(in []*common1.CashGift) []*common1.CashGift {
	if in == nil {
		return nil
	}
	a := make([]*common1.CashGift, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CashGift(v)
	}
	return a
}

func clone_User_Array_common1_CashGiftItem(in []*common1.CashGiftItem) []*common1.CashGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.CashGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CashGiftItem(v)
	}
	return a
}

func clone_User_Array_common1_ChibiFight(in []*common1.ChibiFight) []*common1.ChibiFight {
	if in == nil {
		return nil
	}
	a := make([]*common1.ChibiFight, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ChibiFight(v)
	}
	return a
}

func clone_User_Array_common1_CommanderBattleData(in []*common1.CommanderBattleData) []*common1.CommanderBattleData {
	if in == nil {
		return nil
	}
	a := make([]*common1.CommanderBattleData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CommanderBattleData(v)
	}
	return a
}

func clone_User_Array_common1_CommanderVisit(in []*common1.CommanderVisit) []*common1.CommanderVisit {
	if in == nil {
		return nil
	}
	a := make([]*common1.CommanderVisit, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CommanderVisit(v)
	}
	return a
}

func clone_User_Array_common1_CommonTowerFundAct(in []*common1.CommonTowerFundAct) []*common1.CommonTowerFundAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.CommonTowerFundAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CommonTowerFundAct(v)
	}
	return a
}

func clone_User_Array_common1_CommonTowerFundData(in []*common1.CommonTowerFundData) []*common1.CommonTowerFundData {
	if in == nil {
		return nil
	}
	a := make([]*common1.CommonTowerFundData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CommonTowerFundData(v)
	}
	return a
}

func clone_User_Array_common1_DailyDiscountAct(in []*common1.DailyDiscountAct) []*common1.DailyDiscountAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.DailyDiscountAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DailyDiscountAct(v)
	}
	return a
}

func clone_User_Array_common1_DailyDiscountItem(in []*common1.DailyDiscountItem) []*common1.DailyDiscountItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.DailyDiscountItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DailyDiscountItem(v)
	}
	return a
}

func clone_User_Array_common1_DailyRechargeAct(in []*common1.DailyRechargeAct) []*common1.DailyRechargeAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.DailyRechargeAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DailyRechargeAct(v)
	}
	return a
}

func clone_User_Array_common1_DailyRechargeItem(in []*common1.DailyRechargeItem) []*common1.DailyRechargeItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.DailyRechargeItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DailyRechargeItem(v)
	}
	return a
}

func clone_User_Array_common1_DramaBattle(in []*common1.DramaBattle) []*common1.DramaBattle {
	if in == nil {
		return nil
	}
	a := make([]*common1.DramaBattle, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DramaBattle(v)
	}
	return a
}

func clone_User_Array_common1_DynamicGiftItem(in []*common1.DynamicGiftItem) []*common1.DynamicGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.DynamicGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DynamicGiftItem(v)
	}
	return a
}

func clone_User_Array_common1_DynamicGiftRangeItem(in []*common1.DynamicGiftRangeItem) []*common1.DynamicGiftRangeItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.DynamicGiftRangeItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DynamicGiftRangeItem(v)
	}
	return a
}

func clone_User_Array_common1_ExploreItem(in []*common1.ExploreItem) []*common1.ExploreItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.ExploreItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ExploreItem(v)
	}
	return a
}

func clone_User_Array_common1_FoundationItem(in []*common1.FoundationItem) []*common1.FoundationItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.FoundationItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_FoundationItem(v)
	}
	return a
}

func clone_User_Array_common1_GiftRainAct(in []*common1.GiftRainAct) []*common1.GiftRainAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.GiftRainAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_GiftRainAct(v)
	}
	return a
}

func clone_User_Array_common1_GoldenDragon(in []*common1.GoldenDragon) []*common1.GoldenDragon {
	if in == nil {
		return nil
	}
	a := make([]*common1.GoldenDragon, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_GoldenDragon(v)
	}
	return a
}

func clone_User_Array_common1_HistoryChapter(in []*common1.HistoryChapter) []*common1.HistoryChapter {
	if in == nil {
		return nil
	}
	a := make([]*common1.HistoryChapter, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_HistoryChapter(v)
	}
	return a
}

func clone_User_Array_common1_ItemGiftScore(in []*common1.ItemGiftScore) []*common1.ItemGiftScore {
	if in == nil {
		return nil
	}
	a := make([]*common1.ItemGiftScore, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ItemGiftScore(v)
	}
	return a
}

func clone_User_Array_common1_ItemGiftScoreItem(in []*common1.ItemGiftScoreItem) []*common1.ItemGiftScoreItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.ItemGiftScoreItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ItemGiftScoreItem(v)
	}
	return a
}

func clone_User_Array_common1_LuckDrawAct(in []*common1.LuckDrawAct) []*common1.LuckDrawAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.LuckDrawAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_LuckDrawAct(v)
	}
	return a
}

func clone_User_Array_common1_MonthCard(in []*common1.MonthCard) []*common1.MonthCard {
	if in == nil {
		return nil
	}
	a := make([]*common1.MonthCard, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_MonthCard(v)
	}
	return a
}

func clone_User_Array_common1_MonthCardsAct(in []*common1.MonthCardsAct) []*common1.MonthCardsAct {
	if in == nil {
		return nil
	}
	a := make([]*common1.MonthCardsAct, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_MonthCardsAct(v)
	}
	return a
}

func clone_User_Array_common1_MsgCache(in []*common1.MsgCache) []*common1.MsgCache {
	if in == nil {
		return nil
	}
	a := make([]*common1.MsgCache, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_MsgCache(v)
	}
	return a
}

func clone_User_Array_common1_NavalBattleAssistPool(in []*common1.NavalBattleAssistPool) []*common1.NavalBattleAssistPool {
	if in == nil {
		return nil
	}
	a := make([]*common1.NavalBattleAssistPool, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_NavalBattleAssistPool(v)
	}
	return a
}

func clone_User_Array_common1_PlaceFinishTask(in []*common1.PlaceFinishTask) []*common1.PlaceFinishTask {
	if in == nil {
		return nil
	}
	a := make([]*common1.PlaceFinishTask, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_PlaceFinishTask(v)
	}
	return a
}

func clone_User_Array_common1_PlayerCheatData(in []*common1.PlayerCheatData) []*common1.PlayerCheatData {
	if in == nil {
		return nil
	}
	a := make([]*common1.PlayerCheatData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_PlayerCheatData(v)
	}
	return a
}

func clone_User_Array_common1_PrivateMessage(in []*common1.PrivateMessage) []*common1.PrivateMessage {
	if in == nil {
		return nil
	}
	a := make([]*common1.PrivateMessage, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_PrivateMessage(v)
	}
	return a
}

func clone_User_Array_common1_RechargeGiftItem(in []*common1.RechargeGiftItem) []*common1.RechargeGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.RechargeGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_RechargeGiftItem(v)
	}
	return a
}

func clone_User_Array_common1_ShareData(in []*common1.ShareData) []*common1.ShareData {
	if in == nil {
		return nil
	}
	a := make([]*common1.ShareData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ShareData(v)
	}
	return a
}

func clone_User_Array_common1_SlayAction(in []*common1.SlayAction) []*common1.SlayAction {
	if in == nil {
		return nil
	}
	a := make([]*common1.SlayAction, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SlayAction(v)
	}
	return a
}

func clone_User_Array_common1_SlayCity(in []*common1.SlayCity) []*common1.SlayCity {
	if in == nil {
		return nil
	}
	a := make([]*common1.SlayCity, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SlayCity(v)
	}
	return a
}

func clone_User_Array_common1_SlayCommander(in []*common1.SlayCommander) []*common1.SlayCommander {
	if in == nil {
		return nil
	}
	a := make([]*common1.SlayCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SlayCommander(v)
	}
	return a
}

func clone_User_Array_common1_SoldierClassTech(in []*common1.SoldierClassTech) []*common1.SoldierClassTech {
	if in == nil {
		return nil
	}
	a := make([]*common1.SoldierClassTech, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SoldierClassTech(v)
	}
	return a
}

func clone_User_Array_common1_SoulBox(in []*common1.SoulBox) []*common1.SoulBox {
	if in == nil {
		return nil
	}
	a := make([]*common1.SoulBox, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SoulBox(v)
	}
	return a
}

func clone_User_Array_common1_SpecialBuyGiftItem(in []*common1.SpecialBuyGiftItem) []*common1.SpecialBuyGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common1.SpecialBuyGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SpecialBuyGiftItem(v)
	}
	return a
}

func clone_User_Array_common1_StarActivity(in []*common1.StarActivity) []*common1.StarActivity {
	if in == nil {
		return nil
	}
	a := make([]*common1.StarActivity, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_StarActivity(v)
	}
	return a
}

func clone_User_Array_common1_Subscribe(in []*common1.Subscribe) []*common1.Subscribe {
	if in == nil {
		return nil
	}
	a := make([]*common1.Subscribe, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_Subscribe(v)
	}
	return a
}

func clone_User_Array_common1_TowerData(in []*common1.TowerData) []*common1.TowerData {
	if in == nil {
		return nil
	}
	a := make([]*common1.TowerData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_TowerData(v)
	}
	return a
}

func clone_User_Array_common1_TowerFundData(in []*common1.TowerFundData) []*common1.TowerFundData {
	if in == nil {
		return nil
	}
	a := make([]*common1.TowerFundData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_TowerFundData(v)
	}
	return a
}

func clone_User_Array_common1_TowerHangUp(in []*common1.TowerHangUp) []*common1.TowerHangUp {
	if in == nil {
		return nil
	}
	a := make([]*common1.TowerHangUp, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_TowerHangUp(v)
	}
	return a
}

func clone_User_Array_common1_VipCashGift(in []*common1.VipCashGift) []*common1.VipCashGift {
	if in == nil {
		return nil
	}
	a := make([]*common1.VipCashGift, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_VipCashGift(v)
	}
	return a
}

func clone_User_Array_common1_WuHunAstrolabe(in []*common1.WuHunAstrolabe) []*common1.WuHunAstrolabe {
	if in == nil {
		return nil
	}
	a := make([]*common1.WuHunAstrolabe, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_WuHunAstrolabe(v)
	}
	return a
}

func clone_User_Array_common1_YouthReturn(in []*common1.YouthReturn) []*common1.YouthReturn {
	if in == nil {
		return nil
	}
	a := make([]*common1.YouthReturn, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_YouthReturn(v)
	}
	return a
}

func clone_User_Array_common_AlbumItem(in []*common.AlbumItem) []*common.AlbumItem {
	if in == nil {
		return nil
	}
	a := make([]*common.AlbumItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AlbumItem(v)
	}
	return a
}

func clone_User_Array_common_AlbumQua(in []*common.AlbumQua) []*common.AlbumQua {
	if in == nil {
		return nil
	}
	a := make([]*common.AlbumQua, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AlbumQua(v)
	}
	return a
}

func clone_User_Array_common_ArenaBattleLog(in []*common.ArenaBattleLog) []*common.ArenaBattleLog {
	if in == nil {
		return nil
	}
	a := make([]*common.ArenaBattleLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ArenaBattleLog(v)
	}
	return a
}

func clone_User_Array_common_ArenaBattleLogPlayerInfo(in []*common.ArenaBattleLogPlayerInfo) []*common.ArenaBattleLogPlayerInfo {
	if in == nil {
		return nil
	}
	a := make([]*common.ArenaBattleLogPlayerInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ArenaBattleLogPlayerInfo(v)
	}
	return a
}

func clone_User_Array_common_AssistCommander(in []*common.AssistCommander) []*common.AssistCommander {
	if in == nil {
		return nil
	}
	a := make([]*common.AssistCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AssistCommander(v)
	}
	return a
}

func clone_User_Array_common_AssistLog(in []*common.AssistLog) []*common.AssistLog {
	if in == nil {
		return nil
	}
	a := make([]*common.AssistLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AssistLog(v)
	}
	return a
}

func clone_User_Array_common_AssistMount(in []*common.AssistMount) []*common.AssistMount {
	if in == nil {
		return nil
	}
	a := make([]*common.AssistMount, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AssistMount(v)
	}
	return a
}

func clone_User_Array_common_AssistOnlyEquip(in []*common.AssistOnlyEquip) []*common.AssistOnlyEquip {
	if in == nil {
		return nil
	}
	a := make([]*common.AssistOnlyEquip, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AssistOnlyEquip(v)
	}
	return a
}

func clone_User_Array_common_AssistWuHun(in []*common.AssistWuHun) []*common.AssistWuHun {
	if in == nil {
		return nil
	}
	a := make([]*common.AssistWuHun, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AssistWuHun(v)
	}
	return a
}

func clone_User_Array_common_AucRecord(in []*common.AucRecord) []*common.AucRecord {
	if in == nil {
		return nil
	}
	a := make([]*common.AucRecord, len(in))
	for k, v := range in {
		a[k] = clone_User_common_AucRecord(v)
	}
	return a
}

func clone_User_Array_common_BattleAttr(in []*common.BattleAttr) []*common.BattleAttr {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleAttr, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleAttr(v)
	}
	return a
}

func clone_User_Array_common_BattleBeast(in []*common.BattleBeast) []*common.BattleBeast {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleBeast, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleBeast(v)
	}
	return a
}

func clone_User_Array_common_BattleCommander(in []*common.BattleCommander) []*common.BattleCommander {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCommander(v)
	}
	return a
}

func clone_User_Array_common_BattleCommanderKillSoldier(in []*common.BattleCommanderKillSoldier) []*common.BattleCommanderKillSoldier {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCommanderKillSoldier, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCommanderKillSoldier(v)
	}
	return a
}

func clone_User_Array_common_BattleCommanderKillTeam(in []*common.BattleCommanderKillTeam) []*common.BattleCommanderKillTeam {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCommanderKillTeam, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCommanderKillTeam(v)
	}
	return a
}

func clone_User_Array_common_BattleCommanderSkill(in []*common.BattleCommanderSkill) []*common.BattleCommanderSkill {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCommanderSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCommanderSkill(v)
	}
	return a
}

func clone_User_Array_common_BattleCommanderStat(in []*common.BattleCommanderStat) []*common.BattleCommanderStat {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCommanderStat, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCommanderStat(v)
	}
	return a
}

func clone_User_Array_common_BattleCounsellor(in []*common.BattleCounsellor) []*common.BattleCounsellor {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleCounsellor, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleCounsellor(v)
	}
	return a
}

func clone_User_Array_common_BattleFrameData(in []*common.BattleFrameData) []*common.BattleFrameData {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleFrameData, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleFrameData(v)
	}
	return a
}

func clone_User_Array_common_BattleNpcCommander(in []*common.BattleNpcCommander) []*common.BattleNpcCommander {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleNpcCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleNpcCommander(v)
	}
	return a
}

func clone_User_Array_common_BattlePlayerDamage(in []*common.BattlePlayerDamage) []*common.BattlePlayerDamage {
	if in == nil {
		return nil
	}
	a := make([]*common.BattlePlayerDamage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattlePlayerDamage(v)
	}
	return a
}

func clone_User_Array_common_BattlePlayerInfo(in []*common.BattlePlayerInfo) []*common.BattlePlayerInfo {
	if in == nil {
		return nil
	}
	a := make([]*common.BattlePlayerInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattlePlayerInfo(v)
	}
	return a
}

func clone_User_Array_common_BattlePlayerInput(in []*common.BattlePlayerInput) []*common.BattlePlayerInput {
	if in == nil {
		return nil
	}
	a := make([]*common.BattlePlayerInput, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattlePlayerInput(v)
	}
	return a
}

func clone_User_Array_common_BattleSkillDamage(in []*common.BattleSkillDamage) []*common.BattleSkillDamage {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleSkillDamage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleSkillDamage(v)
	}
	return a
}

func clone_User_Array_common_BattleTeamDamage(in []*common.BattleTeamDamage) []*common.BattleTeamDamage {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleTeamDamage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleTeamDamage(v)
	}
	return a
}

func clone_User_Array_common_BattleUnitHp(in []*common.BattleUnitHp) []*common.BattleUnitHp {
	if in == nil {
		return nil
	}
	a := make([]*common.BattleUnitHp, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleUnitHp(v)
	}
	return a
}

func clone_User_Array_common_BazaarItem(in []*common.BazaarItem) []*common.BazaarItem {
	if in == nil {
		return nil
	}
	a := make([]*common.BazaarItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BazaarItem(v)
	}
	return a
}

func clone_User_Array_common_Beast(in []*common.Beast) []*common.Beast {
	if in == nil {
		return nil
	}
	a := make([]*common.Beast, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Beast(v)
	}
	return a
}

func clone_User_Array_common_BiographyArms(in []*common.BiographyArms) []*common.BiographyArms {
	if in == nil {
		return nil
	}
	a := make([]*common.BiographyArms, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BiographyArms(v)
	}
	return a
}

func clone_User_Array_common_BiographyCommander(in []*common.BiographyCommander) []*common.BiographyCommander {
	if in == nil {
		return nil
	}
	a := make([]*common.BiographyCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BiographyCommander(v)
	}
	return a
}

func clone_User_Array_common_CakeFeastSlot(in []*common.CakeFeastSlot) []*common.CakeFeastSlot {
	if in == nil {
		return nil
	}
	a := make([]*common.CakeFeastSlot, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CakeFeastSlot(v)
	}
	return a
}

func clone_User_Array_common_ChatCell(in []*common.ChatCell) []*common.ChatCell {
	if in == nil {
		return nil
	}
	a := make([]*common.ChatCell, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ChatCell(v)
	}
	return a
}

func clone_User_Array_common_Commander(in []*common.Commander) []*common.Commander {
	if in == nil {
		return nil
	}
	a := make([]*common.Commander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Commander(v)
	}
	return a
}

func clone_User_Array_common_CommanderDestiny(in []*common.CommanderDestiny) []*common.CommanderDestiny {
	if in == nil {
		return nil
	}
	a := make([]*common.CommanderDestiny, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderDestiny(v)
	}
	return a
}

func clone_User_Array_common_CommanderEquip(in []*common.CommanderEquip) []*common.CommanderEquip {
	if in == nil {
		return nil
	}
	a := make([]*common.CommanderEquip, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderEquip(v)
	}
	return a
}

func clone_User_Array_common_CommanderMedication(in []*common.CommanderMedication) []*common.CommanderMedication {
	if in == nil {
		return nil
	}
	a := make([]*common.CommanderMedication, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderMedication(v)
	}
	return a
}

func clone_User_Array_common_CommanderPotential(in []*common.CommanderPotential) []*common.CommanderPotential {
	if in == nil {
		return nil
	}
	a := make([]*common.CommanderPotential, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderPotential(v)
	}
	return a
}

func clone_User_Array_common_CommanderSkill(in []*common.CommanderSkill) []*common.CommanderSkill {
	if in == nil {
		return nil
	}
	a := make([]*common.CommanderSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderSkill(v)
	}
	return a
}

func clone_User_Array_common_Coordinate(in []*common.Coordinate) []*common.Coordinate {
	if in == nil {
		return nil
	}
	a := make([]*common.Coordinate, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Coordinate(v)
	}
	return a
}

func clone_User_Array_common_Counsellor(in []*common.Counsellor) []*common.Counsellor {
	if in == nil {
		return nil
	}
	a := make([]*common.Counsellor, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Counsellor(v)
	}
	return a
}

func clone_User_Array_common_CounsellorMagic(in []*common.CounsellorMagic) []*common.CounsellorMagic {
	if in == nil {
		return nil
	}
	a := make([]*common.CounsellorMagic, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CounsellorMagic(v)
	}
	return a
}

func clone_User_Array_common_CounsellorQiMen(in []*common.CounsellorQiMen) []*common.CounsellorQiMen {
	if in == nil {
		return nil
	}
	a := make([]*common.CounsellorQiMen, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CounsellorQiMen(v)
	}
	return a
}

func clone_User_Array_common_DailyBossData(in []*common.DailyBossData) []*common.DailyBossData {
	if in == nil {
		return nil
	}
	a := make([]*common.DailyBossData, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DailyBossData(v)
	}
	return a
}

func clone_User_Array_common_DailyBossLevelData(in []*common.DailyBossLevelData) []*common.DailyBossLevelData {
	if in == nil {
		return nil
	}
	a := make([]*common.DailyBossLevelData, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DailyBossLevelData(v)
	}
	return a
}

func clone_User_Array_common_District(in []*common.District) []*common.District {
	if in == nil {
		return nil
	}
	a := make([]*common.District, len(in))
	for k, v := range in {
		a[k] = clone_User_common_District(v)
	}
	return a
}

func clone_User_Array_common_DramaSkill(in []*common.DramaSkill) []*common.DramaSkill {
	if in == nil {
		return nil
	}
	a := make([]*common.DramaSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DramaSkill(v)
	}
	return a
}

func clone_User_Array_common_DramaStage(in []*common.DramaStage) []*common.DramaStage {
	if in == nil {
		return nil
	}
	a := make([]*common.DramaStage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DramaStage(v)
	}
	return a
}

func clone_User_Array_common_DungeonChapter(in []*common.DungeonChapter) []*common.DungeonChapter {
	if in == nil {
		return nil
	}
	a := make([]*common.DungeonChapter, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DungeonChapter(v)
	}
	return a
}

func clone_User_Array_common_DungeonLevel(in []*common.DungeonLevel) []*common.DungeonLevel {
	if in == nil {
		return nil
	}
	a := make([]*common.DungeonLevel, len(in))
	for k, v := range in {
		a[k] = clone_User_common_DungeonLevel(v)
	}
	return a
}

func clone_User_Array_common_Employee(in []*common.Employee) []*common.Employee {
	if in == nil {
		return nil
	}
	a := make([]*common.Employee, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Employee(v)
	}
	return a
}

func clone_User_Array_common_Formation(in []*common.Formation) []*common.Formation {
	if in == nil {
		return nil
	}
	a := make([]*common.Formation, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Formation(v)
	}
	return a
}

func clone_User_Array_common_FormationGroupItem(in []*common.FormationGroupItem) []*common.FormationGroupItem {
	if in == nil {
		return nil
	}
	a := make([]*common.FormationGroupItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_FormationGroupItem(v)
	}
	return a
}

func clone_User_Array_common_Fortress(in []*common.Fortress) []*common.Fortress {
	if in == nil {
		return nil
	}
	a := make([]*common.Fortress, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Fortress(v)
	}
	return a
}

func clone_User_Array_common_Grid(in []*common.Grid) []*common.Grid {
	if in == nil {
		return nil
	}
	a := make([]*common.Grid, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Grid(v)
	}
	return a
}

func clone_User_Array_common_GvgBattleLog(in []*common.GvgBattleLog) []*common.GvgBattleLog {
	if in == nil {
		return nil
	}
	a := make([]*common.GvgBattleLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_GvgBattleLog(v)
	}
	return a
}

func clone_User_Array_common_GvgBattleLogPlayer(in []*common.GvgBattleLogPlayer) []*common.GvgBattleLogPlayer {
	if in == nil {
		return nil
	}
	a := make([]*common.GvgBattleLogPlayer, len(in))
	for k, v := range in {
		a[k] = clone_User_common_GvgBattleLogPlayer(v)
	}
	return a
}

func clone_User_Array_common_HappyFlopCard(in []*common.HappyFlopCard) []*common.HappyFlopCard {
	if in == nil {
		return nil
	}
	a := make([]*common.HappyFlopCard, len(in))
	for k, v := range in {
		a[k] = clone_User_common_HappyFlopCard(v)
	}
	return a
}

func clone_User_Array_common_Item(in []*common.Item) []*common.Item {
	if in == nil {
		return nil
	}
	a := make([]*common.Item, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Item(v)
	}
	return a
}

func clone_User_Array_common_ItemMarket(in []*common.ItemMarket) []*common.ItemMarket {
	if in == nil {
		return nil
	}
	a := make([]*common.ItemMarket, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ItemMarket(v)
	}
	return a
}

func clone_User_Array_common_LadderBattleLog(in []*common.LadderBattleLog) []*common.LadderBattleLog {
	if in == nil {
		return nil
	}
	a := make([]*common.LadderBattleLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_LadderBattleLog(v)
	}
	return a
}

func clone_User_Array_common_LadderHistoryInfo(in []*common.LadderHistoryInfo) []*common.LadderHistoryInfo {
	if in == nil {
		return nil
	}
	a := make([]*common.LadderHistoryInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common_LadderHistoryInfo(v)
	}
	return a
}

func clone_User_Array_common_MarketGrid(in []*common.MarketGrid) []*common.MarketGrid {
	if in == nil {
		return nil
	}
	a := make([]*common.MarketGrid, len(in))
	for k, v := range in {
		a[k] = clone_User_common_MarketGrid(v)
	}
	return a
}

func clone_User_Array_common_MissionTargetChapter(in []*common.MissionTargetChapter) []*common.MissionTargetChapter {
	if in == nil {
		return nil
	}
	a := make([]*common.MissionTargetChapter, len(in))
	for k, v := range in {
		a[k] = clone_User_common_MissionTargetChapter(v)
	}
	return a
}

func clone_User_Array_common_MissionUnit(in []*common.MissionUnit) []*common.MissionUnit {
	if in == nil {
		return nil
	}
	a := make([]*common.MissionUnit, len(in))
	for k, v := range in {
		a[k] = clone_User_common_MissionUnit(v)
	}
	return a
}

func clone_User_Array_common_MountItem(in []*common.MountItem) []*common.MountItem {
	if in == nil {
		return nil
	}
	a := make([]*common.MountItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_MountItem(v)
	}
	return a
}

func clone_User_Array_common_NavalBattleEvent(in []*common.NavalBattleEvent) []*common.NavalBattleEvent {
	if in == nil {
		return nil
	}
	a := make([]*common.NavalBattleEvent, len(in))
	for k, v := range in {
		a[k] = clone_User_common_NavalBattleEvent(v)
	}
	return a
}

func clone_User_Array_common_NavalBattleTeam(in []*common.NavalBattleTeam) []*common.NavalBattleTeam {
	if in == nil {
		return nil
	}
	a := make([]*common.NavalBattleTeam, len(in))
	for k, v := range in {
		a[k] = clone_User_common_NavalBattleTeam(v)
	}
	return a
}

func clone_User_Array_common_NavalBattleUniteFt(in []*common.NavalBattleUniteFt) []*common.NavalBattleUniteFt {
	if in == nil {
		return nil
	}
	a := make([]*common.NavalBattleUniteFt, len(in))
	for k, v := range in {
		a[k] = clone_User_common_NavalBattleUniteFt(v)
	}
	return a
}

func clone_User_Array_common_OfflineReward(in []*common.OfflineReward) []*common.OfflineReward {
	if in == nil {
		return nil
	}
	a := make([]*common.OfflineReward, len(in))
	for k, v := range in {
		a[k] = clone_User_common_OfflineReward(v)
	}
	return a
}

func clone_User_Array_common_OnlyEquip(in []*common.OnlyEquip) []*common.OnlyEquip {
	if in == nil {
		return nil
	}
	a := make([]*common.OnlyEquip, len(in))
	for k, v := range in {
		a[k] = clone_User_common_OnlyEquip(v)
	}
	return a
}

func clone_User_Array_common_PeakBattleLog(in []*common.PeakBattleLog) []*common.PeakBattleLog {
	if in == nil {
		return nil
	}
	a := make([]*common.PeakBattleLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PeakBattleLog(v)
	}
	return a
}

func clone_User_Array_common_PeakBattleLogPlayerInfo(in []*common.PeakBattleLogPlayerInfo) []*common.PeakBattleLogPlayerInfo {
	if in == nil {
		return nil
	}
	a := make([]*common.PeakBattleLogPlayerInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PeakBattleLogPlayerInfo(v)
	}
	return a
}

func clone_User_Array_common_PlayerFt(in []*common.PlayerFt) []*common.PlayerFt {
	if in == nil {
		return nil
	}
	a := make([]*common.PlayerFt, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PlayerFt(v)
	}
	return a
}

func clone_User_Array_common_PlayerGuildSkill(in []*common.PlayerGuildSkill) []*common.PlayerGuildSkill {
	if in == nil {
		return nil
	}
	a := make([]*common.PlayerGuildSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PlayerGuildSkill(v)
	}
	return a
}

func clone_User_Array_common_PlayerRankReward(in []*common.PlayerRankReward) []*common.PlayerRankReward {
	if in == nil {
		return nil
	}
	a := make([]*common.PlayerRankReward, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PlayerRankReward(v)
	}
	return a
}

func clone_User_Array_common_PrivilegeAbility(in []*common.PrivilegeAbility) []*common.PrivilegeAbility {
	if in == nil {
		return nil
	}
	a := make([]*common.PrivilegeAbility, len(in))
	for k, v := range in {
		a[k] = clone_User_common_PrivilegeAbility(v)
	}
	return a
}

func clone_User_Array_common_RebateData(in []*common.RebateData) []*common.RebateData {
	if in == nil {
		return nil
	}
	a := make([]*common.RebateData, len(in))
	for k, v := range in {
		a[k] = clone_User_common_RebateData(v)
	}
	return a
}

func clone_User_Array_common_ReplaySimple(in []*common.ReplaySimple) []*common.ReplaySimple {
	if in == nil {
		return nil
	}
	a := make([]*common.ReplaySimple, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ReplaySimple(v)
	}
	return a
}

func clone_User_Array_common_ResignAttr(in []*common.ResignAttr) []*common.ResignAttr {
	if in == nil {
		return nil
	}
	a := make([]*common.ResignAttr, len(in))
	for k, v := range in {
		a[k] = clone_User_common_ResignAttr(v)
	}
	return a
}

func clone_User_Array_common_SeasonFundTask(in []*common.SeasonFundTask) []*common.SeasonFundTask {
	if in == nil {
		return nil
	}
	a := make([]*common.SeasonFundTask, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SeasonFundTask(v)
	}
	return a
}

func clone_User_Array_common_Skill(in []*common.Skill) []*common.Skill {
	if in == nil {
		return nil
	}
	a := make([]*common.Skill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Skill(v)
	}
	return a
}

func clone_User_Array_common_SlayFightReport(in []*common.SlayFightReport) []*common.SlayFightReport {
	if in == nil {
		return nil
	}
	a := make([]*common.SlayFightReport, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SlayFightReport(v)
	}
	return a
}

func clone_User_Array_common_SlayPlayerCommander(in []*common.SlayPlayerCommander) []*common.SlayPlayerCommander {
	if in == nil {
		return nil
	}
	a := make([]*common.SlayPlayerCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SlayPlayerCommander(v)
	}
	return a
}

func clone_User_Array_common_SlayPower(in []*common.SlayPower) []*common.SlayPower {
	if in == nil {
		return nil
	}
	a := make([]*common.SlayPower, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SlayPower(v)
	}
	return a
}

func clone_User_Array_common_SlayRoundReport(in []*common.SlayRoundReport) []*common.SlayRoundReport {
	if in == nil {
		return nil
	}
	a := make([]*common.SlayRoundReport, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SlayRoundReport(v)
	}
	return a
}

func clone_User_Array_common_SlaySilkBuy(in []*common.SlaySilkBuy) []*common.SlaySilkBuy {
	if in == nil {
		return nil
	}
	a := make([]*common.SlaySilkBuy, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SlaySilkBuy(v)
	}
	return a
}

func clone_User_Array_common_Soldier(in []*common.Soldier) []*common.Soldier {
	if in == nil {
		return nil
	}
	a := make([]*common.Soldier, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Soldier(v)
	}
	return a
}

func clone_User_Array_common_SoldierTech(in []*common.SoldierTech) []*common.SoldierTech {
	if in == nil {
		return nil
	}
	a := make([]*common.SoldierTech, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SoldierTech(v)
	}
	return a
}

func clone_User_Array_common_SoldierTechSkill(in []*common.SoldierTechSkill) []*common.SoldierTechSkill {
	if in == nil {
		return nil
	}
	a := make([]*common.SoldierTechSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_SoldierTechSkill(v)
	}
	return a
}

func clone_User_Array_common_StrTalent(in []*common.StrTalent) []*common.StrTalent {
	if in == nil {
		return nil
	}
	a := make([]*common.StrTalent, len(in))
	for k, v := range in {
		a[k] = clone_User_common_StrTalent(v)
	}
	return a
}

func clone_User_Array_common_TaskCell(in []*common.TaskCell) []*common.TaskCell {
	if in == nil {
		return nil
	}
	a := make([]*common.TaskCell, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TaskCell(v)
	}
	return a
}

func clone_User_Array_common_TimeMission(in []*common.TimeMission) []*common.TimeMission {
	if in == nil {
		return nil
	}
	a := make([]*common.TimeMission, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TimeMission(v)
	}
	return a
}

func clone_User_Array_common_TrainItem(in []*common.TrainItem) []*common.TrainItem {
	if in == nil {
		return nil
	}
	a := make([]*common.TrainItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TrainItem(v)
	}
	return a
}

func clone_User_Array_common_Treasure(in []*common.Treasure) []*common.Treasure {
	if in == nil {
		return nil
	}
	a := make([]*common.Treasure, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Treasure(v)
	}
	return a
}

func clone_User_Array_common_TreasureFate(in []*common.TreasureFate) []*common.TreasureFate {
	if in == nil {
		return nil
	}
	a := make([]*common.TreasureFate, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TreasureFate(v)
	}
	return a
}

func clone_User_Array_common_TreasureRefine(in []*common.TreasureRefine) []*common.TreasureRefine {
	if in == nil {
		return nil
	}
	a := make([]*common.TreasureRefine, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TreasureRefine(v)
	}
	return a
}

func clone_User_Array_common_TreasureRefineSlot(in []*common.TreasureRefineSlot) []*common.TreasureRefineSlot {
	if in == nil {
		return nil
	}
	a := make([]*common.TreasureRefineSlot, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TreasureRefineSlot(v)
	}
	return a
}

func clone_User_Array_common_WonBattleLog(in []*common.WonBattleLog) []*common.WonBattleLog {
	if in == nil {
		return nil
	}
	a := make([]*common.WonBattleLog, len(in))
	for k, v := range in {
		a[k] = clone_User_common_WonBattleLog(v)
	}
	return a
}

func clone_User_Array_common_WorldMap(in []*common.WorldMap) []*common.WorldMap {
	if in == nil {
		return nil
	}
	a := make([]*common.WorldMap, len(in))
	for k, v := range in {
		a[k] = clone_User_common_WorldMap(v)
	}
	return a
}

func clone_User_Array_common_WuHun(in []*common.WuHun) []*common.WuHun {
	if in == nil {
		return nil
	}
	a := make([]*common.WuHun, len(in))
	for k, v := range in {
		a[k] = clone_User_common_WuHun(v)
	}
	return a
}

func clone_User_Array_common_YouthReturnGiftItem(in []*common.YouthReturnGiftItem) []*common.YouthReturnGiftItem {
	if in == nil {
		return nil
	}
	a := make([]*common.YouthReturnGiftItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_YouthReturnGiftItem(v)
	}
	return a
}

func clone_User_Map_int32_Bool(in map[int32]bool) map[int32]bool {
	if in == nil {
		return nil
	}
	a := make(map[int32]bool, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_int32_Int32(in map[int32]int32) map[int32]int32 {
	if in == nil {
		return nil
	}
	a := make(map[int32]int32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_int32_Int64(in map[int32]int64) map[int32]int64 {
	if in == nil {
		return nil
	}
	a := make(map[int32]int64, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_int32_Uint32(in map[int32]uint32) map[int32]uint32 {
	if in == nil {
		return nil
	}
	a := make(map[int32]uint32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_int32_common1_BazaarRecord(in map[int32]*common1.BazaarRecord) map[int32]*common1.BazaarRecord {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.BazaarRecord, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BazaarRecord(v)
	}
	return a
}

func clone_User_Map_int32_common1_BeastLocation(in map[int32]*common1.BeastLocation) map[int32]*common1.BeastLocation {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.BeastLocation, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BeastLocation(v)
	}
	return a
}

func clone_User_Map_int32_common1_ChibiFinishedStage(in map[int32]*common1.ChibiFinishedStage) map[int32]*common1.ChibiFinishedStage {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ChibiFinishedStage, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ChibiFinishedStage(v)
	}
	return a
}

func clone_User_Map_int32_common1_Commander(in map[int32]*common1.Commander) map[int32]*common1.Commander {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.Commander, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_Commander(v)
	}
	return a
}

func clone_User_Map_int32_common1_DrawLowActive(in map[int32]*common1.DrawLowActive) map[int32]*common1.DrawLowActive {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.DrawLowActive, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DrawLowActive(v)
	}
	return a
}

func clone_User_Map_int32_common1_DrawOnlyEquip_DrawData(in map[int32]*common1.DrawOnlyEquip_DrawData) map[int32]*common1.DrawOnlyEquip_DrawData {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.DrawOnlyEquip_DrawData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_DrawOnlyEquip_DrawData(v)
	}
	return a
}

func clone_User_Map_int32_common1_ExpeditionBattleUnit(in map[int32]*common1.ExpeditionBattleUnit) map[int32]*common1.ExpeditionBattleUnit {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ExpeditionBattleUnit, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ExpeditionBattleUnit(v)
	}
	return a
}

func clone_User_Map_int32_common1_ExpeditionChapter(in map[int32]*common1.ExpeditionChapter) map[int32]*common1.ExpeditionChapter {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ExpeditionChapter, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ExpeditionChapter(v)
	}
	return a
}

func clone_User_Map_int32_common1_ExpeditionGrid(in map[int32]*common1.ExpeditionGrid) map[int32]*common1.ExpeditionGrid {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ExpeditionGrid, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ExpeditionGrid(v)
	}
	return a
}

func clone_User_Map_int32_common1_GveGrid(in map[int32]*common1.GveGrid) map[int32]*common1.GveGrid {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.GveGrid, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_GveGrid(v)
	}
	return a
}

func clone_User_Map_int32_common1_NavalBattleEnemy(in map[int32]*common1.NavalBattleEnemy) map[int32]*common1.NavalBattleEnemy {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.NavalBattleEnemy, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_NavalBattleEnemy(v)
	}
	return a
}

func clone_User_Map_int32_common1_NavalBattlePath(in map[int32]*common1.NavalBattlePath) map[int32]*common1.NavalBattlePath {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.NavalBattlePath, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_NavalBattlePath(v)
	}
	return a
}

func clone_User_Map_int32_common1_PayerOverlordStage(in map[int32]*common1.PayerOverlordStage) map[int32]*common1.PayerOverlordStage {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.PayerOverlordStage, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_PayerOverlordStage(v)
	}
	return a
}

func clone_User_Map_int32_common1_PhysicalLuckyGiftRecord(in map[int32]*common1.PhysicalLuckyGiftRecord) map[int32]*common1.PhysicalLuckyGiftRecord {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.PhysicalLuckyGiftRecord, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_PhysicalLuckyGiftRecord(v)
	}
	return a
}

func clone_User_Map_int32_common1_ResourceCommon(in map[int32]*common1.ResourceCommon) map[int32]*common1.ResourceCommon {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ResourceCommon, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ResourceCommon(v)
	}
	return a
}

func clone_User_Map_int32_common1_SeasonStoreItem(in map[int32]*common1.SeasonStoreItem) map[int32]*common1.SeasonStoreItem {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.SeasonStoreItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SeasonStoreItem(v)
	}
	return a
}

func clone_User_Map_int32_common1_SeasonTaskInfo(in map[int32]*common1.SeasonTaskInfo) map[int32]*common1.SeasonTaskInfo {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.SeasonTaskInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SeasonTaskInfo(v)
	}
	return a
}

func clone_User_Map_int32_common1_SoulBoxGift4Crit(in map[int32]*common1.SoulBoxGift4Crit) map[int32]*common1.SoulBoxGift4Crit {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.SoulBoxGift4Crit, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SoulBoxGift4Crit(v)
	}
	return a
}

func clone_User_Map_int32_common1_UserAvatarFrameSetting(in map[int32]*common1.UserAvatarFrameSetting) map[int32]*common1.UserAvatarFrameSetting {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.UserAvatarFrameSetting, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_UserAvatarFrameSetting(v)
	}
	return a
}

func clone_User_Map_int32_common1_WorldBossHisInfo(in map[int32]*common1.WorldBossHisInfo) map[int32]*common1.WorldBossHisInfo {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.WorldBossHisInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_WorldBossHisInfo(v)
	}
	return a
}

func clone_User_Map_int32_common1_ZmSnExploreInfo(in map[int32]*common1.ZmSnExploreInfo) map[int32]*common1.ZmSnExploreInfo {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common1.ZmSnExploreInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_ZmSnExploreInfo(v)
	}
	return a
}

func clone_User_Map_int32_common_BattleUnitHp(in map[int32]*common.BattleUnitHp) map[int32]*common.BattleUnitHp {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.BattleUnitHp, len(in))
	for k, v := range in {
		a[k] = clone_User_common_BattleUnitHp(v)
	}
	return a
}

func clone_User_Map_int32_common_Formation(in map[int32]*common.Formation) map[int32]*common.Formation {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.Formation, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Formation(v)
	}
	return a
}

func clone_User_Map_int32_common_HandBookQuest(in map[int32]*common.HandBookQuest) map[int32]*common.HandBookQuest {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.HandBookQuest, len(in))
	for k, v := range in {
		a[k] = clone_User_common_HandBookQuest(v)
	}
	return a
}

func clone_User_Map_int32_common_MountItem(in map[int32]*common.MountItem) map[int32]*common.MountItem {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.MountItem, len(in))
	for k, v := range in {
		a[k] = clone_User_common_MountItem(v)
	}
	return a
}

func clone_User_Map_int32_common_NavalBattleEvent(in map[int32]*common.NavalBattleEvent) map[int32]*common.NavalBattleEvent {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.NavalBattleEvent, len(in))
	for k, v := range in {
		a[k] = clone_User_common_NavalBattleEvent(v)
	}
	return a
}

func clone_User_Map_int32_common_NavalStage(in map[int32]*common.NavalStage) map[int32]*common.NavalStage {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.NavalStage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_NavalStage(v)
	}
	return a
}

func clone_User_Map_int32_common_TrainBarrage(in map[int32]*common.TrainBarrage) map[int32]*common.TrainBarrage {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.TrainBarrage, len(in))
	for k, v := range in {
		a[k] = clone_User_common_TrainBarrage(v)
	}
	return a
}

func clone_User_Map_int32_common_UserOfflineReward(in map[int32]*common.UserOfflineReward) map[int32]*common.UserOfflineReward {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.UserOfflineReward, len(in))
	for k, v := range in {
		a[k] = clone_User_common_UserOfflineReward(v)
	}
	return a
}

func clone_User_Map_int32_common_WarSoulSchedule(in map[int32]*common.WarSoulSchedule) map[int32]*common.WarSoulSchedule {
	if in == nil {
		return nil
	}
	a := make(map[int32]*common.WarSoulSchedule, len(in))
	for k, v := range in {
		a[k] = clone_User_common_WarSoulSchedule(v)
	}
	return a
}

func clone_User_Map_string_Bool(in map[string]bool) map[string]bool {
	if in == nil {
		return nil
	}
	a := make(map[string]bool, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_string_Int32(in map[string]int32) map[string]int32 {
	if in == nil {
		return nil
	}
	a := make(map[string]int32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_string_common1_OrderData(in map[string]*common1.OrderData) map[string]*common1.OrderData {
	if in == nil {
		return nil
	}
	a := make(map[string]*common1.OrderData, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_OrderData(v)
	}
	return a
}

func clone_User_Map_uint32_Bool(in map[uint32]bool) map[uint32]bool {
	if in == nil {
		return nil
	}
	a := make(map[uint32]bool, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint32_Float64(in map[uint32]float64) map[uint32]float64 {
	if in == nil {
		return nil
	}
	a := make(map[uint32]float64, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint32_Uint32(in map[uint32]uint32) map[uint32]uint32 {
	if in == nil {
		return nil
	}
	a := make(map[uint32]uint32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint32_Uint64(in map[uint32]uint64) map[uint32]uint64 {
	if in == nil {
		return nil
	}
	a := make(map[uint32]uint64, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint32_common1_BiographyArms(in map[uint32]*common1.BiographyArms) map[uint32]*common1.BiographyArms {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common1.BiographyArms, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BiographyArms(v)
	}
	return a
}

func clone_User_Map_uint32_common1_BiographyCommander(in map[uint32]*common1.BiographyCommander) map[uint32]*common1.BiographyCommander {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common1.BiographyCommander, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_BiographyCommander(v)
	}
	return a
}

func clone_User_Map_uint32_common1_CityGiftInfo(in map[uint32]*common1.CityGiftInfo) map[uint32]*common1.CityGiftInfo {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common1.CityGiftInfo, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_CityGiftInfo(v)
	}
	return a
}

func clone_User_Map_uint32_common1_SpecialBuyGift(in map[uint32]*common1.SpecialBuyGift) map[uint32]*common1.SpecialBuyGift {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common1.SpecialBuyGift, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_SpecialBuyGift(v)
	}
	return a
}

func clone_User_Map_uint32_common_CommanderEquip(in map[uint32]*common.CommanderEquip) map[uint32]*common.CommanderEquip {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common.CommanderEquip, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderEquip(v)
	}
	return a
}

func clone_User_Map_uint32_common_CommanderPotential(in map[uint32]*common.CommanderPotential) map[uint32]*common.CommanderPotential {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common.CommanderPotential, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderPotential(v)
	}
	return a
}

func clone_User_Map_uint32_common_CommanderSkill(in map[uint32]*common.CommanderSkill) map[uint32]*common.CommanderSkill {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common.CommanderSkill, len(in))
	for k, v := range in {
		a[k] = clone_User_common_CommanderSkill(v)
	}
	return a
}

func clone_User_Map_uint32_common_OnlyEquip(in map[uint32]*common.OnlyEquip) map[uint32]*common.OnlyEquip {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common.OnlyEquip, len(in))
	for k, v := range in {
		a[k] = clone_User_common_OnlyEquip(v)
	}
	return a
}

func clone_User_Map_uint32_common_WuHun(in map[uint32]*common.WuHun) map[uint32]*common.WuHun {
	if in == nil {
		return nil
	}
	a := make(map[uint32]*common.WuHun, len(in))
	for k, v := range in {
		a[k] = clone_User_common_WuHun(v)
	}
	return a
}

func clone_User_Map_uint64_Bool(in map[uint64]bool) map[uint64]bool {
	if in == nil {
		return nil
	}
	a := make(map[uint64]bool, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint64_Int32(in map[uint64]int32) map[uint64]int32 {
	if in == nil {
		return nil
	}
	a := make(map[uint64]int32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint64_Int64(in map[uint64]int64) map[uint64]int64 {
	if in == nil {
		return nil
	}
	a := make(map[uint64]int64, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint64_Uint32(in map[uint64]uint32) map[uint64]uint32 {
	if in == nil {
		return nil
	}
	a := make(map[uint64]uint32, len(in))
	for k, v := range in {
		a[k] = v
	}
	return a
}

func clone_User_Map_uint64_common1_GuildGoods(in map[uint64]*common1.GuildGoods) map[uint64]*common1.GuildGoods {
	if in == nil {
		return nil
	}
	a := make(map[uint64]*common1.GuildGoods, len(in))
	for k, v := range in {
		a[k] = clone_User_common1_GuildGoods(v)
	}
	return a
}

func clone_User_Map_uint64_common_GveDamageRecord(in map[uint64]*common.GveDamageRecord) map[uint64]*common.GveDamageRecord {
	if in == nil {
		return nil
	}
	a := make(map[uint64]*common.GveDamageRecord, len(in))
	for k, v := range in {
		a[k] = clone_User_common_GveDamageRecord(v)
	}
	return a
}

func clone_User_Map_uint64_common_Mail(in map[uint64]*common.Mail) map[uint64]*common.Mail {
	if in == nil {
		return nil
	}
	a := make(map[uint64]*common.Mail, len(in))
	for k, v := range in {
		a[k] = clone_User_common_Mail(v)
	}
	return a
}
