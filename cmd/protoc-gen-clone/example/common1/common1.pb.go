// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: common1.proto

package common1

import (
	common "github.com/junaozun/protoc-gen-go-clone/cmd/protoc-gen-clone/example/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gve战斗状态
type GveBattleStatus int32

const (
	GveBattleStatus_INIT     GveBattleStatus = 0
	GveBattleStatus_ING      GveBattleStatus = 1
	GveBattleStatus_COMPLETE GveBattleStatus = 2
)

// Enum value maps for GveBattleStatus.
var (
	GveBattleStatus_name = map[int32]string{
		0: "INIT",
		1: "ING",
		2: "COMPLETE",
	}
	GveBattleStatus_value = map[string]int32{
		"INIT":     0,
		"ING":      1,
		"COMPLETE": 2,
	}
)

func (x GveBattleStatus) Enum() *GveBattleStatus {
	p := new(GveBattleStatus)
	*p = x
	return p
}

func (x GveBattleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GveBattleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common1_proto_enumTypes[0].Descriptor()
}

func (GveBattleStatus) Type() protoreflect.EnumType {
	return &file_common1_proto_enumTypes[0]
}

func (x GveBattleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GveBattleStatus.Descriptor instead.
func (GveBattleStatus) EnumDescriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{0}
}

type GiftStatus int32

const (
	GiftStatus_init   GiftStatus = 0
	GiftStatus_bought GiftStatus = 1 // 购买了
	GiftStatus_reward GiftStatus = 2 // 领奖了
	GiftStatus_buying GiftStatus = 3 // 购买中
)

// Enum value maps for GiftStatus.
var (
	GiftStatus_name = map[int32]string{
		0: "init",
		1: "bought",
		2: "reward",
		3: "buying",
	}
	GiftStatus_value = map[string]int32{
		"init":   0,
		"bought": 1,
		"reward": 2,
		"buying": 3,
	}
)

func (x GiftStatus) Enum() *GiftStatus {
	p := new(GiftStatus)
	*p = x
	return p
}

func (x GiftStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GiftStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common1_proto_enumTypes[1].Descriptor()
}

func (GiftStatus) Type() protoreflect.EnumType {
	return &file_common1_proto_enumTypes[1]
}

func (x GiftStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GiftStatus.Descriptor instead.
func (GiftStatus) EnumDescriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{1}
}

//--------------------------------------------------------------------------------------------------巅峰论战
type DyPeakStage int32

const (
	DyPeakStage_Prepare    DyPeakStage = 0
	DyPeakStage_GroupMatch DyPeakStage = 1
	DyPeakStage_Top16      DyPeakStage = 2
	DyPeakStage_Quarter    DyPeakStage = 3
	DyPeakStage_Semi       DyPeakStage = 4
	DyPeakStage_Champion   DyPeakStage = 5
	DyPeakStage_End        DyPeakStage = 6
)

// Enum value maps for DyPeakStage.
var (
	DyPeakStage_name = map[int32]string{
		0: "Prepare",
		1: "GroupMatch",
		2: "Top16",
		3: "Quarter",
		4: "Semi",
		5: "Champion",
		6: "End",
	}
	DyPeakStage_value = map[string]int32{
		"Prepare":    0,
		"GroupMatch": 1,
		"Top16":      2,
		"Quarter":    3,
		"Semi":       4,
		"Champion":   5,
		"End":        6,
	}
)

func (x DyPeakStage) Enum() *DyPeakStage {
	p := new(DyPeakStage)
	*p = x
	return p
}

func (x DyPeakStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DyPeakStage) Descriptor() protoreflect.EnumDescriptor {
	return file_common1_proto_enumTypes[2].Descriptor()
}

func (DyPeakStage) Type() protoreflect.EnumType {
	return &file_common1_proto_enumTypes[2]
}

func (x DyPeakStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DyPeakStage.Descriptor instead.
func (DyPeakStage) EnumDescriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{2}
}

type NavalBattle_State int32

const (
	NavalBattle_none   NavalBattle_State = 0 //无
	NavalBattle_march  NavalBattle_State = 1 //以出征
	NavalBattle_win    NavalBattle_State = 2 // 胜利
	NavalBattle_failed NavalBattle_State = 3 //失败
)

// Enum value maps for NavalBattle_State.
var (
	NavalBattle_State_name = map[int32]string{
		0: "none",
		1: "march",
		2: "win",
		3: "failed",
	}
	NavalBattle_State_value = map[string]int32{
		"none":   0,
		"march":  1,
		"win":    2,
		"failed": 3,
	}
)

func (x NavalBattle_State) Enum() *NavalBattle_State {
	p := new(NavalBattle_State)
	*p = x
	return p
}

func (x NavalBattle_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavalBattle_State) Descriptor() protoreflect.EnumDescriptor {
	return file_common1_proto_enumTypes[3].Descriptor()
}

func (NavalBattle_State) Type() protoreflect.EnumType {
	return &file_common1_proto_enumTypes[3]
}

func (x NavalBattle_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavalBattle_State.Descriptor instead.
func (NavalBattle_State) EnumDescriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{370, 0}
}

//Uint32Wrapper uint32的包装
type Uint32Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U32 uint32 `protobuf:"varint,1,opt,name=u32,proto3" json:"u32,omitempty"` //
}

func (x *Uint32Wrapper) Reset() {
	*x = Uint32Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Wrapper) ProtoMessage() {}

func (x *Uint32Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Wrapper.ProtoReflect.Descriptor instead.
func (*Uint32Wrapper) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{0}
}

func (x *Uint32Wrapper) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{1}
}

func (x *StringArray) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type Uint64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []uint64 `protobuf:"varint,1,rep,packed,name=items,proto3" json:"items,omitempty"`
}

func (x *Uint64Array) Reset() {
	*x = Uint64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Array) ProtoMessage() {}

func (x *Uint64Array) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Array.ProtoReflect.Descriptor instead.
func (*Uint64Array) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{2}
}

func (x *Uint64Array) GetItems() []uint64 {
	if x != nil {
		return x.Items
	}
	return nil
}

type ZonePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId    int32                  `protobuf:"varint,1,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	Partition map[int32]*Uint64Array `protobuf:"bytes,2,rep,name=partition,proto3" json:"partition,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ZonePartition) Reset() {
	*x = ZonePartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZonePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZonePartition) ProtoMessage() {}

func (x *ZonePartition) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZonePartition.ProtoReflect.Descriptor instead.
func (*ZonePartition) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{3}
}

func (x *ZonePartition) GetZoneId() int32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *ZonePartition) GetPartition() map[int32]*Uint64Array {
	if x != nil {
		return x.Partition
	}
	return nil
}

//ServerMail 全局邮件内容
type ServerMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid            uint64                  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`                      //邮件id，无意义，只是用来保存在db的key不重复
	MailTId        int32                   `protobuf:"varint,2,opt,name=mailTId,proto3" json:"mailTId,omitempty"`              //邮件类型id
	ReceiveTime    int64                   `protobuf:"varint,3,opt,name=ReceiveTime,proto3" json:"ReceiveTime,omitempty"`      //邮件接收时间
	Title          string                  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                   //标题
	Content        string                  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`               //内容
	Paramds        []string                `protobuf:"bytes,6,rep,name=paramds,proto3" json:"paramds,omitempty"`               //参数
	Attachment     []*common.Item          `protobuf:"bytes,7,rep,name=attachment,proto3" json:"attachment,omitempty"`         //附件
	ModuleParam    uint64                  `protobuf:"varint,8,opt,name=ModuleParam,proto3" json:"ModuleParam,omitempty"`      //自定义参数 (例如竞技场的versionId)
	MailConditions []*common.MailCondition `protobuf:"bytes,9,rep,name=mailConditions,proto3" json:"mailConditions,omitempty"` //邮件条件（主要来自gm）
	OpId           string                  `protobuf:"bytes,10,opt,name=opId,proto3" json:"opId,omitempty"`                    // 运营商
}

func (x *ServerMail) Reset() {
	*x = ServerMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMail) ProtoMessage() {}

func (x *ServerMail) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMail.ProtoReflect.Descriptor instead.
func (*ServerMail) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{4}
}

func (x *ServerMail) GetMid() uint64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *ServerMail) GetMailTId() int32 {
	if x != nil {
		return x.MailTId
	}
	return 0
}

func (x *ServerMail) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *ServerMail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ServerMail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ServerMail) GetParamds() []string {
	if x != nil {
		return x.Paramds
	}
	return nil
}

func (x *ServerMail) GetAttachment() []*common.Item {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *ServerMail) GetModuleParam() uint64 {
	if x != nil {
		return x.ModuleParam
	}
	return 0
}

func (x *ServerMail) GetMailConditions() []*common.MailCondition {
	if x != nil {
		return x.MailConditions
	}
	return nil
}

func (x *ServerMail) GetOpId() string {
	if x != nil {
		return x.OpId
	}
	return ""
}

//ServerDB 服务器
type ServerDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevelCount     []uint32                         `protobuf:"varint,1,rep,packed,name=playerLevelCount,proto3" json:"playerLevelCount,omitempty"` // 统计各个等级玩家人数(索引0对于1级)
	LastStopServerTime   int64                            `protobuf:"varint,2,opt,name=lastStopServerTime,proto3" json:"lastStopServerTime,omitempty"`    //上次关服时间
	Activity             *ServerActivity                  `protobuf:"bytes,3,opt,name=activity,proto3" json:"activity,omitempty"`
	Announce             *Announce                        `protobuf:"bytes,4,opt,name=announce,proto3" json:"announce,omitempty"`
	DramaBackUpTime      int64                            `protobuf:"varint,6,opt,name=DramaBackUpTime,proto3" json:"DramaBackUpTime,omitempty"`                                                                                                    // 剧本备份时间
	DrawTreasure         *ServerDrawTreasure              `protobuf:"bytes,7,opt,name=drawTreasure,proto3" json:"drawTreasure,omitempty"`                                                                                                           // 宝物抽卡
	Discount             *GameDailyDiscount               `protobuf:"bytes,8,opt,name=discount,proto3" json:"discount,omitempty"`                                                                                                                   // 每日折扣
	OpenServerTime       int64                            `protobuf:"varint,9,opt,name=openServerTime,proto3" json:"openServerTime,omitempty"`                                                                                                      // 开服时间
	NormalTenDrawTimes   uint64                           `protobuf:"varint,10,opt,name=normalTenDrawTimes,proto3" json:"normalTenDrawTimes,omitempty"`                                                                                             // 普通十连抽卡次数
	DiamondTenDrawTimes  uint64                           `protobuf:"varint,11,opt,name=diamondTenDrawTimes,proto3" json:"diamondTenDrawTimes,omitempty"`                                                                                           // 钻石十连抽卡次数
	FirstReachLevelLimit map[uint32]*FirstReachLevelLimit `protobuf:"bytes,12,rep,name=firstReachLevelLimit,proto3" json:"firstReachLevelLimit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 首个到达等级限制记录
	LevelLimit           uint32                           `protobuf:"varint,13,opt,name=levelLimit,proto3" json:"levelLimit,omitempty"`                                                                                                             // 等级上限
	TimeOffset           int64                            `protobuf:"varint,14,opt,name=timeOffset,proto3" json:"timeOffset,omitempty"`                                                                                                             // 当前时间偏移
}

func (x *ServerDB) Reset() {
	*x = ServerDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerDB) ProtoMessage() {}

func (x *ServerDB) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerDB.ProtoReflect.Descriptor instead.
func (*ServerDB) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{5}
}

func (x *ServerDB) GetPlayerLevelCount() []uint32 {
	if x != nil {
		return x.PlayerLevelCount
	}
	return nil
}

func (x *ServerDB) GetLastStopServerTime() int64 {
	if x != nil {
		return x.LastStopServerTime
	}
	return 0
}

func (x *ServerDB) GetActivity() *ServerActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ServerDB) GetAnnounce() *Announce {
	if x != nil {
		return x.Announce
	}
	return nil
}

func (x *ServerDB) GetDramaBackUpTime() int64 {
	if x != nil {
		return x.DramaBackUpTime
	}
	return 0
}

func (x *ServerDB) GetDrawTreasure() *ServerDrawTreasure {
	if x != nil {
		return x.DrawTreasure
	}
	return nil
}

func (x *ServerDB) GetDiscount() *GameDailyDiscount {
	if x != nil {
		return x.Discount
	}
	return nil
}

func (x *ServerDB) GetOpenServerTime() int64 {
	if x != nil {
		return x.OpenServerTime
	}
	return 0
}

func (x *ServerDB) GetNormalTenDrawTimes() uint64 {
	if x != nil {
		return x.NormalTenDrawTimes
	}
	return 0
}

func (x *ServerDB) GetDiamondTenDrawTimes() uint64 {
	if x != nil {
		return x.DiamondTenDrawTimes
	}
	return 0
}

func (x *ServerDB) GetFirstReachLevelLimit() map[uint32]*FirstReachLevelLimit {
	if x != nil {
		return x.FirstReachLevelLimit
	}
	return nil
}

func (x *ServerDB) GetLevelLimit() uint32 {
	if x != nil {
		return x.LevelLimit
	}
	return 0
}

func (x *ServerDB) GetTimeOffset() int64 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

type FirstReachLevelLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReachTime int64  `protobuf:"varint,1,opt,name=reachTime,proto3" json:"reachTime,omitempty"`
	PlayerId  uint64 `protobuf:"varint,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
}

func (x *FirstReachLevelLimit) Reset() {
	*x = FirstReachLevelLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstReachLevelLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstReachLevelLimit) ProtoMessage() {}

func (x *FirstReachLevelLimit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstReachLevelLimit.ProtoReflect.Descriptor instead.
func (*FirstReachLevelLimit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{6}
}

func (x *FirstReachLevelLimit) GetReachTime() int64 {
	if x != nil {
		return x.ReachTime
	}
	return 0
}

func (x *FirstReachLevelLimit) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type GameDailyDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Act []*GameDailyDiscountAct `protobuf:"bytes,1,rep,name=act,proto3" json:"act,omitempty"`
}

func (x *GameDailyDiscount) Reset() {
	*x = GameDailyDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDailyDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDailyDiscount) ProtoMessage() {}

func (x *GameDailyDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDailyDiscount.ProtoReflect.Descriptor instead.
func (*GameDailyDiscount) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{7}
}

func (x *GameDailyDiscount) GetAct() []*GameDailyDiscountAct {
	if x != nil {
		return x.Act
	}
	return nil
}

type GameDailyDiscountAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId  int32                    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty"` // 活动id
	Times  []*GameDailyDiscountItem `protobuf:"bytes,2,rep,name=times,proto3" json:"times,omitempty"`
	OpenId int32                    `protobuf:"varint,3,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *GameDailyDiscountAct) Reset() {
	*x = GameDailyDiscountAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDailyDiscountAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDailyDiscountAct) ProtoMessage() {}

func (x *GameDailyDiscountAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDailyDiscountAct.ProtoReflect.Descriptor instead.
func (*GameDailyDiscountAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{8}
}

func (x *GameDailyDiscountAct) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *GameDailyDiscountAct) GetTimes() []*GameDailyDiscountItem {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *GameDailyDiscountAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type GameStarAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  int32             `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	Code        *FakeCode         `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	LastTime    int64             `protobuf:"varint,3,opt,name=lastTime,proto3" json:"lastTime,omitempty"`       // 上次发生时间
	GenRankTime int64             `protobuf:"varint,4,opt,name=genRankTime,proto3" json:"genRankTime,omitempty"` // 生成奖励时间
	Special     []uint64          `protobuf:"varint,5,rep,packed,name=special,proto3" json:"special,omitempty"`  // 幸运大奖玩家
	OpenId      int32             `protobuf:"varint,6,opt,name=openId,proto3" json:"openId,omitempty"`
	Daily       *GameStarActDaily `protobuf:"bytes,7,opt,name=daily,proto3" json:"daily,omitempty"`
}

func (x *GameStarAct) Reset() {
	*x = GameStarAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStarAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStarAct) ProtoMessage() {}

func (x *GameStarAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStarAct.ProtoReflect.Descriptor instead.
func (*GameStarAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{9}
}

func (x *GameStarAct) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *GameStarAct) GetCode() *FakeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *GameStarAct) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *GameStarAct) GetGenRankTime() int64 {
	if x != nil {
		return x.GenRankTime
	}
	return 0
}

func (x *GameStarAct) GetSpecial() []uint64 {
	if x != nil {
		return x.Special
	}
	return nil
}

func (x *GameStarAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *GameStarAct) GetDaily() *GameStarActDaily {
	if x != nil {
		return x.Daily
	}
	return nil
}

type StarRewardPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint64 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *StarRewardPlayer) Reset() {
	*x = StarRewardPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarRewardPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarRewardPlayer) ProtoMessage() {}

func (x *StarRewardPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarRewardPlayer.ProtoReflect.Descriptor instead.
func (*StarRewardPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{10}
}

func (x *StarRewardPlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *StarRewardPlayer) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type GameStarActDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Special   []*StarRewardPlayer `protobuf:"bytes,1,rep,name=special,proto3" json:"special,omitempty"`
	First     []*StarRewardPlayer `protobuf:"bytes,2,rep,name=first,proto3" json:"first,omitempty"`
	Second    []*StarRewardPlayer `protobuf:"bytes,3,rep,name=second,proto3" json:"second,omitempty"`
	Third     []*StarRewardPlayer `protobuf:"bytes,4,rep,name=third,proto3" json:"third,omitempty"`
	CheckTime int64               `protobuf:"varint,5,opt,name=checkTime,proto3" json:"checkTime,omitempty"`
}

func (x *GameStarActDaily) Reset() {
	*x = GameStarActDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStarActDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStarActDaily) ProtoMessage() {}

func (x *GameStarActDaily) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStarActDaily.ProtoReflect.Descriptor instead.
func (*GameStarActDaily) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{11}
}

func (x *GameStarActDaily) GetSpecial() []*StarRewardPlayer {
	if x != nil {
		return x.Special
	}
	return nil
}

func (x *GameStarActDaily) GetFirst() []*StarRewardPlayer {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *GameStarActDaily) GetSecond() []*StarRewardPlayer {
	if x != nil {
		return x.Second
	}
	return nil
}

func (x *GameStarActDaily) GetThird() []*StarRewardPlayer {
	if x != nil {
		return x.Third
	}
	return nil
}

func (x *GameStarActDaily) GetCheckTime() int64 {
	if x != nil {
		return x.CheckTime
	}
	return 0
}

// Section 段
type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=Min,proto3" json:"Min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=Max,proto3" json:"Max,omitempty"`
	Cur int32 `protobuf:"varint,3,opt,name=Cur,proto3" json:"Cur,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{12}
}

func (x *Section) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Section) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Section) GetCur() int32 {
	if x != nil {
		return x.Cur
	}
	return 0
}

type FakeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*Section `protobuf:"bytes,1,rep,name=Sections,proto3" json:"Sections,omitempty"`
}

func (x *FakeCode) Reset() {
	*x = FakeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeCode) ProtoMessage() {}

func (x *FakeCode) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeCode.ProtoReflect.Descriptor instead.
func (*FakeCode) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{13}
}

func (x *FakeCode) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

type CodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CodeData) Reset() {
	*x = CodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeData) ProtoMessage() {}

func (x *CodeData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeData.ProtoReflect.Descriptor instead.
func (*CodeData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{14}
}

func (x *CodeData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CodeData) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 每日购买次数
type GameDailyDiscountItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyTimes       int32   `protobuf:"varint,2,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"`                    // 实际购买次数
	FakeBuyTimes   int32   `protobuf:"varint,3,opt,name=fakeBuyTimes,proto3" json:"fakeBuyTimes,omitempty"`            // 伪购买次数
	DeductingTimes []int32 `protobuf:"varint,4,rep,packed,name=deductingTimes,proto3" json:"deductingTimes,omitempty"` // 扣除中次数
	Hour           int32   `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`                            // 小时
}

func (x *GameDailyDiscountItem) Reset() {
	*x = GameDailyDiscountItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDailyDiscountItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDailyDiscountItem) ProtoMessage() {}

func (x *GameDailyDiscountItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDailyDiscountItem.ProtoReflect.Descriptor instead.
func (*GameDailyDiscountItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{15}
}

func (x *GameDailyDiscountItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameDailyDiscountItem) GetBuyTimes() int32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *GameDailyDiscountItem) GetFakeBuyTimes() int32 {
	if x != nil {
		return x.FakeBuyTimes
	}
	return 0
}

func (x *GameDailyDiscountItem) GetDeductingTimes() []int32 {
	if x != nil {
		return x.DeductingTimes
	}
	return nil
}

func (x *GameDailyDiscountItem) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

//UserTodayStatistics 玩家今日数据统计
type UserStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodayOnlineTime        int64 `protobuf:"varint,1,opt,name=todayOnlineTime,proto3" json:"todayOnlineTime,omitempty"`               //今日在线时长
	TodayPowerUpgrade      int64 `protobuf:"varint,2,opt,name=todayPowerUpgrade,proto3" json:"todayPowerUpgrade,omitempty"`           //战斗力提升
	TodayCommanderFragment int64 `protobuf:"varint,3,opt,name=todayCommanderFragment,proto3" json:"todayCommanderFragment,omitempty"` //今日武将碎片书
	TodayDiamondCost       int64 `protobuf:"varint,4,opt,name=todayDiamondCost,proto3" json:"todayDiamondCost,omitempty"`             //钻石消耗
	TodayPhysicalCost      int64 `protobuf:"varint,5,opt,name=todayPhysicalCost,proto3" json:"todayPhysicalCost,omitempty"`           //今日消耗的体力数
	TodayOccupiedTimes     int64 `protobuf:"varint,6,opt,name=todayOccupiedTimes,proto3" json:"todayOccupiedTimes,omitempty"`         //今日占领次数
}

func (x *UserStatistics) Reset() {
	*x = UserStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatistics) ProtoMessage() {}

func (x *UserStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatistics.ProtoReflect.Descriptor instead.
func (*UserStatistics) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{16}
}

func (x *UserStatistics) GetTodayOnlineTime() int64 {
	if x != nil {
		return x.TodayOnlineTime
	}
	return 0
}

func (x *UserStatistics) GetTodayPowerUpgrade() int64 {
	if x != nil {
		return x.TodayPowerUpgrade
	}
	return 0
}

func (x *UserStatistics) GetTodayCommanderFragment() int64 {
	if x != nil {
		return x.TodayCommanderFragment
	}
	return 0
}

func (x *UserStatistics) GetTodayDiamondCost() int64 {
	if x != nil {
		return x.TodayDiamondCost
	}
	return 0
}

func (x *UserStatistics) GetTodayPhysicalCost() int64 {
	if x != nil {
		return x.TodayPhysicalCost
	}
	return 0
}

func (x *UserStatistics) GetTodayOccupiedTimes() int64 {
	if x != nil {
		return x.TodayOccupiedTimes
	}
	return 0
}

// 公告
type Announce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalMsg   map[uint32]*AnnounceMessages `protobuf:"bytes,3,rep,name=normalMsg,proto3" json:"normalMsg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 普通公告
	SaveAnnMsgs []*common.AnnounceMessage    `protobuf:"bytes,4,rep,name=saveAnnMsgs,proto3" json:"saveAnnMsgs,omitempty"`                                                                                      //保存公告
}

func (x *Announce) Reset() {
	*x = Announce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announce) ProtoMessage() {}

func (x *Announce) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announce.ProtoReflect.Descriptor instead.
func (*Announce) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{17}
}

func (x *Announce) GetNormalMsg() map[uint32]*AnnounceMessages {
	if x != nil {
		return x.NormalMsg
	}
	return nil
}

func (x *Announce) GetSaveAnnMsgs() []*common.AnnounceMessage {
	if x != nil {
		return x.SaveAnnMsgs
	}
	return nil
}

type AnnounceMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalMsgs []*common.AnnounceMessage `protobuf:"bytes,2,rep,name=normalMsgs,proto3" json:"normalMsgs,omitempty"` // 普通公告
}

func (x *AnnounceMessages) Reset() {
	*x = AnnounceMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceMessages) ProtoMessage() {}

func (x *AnnounceMessages) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceMessages.ProtoReflect.Descriptor instead.
func (*AnnounceMessages) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{18}
}

func (x *AnnounceMessages) GetNormalMsgs() []*common.AnnounceMessage {
	if x != nil {
		return x.NormalMsgs
	}
	return nil
}

// 服务器活动数据
type ServerActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldenDragon []*ServerGolden     `protobuf:"bytes,1,rep,name=goldenDragon,proto3" json:"goldenDragon,omitempty"` // 嘉年华全服数据
	GmOpenActs   []*ActivityOpen     `protobuf:"bytes,2,rep,name=gmOpenActs,proto3" json:"gmOpenActs,omitempty"`     // gm控制开启
	Foundation   *GameFoundataion    `protobuf:"bytes,3,opt,name=foundation,proto3" json:"foundation,omitempty"`     // 基金
	LuckDraw     []*GameLuckDraw     `protobuf:"bytes,4,rep,name=luckDraw,proto3" json:"luckDraw,omitempty"`         // 转盘抽奖
	RedRain      []*GameLuckDraw     `protobuf:"bytes,5,rep,name=redRain,proto3" json:"redRain,omitempty"`           // 红包雨
	UsedOpenIds  []int32             `protobuf:"varint,14,rep,packed,name=usedOpenIds,proto3" json:"usedOpenIds,omitempty"`
	Opens        []*GameActivityOpen `protobuf:"bytes,15,rep,name=opens,proto3" json:"opens,omitempty"` // 开启
}

func (x *ServerActivity) Reset() {
	*x = ServerActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerActivity) ProtoMessage() {}

func (x *ServerActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerActivity.ProtoReflect.Descriptor instead.
func (*ServerActivity) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{19}
}

func (x *ServerActivity) GetGoldenDragon() []*ServerGolden {
	if x != nil {
		return x.GoldenDragon
	}
	return nil
}

func (x *ServerActivity) GetGmOpenActs() []*ActivityOpen {
	if x != nil {
		return x.GmOpenActs
	}
	return nil
}

func (x *ServerActivity) GetFoundation() *GameFoundataion {
	if x != nil {
		return x.Foundation
	}
	return nil
}

func (x *ServerActivity) GetLuckDraw() []*GameLuckDraw {
	if x != nil {
		return x.LuckDraw
	}
	return nil
}

func (x *ServerActivity) GetRedRain() []*GameLuckDraw {
	if x != nil {
		return x.RedRain
	}
	return nil
}

func (x *ServerActivity) GetUsedOpenIds() []int32 {
	if x != nil {
		return x.UsedOpenIds
	}
	return nil
}

func (x *ServerActivity) GetOpens() []*GameActivityOpen {
	if x != nil {
		return x.Opens
	}
	return nil
}

// 幸运转盘
type GameLuckDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId            int32    `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                        // 活动开启Id
	LuckDrawPlayTimes uint32   `protobuf:"varint,2,opt,name=LuckDrawPlayTimes,proto3" json:"LuckDrawPlayTimes,omitempty"`  // 幸运转盘全服玩家抽奖累计次数
	HasGivenReward    []uint32 `protobuf:"varint,3,rep,packed,name=hasGivenReward,proto3" json:"hasGivenReward,omitempty"` // 已经给与的奖励,例如:[100,200,300]配置里已领取了100，那就存储100
}

func (x *GameLuckDraw) Reset() {
	*x = GameLuckDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLuckDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLuckDraw) ProtoMessage() {}

func (x *GameLuckDraw) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLuckDraw.ProtoReflect.Descriptor instead.
func (*GameLuckDraw) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{20}
}

func (x *GameLuckDraw) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *GameLuckDraw) GetLuckDrawPlayTimes() uint32 {
	if x != nil {
		return x.LuckDrawPlayTimes
	}
	return 0
}

func (x *GameLuckDraw) GetHasGivenReward() []uint32 {
	if x != nil {
		return x.HasGivenReward
	}
	return nil
}

type GameFoundataion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBuyNum uint32                  `protobuf:"varint,1,opt,name=totalBuyNum,proto3" json:"totalBuyNum,omitempty"` // 累计购买人数
	Cheats      []*GameFoundataionCheat `protobuf:"bytes,2,rep,name=cheats,proto3" json:"cheats,omitempty"`
	CheatTime   int64                   `protobuf:"varint,3,opt,name=cheatTime,proto3" json:"cheatTime,omitempty"`
	FakeBuyNum  uint32                  `protobuf:"varint,4,opt,name=fakeBuyNum,proto3" json:"fakeBuyNum,omitempty"`
}

func (x *GameFoundataion) Reset() {
	*x = GameFoundataion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFoundataion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFoundataion) ProtoMessage() {}

func (x *GameFoundataion) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFoundataion.ProtoReflect.Descriptor instead.
func (*GameFoundataion) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{21}
}

func (x *GameFoundataion) GetTotalBuyNum() uint32 {
	if x != nil {
		return x.TotalBuyNum
	}
	return 0
}

func (x *GameFoundataion) GetCheats() []*GameFoundataionCheat {
	if x != nil {
		return x.Cheats
	}
	return nil
}

func (x *GameFoundataion) GetCheatTime() int64 {
	if x != nil {
		return x.CheatTime
	}
	return 0
}

func (x *GameFoundataion) GetFakeBuyNum() uint32 {
	if x != nil {
		return x.FakeBuyNum
	}
	return 0
}

type GameFoundataionCheat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GameFoundataionCheat) Reset() {
	*x = GameFoundataionCheat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFoundataionCheat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFoundataionCheat) ProtoMessage() {}

func (x *GameFoundataionCheat) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFoundataionCheat.ProtoReflect.Descriptor instead.
func (*GameFoundataionCheat) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{22}
}

func (x *GameFoundataionCheat) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GameFoundataionCheat) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GameActivityOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId int32 `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *GameActivityOpen) Reset() {
	*x = GameActivityOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameActivityOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameActivityOpen) ProtoMessage() {}

func (x *GameActivityOpen) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameActivityOpen.ProtoReflect.Descriptor instead.
func (*GameActivityOpen) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{23}
}

func (x *GameActivityOpen) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type ActivityOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId          int32  `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	Area                uint32 `protobuf:"varint,2,opt,name=area,proto3" json:"area,omitempty"`
	AcType              uint32 `protobuf:"varint,3,opt,name=acType,proto3" json:"acType,omitempty"`
	ServerType          uint32 `protobuf:"varint,4,opt,name=serverType,proto3" json:"serverType,omitempty"`
	StartTimeType       uint32 `protobuf:"varint,5,opt,name=startTimeType,proto3" json:"startTimeType,omitempty"`
	StartTimeStamp      int64  `protobuf:"varint,6,opt,name=startTimeStamp,proto3" json:"startTimeStamp,omitempty"`
	EndTimeStamp        int64  `protobuf:"varint,7,opt,name=endTimeStamp,proto3" json:"endTimeStamp,omitempty"`
	AppearTimeStamp     int64  `protobuf:"varint,8,opt,name=appearTimeStamp,proto3" json:"appearTimeStamp,omitempty"`
	DisappearStamp      int64  `protobuf:"varint,9,opt,name=disappearStamp,proto3" json:"disappearStamp,omitempty"`
	LevelLimit          uint32 `protobuf:"varint,10,opt,name=levelLimit,proto3" json:"levelLimit,omitempty"`
	VipLimit            uint32 `protobuf:"varint,11,opt,name=vipLimit,proto3" json:"vipLimit,omitempty"`
	OpenServerTimeLimit uint32 `protobuf:"varint,12,opt,name=OpenServerTimeLimit,proto3" json:"OpenServerTimeLimit,omitempty"`
	CreateRoleTimeLimit uint32 `protobuf:"varint,13,opt,name=CreateRoleTimeLimit,proto3" json:"CreateRoleTimeLimit,omitempty"`
	Reissue             uint32 `protobuf:"varint,14,opt,name=reissue,proto3" json:"reissue,omitempty"`
	IsOpen              uint32 `protobuf:"varint,15,opt,name=isOpen,proto3" json:"isOpen,omitempty"`
	Plat                uint32 `protobuf:"varint,16,opt,name=plat,proto3" json:"plat,omitempty"`
	ID                  int32  `protobuf:"varint,17,opt,name=ID,proto3" json:"ID,omitempty"`
	Integral            uint32 `protobuf:"varint,18,opt,name=Integral,proto3" json:"Integral,omitempty"`
}

func (x *ActivityOpen) Reset() {
	*x = ActivityOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOpen) ProtoMessage() {}

func (x *ActivityOpen) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOpen.ProtoReflect.Descriptor instead.
func (*ActivityOpen) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{24}
}

func (x *ActivityOpen) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityOpen) GetArea() uint32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *ActivityOpen) GetAcType() uint32 {
	if x != nil {
		return x.AcType
	}
	return 0
}

func (x *ActivityOpen) GetServerType() uint32 {
	if x != nil {
		return x.ServerType
	}
	return 0
}

func (x *ActivityOpen) GetStartTimeType() uint32 {
	if x != nil {
		return x.StartTimeType
	}
	return 0
}

func (x *ActivityOpen) GetStartTimeStamp() int64 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *ActivityOpen) GetEndTimeStamp() int64 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *ActivityOpen) GetAppearTimeStamp() int64 {
	if x != nil {
		return x.AppearTimeStamp
	}
	return 0
}

func (x *ActivityOpen) GetDisappearStamp() int64 {
	if x != nil {
		return x.DisappearStamp
	}
	return 0
}

func (x *ActivityOpen) GetLevelLimit() uint32 {
	if x != nil {
		return x.LevelLimit
	}
	return 0
}

func (x *ActivityOpen) GetVipLimit() uint32 {
	if x != nil {
		return x.VipLimit
	}
	return 0
}

func (x *ActivityOpen) GetOpenServerTimeLimit() uint32 {
	if x != nil {
		return x.OpenServerTimeLimit
	}
	return 0
}

func (x *ActivityOpen) GetCreateRoleTimeLimit() uint32 {
	if x != nil {
		return x.CreateRoleTimeLimit
	}
	return 0
}

func (x *ActivityOpen) GetReissue() uint32 {
	if x != nil {
		return x.Reissue
	}
	return 0
}

func (x *ActivityOpen) GetIsOpen() uint32 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

func (x *ActivityOpen) GetPlat() uint32 {
	if x != nil {
		return x.Plat
	}
	return 0
}

func (x *ActivityOpen) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ActivityOpen) GetIntegral() uint32 {
	if x != nil {
		return x.Integral
	}
	return 0
}

type ServerGolden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID int32                `protobuf:"varint,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Prize1     []*ServerGoldenPrize `protobuf:"bytes,2,rep,name=prize1,proto3" json:"prize1,omitempty"`    // 大奖
	Prize2     []*ServerGoldenPrize `protobuf:"bytes,3,rep,name=prize2,proto3" json:"prize2,omitempty"`    // 一等奖
	GenTime    int64                `protobuf:"varint,4,opt,name=genTime,proto3" json:"genTime,omitempty"` // 生成时间
}

func (x *ServerGolden) Reset() {
	*x = ServerGolden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGolden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGolden) ProtoMessage() {}

func (x *ServerGolden) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGolden.ProtoReflect.Descriptor instead.
func (*ServerGolden) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{25}
}

func (x *ServerGolden) GetActivityID() int32 {
	if x != nil {
		return x.ActivityID
	}
	return 0
}

func (x *ServerGolden) GetPrize1() []*ServerGoldenPrize {
	if x != nil {
		return x.Prize1
	}
	return nil
}

func (x *ServerGolden) GetPrize2() []*ServerGoldenPrize {
	if x != nil {
		return x.Prize2
	}
	return nil
}

func (x *ServerGolden) GetGenTime() int64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

type ServerGoldenPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day       int32    `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`                    // 天
	Total     int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                // 总共个数
	PlayerIDs []uint64 `protobuf:"varint,3,rep,packed,name=playerIDs,proto3" json:"playerIDs,omitempty"` // 获领玩家
}

func (x *ServerGoldenPrize) Reset() {
	*x = ServerGoldenPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGoldenPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGoldenPrize) ProtoMessage() {}

func (x *ServerGoldenPrize) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGoldenPrize.ProtoReflect.Descriptor instead.
func (*ServerGoldenPrize) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{26}
}

func (x *ServerGoldenPrize) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ServerGoldenPrize) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ServerGoldenPrize) GetPlayerIDs() []uint64 {
	if x != nil {
		return x.PlayerIDs
	}
	return nil
}

// 宝物抽卡
type ServerDrawTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuckyScore          uint32           `protobuf:"varint,1,opt,name=luckyScore,proto3" json:"luckyScore,omitempty"`                                                                                            // 幸运积分
	OpenServerScoreTime []*DayTime       `protobuf:"bytes,2,rep,name=openServerScoreTime,proto3" json:"openServerScoreTime,omitempty"`                                                                           // 前三天事件点
	PlayerTimes         map[uint64]int32 `protobuf:"bytes,3,rep,name=playerTimes,proto3" json:"playerTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 玩家获得次数
	NextLuckyTime       int64            `protobuf:"varint,4,opt,name=nextLuckyTime,proto3" json:"nextLuckyTime,omitempty"`                                                                                      // 下次产生幸运玩家时间
}

func (x *ServerDrawTreasure) Reset() {
	*x = ServerDrawTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerDrawTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerDrawTreasure) ProtoMessage() {}

func (x *ServerDrawTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerDrawTreasure.ProtoReflect.Descriptor instead.
func (*ServerDrawTreasure) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{27}
}

func (x *ServerDrawTreasure) GetLuckyScore() uint32 {
	if x != nil {
		return x.LuckyScore
	}
	return 0
}

func (x *ServerDrawTreasure) GetOpenServerScoreTime() []*DayTime {
	if x != nil {
		return x.OpenServerScoreTime
	}
	return nil
}

func (x *ServerDrawTreasure) GetPlayerTimes() map[uint64]int32 {
	if x != nil {
		return x.PlayerTimes
	}
	return nil
}

func (x *ServerDrawTreasure) GetNextLuckyTime() int64 {
	if x != nil {
		return x.NextLuckyTime
	}
	return 0
}

type DayTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`         // 天
	Seconds int32  `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"` // 秒
	CanUse  bool   `protobuf:"varint,3,opt,name=canUse,proto3" json:"canUse,omitempty"`   // 是否加过
}

func (x *DayTime) Reset() {
	*x = DayTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTime) ProtoMessage() {}

func (x *DayTime) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTime.ProtoReflect.Descriptor instead.
func (*DayTime) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{28}
}

func (x *DayTime) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DayTime) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *DayTime) GetCanUse() bool {
	if x != nil {
		return x.CanUse
	}
	return false
}

type ServerDrawWuHun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuckyScore          uint32           `protobuf:"varint,1,opt,name=luckyScore,proto3" json:"luckyScore,omitempty"`                                                                                            // 幸运积分
	OpenServerScoreTime []*DayTime       `protobuf:"bytes,2,rep,name=openServerScoreTime,proto3" json:"openServerScoreTime,omitempty"`                                                                           // 前三天事件点
	PlayerTimes         map[uint64]int32 `protobuf:"bytes,3,rep,name=playerTimes,proto3" json:"playerTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 玩家获得次数
	NextLuckyTime       int64            `protobuf:"varint,4,opt,name=nextLuckyTime,proto3" json:"nextLuckyTime,omitempty"`                                                                                      // 下次产生幸运玩家时间
	BroadcastCount      uint32           `protobuf:"varint,5,opt,name=broadcastCount,proto3" json:"broadcastCount,omitempty"`                                                                                    // 广播数量
}

func (x *ServerDrawWuHun) Reset() {
	*x = ServerDrawWuHun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerDrawWuHun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerDrawWuHun) ProtoMessage() {}

func (x *ServerDrawWuHun) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerDrawWuHun.ProtoReflect.Descriptor instead.
func (*ServerDrawWuHun) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{29}
}

func (x *ServerDrawWuHun) GetLuckyScore() uint32 {
	if x != nil {
		return x.LuckyScore
	}
	return 0
}

func (x *ServerDrawWuHun) GetOpenServerScoreTime() []*DayTime {
	if x != nil {
		return x.OpenServerScoreTime
	}
	return nil
}

func (x *ServerDrawWuHun) GetPlayerTimes() map[uint64]int32 {
	if x != nil {
		return x.PlayerTimes
	}
	return nil
}

func (x *ServerDrawWuHun) GetNextLuckyTime() int64 {
	if x != nil {
		return x.NextLuckyTime
	}
	return 0
}

func (x *ServerDrawWuHun) GetBroadcastCount() uint32 {
	if x != nil {
		return x.BroadcastCount
	}
	return 0
}

type DrawMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodayDrawTimes uint32           `protobuf:"varint,1,opt,name=todayDrawTimes,proto3" json:"todayDrawTimes,omitempty"`                                                                                // 当天累计抽奖次数
	TodayBuyTimes  uint32           `protobuf:"varint,2,opt,name=todayBuyTimes,proto3" json:"todayBuyTimes,omitempty"`                                                                                  // 当天累计购买次数
	DrawTimes      uint32           `protobuf:"varint,3,opt,name=drawTimes,proto3" json:"drawTimes,omitempty"`                                                                                          // 累计抽奖次数
	CardScore      map[int32]uint32 `protobuf:"bytes,4,rep,name=cardScore,proto3" json:"cardScore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 卡池积分
	DrawNum        map[int32]uint32 `protobuf:"bytes,5,rep,name=drawNum,proto3" json:"drawNum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     // 抽中卡池次数
}

func (x *DrawMount) Reset() {
	*x = DrawMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawMount) ProtoMessage() {}

func (x *DrawMount) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawMount.ProtoReflect.Descriptor instead.
func (*DrawMount) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{30}
}

func (x *DrawMount) GetTodayDrawTimes() uint32 {
	if x != nil {
		return x.TodayDrawTimes
	}
	return 0
}

func (x *DrawMount) GetTodayBuyTimes() uint32 {
	if x != nil {
		return x.TodayBuyTimes
	}
	return 0
}

func (x *DrawMount) GetDrawTimes() uint32 {
	if x != nil {
		return x.DrawTimes
	}
	return 0
}

func (x *DrawMount) GetCardScore() map[int32]uint32 {
	if x != nil {
		return x.CardScore
	}
	return nil
}

func (x *DrawMount) GetDrawNum() map[int32]uint32 {
	if x != nil {
		return x.DrawNum
	}
	return nil
}

type UserRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*common.PlayerRankReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *UserRank) Reset() {
	*x = UserRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRank) ProtoMessage() {}

func (x *UserRank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRank.ProtoReflect.Descriptor instead.
func (*UserRank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{31}
}

func (x *UserRank) GetRewards() []*common.PlayerRankReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type RankItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value     uint64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	TimeStamp int64   `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	OldRank   uint32  `protobuf:"varint,4,opt,name=oldRank,proto3" json:"oldRank,omitempty"` // 昨天的排行
	Extra     []int32 `protobuf:"varint,5,rep,packed,name=extra,proto3" json:"extra,omitempty"`
}

func (x *RankItemData) Reset() {
	*x = RankItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankItemData) ProtoMessage() {}

func (x *RankItemData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankItemData.ProtoReflect.Descriptor instead.
func (*RankItemData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{32}
}

func (x *RankItemData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RankItemData) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RankItemData) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *RankItemData) GetOldRank() uint32 {
	if x != nil {
		return x.OldRank
	}
	return 0
}

func (x *RankItemData) GetExtra() []int32 {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 排行榜数据
type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 排行榜类型
	FirstRankPlayer   string `protobuf:"bytes,4,opt,name=firstRankPlayer,proto3" json:"firstRankPlayer,omitempty"`
	KeepFirstRankDays uint32 `protobuf:"varint,5,opt,name=keepFirstRankDays,proto3" json:"keepFirstRankDays,omitempty"` // 保持第一天的时间
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{33}
}

func (x *RankInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RankInfo) GetFirstRankPlayer() string {
	if x != nil {
		return x.FirstRankPlayer
	}
	return ""
}

func (x *RankInfo) GetKeepFirstRankDays() uint32 {
	if x != nil {
		return x.KeepFirstRankDays
	}
	return 0
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward      []*RankReward               `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty"`                                                                                                    // 奖励
	SimpleInfo  map[uint64]*RankSimpleInfo  `protobuf:"bytes,3,rep,name=simpleInfo,proto3" json:"simpleInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // 奖励对应名字、头像等
	GuildSimple map[uint64]*RankGuildSimple `protobuf:"bytes,4,rep,name=guildSimple,proto3" json:"guildSimple,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 联盟名字对应
	Ranks       []*RankInfo                 `protobuf:"bytes,5,rep,name=ranks,proto3" json:"ranks,omitempty"`                                                                                                      // 排行榜
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{34}
}

func (x *Rank) GetReward() []*RankReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Rank) GetSimpleInfo() map[uint64]*RankSimpleInfo {
	if x != nil {
		return x.SimpleInfo
	}
	return nil
}

func (x *Rank) GetGuildSimple() map[uint64]*RankGuildSimple {
	if x != nil {
		return x.GuildSimple
	}
	return nil
}

func (x *Rank) GetRanks() []*RankInfo {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type RankSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar      int32  `protobuf:"varint,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarFrame int32  `protobuf:"varint,3,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"`
}

func (x *RankSimpleInfo) Reset() {
	*x = RankSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankSimpleInfo) ProtoMessage() {}

func (x *RankSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankSimpleInfo.ProtoReflect.Descriptor instead.
func (*RankSimpleInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{35}
}

func (x *RankSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankSimpleInfo) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *RankSimpleInfo) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

type RankGuildSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildName string `protobuf:"bytes,1,opt,name=guildName,proto3" json:"guildName,omitempty"` // 帮派名字
	Badge     int32  `protobuf:"varint,2,opt,name=badge,proto3" json:"badge,omitempty"`        //徽章
	FlagSide  int32  `protobuf:"varint,3,opt,name=flagSide,proto3" json:"flagSide,omitempty"`  //旗边
	Color     int32  `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`        //颜色
	Word      string `protobuf:"bytes,5,opt,name=word,proto3" json:"word,omitempty"`           // 。。
}

func (x *RankGuildSimple) Reset() {
	*x = RankGuildSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankGuildSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankGuildSimple) ProtoMessage() {}

func (x *RankGuildSimple) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankGuildSimple.ProtoReflect.Descriptor instead.
func (*RankGuildSimple) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{36}
}

func (x *RankGuildSimple) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *RankGuildSimple) GetBadge() int32 {
	if x != nil {
		return x.Badge
	}
	return 0
}

func (x *RankGuildSimple) GetFlagSide() int32 {
	if x != nil {
		return x.FlagSide
	}
	return 0
}

func (x *RankGuildSimple) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *RankGuildSimple) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type RankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType int32             `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"`
	Items    []*RankRewardItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RankReward) Reset() {
	*x = RankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankReward) ProtoMessage() {}

func (x *RankReward) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankReward.ProtoReflect.Descriptor instead.
func (*RankReward) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{37}
}

func (x *RankReward) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *RankReward) GetItems() []*RankRewardItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type RankRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Players []*RankRewardPlayer `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *RankRewardItem) Reset() {
	*x = RankRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRewardItem) ProtoMessage() {}

func (x *RankRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRewardItem.ProtoReflect.Descriptor instead.
func (*RankRewardItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{38}
}

func (x *RankRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RankRewardItem) GetPlayers() []*RankRewardPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type RankRewardPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID  uint64 `protobuf:"varint,2,opt,name=playerID,proto3" json:"playerID,omitempty"`
	ReachTime int64  `protobuf:"varint,3,opt,name=reachTime,proto3" json:"reachTime,omitempty"`
}

func (x *RankRewardPlayer) Reset() {
	*x = RankRewardPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRewardPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRewardPlayer) ProtoMessage() {}

func (x *RankRewardPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRewardPlayer.ProtoReflect.Descriptor instead.
func (*RankRewardPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{39}
}

func (x *RankRewardPlayer) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *RankRewardPlayer) GetReachTime() int64 {
	if x != nil {
		return x.ReachTime
	}
	return 0
}

//--------------------------------------------------------------------------------------------------玩家
//MsgCache 用户消息缓存
type MsgCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      int32  `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`          // 消息id
	CmdID   uint32 `protobuf:"varint,2,opt,name=cmdID,proto3" json:"cmdID,omitempty"`    // 命令id
	MsgData []byte `protobuf:"bytes,3,opt,name=msgData,proto3" json:"msgData,omitempty"` // 消息内容
}

func (x *MsgCache) Reset() {
	*x = MsgCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCache) ProtoMessage() {}

func (x *MsgCache) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCache.ProtoReflect.Descriptor instead.
func (*MsgCache) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{40}
}

func (x *MsgCache) GetSn() int32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *MsgCache) GetCmdID() uint32 {
	if x != nil {
		return x.CmdID
	}
	return 0
}

func (x *MsgCache) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

// 主将
type Commander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                  //模板id
	Level              uint32                                `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                                                                            //等级
	Exp                uint32                                `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                //当前等级的经验
	Potential          uint32                                `protobuf:"varint,5,opt,name=potential,proto3" json:"potential,omitempty"`                                                                                                    //是否开启潜能
	Quality            uint32                                `protobuf:"varint,6,opt,name=quality,proto3" json:"quality,omitempty"`                                                                                                        //品级
	StarLevel          uint32                                `protobuf:"varint,7,opt,name=starLevel,proto3" json:"starLevel,omitempty"`                                                                                                    //星级
	LittleStarLevel    uint32                                `protobuf:"varint,8,opt,name=littleStarLevel,proto3" json:"littleStarLevel,omitempty"`                                                                                        //当前小星等级
	BasePower          uint32                                `protobuf:"varint,10,opt,name=basePower,proto3" json:"basePower,omitempty"`                                                                                                   //基础战斗力
	LeadershipLevel    uint32                                `protobuf:"varint,11,opt,name=leadershipLevel,proto3" json:"leadershipLevel,omitempty"`                                                                                       //统率能力等级
	SoldierId          int32                                 `protobuf:"varint,12,opt,name=soldierId,proto3" json:"soldierId,omitempty"`                                                                                                   //携带的兵团ID -1无兵团ID
	Skills             map[uint32]*common.CommanderSkill     `protobuf:"bytes,13,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                 //技能
	Equips             map[uint32]*common.CommanderEquip     `protobuf:"bytes,14,rep,name=equips,proto3" json:"equips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                 //装备
	Power              uint32                                `protobuf:"varint,15,opt,name=power,proto3" json:"power,omitempty"`                                                                                                           //默认的图鉴的战斗力
	Skin               int32                                 `protobuf:"varint,16,opt,name=skin,proto3" json:"skin,omitempty"`                                                                                                             //皮肤
	Genius             uint32                                `protobuf:"varint,17,opt,name=genius,proto3" json:"genius,omitempty"`                                                                                                         //天赋阶段
	Potentials         map[uint32]*common.CommanderPotential `protobuf:"bytes,18,rep,name=potentials,proto3" json:"potentials,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`         //潜能
	Medications        map[uint32]uint32                     `protobuf:"bytes,19,rep,name=medications,proto3" json:"medications,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`      //丹药
	AwakeLevel         uint32                                `protobuf:"varint,20,opt,name=awakeLevel,proto3" json:"awakeLevel,omitempty"`                                                                                                 // 主将觉醒星级
	AwakeStatus        uint32                                `protobuf:"varint,21,opt,name=awakeStatus,proto3" json:"awakeStatus,omitempty"`                                                                                               // 主将觉醒状态 0：禁止觉醒 1：未觉醒 2：觉醒中 3：已觉醒
	AwakeSkill         *common.CommanderSkill                `protobuf:"bytes,22,opt,name=awakeSkill,proto3" json:"awakeSkill,omitempty"`                                                                                                  // 觉醒技能
	SeeStrategy        int32                                 `protobuf:"varint,23,opt,name=seeStrategy,proto3" json:"seeStrategy,omitempty"`                                                                                               // 是否查看了攻略 0：没查看 1：查看了
	MedicationProgress uint32                                `protobuf:"varint,24,opt,name=medicationProgress,proto3" json:"medicationProgress,omitempty"`                                                                                 // 丹药进度
	Zizhi              uint32                                `protobuf:"varint,25,opt,name=zizhi,proto3" json:"zizhi,omitempty"`                                                                                                           // 资质
	WuHuns             []uint32                              `protobuf:"varint,26,rep,packed,name=wuHuns,proto3" json:"wuHuns,omitempty"`                                                                                                  //武魂
	MountId            int32                                 `protobuf:"varint,27,opt,name=mountId,proto3" json:"mountId,omitempty"`                                                                                                       // 穿戴的坐骑Id
	Destinys           map[uint32]uint32                     `protobuf:"bytes,28,rep,name=destinys,proto3" json:"destinys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`            //天命  数据兼容废弃
	DestinyProgress    uint32                                `protobuf:"varint,29,opt,name=destinyProgress,proto3" json:"destinyProgress,omitempty"`                                                                                       //天命进度
	DestinyFloats      map[uint32]float64                    `protobuf:"bytes,30,rep,name=destinyFloats,proto3" json:"destinyFloats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` //天命  真正用的
	OnlyEquipId        uint32                                `protobuf:"varint,31,opt,name=onlyEquipId,proto3" json:"onlyEquipId,omitempty"`                                                                                               // 穿戴的专属装备
	DeputyId           int32                                 `protobuf:"varint,32,opt,name=deputyId,proto3" json:"deputyId,omitempty"`                                                                                                     //副将模板id
	ZizhiProgress      int32                                 `protobuf:"varint,33,opt,name=zizhiProgress,proto3" json:"zizhiProgress,omitempty"`                                                                                           //资质阶段
}

func (x *Commander) Reset() {
	*x = Commander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commander) ProtoMessage() {}

func (x *Commander) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commander.ProtoReflect.Descriptor instead.
func (*Commander) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{41}
}

func (x *Commander) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Commander) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Commander) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Commander) GetPotential() uint32 {
	if x != nil {
		return x.Potential
	}
	return 0
}

func (x *Commander) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Commander) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *Commander) GetLittleStarLevel() uint32 {
	if x != nil {
		return x.LittleStarLevel
	}
	return 0
}

func (x *Commander) GetBasePower() uint32 {
	if x != nil {
		return x.BasePower
	}
	return 0
}

func (x *Commander) GetLeadershipLevel() uint32 {
	if x != nil {
		return x.LeadershipLevel
	}
	return 0
}

func (x *Commander) GetSoldierId() int32 {
	if x != nil {
		return x.SoldierId
	}
	return 0
}

func (x *Commander) GetSkills() map[uint32]*common.CommanderSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Commander) GetEquips() map[uint32]*common.CommanderEquip {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *Commander) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Commander) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *Commander) GetGenius() uint32 {
	if x != nil {
		return x.Genius
	}
	return 0
}

func (x *Commander) GetPotentials() map[uint32]*common.CommanderPotential {
	if x != nil {
		return x.Potentials
	}
	return nil
}

func (x *Commander) GetMedications() map[uint32]uint32 {
	if x != nil {
		return x.Medications
	}
	return nil
}

func (x *Commander) GetAwakeLevel() uint32 {
	if x != nil {
		return x.AwakeLevel
	}
	return 0
}

func (x *Commander) GetAwakeStatus() uint32 {
	if x != nil {
		return x.AwakeStatus
	}
	return 0
}

func (x *Commander) GetAwakeSkill() *common.CommanderSkill {
	if x != nil {
		return x.AwakeSkill
	}
	return nil
}

func (x *Commander) GetSeeStrategy() int32 {
	if x != nil {
		return x.SeeStrategy
	}
	return 0
}

func (x *Commander) GetMedicationProgress() uint32 {
	if x != nil {
		return x.MedicationProgress
	}
	return 0
}

func (x *Commander) GetZizhi() uint32 {
	if x != nil {
		return x.Zizhi
	}
	return 0
}

func (x *Commander) GetWuHuns() []uint32 {
	if x != nil {
		return x.WuHuns
	}
	return nil
}

func (x *Commander) GetMountId() int32 {
	if x != nil {
		return x.MountId
	}
	return 0
}

func (x *Commander) GetDestinys() map[uint32]uint32 {
	if x != nil {
		return x.Destinys
	}
	return nil
}

func (x *Commander) GetDestinyProgress() uint32 {
	if x != nil {
		return x.DestinyProgress
	}
	return 0
}

func (x *Commander) GetDestinyFloats() map[uint32]float64 {
	if x != nil {
		return x.DestinyFloats
	}
	return nil
}

func (x *Commander) GetOnlyEquipId() uint32 {
	if x != nil {
		return x.OnlyEquipId
	}
	return 0
}

func (x *Commander) GetDeputyId() int32 {
	if x != nil {
		return x.DeputyId
	}
	return 0
}

func (x *Commander) GetZizhiProgress() int32 {
	if x != nil {
		return x.ZizhiProgress
	}
	return 0
}

//邮件数据的包装
type UserMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasGetInitMail bool                    `protobuf:"varint,1,opt,name=hasGetInitMail,proto3" json:"hasGetInitMail,omitempty"`                                                                       //是否已经领取初始化有机胺
	LastMailId     uint64                  `protobuf:"varint,2,opt,name=lastMailId,proto3" json:"lastMailId,omitempty"`                                                                               //最后一次领取全局邮件的id
	Mails          map[uint64]*common.Mail `protobuf:"bytes,3,rep,name=mails,proto3" json:"mails,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //多个列表
}

func (x *UserMail) Reset() {
	*x = UserMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMail) ProtoMessage() {}

func (x *UserMail) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMail.ProtoReflect.Descriptor instead.
func (*UserMail) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{42}
}

func (x *UserMail) GetHasGetInitMail() bool {
	if x != nil {
		return x.HasGetInitMail
	}
	return false
}

func (x *UserMail) GetLastMailId() uint64 {
	if x != nil {
		return x.LastMailId
	}
	return 0
}

func (x *UserMail) GetMails() map[uint64]*common.Mail {
	if x != nil {
		return x.Mails
	}
	return nil
}

//个人的联盟数据
type UserGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills                        map[int32]uint32        `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                                //技能
	LastNoticeId                  int64                   `protobuf:"varint,2,opt,name=lastNoticeId,proto3" json:"lastNoticeId,omitempty"`                                                                                                             //上次获取的通知消息id
	DayBuildTimes                 uint32                  `protobuf:"varint,3,opt,name=dayBuildTimes,proto3" json:"dayBuildTimes,omitempty"`                                                                                                           //今日构造次数
	ReceivedActivityTag           []uint32                `protobuf:"varint,4,rep,packed,name=receivedActivityTag,proto3" json:"receivedActivityTag,omitempty"`                                                                                        //已领取的活跃度奖励O
	NextCrit                      bool                    `protobuf:"varint,5,opt,name=nextCrit,proto3" json:"nextCrit,omitempty"`                                                                                                                     //下次暴击
	LastGetSalaryTime             int64                   `protobuf:"varint,6,opt,name=lastGetSalaryTime,proto3" json:"lastGetSalaryTime,omitempty"`                                                                                                   // 上次领取每日俸禄的时间
	TodayPubExchangeBaseTimes     uint32                  `protobuf:"varint,7,opt,name=todayPubExchangeBaseTimes,proto3" json:"todayPubExchangeBaseTimes,omitempty"`                                                                                   //本日发布商品基础次数(当日第一次所在联盟等级的基础次数-需要继承到下个联盟)
	PubExchangeTimes              uint32                  `protobuf:"varint,8,opt,name=pubExchangeTimes,proto3" json:"pubExchangeTimes,omitempty"`                                                                                                     //发布商品次数
	LastExchangeRefresh           int64                   `protobuf:"varint,9,opt,name=lastExchangeRefresh,proto3" json:"lastExchangeRefresh,omitempty"`                                                                                               //上次交易行刷新时间
	ExchangeGoods                 map[uint64]*GuildGoods  `protobuf:"bytes,10,rep,name=exchangeGoods,proto3" json:"exchangeGoods,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                  //交易行个人刷新物品
	MoveTimes                     uint32                  `protobuf:"varint,11,opt,name=moveTimes,proto3" json:"moveTimes,omitempty"`                                                                                                                  //移动次数（只有占领了才算一次移动）
	BuyMoveTimes                  uint32                  `protobuf:"varint,12,opt,name=buyMoveTimes,proto3" json:"buyMoveTimes,omitempty"`                                                                                                            //购买过的移动次数
	WeekFirstEnterGuild           uint64                  `protobuf:"varint,13,opt,name=weekFirstEnterGuild,proto3" json:"weekFirstEnterGuild,omitempty"`                                                                                              // 本周首次进入是哪个联盟(换联盟某些功能禁用)
	TaskComplete                  map[uint32]bool         `protobuf:"bytes,14,rep,name=taskComplete,proto3" json:"taskComplete,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                   // 完成了的任务id，是否已领取奖励
	HeroicMail                    *common.Mail            `protobuf:"bytes,15,opt,name=heroicMail,proto3" json:"heroicMail,omitempty"`                                                                                                                 // 壮行邮件
	TotalOfflineMail              *common.Mail            `protobuf:"bytes,16,opt,name=totalOfflineMail,proto3" json:"totalOfflineMail,omitempty"`                                                                                                     // 总离线奖励（任务，完成度，税收）
	OccupiedProgressState         map[uint32]bool         `protobuf:"bytes,17,rep,name=occupiedProgressState,proto3" json:"occupiedProgressState,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 完成度奖励领取状态
	GuildGveBuffs                 map[uint32]uint32       `protobuf:"bytes,18,rep,name=guildGveBuffs,proto3" json:"guildGveBuffs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                 // 联盟gve增益效果列表
	DayDamageRecord               *common.GveDamageRecord `protobuf:"bytes,19,opt,name=dayDamageRecord,proto3" json:"dayDamageRecord,omitempty"`                                                                                                       // 每天的伤害记录
	CurrentWeekGveId              uint32                  `protobuf:"varint,20,opt,name=currentWeekGveId,proto3" json:"currentWeekGveId,omitempty"`                                                                                                    // 当周首次攻打的gveid
	LastGetDayDidHpRewardPos      uint32                  `protobuf:"varint,21,opt,name=lastGetDayDidHpRewardPos,proto3" json:"lastGetDayDidHpRewardPos,omitempty"`                                                                                    // 上次玩家领取过奖励的每日攻城值档位，用于绑定在玩家身上
	GveChange                     *GveChange              `protobuf:"bytes,22,opt,name=gveChange,proto3" json:"gveChange,omitempty"`                                                                                                                   // gve相关变化数据
	TotalDamageRecord             *common.GveDamageRecord `protobuf:"bytes,23,opt,name=totalDamageRecord,proto3" json:"totalDamageRecord,omitempty"`                                                                                                   // 总的伤害记录
	SameGveInteractiveBoxAndTrans []*common.Coordinate    `protobuf:"bytes,24,rep,name=sameGveInteractiveBoxAndTrans,proto3" json:"sameGveInteractiveBoxAndTrans,omitempty"`                                                                           // 玩家同关卡交互的宝箱和运粮
	GveHistoryMaxDmg              map[uint32]uint64       `protobuf:"bytes,25,rep,name=gveHistoryMaxDmg,proto3" json:"gveHistoryMaxDmg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // 玩家gve地图最高伤害
	GveHistoryMaxPower            map[uint32]uint64       `protobuf:"bytes,26,rep,name=gveHistoryMaxPower,proto3" json:"gveHistoryMaxPower,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`       // 玩家gve地图最高战力
	ActivitySubscribeDueTime      int64                   `protobuf:"varint,27,opt,name=activitySubscribeDueTime,proto3" json:"activitySubscribeDueTime,omitempty"`                                                                                    // 订阅到期时间
	OverflowTimes                 uint32                  `protobuf:"varint,28,opt,name=overflowTimes,proto3" json:"overflowTimes,omitempty"`                                                                                                          // 溢出移动次数
	LastDealCrossDayTime          int64                   `protobuf:"varint,29,opt,name=lastDealCrossDayTime,proto3" json:"lastDealCrossDayTime,omitempty"`                                                                                            // 是否已经处理过跨天，场景：离开联盟->跨天->被动加入联盟，有些数据需要在加入联盟的时候进行跨天处理
	LastDealCrossWeekTime         int64                   `protobuf:"varint,30,opt,name=lastDealCrossWeekTime,proto3" json:"lastDealCrossWeekTime,omitempty"`                                                                                          // 是否已经处理过跨周，场景：离开联盟->跨天->被动加入联盟，有些数据需要加入联盟的时候进行跨天处理
	IsAutoFormationSiege          bool                    `protobuf:"varint,31,opt,name=isAutoFormationSiege,proto3" json:"isAutoFormationSiege,omitempty"`                                                                                            // 玩家选择是否二阶段自动布阵
	AutoFormationSiegeTeam        int32                   `protobuf:"varint,32,opt,name=autoFormationSiegeTeam,proto3" json:"autoFormationSiegeTeam,omitempty"`                                                                                        // 玩家选择自动二阶段布阵的阵营
}

func (x *UserGuild) Reset() {
	*x = UserGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGuild) ProtoMessage() {}

func (x *UserGuild) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGuild.ProtoReflect.Descriptor instead.
func (*UserGuild) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{43}
}

func (x *UserGuild) GetSkills() map[int32]uint32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *UserGuild) GetLastNoticeId() int64 {
	if x != nil {
		return x.LastNoticeId
	}
	return 0
}

func (x *UserGuild) GetDayBuildTimes() uint32 {
	if x != nil {
		return x.DayBuildTimes
	}
	return 0
}

func (x *UserGuild) GetReceivedActivityTag() []uint32 {
	if x != nil {
		return x.ReceivedActivityTag
	}
	return nil
}

func (x *UserGuild) GetNextCrit() bool {
	if x != nil {
		return x.NextCrit
	}
	return false
}

func (x *UserGuild) GetLastGetSalaryTime() int64 {
	if x != nil {
		return x.LastGetSalaryTime
	}
	return 0
}

func (x *UserGuild) GetTodayPubExchangeBaseTimes() uint32 {
	if x != nil {
		return x.TodayPubExchangeBaseTimes
	}
	return 0
}

func (x *UserGuild) GetPubExchangeTimes() uint32 {
	if x != nil {
		return x.PubExchangeTimes
	}
	return 0
}

func (x *UserGuild) GetLastExchangeRefresh() int64 {
	if x != nil {
		return x.LastExchangeRefresh
	}
	return 0
}

func (x *UserGuild) GetExchangeGoods() map[uint64]*GuildGoods {
	if x != nil {
		return x.ExchangeGoods
	}
	return nil
}

func (x *UserGuild) GetMoveTimes() uint32 {
	if x != nil {
		return x.MoveTimes
	}
	return 0
}

func (x *UserGuild) GetBuyMoveTimes() uint32 {
	if x != nil {
		return x.BuyMoveTimes
	}
	return 0
}

func (x *UserGuild) GetWeekFirstEnterGuild() uint64 {
	if x != nil {
		return x.WeekFirstEnterGuild
	}
	return 0
}

func (x *UserGuild) GetTaskComplete() map[uint32]bool {
	if x != nil {
		return x.TaskComplete
	}
	return nil
}

func (x *UserGuild) GetHeroicMail() *common.Mail {
	if x != nil {
		return x.HeroicMail
	}
	return nil
}

func (x *UserGuild) GetTotalOfflineMail() *common.Mail {
	if x != nil {
		return x.TotalOfflineMail
	}
	return nil
}

func (x *UserGuild) GetOccupiedProgressState() map[uint32]bool {
	if x != nil {
		return x.OccupiedProgressState
	}
	return nil
}

func (x *UserGuild) GetGuildGveBuffs() map[uint32]uint32 {
	if x != nil {
		return x.GuildGveBuffs
	}
	return nil
}

func (x *UserGuild) GetDayDamageRecord() *common.GveDamageRecord {
	if x != nil {
		return x.DayDamageRecord
	}
	return nil
}

func (x *UserGuild) GetCurrentWeekGveId() uint32 {
	if x != nil {
		return x.CurrentWeekGveId
	}
	return 0
}

func (x *UserGuild) GetLastGetDayDidHpRewardPos() uint32 {
	if x != nil {
		return x.LastGetDayDidHpRewardPos
	}
	return 0
}

func (x *UserGuild) GetGveChange() *GveChange {
	if x != nil {
		return x.GveChange
	}
	return nil
}

func (x *UserGuild) GetTotalDamageRecord() *common.GveDamageRecord {
	if x != nil {
		return x.TotalDamageRecord
	}
	return nil
}

func (x *UserGuild) GetSameGveInteractiveBoxAndTrans() []*common.Coordinate {
	if x != nil {
		return x.SameGveInteractiveBoxAndTrans
	}
	return nil
}

func (x *UserGuild) GetGveHistoryMaxDmg() map[uint32]uint64 {
	if x != nil {
		return x.GveHistoryMaxDmg
	}
	return nil
}

func (x *UserGuild) GetGveHistoryMaxPower() map[uint32]uint64 {
	if x != nil {
		return x.GveHistoryMaxPower
	}
	return nil
}

func (x *UserGuild) GetActivitySubscribeDueTime() int64 {
	if x != nil {
		return x.ActivitySubscribeDueTime
	}
	return 0
}

func (x *UserGuild) GetOverflowTimes() uint32 {
	if x != nil {
		return x.OverflowTimes
	}
	return 0
}

func (x *UserGuild) GetLastDealCrossDayTime() int64 {
	if x != nil {
		return x.LastDealCrossDayTime
	}
	return 0
}

func (x *UserGuild) GetLastDealCrossWeekTime() int64 {
	if x != nil {
		return x.LastDealCrossWeekTime
	}
	return 0
}

func (x *UserGuild) GetIsAutoFormationSiege() bool {
	if x != nil {
		return x.IsAutoFormationSiege
	}
	return false
}

func (x *UserGuild) GetAutoFormationSiegeTeam() int32 {
	if x != nil {
		return x.AutoFormationSiegeTeam
	}
	return 0
}

//玩家设置
type UserSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatars             []int32                           `protobuf:"varint,1,rep,packed,name=avatars,proto3" json:"avatars,omitempty"`                                                                                                          //所有头像
	AvatarFrames        []int32                           `protobuf:"varint,2,rep,packed,name=avatarFrames,proto3" json:"avatarFrames,omitempty"`                                                                                                //所有头像框
	UserSwitch          map[int32]bool                    `protobuf:"bytes,3,rep,name=userSwitch,proto3" json:"userSwitch,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                  //功能开关(音乐,音效,推送)
	RenameTimes         uint32                            `protobuf:"varint,4,opt,name=renameTimes,proto3" json:"renameTimes,omitempty"`                                                                                                         //重命名次数
	Models              []int32                           `protobuf:"varint,6,rep,packed,name=models,proto3" json:"models,omitempty"`                                                                                                            // 所有形象
	AvatarFrameSettings map[int32]*UserAvatarFrameSetting `protobuf:"bytes,7,rep,name=avatarFrameSettings,proto3" json:"avatarFrameSettings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //头像框配置
}

func (x *UserSetting) Reset() {
	*x = UserSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetting) ProtoMessage() {}

func (x *UserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetting.ProtoReflect.Descriptor instead.
func (*UserSetting) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{44}
}

func (x *UserSetting) GetAvatars() []int32 {
	if x != nil {
		return x.Avatars
	}
	return nil
}

func (x *UserSetting) GetAvatarFrames() []int32 {
	if x != nil {
		return x.AvatarFrames
	}
	return nil
}

func (x *UserSetting) GetUserSwitch() map[int32]bool {
	if x != nil {
		return x.UserSwitch
	}
	return nil
}

func (x *UserSetting) GetRenameTimes() uint32 {
	if x != nil {
		return x.RenameTimes
	}
	return 0
}

func (x *UserSetting) GetModels() []int32 {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *UserSetting) GetAvatarFrameSettings() map[int32]*UserAvatarFrameSetting {
	if x != nil {
		return x.AvatarFrameSettings
	}
	return nil
}

// 头像框设置
type UserAvatarFrameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarFrame int32 `protobuf:"varint,1,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"` // 头像框
	DueTime     int64 `protobuf:"varint,2,opt,name=dueTime,proto3" json:"dueTime,omitempty"`         // 过期时间
}

func (x *UserAvatarFrameSetting) Reset() {
	*x = UserAvatarFrameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatarFrameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatarFrameSetting) ProtoMessage() {}

func (x *UserAvatarFrameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatarFrameSetting.ProtoReflect.Descriptor instead.
func (*UserAvatarFrameSetting) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{45}
}

func (x *UserAvatarFrameSetting) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

func (x *UserAvatarFrameSetting) GetDueTime() int64 {
	if x != nil {
		return x.DueTime
	}
	return 0
}

//玩家web相关
type UserWeb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questionnaires map[uint64]bool `protobuf:"bytes,1,rep,name=questionnaires,proto3" json:"questionnaires,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //已经完成的答题
	UsedCode       map[string]bool `protobuf:"bytes,2,rep,name=usedCode,proto3" json:"usedCode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`              //使用过的礼包码
}

func (x *UserWeb) Reset() {
	*x = UserWeb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWeb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWeb) ProtoMessage() {}

func (x *UserWeb) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWeb.ProtoReflect.Descriptor instead.
func (*UserWeb) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{46}
}

func (x *UserWeb) GetQuestionnaires() map[uint64]bool {
	if x != nil {
		return x.Questionnaires
	}
	return nil
}

func (x *UserWeb) GetUsedCode() map[string]bool {
	if x != nil {
		return x.UsedCode
	}
	return nil
}

//User 玩家数据
// |User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *UserBaseDB  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`   // 玩家基本属性
	Extra *UserExtraDB `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"` // 玩家扩展属性
	Game  *UserGameDB  `protobuf:"bytes,11,opt,name=game,proto3" json:"game,omitempty"`  // 玩家游戏属性
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{47}
}

func (x *User) GetBase() *UserBaseDB {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *User) GetExtra() *UserExtraDB {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *User) GetGame() *UserGameDB {
	if x != nil {
		return x.Game
	}
	return nil
}

//UserBaseDB 玩家基本属性
type UserBaseDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            //ID
	Account                 string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                                   //账号
	ServerId                uint64 `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                //服务器id
	Name                    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                         //名字
	Career                  uint32 `protobuf:"varint,5,opt,name=career,proto3" json:"career,omitempty"`                                    //职业
	Avatar                  int32  `protobuf:"varint,6,opt,name=avatar,proto3" json:"avatar,omitempty"`                                    //头像
	AvatarFrame             int32  `protobuf:"varint,7,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"`                          //头像框
	Msg                     string `protobuf:"bytes,8,opt,name=msg,proto3" json:"msg,omitempty"`                                           //宣言
	CreateTime              int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`                            //创建角色时间
	Version                 int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`                                 //数据版本号
	LastLogin               int64  `protobuf:"varint,12,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`                             //上一次登陆时间
	LastLogout              int64  `protobuf:"varint,13,opt,name=lastLogout,proto3" json:"lastLogout,omitempty"`                           //上一次登出时间
	OnlineTime              int64  `protobuf:"varint,14,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`                           //累计在线时长
	IsRobot                 bool   `protobuf:"varint,15,opt,name=isRobot,proto3" json:"isRobot,omitempty"`                                 //是否是机器人
	TotalLoginDays          uint32 `protobuf:"varint,16,opt,name=totalLoginDays,proto3" json:"totalLoginDays,omitempty"`                   //总共登陆天数
	Guide                   int32  `protobuf:"varint,17,opt,name=guide,proto3" json:"guide,omitempty"`                                     //新手引导
	InitDeviceId            string `protobuf:"bytes,18,opt,name=initDeviceId,proto3" json:"initDeviceId,omitempty"`                        //初始的设备id (用于限制包流出)
	RankPower               uint32 `protobuf:"varint,19,opt,name=rankPower,proto3" json:"rankPower,omitempty"`                             //排行榜战斗力（计算规则和pve的不一样）
	Power                   uint32 `protobuf:"varint,20,opt,name=power,proto3" json:"power,omitempty"`                                     //战斗力
	ArenaDefencePower       uint32 `protobuf:"varint,21,opt,name=arenaDefencePower,proto3" json:"arenaDefencePower,omitempty"`             //竞技场战斗力
	LastPhyscalRecoveryTime int64  `protobuf:"varint,22,opt,name=lastPhyscalRecoveryTime,proto3" json:"lastPhyscalRecoveryTime,omitempty"` //上次体力恢复时间
	//int32 counsellorId = 23; //竞技场防守阵型的军师(竞技场界面要显示)
	Counsellor          map[int32]int32   `protobuf:"bytes,24,rep,name=counsellor,proto3" json:"counsellor,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     //各个阵型的军师
	Praise              uint32            `protobuf:"varint,25,opt,name=praise,proto3" json:"praise,omitempty"`                                                                                                      //点赞
	PraiseRecord        map[uint64]uint32 `protobuf:"bytes,26,rep,name=praiseRecord,proto3" json:"praiseRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //每日点赞记录
	ShowCommanderId     int32             `protobuf:"varint,27,opt,name=showCommanderId,proto3" json:"showCommanderId,omitempty"`                                                                                    //展示的武将
	TopCounsellorId     int32             `protobuf:"varint,28,opt,name=topCounsellorId,proto3" json:"topCounsellorId,omitempty"`                                                                                    //战斗力最高军师
	Model               int32             `protobuf:"varint,29,opt,name=model,proto3" json:"model,omitempty"`                                                                                                        //形象
	OpID                string            `protobuf:"bytes,30,opt,name=opID,proto3" json:"opID,omitempty"`                                                                                                           // op id
	Top8RankPower       uint32            `protobuf:"varint,31,opt,name=top8RankPower,proto3" json:"top8RankPower,omitempty"`                                                                                        //主将换成top8后的总战斗力
	HideVipSystems      []int32           `protobuf:"varint,32,rep,packed,name=hideVipSystems,proto3" json:"hideVipSystems,omitempty"`                                                                               //屏蔽vip显示的功能
	SvipBind            int32             `protobuf:"varint,33,opt,name=svipBind,proto3" json:"svipBind,omitempty"`                                                                                                  // 0：未绑定，1：可以绑定，2已经绑定
	LevelReward         map[int32]bool    `protobuf:"bytes,34,rep,name=levelReward,proto3" json:"levelReward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 等级奖励是否已经领取<id,true/false无所谓>
	Resource            map[int32]uint32  `protobuf:"bytes,40,rep,name=resource,proto3" json:"resource,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`         //玩家资源 id对应item表
	SpecialRewardFlag   uint32            `protobuf:"varint,79,opt,name=specialRewardFlag,proto3" json:"specialRewardFlag,omitempty"`                                                                                // 特殊奖励标记位(标记位为1表示已经领取)
	LastSaveTime        int64             `protobuf:"varint,80,opt,name=lastSaveTime,proto3" json:"lastSaveTime,omitempty"`                                                                                          // 最后存盘时间
	LastToken           string            `protobuf:"bytes,81,opt,name=lastToken,proto3" json:"lastToken,omitempty"`                                                                                                 // 最后一次登陆用的token
	DailyOnlineTime     int64             `protobuf:"varint,82,opt,name=dailyOnlineTime,proto3" json:"dailyOnlineTime,omitempty"`                                                                                    //当日在线时长
	LastMergeServerTime int64             `protobuf:"varint,83,opt,name=lastMergeServerTime,proto3" json:"lastMergeServerTime,omitempty"`                                                                            //最后合服的时间
	YouthReturnExpired  int64             `protobuf:"varint,84,opt,name=youthReturnExpired,proto3" json:"youthReturnExpired,omitempty"`                                                                              //少年回归过期时间
}

func (x *UserBaseDB) Reset() {
	*x = UserBaseDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseDB) ProtoMessage() {}

func (x *UserBaseDB) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseDB.ProtoReflect.Descriptor instead.
func (*UserBaseDB) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{48}
}

func (x *UserBaseDB) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBaseDB) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserBaseDB) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UserBaseDB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserBaseDB) GetCareer() uint32 {
	if x != nil {
		return x.Career
	}
	return 0
}

func (x *UserBaseDB) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *UserBaseDB) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

func (x *UserBaseDB) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserBaseDB) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserBaseDB) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserBaseDB) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *UserBaseDB) GetLastLogout() int64 {
	if x != nil {
		return x.LastLogout
	}
	return 0
}

func (x *UserBaseDB) GetOnlineTime() int64 {
	if x != nil {
		return x.OnlineTime
	}
	return 0
}

func (x *UserBaseDB) GetIsRobot() bool {
	if x != nil {
		return x.IsRobot
	}
	return false
}

func (x *UserBaseDB) GetTotalLoginDays() uint32 {
	if x != nil {
		return x.TotalLoginDays
	}
	return 0
}

func (x *UserBaseDB) GetGuide() int32 {
	if x != nil {
		return x.Guide
	}
	return 0
}

func (x *UserBaseDB) GetInitDeviceId() string {
	if x != nil {
		return x.InitDeviceId
	}
	return ""
}

func (x *UserBaseDB) GetRankPower() uint32 {
	if x != nil {
		return x.RankPower
	}
	return 0
}

func (x *UserBaseDB) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *UserBaseDB) GetArenaDefencePower() uint32 {
	if x != nil {
		return x.ArenaDefencePower
	}
	return 0
}

func (x *UserBaseDB) GetLastPhyscalRecoveryTime() int64 {
	if x != nil {
		return x.LastPhyscalRecoveryTime
	}
	return 0
}

func (x *UserBaseDB) GetCounsellor() map[int32]int32 {
	if x != nil {
		return x.Counsellor
	}
	return nil
}

func (x *UserBaseDB) GetPraise() uint32 {
	if x != nil {
		return x.Praise
	}
	return 0
}

func (x *UserBaseDB) GetPraiseRecord() map[uint64]uint32 {
	if x != nil {
		return x.PraiseRecord
	}
	return nil
}

func (x *UserBaseDB) GetShowCommanderId() int32 {
	if x != nil {
		return x.ShowCommanderId
	}
	return 0
}

func (x *UserBaseDB) GetTopCounsellorId() int32 {
	if x != nil {
		return x.TopCounsellorId
	}
	return 0
}

func (x *UserBaseDB) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *UserBaseDB) GetOpID() string {
	if x != nil {
		return x.OpID
	}
	return ""
}

func (x *UserBaseDB) GetTop8RankPower() uint32 {
	if x != nil {
		return x.Top8RankPower
	}
	return 0
}

func (x *UserBaseDB) GetHideVipSystems() []int32 {
	if x != nil {
		return x.HideVipSystems
	}
	return nil
}

func (x *UserBaseDB) GetSvipBind() int32 {
	if x != nil {
		return x.SvipBind
	}
	return 0
}

func (x *UserBaseDB) GetLevelReward() map[int32]bool {
	if x != nil {
		return x.LevelReward
	}
	return nil
}

func (x *UserBaseDB) GetResource() map[int32]uint32 {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UserBaseDB) GetSpecialRewardFlag() uint32 {
	if x != nil {
		return x.SpecialRewardFlag
	}
	return 0
}

func (x *UserBaseDB) GetLastSaveTime() int64 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *UserBaseDB) GetLastToken() string {
	if x != nil {
		return x.LastToken
	}
	return ""
}

func (x *UserBaseDB) GetDailyOnlineTime() int64 {
	if x != nil {
		return x.DailyOnlineTime
	}
	return 0
}

func (x *UserBaseDB) GetLastMergeServerTime() int64 {
	if x != nil {
		return x.LastMergeServerTime
	}
	return 0
}

func (x *UserBaseDB) GetYouthReturnExpired() int64 {
	if x != nil {
		return x.YouthReturnExpired
	}
	return 0
}

//UserExtraDB 玩家扩展属性(扩展属性可单独存取)
type UserExtraDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends        *Friends                            `protobuf:"bytes,1,opt,name=friends,proto3" json:"friends,omitempty"`                                                                                                        //好友
	OfflineRewards map[int32]*common.UserOfflineReward `protobuf:"bytes,2,rep,name=offlineRewards,proto3" json:"offlineRewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 离线奖励
}

func (x *UserExtraDB) Reset() {
	*x = UserExtraDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExtraDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExtraDB) ProtoMessage() {}

func (x *UserExtraDB) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExtraDB.ProtoReflect.Descriptor instead.
func (*UserExtraDB) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{49}
}

func (x *UserExtraDB) GetFriends() *Friends {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *UserExtraDB) GetOfflineRewards() map[int32]*common.UserOfflineReward {
	if x != nil {
		return x.OfflineRewards
	}
	return nil
}

//UserGameDB 玩家游戏属性
type UserGameDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础
	Bag                  *Bag                  `protobuf:"bytes,1,opt,name=bag,proto3" json:"bag,omitempty"`                                    //背包
	Vip                  *Vip                  `protobuf:"bytes,2,opt,name=vip,proto3" json:"vip,omitempty"`                                    //Vip
	Recharge             *Recharge             `protobuf:"bytes,3,opt,name=recharge,proto3" json:"recharge,omitempty"`                          //充值
	Chat                 *Chat                 `protobuf:"bytes,4,opt,name=chat,proto3" json:"chat,omitempty"`                                  //聊天数据
	Stats                *Stats                `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`                                //统计数据
	MailDB               *UserMail             `protobuf:"bytes,6,opt,name=mailDB,proto3" json:"mailDB,omitempty"`                              //玩家邮件
	Setting              *UserSetting          `protobuf:"bytes,7,opt,name=setting,proto3" json:"setting,omitempty"`                            //设置
	CashShop             *CashShop             `protobuf:"bytes,8,opt,name=cashShop,proto3" json:"cashShop,omitempty"`                          // 直购商店
	RechargeGift         *RechargeGift         `protobuf:"bytes,9,opt,name=rechargeGift,proto3" json:"rechargeGift,omitempty"`                  // 充值礼包
	SpecialBuyGiftRecord *SpecialBuyGiftRecord `protobuf:"bytes,10,opt,name=specialBuyGiftRecord,proto3" json:"specialBuyGiftRecord,omitempty"` // 特殊直购礼包
	Bazaar               *Bazaar               `protobuf:"bytes,11,opt,name=bazaar,proto3" json:"bazaar,omitempty"`                             // 活动市场
	// 战斗
	CounsellorGroup      *CounsellorGroup            `protobuf:"bytes,20,opt,name=CounsellorGroup,proto3" json:"CounsellorGroup,omitempty"`                                                                                  //军师
	CommanderDB          map[int32]*Commander        `protobuf:"bytes,21,rep,name=commanderDB,proto3" json:"commanderDB,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //英雄
	FormationDB          map[int32]*common.Formation `protobuf:"bytes,22,rep,name=formationDB,proto3" json:"formationDB,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //阵型数据
	Soldier              *Soldier                    `protobuf:"bytes,23,opt,name=soldier,proto3" json:"soldier,omitempty"`                                                                                                  //士兵
	Commander            *CommanderData              `protobuf:"bytes,24,opt,name=commander,proto3" json:"commander,omitempty"`                                                                                              //主将
	AttributeCoefficient uint32                      `protobuf:"varint,25,opt,name=attributeCoefficient,proto3" json:"attributeCoefficient,omitempty"`                                                                       //属性系数
	FormationGroup       *FormationGroup             `protobuf:"bytes,26,opt,name=formationGroup,proto3" json:"formationGroup,omitempty"`                                                                                    // 布阵编组
	// 养成
	Handbook    *HandBook       `protobuf:"bytes,30,opt,name=handbook,proto3" json:"handbook,omitempty"`       //领主手册
	Treasure    *Treasure       `protobuf:"bytes,31,opt,name=treasure,proto3" json:"treasure,omitempty"`       //宝物
	WuHunGroup  *WuHunGroup     `protobuf:"bytes,32,opt,name=wuHunGroup,proto3" json:"wuHunGroup,omitempty"`   //武魂
	BeastGroup  *BeastGroup     `protobuf:"bytes,33,opt,name=beastGroup,proto3" json:"beastGroup,omitempty"`   //神兽
	Mount       *MountGroup     `protobuf:"bytes,34,opt,name=mount,proto3" json:"mount,omitempty"`             // 坐骑系统
	Expedition  *Expedition     `protobuf:"bytes,35,opt,name=expedition,proto3" json:"expedition,omitempty"`   // 北伐中原
	Biography   *Biography      `protobuf:"bytes,36,opt,name=biography,proto3" json:"biography,omitempty"`     // 名将录
	MountRefine *MountRefine    `protobuf:"bytes,37,opt,name=mountRefine,proto3" json:"mountRefine,omitempty"` // 坐骑洗炼
	OnlyEquip   *OnlyEquipGroup `protobuf:"bytes,38,opt,name=onlyEquip,proto3" json:"onlyEquip,omitempty"`     //专属装备
	// 玩法
	SystemOpenData     *SystemOpenData   `protobuf:"bytes,40,opt,name=systemOpenData,proto3" json:"systemOpenData,omitempty"` //功能开启
	Task               *Task             `protobuf:"bytes,41,opt,name=task,proto3" json:"task,omitempty"`                     //日常
	Mission            *Mission          `protobuf:"bytes,42,opt,name=Mission,proto3" json:"Mission,omitempty"`               //任务
	Dungeon            *Dungeon          `protobuf:"bytes,43,opt,name=Dungeon,proto3" json:"Dungeon,omitempty"`               //副本
	Draw               *Draw             `protobuf:"bytes,44,opt,name=draw,proto3" json:"draw,omitempty"`                     //抽卡
	Slay               *Slay             `protobuf:"bytes,45,opt,name=slay,proto3" json:"slay,omitempty"`                     //群雄割据
	StrMansion         *StrMansion       `protobuf:"bytes,46,opt,name=strMansion,proto3" json:"strMansion,omitempty"`         //太学
	Market             *Market           `protobuf:"bytes,47,opt,name=market,proto3" json:"market,omitempty"`                 //购买
	Arena              *PlayerArena      `protobuf:"bytes,48,opt,name=arena,proto3" json:"arena,omitempty"`                   //竞技场
	DailyBoss          *common.DailyBoss `protobuf:"bytes,49,opt,name=dailyBoss,proto3" json:"dailyBoss,omitempty"`           //日常Boss
	Peak               *PlayerPeak       `protobuf:"bytes,50,opt,name=peak,proto3" json:"peak,omitempty"`                     //巅峰竞技场
	Guild              *UserGuild        `protobuf:"bytes,51,opt,name=guild,proto3" json:"guild,omitempty"`                   //帮派
	Privilege          *Privilege        `protobuf:"bytes,52,opt,name=privilege,proto3" json:"privilege,omitempty"`           //特权
	Train              *Train            `protobuf:"bytes,53,opt,name=Train,proto3" json:"Train,omitempty"`                   //训练
	UsedFunction       map[int32]bool    `protobuf:"bytes,54,rep,name=usedFunction,proto3" json:"usedFunction,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Assist             *Assist           `protobuf:"bytes,55,opt,name=assist,proto3" json:"assist,omitempty"`                                                                                                                   // 助战
	Rank               *UserRank         `protobuf:"bytes,56,opt,name=rank,proto3" json:"rank,omitempty"`                                                                                                                       // 排行榜
	Battle             *UserBattle       `protobuf:"bytes,57,opt,name=battle,proto3" json:"battle,omitempty"`                                                                                                                   // 战斗数据
	LastSendBulletTime map[int32]int64   `protobuf:"bytes,58,rep,name=lastSendBulletTime,proto3" json:"lastSendBulletTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 上次发送弹幕时间
	DyPeak             *PlayerDyPeak     `protobuf:"bytes,59,opt,name=dyPeak,proto3" json:"dyPeak,omitempty"`                                                                                                                   // 决战巅峰
	Qiecuo             *PlayerQieCuo     `protobuf:"bytes,60,opt,name=qiecuo,proto3" json:"qiecuo,omitempty"`                                                                                                                   //切磋
	Season             *Season           `protobuf:"bytes,61,opt,name=season,proto3" json:"season,omitempty"`                                                                                                                   // 赛季
	WorldBoss          *WorldBossPlayer  `protobuf:"bytes,62,opt,name=worldBoss,proto3" json:"worldBoss,omitempty"`                                                                                                             //世界boss
	LmPeak             *PlayerLmPeak     `protobuf:"bytes,63,opt,name=lmPeak,proto3" json:"lmPeak,omitempty"`                                                                                                                   // 跨服九州争霸
	Overlord           *PlayerOverlord   `protobuf:"bytes,64,opt,name=overlord,proto3" json:"overlord,omitempty"`                                                                                                               // 霸主挑战
	// 活动
	GiftScore       map[int32]uint32  `protobuf:"bytes,70,rep,name=giftScore,proto3" json:"giftScore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   //礼包积分
	Checkin         *Checkin          `protobuf:"bytes,71,opt,name=checkin,proto3" json:"checkin,omitempty"`                                                                                                 //签到
	Activity        *Activity         `protobuf:"bytes,72,opt,name=activity,proto3" json:"activity,omitempty"`                                                                                               //活动
	Web             *UserWeb          `protobuf:"bytes,73,opt,name=web,proto3" json:"web,omitempty"`                                                                                                         //web相关
	DailyPhysical   *DailyPhysical    `protobuf:"bytes,74,opt,name=dailyPhysical,proto3" json:"dailyPhysical,omitempty"`                                                                                     //每日体力
	DailyExp        *DailyExp         `protobuf:"bytes,75,opt,name=dailyExp,proto3" json:"dailyExp,omitempty"`                                                                                               //日常经验
	DailyCoin       *DailyCoin        `protobuf:"bytes,76,opt,name=dailyCoin,proto3" json:"dailyCoin,omitempty"`                                                                                             //日常金币
	Drama           *Drama            `protobuf:"bytes,77,opt,name=drama,proto3" json:"drama,omitempty"`                                                                                                     // 沙盘
	History         *History          `protobuf:"bytes,78,opt,name=history,proto3" json:"history,omitempty"`                                                                                                 // 史记
	Chibi           *Chibi            `protobuf:"bytes,79,opt,name=chibi,proto3" json:"chibi,omitempty"`                                                                                                     // 赤壁之战
	Album           *Album            `protobuf:"bytes,80,opt,name=album,proto3" json:"album,omitempty"`                                                                                                     // 图鉴
	Gift            *DynamicGift      `protobuf:"bytes,82,opt,name=gift,proto3" json:"gift,omitempty"`                                                                                                       // 动态礼包
	Share           *Share            `protobuf:"bytes,83,opt,name=share,proto3" json:"share,omitempty"`                                                                                                     // 分享
	ClientEcho      uint32            `protobuf:"varint,84,opt,name=clientEcho,proto3" json:"clientEcho,omitempty"`                                                                                          //客户端自己记录用于上报特殊情况的
	MailDemand      map[int32]int64   `protobuf:"bytes,86,rep,name=mailDemand,proto3" json:"mailDemand,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //已经获得的特殊邮件
	ItemGift        *ItemGift         `protobuf:"bytes,87,opt,name=itemGift,proto3" json:"itemGift,omitempty"`                                                                                               // 礼包
	PlaceFinish     *PlaceFinish      `protobuf:"bytes,88,opt,name=placeFinish,proto3" json:"placeFinish,omitempty"`                                                                                         // 治所
	OBSOLETETower   *OBSOLETE_Tower   `protobuf:"bytes,89,opt,name=OBSOLETE_tower,json=OBSOLETETower,proto3" json:"OBSOLETE_tower,omitempty"`                                                                // 爬塔 #废弃
	LogCacheDate    string            `protobuf:"bytes,90,opt,name=logCacheDate,proto3" json:"logCacheDate,omitempty"`                                                                                       // 快照日期
	CommanderBattle *CommanderBattle  `protobuf:"bytes,91,opt,name=commanderBattle,proto3" json:"commanderBattle,omitempty"`                                                                                 // 主将对战
	Rebate          *common.Rebate    `protobuf:"bytes,93,opt,name=rebate,proto3" json:"rebate,omitempty"`                                                                                                   // 返利
	Tower           *Tower            `protobuf:"bytes,94,opt,name=tower,proto3" json:"tower,omitempty"`                                                                                                     // 爬塔
	Ladder          *Ladder           `protobuf:"bytes,95,opt,name=ladder,proto3" json:"ladder,omitempty"`                                                                                                   // 排位赛
	YouthReturns    *YouthReturns     `protobuf:"bytes,96,opt,name=youthReturns,proto3" json:"youthReturns,omitempty"`                                                                                       // 排位赛
	GuildRoll       *PlayerGuildRoll  `protobuf:"bytes,97,opt,name=guildRoll,proto3" json:"guildRoll,omitempty"`                                                                                             //联盟roll
	WarSoul         *WarSoul          `protobuf:"bytes,98,opt,name=warSoul,proto3" json:"warSoul,omitempty"`                                                                                                 // 战魂晋升
	NavalBattle     *NavalBattle      `protobuf:"bytes,99,opt,name=navalBattle,proto3" json:"navalBattle,omitempty"`                                                                                         //海战
	GuideTrigger    []string          `protobuf:"bytes,252,rep,name=guideTrigger,proto3" json:"guideTrigger,omitempty"`
	Trigger         string            `protobuf:"bytes,253,opt,name=trigger,proto3" json:"trigger,omitempty"`
	MsgCache        *MsgCache         `protobuf:"bytes,254,opt,name=msgCache,proto3" json:"msgCache,omitempty"`         //消息缓存
	PushMsgCache    []*MsgCache       `protobuf:"bytes,255,rep,name=pushMsgCache,proto3" json:"pushMsgCache,omitempty"` //推送消息缓存
	FirstInfo       *common.FirstInfo `protobuf:"bytes,256,opt,name=firstInfo,proto3" json:"firstInfo,omitempty"`       //首次一些信息
	Gvg             *PlayerGvg        `protobuf:"bytes,257,opt,name=gvg,proto3" json:"gvg,omitempty"`                   // gvg信息
	Won             *PlayerWon        `protobuf:"bytes,258,opt,name=won,proto3" json:"won,omitempty"`                   // won信息
	Auc             *PlayerAuc        `protobuf:"bytes,259,opt,name=auc,proto3" json:"auc,omitempty"`                   // 拍卖行信息
}

func (x *UserGameDB) Reset() {
	*x = UserGameDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameDB) ProtoMessage() {}

func (x *UserGameDB) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameDB.ProtoReflect.Descriptor instead.
func (*UserGameDB) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{50}
}

func (x *UserGameDB) GetBag() *Bag {
	if x != nil {
		return x.Bag
	}
	return nil
}

func (x *UserGameDB) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *UserGameDB) GetRecharge() *Recharge {
	if x != nil {
		return x.Recharge
	}
	return nil
}

func (x *UserGameDB) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *UserGameDB) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *UserGameDB) GetMailDB() *UserMail {
	if x != nil {
		return x.MailDB
	}
	return nil
}

func (x *UserGameDB) GetSetting() *UserSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *UserGameDB) GetCashShop() *CashShop {
	if x != nil {
		return x.CashShop
	}
	return nil
}

func (x *UserGameDB) GetRechargeGift() *RechargeGift {
	if x != nil {
		return x.RechargeGift
	}
	return nil
}

func (x *UserGameDB) GetSpecialBuyGiftRecord() *SpecialBuyGiftRecord {
	if x != nil {
		return x.SpecialBuyGiftRecord
	}
	return nil
}

func (x *UserGameDB) GetBazaar() *Bazaar {
	if x != nil {
		return x.Bazaar
	}
	return nil
}

func (x *UserGameDB) GetCounsellorGroup() *CounsellorGroup {
	if x != nil {
		return x.CounsellorGroup
	}
	return nil
}

func (x *UserGameDB) GetCommanderDB() map[int32]*Commander {
	if x != nil {
		return x.CommanderDB
	}
	return nil
}

func (x *UserGameDB) GetFormationDB() map[int32]*common.Formation {
	if x != nil {
		return x.FormationDB
	}
	return nil
}

func (x *UserGameDB) GetSoldier() *Soldier {
	if x != nil {
		return x.Soldier
	}
	return nil
}

func (x *UserGameDB) GetCommander() *CommanderData {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *UserGameDB) GetAttributeCoefficient() uint32 {
	if x != nil {
		return x.AttributeCoefficient
	}
	return 0
}

func (x *UserGameDB) GetFormationGroup() *FormationGroup {
	if x != nil {
		return x.FormationGroup
	}
	return nil
}

func (x *UserGameDB) GetHandbook() *HandBook {
	if x != nil {
		return x.Handbook
	}
	return nil
}

func (x *UserGameDB) GetTreasure() *Treasure {
	if x != nil {
		return x.Treasure
	}
	return nil
}

func (x *UserGameDB) GetWuHunGroup() *WuHunGroup {
	if x != nil {
		return x.WuHunGroup
	}
	return nil
}

func (x *UserGameDB) GetBeastGroup() *BeastGroup {
	if x != nil {
		return x.BeastGroup
	}
	return nil
}

func (x *UserGameDB) GetMount() *MountGroup {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *UserGameDB) GetExpedition() *Expedition {
	if x != nil {
		return x.Expedition
	}
	return nil
}

func (x *UserGameDB) GetBiography() *Biography {
	if x != nil {
		return x.Biography
	}
	return nil
}

func (x *UserGameDB) GetMountRefine() *MountRefine {
	if x != nil {
		return x.MountRefine
	}
	return nil
}

func (x *UserGameDB) GetOnlyEquip() *OnlyEquipGroup {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *UserGameDB) GetSystemOpenData() *SystemOpenData {
	if x != nil {
		return x.SystemOpenData
	}
	return nil
}

func (x *UserGameDB) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *UserGameDB) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *UserGameDB) GetDungeon() *Dungeon {
	if x != nil {
		return x.Dungeon
	}
	return nil
}

func (x *UserGameDB) GetDraw() *Draw {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *UserGameDB) GetSlay() *Slay {
	if x != nil {
		return x.Slay
	}
	return nil
}

func (x *UserGameDB) GetStrMansion() *StrMansion {
	if x != nil {
		return x.StrMansion
	}
	return nil
}

func (x *UserGameDB) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UserGameDB) GetArena() *PlayerArena {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *UserGameDB) GetDailyBoss() *common.DailyBoss {
	if x != nil {
		return x.DailyBoss
	}
	return nil
}

func (x *UserGameDB) GetPeak() *PlayerPeak {
	if x != nil {
		return x.Peak
	}
	return nil
}

func (x *UserGameDB) GetGuild() *UserGuild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *UserGameDB) GetPrivilege() *Privilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *UserGameDB) GetTrain() *Train {
	if x != nil {
		return x.Train
	}
	return nil
}

func (x *UserGameDB) GetUsedFunction() map[int32]bool {
	if x != nil {
		return x.UsedFunction
	}
	return nil
}

func (x *UserGameDB) GetAssist() *Assist {
	if x != nil {
		return x.Assist
	}
	return nil
}

func (x *UserGameDB) GetRank() *UserRank {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *UserGameDB) GetBattle() *UserBattle {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *UserGameDB) GetLastSendBulletTime() map[int32]int64 {
	if x != nil {
		return x.LastSendBulletTime
	}
	return nil
}

func (x *UserGameDB) GetDyPeak() *PlayerDyPeak {
	if x != nil {
		return x.DyPeak
	}
	return nil
}

func (x *UserGameDB) GetQiecuo() *PlayerQieCuo {
	if x != nil {
		return x.Qiecuo
	}
	return nil
}

func (x *UserGameDB) GetSeason() *Season {
	if x != nil {
		return x.Season
	}
	return nil
}

func (x *UserGameDB) GetWorldBoss() *WorldBossPlayer {
	if x != nil {
		return x.WorldBoss
	}
	return nil
}

func (x *UserGameDB) GetLmPeak() *PlayerLmPeak {
	if x != nil {
		return x.LmPeak
	}
	return nil
}

func (x *UserGameDB) GetOverlord() *PlayerOverlord {
	if x != nil {
		return x.Overlord
	}
	return nil
}

func (x *UserGameDB) GetGiftScore() map[int32]uint32 {
	if x != nil {
		return x.GiftScore
	}
	return nil
}

func (x *UserGameDB) GetCheckin() *Checkin {
	if x != nil {
		return x.Checkin
	}
	return nil
}

func (x *UserGameDB) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *UserGameDB) GetWeb() *UserWeb {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *UserGameDB) GetDailyPhysical() *DailyPhysical {
	if x != nil {
		return x.DailyPhysical
	}
	return nil
}

func (x *UserGameDB) GetDailyExp() *DailyExp {
	if x != nil {
		return x.DailyExp
	}
	return nil
}

func (x *UserGameDB) GetDailyCoin() *DailyCoin {
	if x != nil {
		return x.DailyCoin
	}
	return nil
}

func (x *UserGameDB) GetDrama() *Drama {
	if x != nil {
		return x.Drama
	}
	return nil
}

func (x *UserGameDB) GetHistory() *History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *UserGameDB) GetChibi() *Chibi {
	if x != nil {
		return x.Chibi
	}
	return nil
}

func (x *UserGameDB) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *UserGameDB) GetGift() *DynamicGift {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *UserGameDB) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *UserGameDB) GetClientEcho() uint32 {
	if x != nil {
		return x.ClientEcho
	}
	return 0
}

func (x *UserGameDB) GetMailDemand() map[int32]int64 {
	if x != nil {
		return x.MailDemand
	}
	return nil
}

func (x *UserGameDB) GetItemGift() *ItemGift {
	if x != nil {
		return x.ItemGift
	}
	return nil
}

func (x *UserGameDB) GetPlaceFinish() *PlaceFinish {
	if x != nil {
		return x.PlaceFinish
	}
	return nil
}

func (x *UserGameDB) GetOBSOLETETower() *OBSOLETE_Tower {
	if x != nil {
		return x.OBSOLETETower
	}
	return nil
}

func (x *UserGameDB) GetLogCacheDate() string {
	if x != nil {
		return x.LogCacheDate
	}
	return ""
}

func (x *UserGameDB) GetCommanderBattle() *CommanderBattle {
	if x != nil {
		return x.CommanderBattle
	}
	return nil
}

func (x *UserGameDB) GetRebate() *common.Rebate {
	if x != nil {
		return x.Rebate
	}
	return nil
}

func (x *UserGameDB) GetTower() *Tower {
	if x != nil {
		return x.Tower
	}
	return nil
}

func (x *UserGameDB) GetLadder() *Ladder {
	if x != nil {
		return x.Ladder
	}
	return nil
}

func (x *UserGameDB) GetYouthReturns() *YouthReturns {
	if x != nil {
		return x.YouthReturns
	}
	return nil
}

func (x *UserGameDB) GetGuildRoll() *PlayerGuildRoll {
	if x != nil {
		return x.GuildRoll
	}
	return nil
}

func (x *UserGameDB) GetWarSoul() *WarSoul {
	if x != nil {
		return x.WarSoul
	}
	return nil
}

func (x *UserGameDB) GetNavalBattle() *NavalBattle {
	if x != nil {
		return x.NavalBattle
	}
	return nil
}

func (x *UserGameDB) GetGuideTrigger() []string {
	if x != nil {
		return x.GuideTrigger
	}
	return nil
}

func (x *UserGameDB) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *UserGameDB) GetMsgCache() *MsgCache {
	if x != nil {
		return x.MsgCache
	}
	return nil
}

func (x *UserGameDB) GetPushMsgCache() []*MsgCache {
	if x != nil {
		return x.PushMsgCache
	}
	return nil
}

func (x *UserGameDB) GetFirstInfo() *common.FirstInfo {
	if x != nil {
		return x.FirstInfo
	}
	return nil
}

func (x *UserGameDB) GetGvg() *PlayerGvg {
	if x != nil {
		return x.Gvg
	}
	return nil
}

func (x *UserGameDB) GetWon() *PlayerWon {
	if x != nil {
		return x.Won
	}
	return nil
}

func (x *UserGameDB) GetAuc() *PlayerAuc {
	if x != nil {
		return x.Auc
	}
	return nil
}

// 特殊直购礼包
type SpecialBuyGiftRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyRecord map[uint32]*SpecialBuyGift `protobuf:"bytes,1,rep,name=buyRecord,proto3" json:"buyRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 特殊直购礼包
}

func (x *SpecialBuyGiftRecord) Reset() {
	*x = SpecialBuyGiftRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialBuyGiftRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialBuyGiftRecord) ProtoMessage() {}

func (x *SpecialBuyGiftRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialBuyGiftRecord.ProtoReflect.Descriptor instead.
func (*SpecialBuyGiftRecord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{51}
}

func (x *SpecialBuyGiftRecord) GetBuyRecord() map[uint32]*SpecialBuyGift {
	if x != nil {
		return x.BuyRecord
	}
	return nil
}

// 物品礼包
type ItemGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemGiftScore `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ItemGift) Reset() {
	*x = ItemGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemGift) ProtoMessage() {}

func (x *ItemGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemGift.ProtoReflect.Descriptor instead.
func (*ItemGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{52}
}

func (x *ItemGift) GetItems() []*ItemGiftScore {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemGiftScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemID int32                `protobuf:"varint,1,opt,name=itemID,proto3" json:"itemID,omitempty"`
	Scores []*ItemGiftScoreItem `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ItemGiftScore) Reset() {
	*x = ItemGiftScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemGiftScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemGiftScore) ProtoMessage() {}

func (x *ItemGiftScore) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemGiftScore.ProtoReflect.Descriptor instead.
func (*ItemGiftScore) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{53}
}

func (x *ItemGiftScore) GetItemID() int32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *ItemGiftScore) GetScores() []*ItemGiftScoreItem {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ItemGiftScoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       // itemGiftLimit表id
	Score uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"` //
}

func (x *ItemGiftScoreItem) Reset() {
	*x = ItemGiftScoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemGiftScoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemGiftScoreItem) ProtoMessage() {}

func (x *ItemGiftScoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemGiftScoreItem.ProtoReflect.Descriptor instead.
func (*ItemGiftScoreItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{54}
}

func (x *ItemGiftScoreItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemGiftScoreItem) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type CommanderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankCommander                     []int32                     `protobuf:"varint,1,rep,packed,name=rankCommander,proto3" json:"rankCommander,omitempty"`                                                                                                                       // 在排行榜上的将
	CurrentAwakeCommanderTaskProgress *CommanderAwakeTaskProgress `protobuf:"bytes,2,opt,name=currentAwakeCommanderTaskProgress,proto3" json:"currentAwakeCommanderTaskProgress,omitempty"`                                                                                       // 任务进度数据
	CurrentAwakeCommanderId           int32                       `protobuf:"varint,3,opt,name=currentAwakeCommanderId,proto3" json:"currentAwakeCommanderId,omitempty"`                                                                                                          // 当前觉醒主将
	CurrentAwakeCommanderTaskStatus   map[uint32]uint32           `protobuf:"bytes,4,rep,name=currentAwakeCommanderTaskStatus,proto3" json:"currentAwakeCommanderTaskStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 觉醒任务状态
	CommanderDefaultSkins             []int32                     `protobuf:"varint,5,rep,packed,name=commanderDefaultSkins,proto3" json:"commanderDefaultSkins,omitempty"`                                                                                                       // 默认皮肤
	CommanderAwakeSkins               []int32                     `protobuf:"varint,6,rep,packed,name=commanderAwakeSkins,proto3" json:"commanderAwakeSkins,omitempty"`                                                                                                           // 觉醒皮肤
	CommanderItemSkins                []int32                     `protobuf:"varint,7,rep,packed,name=commanderItemSkins,proto3" json:"commanderItemSkins,omitempty"`                                                                                                             // 道具皮肤
}

func (x *CommanderData) Reset() {
	*x = CommanderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderData) ProtoMessage() {}

func (x *CommanderData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderData.ProtoReflect.Descriptor instead.
func (*CommanderData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{55}
}

func (x *CommanderData) GetRankCommander() []int32 {
	if x != nil {
		return x.RankCommander
	}
	return nil
}

func (x *CommanderData) GetCurrentAwakeCommanderTaskProgress() *CommanderAwakeTaskProgress {
	if x != nil {
		return x.CurrentAwakeCommanderTaskProgress
	}
	return nil
}

func (x *CommanderData) GetCurrentAwakeCommanderId() int32 {
	if x != nil {
		return x.CurrentAwakeCommanderId
	}
	return 0
}

func (x *CommanderData) GetCurrentAwakeCommanderTaskStatus() map[uint32]uint32 {
	if x != nil {
		return x.CurrentAwakeCommanderTaskStatus
	}
	return nil
}

func (x *CommanderData) GetCommanderDefaultSkins() []int32 {
	if x != nil {
		return x.CommanderDefaultSkins
	}
	return nil
}

func (x *CommanderData) GetCommanderAwakeSkins() []int32 {
	if x != nil {
		return x.CommanderAwakeSkins
	}
	return nil
}

func (x *CommanderData) GetCommanderItemSkins() []int32 {
	if x != nil {
		return x.CommanderItemSkins
	}
	return nil
}

type CommanderAwakeTaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTaskId   uint32 `protobuf:"varint,1,opt,name=currentTaskId,proto3" json:"currentTaskId,omitempty"`     // 当前正在执行的觉醒任务id
	CurrentProgress uint64 `protobuf:"varint,2,opt,name=currentProgress,proto3" json:"currentProgress,omitempty"` // 主将觉醒任务进度
}

func (x *CommanderAwakeTaskProgress) Reset() {
	*x = CommanderAwakeTaskProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderAwakeTaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderAwakeTaskProgress) ProtoMessage() {}

func (x *CommanderAwakeTaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderAwakeTaskProgress.ProtoReflect.Descriptor instead.
func (*CommanderAwakeTaskProgress) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{56}
}

func (x *CommanderAwakeTaskProgress) GetCurrentTaskId() uint32 {
	if x != nil {
		return x.CurrentTaskId
	}
	return 0
}

func (x *CommanderAwakeTaskProgress) GetCurrentProgress() uint64 {
	if x != nil {
		return x.CurrentProgress
	}
	return 0
}

// 玩家战斗数据
type UserBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Battle          *common.BattleStartInfo `protobuf:"bytes,1,opt,name=battle,proto3" json:"battle,omitempty"`                   //当前战斗数据(战斗未结束前，为了单机战斗中掉线用)
	LastBattle      *Battle                 `protobuf:"bytes,2,opt,name=lastBattle,proto3" json:"lastBattle,omitempty"`           // 上一场战斗回放
	BattleFormation *common.Formation       `protobuf:"bytes,3,opt,name=battleFormation,proto3" json:"battleFormation,omitempty"` // 战斗布阵（保存npc等布阵数据）
}

func (x *UserBattle) Reset() {
	*x = UserBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBattle) ProtoMessage() {}

func (x *UserBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBattle.ProtoReflect.Descriptor instead.
func (*UserBattle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{57}
}

func (x *UserBattle) GetBattle() *common.BattleStartInfo {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *UserBattle) GetLastBattle() *Battle {
	if x != nil {
		return x.LastBattle
	}
	return nil
}

func (x *UserBattle) GetBattleFormation() *common.Formation {
	if x != nil {
		return x.BattleFormation
	}
	return nil
}

//战斗回放  //战斗回访时候使用的
type Battle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *common.BattleStartInfo  `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`             //战斗开始信息
	ResultInfo *common.BattleResultInfo `protobuf:"bytes,2,opt,name=resultInfo,proto3" json:"resultInfo,omitempty"` //战斗结束信息
	Saved      bool                     `protobuf:"varint,3,opt,name=saved,proto3" json:"saved,omitempty"`          // 是否保存过
}

func (x *Battle) Reset() {
	*x = Battle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battle) ProtoMessage() {}

func (x *Battle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battle.ProtoReflect.Descriptor instead.
func (*Battle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{58}
}

func (x *Battle) GetInfo() *common.BattleStartInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Battle) GetResultInfo() *common.BattleResultInfo {
	if x != nil {
		return x.ResultInfo
	}
	return nil
}

func (x *Battle) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

type FormationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*common.FormationGroupItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FormationGroup) Reset() {
	*x = FormationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationGroup) ProtoMessage() {}

func (x *FormationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationGroup.ProtoReflect.Descriptor instead.
func (*FormationGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{59}
}

func (x *FormationGroup) GetItems() []*common.FormationGroupItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type StatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeName        uint32 `protobuf:"varint,1,opt,name=changeName,proto3" json:"changeName,omitempty"`               // 改名次数
	BuyGoldTimes      uint32 `protobuf:"varint,2,opt,name=buyGoldTimes,proto3" json:"buyGoldTimes,omitempty"`           // 购买金币次数
	BuyStrengthTimes  uint32 `protobuf:"varint,3,opt,name=buyStrengthTimes,proto3" json:"buyStrengthTimes,omitempty"`   // 购买体力次数
	ArenaWinTimes     uint32 `protobuf:"varint,4,opt,name=arenaWinTimes,proto3" json:"arenaWinTimes,omitempty"`         // 竞技场胜利
	NormalDungeonStar uint32 `protobuf:"varint,5,opt,name=normalDungeonStar,proto3" json:"normalDungeonStar,omitempty"` // 普通副本星
	EliteDungeonStar  uint32 `protobuf:"varint,6,opt,name=eliteDungeonStar,proto3" json:"eliteDungeonStar,omitempty"`   // 精英副本星
	DailyExpTimes     uint32 `protobuf:"varint,7,opt,name=dailyExpTimes,proto3" json:"dailyExpTimes,omitempty"`         // 华容道次数
	CoinTimes         uint32 `protobuf:"varint,8,opt,name=coinTimes,proto3" json:"coinTimes,omitempty"`                 // 长坂坡次数
	BossTimes         uint32 `protobuf:"varint,9,opt,name=bossTimes,proto3" json:"bossTimes,omitempty"`                 // boss挑战次数
	//uint32 firstRechargeDiamond = 10; // 首充钻石
	//int64 firstRechargeTime = 11; // 首充时间
	//int64 lastRechargeTime = 12; // 最后充值时间
	//uint32 maxSingleDayRechargeDiamond = 13; // 最大单日充值钻石
	//uint32 maxSingleTimeRechargeDiamond = 14; // 最大单笔充值钻石
	//uint32 totalRechargeDiamond = 15; // 累计充值钻石
	//float totalRechargeMoney = 16; // 累计充值金额
	//uint32 totalRechargeDays = 17; // 累计充值天数
	//uint32 totalRechargeTimes = 18; // 累计充值次数
	BlackDiamond                uint32 `protobuf:"varint,19,opt,name=blackDiamond,proto3" json:"blackDiamond,omitempty"`                               //假钻存量 赠送或参与玩法获得的钻石存量
	CoinKill                    uint32 `protobuf:"varint,20,opt,name=coinKill,proto3" json:"coinKill,omitempty"`                                       // 金币本杀敌数
	ExpKill                     uint32 `protobuf:"varint,21,opt,name=expKill,proto3" json:"expKill,omitempty"`                                         // 经验本
	Book50009                   uint32 `protobuf:"varint,22,opt,name=book50009,proto3" json:"book50009,omitempty"`                                     // 火系天书
	Book50010                   uint32 `protobuf:"varint,23,opt,name=book50010,proto3" json:"book50010,omitempty"`                                     // 水系天书
	Book50011                   uint32 `protobuf:"varint,24,opt,name=book50011,proto3" json:"book50011,omitempty"`                                     // 土系天书
	Book50012                   uint32 `protobuf:"varint,25,opt,name=book50012,proto3" json:"book50012,omitempty"`                                     // 风系天书
	ExploreMissionNum           uint32 `protobuf:"varint,26,opt,name=exploreMissionNum,proto3" json:"exploreMissionNum,omitempty"`                     // 探索任务数量
	CoinDamage                  uint64 `protobuf:"varint,27,opt,name=coinDamage,proto3" json:"coinDamage,omitempty"`                                   // 金币本伤害
	BossDamage                  uint32 `protobuf:"varint,28,opt,name=bossDamage,proto3" json:"bossDamage,omitempty"`                                   // boss伤害
	SoldierBookShield           uint32 `protobuf:"varint,29,opt,name=soldierBookShield,proto3" json:"soldierBookShield,omitempty"`                     // 盾兵阵法精要
	SoldierBookInfantry         uint32 `protobuf:"varint,30,opt,name=soldierBookInfantry,proto3" json:"soldierBookInfantry,omitempty"`                 // 步兵阵法精要
	SoldierBookLightCavalry     uint32 `protobuf:"varint,31,opt,name=soldierBookLightCavalry,proto3" json:"soldierBookLightCavalry,omitempty"`         // 轻骑阵法精要
	SoldierBookHeavyCavalry     uint32 `protobuf:"varint,32,opt,name=soldierBookHeavyCavalry,proto3" json:"soldierBookHeavyCavalry,omitempty"`         // 重骑阵法精要
	SoldierBookArcher           uint32 `protobuf:"varint,33,opt,name=soldierBookArcher,proto3" json:"soldierBookArcher,omitempty"`                     // 弓手阵法精要
	SoldierBookTactician        uint32 `protobuf:"varint,34,opt,name=soldierBookTactician,proto3" json:"soldierBookTactician,omitempty"`               // 谋士阵法精要
	DramaTreasurePiece          uint32 `protobuf:"varint,35,opt,name=dramaTreasurePiece,proto3" json:"dramaTreasurePiece,omitempty"`                   // 累计藏宝图
	AutoFinishComplete          uint32 `protobuf:"varint,36,opt,name=autoFinishComplete,proto3" json:"autoFinishComplete,omitempty"`                   // 治所任务完成次数
	JoinGuild                   bool   `protobuf:"varint,37,opt,name=joinGuild,proto3" json:"joinGuild,omitempty"`                                     // 加入过联盟
	PeakTimes                   uint32 `protobuf:"varint,38,opt,name=peakTimes,proto3" json:"peakTimes,omitempty"`                                     // 总巅峰次数
	DramaTimes                  uint32 `protobuf:"varint,39,opt,name=dramaTimes,proto3" json:"dramaTimes,omitempty"`                                   // 剧本次数
	PeakMarketBuyTimes          uint32 `protobuf:"varint,40,opt,name=peakMarketBuyTimes,proto3" json:"peakMarketBuyTimes,omitempty"`                   // 巅峰市场购买次数
	ArenaMarketBuyTimes         uint32 `protobuf:"varint,41,opt,name=ArenaMarketBuyTimes,proto3" json:"ArenaMarketBuyTimes,omitempty"`                 // 竞技市场购买次数
	DramaMarketBuyTimes         uint32 `protobuf:"varint,42,opt,name=DramaMarketBuyTimes,proto3" json:"DramaMarketBuyTimes,omitempty"`                 // 剧本市场购买
	MysteryMarketBuyTimes       uint32 `protobuf:"varint,43,opt,name=MysteryMarketBuyTimes,proto3" json:"MysteryMarketBuyTimes,omitempty"`             // 神秘市场购买
	ArenaTimes                  uint32 `protobuf:"varint,44,opt,name=ArenaTimes,proto3" json:"ArenaTimes,omitempty"`                                   // 竞技场次数
	ArenaExchangeMarketBuyTimes uint32 `protobuf:"varint,45,opt,name=ArenaExchangeMarketBuyTimes,proto3" json:"ArenaExchangeMarketBuyTimes,omitempty"` // 竞技兑换市场购买次数
	AutoFinishPutOn             uint32 `protobuf:"varint,46,opt,name=autoFinishPutOn,proto3" json:"autoFinishPutOn,omitempty"`                         // 治所派遣次数
	TotalGiveDiamond            uint32 `protobuf:"varint,47,opt,name=totalGiveDiamond,proto3" json:"totalGiveDiamond,omitempty"`                       // 累计赠送钻石
	//uint32 totalRealRechargeDiamond = 52; // 真实订单 累计充值钻石
	//float totalRealRechargeMoney = 53; // 真实订单 累计充值金额
	//uint32 totalRealRechargeTimes = 54; // 真实订单 累计充值次数
	CostDiamond             uint64             `protobuf:"varint,55,opt,name=costDiamond,proto3" json:"costDiamond,omitempty"`                         // 累计消耗元宝
	CostGveDamage           uint64             `protobuf:"varint,56,opt,name=CostGveDamage,proto3" json:"CostGveDamage,omitempty"`                     //累计gve攻城值
	CostLimitChallgeTimes   uint64             `protobuf:"varint,57,opt,name=CostLimitChallgeTimes,proto3" json:"CostLimitChallgeTimes,omitempty"`     //限时挑战累计完成次数
	CommanderSkillUpTimes   uint32             `protobuf:"varint,58,opt,name=commanderSkillUpTimes,proto3" json:"commanderSkillUpTimes,omitempty"`     // commander skill up times
	ActiveScore             uint32             `protobuf:"varint,59,opt,name=activeScore,proto3" json:"activeScore,omitempty"`                         // 活跃度
	Recharge                *RechargeStatTotal `protobuf:"bytes,60,opt,name=recharge,proto3" json:"recharge,omitempty"`                                // 充值统计（真实订单和福利订单等）
	RechargeReal            *RechargeStatTotal `protobuf:"bytes,61,opt,name=rechargeReal,proto3" json:"rechargeReal,omitempty"`                        // 真实充值统计
	HasPassCommanderBattle1 uint32             `protobuf:"varint,62,opt,name=HasPassCommanderBattle1,proto3" json:"HasPassCommanderBattle1,omitempty"` //通关阵前斗将
	HasPassCommanderBattle2 uint32             `protobuf:"varint,63,opt,name=HasPassCommanderBattle2,proto3" json:"HasPassCommanderBattle2,omitempty"` //通关舌战群儒
	GvgOccupyMineTimes      uint32             `protobuf:"varint,65,opt,name=gvgOccupyMineTimes,proto3" json:"gvgOccupyMineTimes,omitempty"`           // 成就GVG占矿次数
	ExpeditionStar          uint32             `protobuf:"varint,66,opt,name=expeditionStar,proto3" json:"expeditionStar,omitempty"`                   // 北伐中原所有关卡累计星数
	NavalPassTimes          uint32             `protobuf:"varint,67,opt,name=navalPassTimes,proto3" json:"navalPassTimes,omitempty"`                   // 铁锁横江通关次数
}

func (x *StatsData) Reset() {
	*x = StatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsData) ProtoMessage() {}

func (x *StatsData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsData.ProtoReflect.Descriptor instead.
func (*StatsData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{60}
}

func (x *StatsData) GetChangeName() uint32 {
	if x != nil {
		return x.ChangeName
	}
	return 0
}

func (x *StatsData) GetBuyGoldTimes() uint32 {
	if x != nil {
		return x.BuyGoldTimes
	}
	return 0
}

func (x *StatsData) GetBuyStrengthTimes() uint32 {
	if x != nil {
		return x.BuyStrengthTimes
	}
	return 0
}

func (x *StatsData) GetArenaWinTimes() uint32 {
	if x != nil {
		return x.ArenaWinTimes
	}
	return 0
}

func (x *StatsData) GetNormalDungeonStar() uint32 {
	if x != nil {
		return x.NormalDungeonStar
	}
	return 0
}

func (x *StatsData) GetEliteDungeonStar() uint32 {
	if x != nil {
		return x.EliteDungeonStar
	}
	return 0
}

func (x *StatsData) GetDailyExpTimes() uint32 {
	if x != nil {
		return x.DailyExpTimes
	}
	return 0
}

func (x *StatsData) GetCoinTimes() uint32 {
	if x != nil {
		return x.CoinTimes
	}
	return 0
}

func (x *StatsData) GetBossTimes() uint32 {
	if x != nil {
		return x.BossTimes
	}
	return 0
}

func (x *StatsData) GetBlackDiamond() uint32 {
	if x != nil {
		return x.BlackDiamond
	}
	return 0
}

func (x *StatsData) GetCoinKill() uint32 {
	if x != nil {
		return x.CoinKill
	}
	return 0
}

func (x *StatsData) GetExpKill() uint32 {
	if x != nil {
		return x.ExpKill
	}
	return 0
}

func (x *StatsData) GetBook50009() uint32 {
	if x != nil {
		return x.Book50009
	}
	return 0
}

func (x *StatsData) GetBook50010() uint32 {
	if x != nil {
		return x.Book50010
	}
	return 0
}

func (x *StatsData) GetBook50011() uint32 {
	if x != nil {
		return x.Book50011
	}
	return 0
}

func (x *StatsData) GetBook50012() uint32 {
	if x != nil {
		return x.Book50012
	}
	return 0
}

func (x *StatsData) GetExploreMissionNum() uint32 {
	if x != nil {
		return x.ExploreMissionNum
	}
	return 0
}

func (x *StatsData) GetCoinDamage() uint64 {
	if x != nil {
		return x.CoinDamage
	}
	return 0
}

func (x *StatsData) GetBossDamage() uint32 {
	if x != nil {
		return x.BossDamage
	}
	return 0
}

func (x *StatsData) GetSoldierBookShield() uint32 {
	if x != nil {
		return x.SoldierBookShield
	}
	return 0
}

func (x *StatsData) GetSoldierBookInfantry() uint32 {
	if x != nil {
		return x.SoldierBookInfantry
	}
	return 0
}

func (x *StatsData) GetSoldierBookLightCavalry() uint32 {
	if x != nil {
		return x.SoldierBookLightCavalry
	}
	return 0
}

func (x *StatsData) GetSoldierBookHeavyCavalry() uint32 {
	if x != nil {
		return x.SoldierBookHeavyCavalry
	}
	return 0
}

func (x *StatsData) GetSoldierBookArcher() uint32 {
	if x != nil {
		return x.SoldierBookArcher
	}
	return 0
}

func (x *StatsData) GetSoldierBookTactician() uint32 {
	if x != nil {
		return x.SoldierBookTactician
	}
	return 0
}

func (x *StatsData) GetDramaTreasurePiece() uint32 {
	if x != nil {
		return x.DramaTreasurePiece
	}
	return 0
}

func (x *StatsData) GetAutoFinishComplete() uint32 {
	if x != nil {
		return x.AutoFinishComplete
	}
	return 0
}

func (x *StatsData) GetJoinGuild() bool {
	if x != nil {
		return x.JoinGuild
	}
	return false
}

func (x *StatsData) GetPeakTimes() uint32 {
	if x != nil {
		return x.PeakTimes
	}
	return 0
}

func (x *StatsData) GetDramaTimes() uint32 {
	if x != nil {
		return x.DramaTimes
	}
	return 0
}

func (x *StatsData) GetPeakMarketBuyTimes() uint32 {
	if x != nil {
		return x.PeakMarketBuyTimes
	}
	return 0
}

func (x *StatsData) GetArenaMarketBuyTimes() uint32 {
	if x != nil {
		return x.ArenaMarketBuyTimes
	}
	return 0
}

func (x *StatsData) GetDramaMarketBuyTimes() uint32 {
	if x != nil {
		return x.DramaMarketBuyTimes
	}
	return 0
}

func (x *StatsData) GetMysteryMarketBuyTimes() uint32 {
	if x != nil {
		return x.MysteryMarketBuyTimes
	}
	return 0
}

func (x *StatsData) GetArenaTimes() uint32 {
	if x != nil {
		return x.ArenaTimes
	}
	return 0
}

func (x *StatsData) GetArenaExchangeMarketBuyTimes() uint32 {
	if x != nil {
		return x.ArenaExchangeMarketBuyTimes
	}
	return 0
}

func (x *StatsData) GetAutoFinishPutOn() uint32 {
	if x != nil {
		return x.AutoFinishPutOn
	}
	return 0
}

func (x *StatsData) GetTotalGiveDiamond() uint32 {
	if x != nil {
		return x.TotalGiveDiamond
	}
	return 0
}

func (x *StatsData) GetCostDiamond() uint64 {
	if x != nil {
		return x.CostDiamond
	}
	return 0
}

func (x *StatsData) GetCostGveDamage() uint64 {
	if x != nil {
		return x.CostGveDamage
	}
	return 0
}

func (x *StatsData) GetCostLimitChallgeTimes() uint64 {
	if x != nil {
		return x.CostLimitChallgeTimes
	}
	return 0
}

func (x *StatsData) GetCommanderSkillUpTimes() uint32 {
	if x != nil {
		return x.CommanderSkillUpTimes
	}
	return 0
}

func (x *StatsData) GetActiveScore() uint32 {
	if x != nil {
		return x.ActiveScore
	}
	return 0
}

func (x *StatsData) GetRecharge() *RechargeStatTotal {
	if x != nil {
		return x.Recharge
	}
	return nil
}

func (x *StatsData) GetRechargeReal() *RechargeStatTotal {
	if x != nil {
		return x.RechargeReal
	}
	return nil
}

func (x *StatsData) GetHasPassCommanderBattle1() uint32 {
	if x != nil {
		return x.HasPassCommanderBattle1
	}
	return 0
}

func (x *StatsData) GetHasPassCommanderBattle2() uint32 {
	if x != nil {
		return x.HasPassCommanderBattle2
	}
	return 0
}

func (x *StatsData) GetGvgOccupyMineTimes() uint32 {
	if x != nil {
		return x.GvgOccupyMineTimes
	}
	return 0
}

func (x *StatsData) GetExpeditionStar() uint32 {
	if x != nil {
		return x.ExpeditionStar
	}
	return 0
}

func (x *StatsData) GetNavalPassTimes() uint32 {
	if x != nil {
		return x.NavalPassTimes
	}
	return 0
}

type ActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoulBoxWarCount uint32 `protobuf:"varint,1,opt,name=soulBoxWarCount,proto3" json:"soulBoxWarCount,omitempty"` // 魂匣征战次数
}

func (x *ActivityData) Reset() {
	*x = ActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityData) ProtoMessage() {}

func (x *ActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityData.ProtoReflect.Descriptor instead.
func (*ActivityData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{61}
}

func (x *ActivityData) GetSoulBoxWarCount() uint32 {
	if x != nil {
		return x.SoulBoxWarCount
	}
	return 0
}

type RechargeStatTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstRechargeDiamond         uint32  `protobuf:"varint,1,opt,name=firstRechargeDiamond,proto3" json:"firstRechargeDiamond,omitempty"`                 // 首充钻石
	FirstRechargeTime            int64   `protobuf:"varint,2,opt,name=firstRechargeTime,proto3" json:"firstRechargeTime,omitempty"`                       // 首充时间
	LastRechargeTime             int64   `protobuf:"varint,3,opt,name=lastRechargeTime,proto3" json:"lastRechargeTime,omitempty"`                         // 最后充值时间
	MaxSingleDayRechargeDiamond  uint32  `protobuf:"varint,4,opt,name=maxSingleDayRechargeDiamond,proto3" json:"maxSingleDayRechargeDiamond,omitempty"`   // 最大单日充值钻石
	MaxSingleTimeRechargeDiamond uint32  `protobuf:"varint,5,opt,name=maxSingleTimeRechargeDiamond,proto3" json:"maxSingleTimeRechargeDiamond,omitempty"` // 最大单笔充值钻石
	RechargeMoney                float32 `protobuf:"fixed32,6,opt,name=rechargeMoney,proto3" json:"rechargeMoney,omitempty"`                              // 累计充值金额
	RechargeDiamond              uint32  `protobuf:"varint,7,opt,name=rechargeDiamond,proto3" json:"rechargeDiamond,omitempty"`                           // 累计充值钻石
	RechargeDays                 uint32  `protobuf:"varint,8,opt,name=rechargeDays,proto3" json:"rechargeDays,omitempty"`                                 // 累计充值天数
	RechargeTimes                uint32  `protobuf:"varint,9,opt,name=rechargeTimes,proto3" json:"rechargeTimes,omitempty"`                               // 累计充值次数
}

func (x *RechargeStatTotal) Reset() {
	*x = RechargeStatTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeStatTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeStatTotal) ProtoMessage() {}

func (x *RechargeStatTotal) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeStatTotal.ProtoReflect.Descriptor instead.
func (*RechargeStatTotal) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{62}
}

func (x *RechargeStatTotal) GetFirstRechargeDiamond() uint32 {
	if x != nil {
		return x.FirstRechargeDiamond
	}
	return 0
}

func (x *RechargeStatTotal) GetFirstRechargeTime() int64 {
	if x != nil {
		return x.FirstRechargeTime
	}
	return 0
}

func (x *RechargeStatTotal) GetLastRechargeTime() int64 {
	if x != nil {
		return x.LastRechargeTime
	}
	return 0
}

func (x *RechargeStatTotal) GetMaxSingleDayRechargeDiamond() uint32 {
	if x != nil {
		return x.MaxSingleDayRechargeDiamond
	}
	return 0
}

func (x *RechargeStatTotal) GetMaxSingleTimeRechargeDiamond() uint32 {
	if x != nil {
		return x.MaxSingleTimeRechargeDiamond
	}
	return 0
}

func (x *RechargeStatTotal) GetRechargeMoney() float32 {
	if x != nil {
		return x.RechargeMoney
	}
	return 0
}

func (x *RechargeStatTotal) GetRechargeDiamond() uint32 {
	if x != nil {
		return x.RechargeDiamond
	}
	return 0
}

func (x *RechargeStatTotal) GetRechargeDays() uint32 {
	if x != nil {
		return x.RechargeDays
	}
	return 0
}

func (x *RechargeStatTotal) GetRechargeTimes() uint32 {
	if x != nil {
		return x.RechargeTimes
	}
	return 0
}

type DailyStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalDungeon   uint32 `protobuf:"varint,1,opt,name=normalDungeon,proto3" json:"normalDungeon,omitempty"`      // 普通副本次数
	EliteDungeon    uint32 `protobuf:"varint,2,opt,name=eliteDungeon,proto3" json:"eliteDungeon,omitempty"`        // 精英副本次数
	DrawCardTimes   uint32 `protobuf:"varint,3,opt,name=drawCardTimes,proto3" json:"drawCardTimes,omitempty"`      // 抽卡次数
	CostGold        uint32 `protobuf:"varint,4,opt,name=costGold,proto3" json:"costGold,omitempty"`                // 消耗黄金
	LoginTimes      uint32 `protobuf:"varint,5,opt,name=LoginTimes,proto3" json:"LoginTimes,omitempty"`            // 登陆次数
	ArenaTimes      uint32 `protobuf:"varint,6,opt,name=ArenaTimes,proto3" json:"ArenaTimes,omitempty"`            // 打竞技场次数
	BossTimes       uint32 `protobuf:"varint,7,opt,name=bossTimes,proto3" json:"bossTimes,omitempty"`              // 打boss次数
	CostDiamond     uint32 `protobuf:"varint,8,opt,name=costDiamond,proto3" json:"costDiamond,omitempty"`          // 消耗钻石
	SlayTimes       uint32 `protobuf:"varint,9,opt,name=slayTimes,proto3" json:"slayTimes,omitempty"`              // 群雄割据次数
	BuildGuildTimes uint32 `protobuf:"varint,10,opt,name=buildGuildTimes,proto3" json:"buildGuildTimes,omitempty"` // 联盟捐献
	//uint32 rechargeDiamond = 11; // 当日充值钻石
	DramaTimes         uint32 `protobuf:"varint,12,opt,name=dramaTimes,proto3" json:"dramaTimes,omitempty"`                 // 剧本通过战斗次数
	DiamondDrawTimes   uint32 `protobuf:"varint,13,opt,name=diamondDrawTimes,proto3" json:"diamondDrawTimes,omitempty"`     // 钻石抽卡次数（不计算免费）
	BuyPhysicalTimes   uint32 `protobuf:"varint,14,opt,name=buyPhysicalTimes,proto3" json:"buyPhysicalTimes,omitempty"`     // 每日体力购买次数
	TakePhysicalTimes  uint32 `protobuf:"varint,15,opt,name=takePhysicalTimes,proto3" json:"takePhysicalTimes,omitempty"`   // 每日体力领取次数
	ShopBuyTimes       uint32 `protobuf:"varint,16,opt,name=shopBuyTimes,proto3" json:"shopBuyTimes,omitempty"`             // 每日商城购买
	ShopRefreshTimes   uint32 `protobuf:"varint,17,opt,name=shopRefreshTimes,proto3" json:"shopRefreshTimes,omitempty"`     // 每日商城刷新
	ChibiWin           uint32 `protobuf:"varint,18,opt,name=chibiWin,proto3" json:"chibiWin,omitempty"`                     //赤壁之战胜利
	AutoFinishPutOn    uint32 `protobuf:"varint,19,opt,name=autoFinishPutOn,proto3" json:"autoFinishPutOn,omitempty"`       // 治所派遣次数
	AssistRewardNum    uint32 `protobuf:"varint,20,opt,name=AssistRewardNum,proto3" json:"AssistRewardNum,omitempty"`       // 助战奖励领取次数
	NormalDungeonSweep uint32 `protobuf:"varint,21,opt,name=normalDungeonSweep,proto3" json:"normalDungeonSweep,omitempty"` // 普通副本扫荡次数
	EliteDungeonSweep  uint32 `protobuf:"varint,22,opt,name=eliteDungeonSweep,proto3" json:"eliteDungeonSweep,omitempty"`   // 精英副本扫荡次数
	//float rechargeRealMoney = 23; // 每日充值金额（真实）
	TowerTakeRewardsTimes     uint32             `protobuf:"varint,24,opt,name=towerTakeRewardsTimes,proto3" json:"towerTakeRewardsTimes,omitempty"`         // 每日黄巾之乱挂机领奖次数
	GveChallengeTimes         uint32             `protobuf:"varint,25,opt,name=gveChallengeTimes,proto3" json:"gveChallengeTimes,omitempty"`                 //每日Gve挑战次数
	LimitChallgeTimes         uint32             `protobuf:"varint,26,opt,name=limitChallgeTimes,proto3" json:"limitChallgeTimes,omitempty"`                 //限时挑战每日完成次数
	Recharge                  *RechargeStatDaily `protobuf:"bytes,27,opt,name=recharge,proto3" json:"recharge,omitempty"`                                    // 当日充值统计（真实订单和福利订单等）
	RechargeReal              *RechargeStatDaily `protobuf:"bytes,28,opt,name=rechargeReal,proto3" json:"rechargeReal,omitempty"`                            // 当日真实充值统计
	CommanderBattleSweepTimes uint32             `protobuf:"varint,29,opt,name=commanderBattleSweepTimes,proto3" json:"commanderBattleSweepTimes,omitempty"` //每日主将对决扫荡次数
	ChooseDrawCount           uint32             `protobuf:"varint,30,opt,name=chooseDrawCount,proto3" json:"chooseDrawCount,omitempty"`                     // 点将抽卡次数
	WorldBossChallengeTimes   uint32             `protobuf:"varint,31,opt,name=worldBossChallengeTimes,proto3" json:"worldBossChallengeTimes,omitempty"`     //世界boss每日挑战次数
	GvgOccupyMineTimes        uint32             `protobuf:"varint,32,opt,name=gvgOccupyMineTimes,proto3" json:"gvgOccupyMineTimes,omitempty"`               //每日gvg占领矿点次数
	ExpeditionSweepTimes      uint32             `protobuf:"varint,33,opt,name=expeditionSweepTimes,proto3" json:"expeditionSweepTimes,omitempty"`           // 北伐中原扫荡次数
	EnterWon                  uint32             `protobuf:"varint,34,opt,name=EnterWon,proto3" json:"EnterWon,omitempty"`                                   // 进入won界面
	OverlordBattleTimes       uint32             `protobuf:"varint,35,opt,name=overlordBattleTimes,proto3" json:"overlordBattleTimes,omitempty"`             // 霸主挑战战斗次数
	NavalBattleTimes          uint32             `protobuf:"varint,36,opt,name=navalBattleTimes,proto3" json:"navalBattleTimes,omitempty"`                   // 铁锁横江战斗次数
	CostPhysical              uint32             `protobuf:"varint,37,opt,name=costPhysical,proto3" json:"costPhysical,omitempty"`                           // 每日消耗体力
	ActiveScore               uint32             `protobuf:"varint,38,opt,name=activeScore,proto3" json:"activeScore,omitempty"`                             // 每日活跃积分
}

func (x *DailyStatsData) Reset() {
	*x = DailyStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStatsData) ProtoMessage() {}

func (x *DailyStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyStatsData.ProtoReflect.Descriptor instead.
func (*DailyStatsData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{63}
}

func (x *DailyStatsData) GetNormalDungeon() uint32 {
	if x != nil {
		return x.NormalDungeon
	}
	return 0
}

func (x *DailyStatsData) GetEliteDungeon() uint32 {
	if x != nil {
		return x.EliteDungeon
	}
	return 0
}

func (x *DailyStatsData) GetDrawCardTimes() uint32 {
	if x != nil {
		return x.DrawCardTimes
	}
	return 0
}

func (x *DailyStatsData) GetCostGold() uint32 {
	if x != nil {
		return x.CostGold
	}
	return 0
}

func (x *DailyStatsData) GetLoginTimes() uint32 {
	if x != nil {
		return x.LoginTimes
	}
	return 0
}

func (x *DailyStatsData) GetArenaTimes() uint32 {
	if x != nil {
		return x.ArenaTimes
	}
	return 0
}

func (x *DailyStatsData) GetBossTimes() uint32 {
	if x != nil {
		return x.BossTimes
	}
	return 0
}

func (x *DailyStatsData) GetCostDiamond() uint32 {
	if x != nil {
		return x.CostDiamond
	}
	return 0
}

func (x *DailyStatsData) GetSlayTimes() uint32 {
	if x != nil {
		return x.SlayTimes
	}
	return 0
}

func (x *DailyStatsData) GetBuildGuildTimes() uint32 {
	if x != nil {
		return x.BuildGuildTimes
	}
	return 0
}

func (x *DailyStatsData) GetDramaTimes() uint32 {
	if x != nil {
		return x.DramaTimes
	}
	return 0
}

func (x *DailyStatsData) GetDiamondDrawTimes() uint32 {
	if x != nil {
		return x.DiamondDrawTimes
	}
	return 0
}

func (x *DailyStatsData) GetBuyPhysicalTimes() uint32 {
	if x != nil {
		return x.BuyPhysicalTimes
	}
	return 0
}

func (x *DailyStatsData) GetTakePhysicalTimes() uint32 {
	if x != nil {
		return x.TakePhysicalTimes
	}
	return 0
}

func (x *DailyStatsData) GetShopBuyTimes() uint32 {
	if x != nil {
		return x.ShopBuyTimes
	}
	return 0
}

func (x *DailyStatsData) GetShopRefreshTimes() uint32 {
	if x != nil {
		return x.ShopRefreshTimes
	}
	return 0
}

func (x *DailyStatsData) GetChibiWin() uint32 {
	if x != nil {
		return x.ChibiWin
	}
	return 0
}

func (x *DailyStatsData) GetAutoFinishPutOn() uint32 {
	if x != nil {
		return x.AutoFinishPutOn
	}
	return 0
}

func (x *DailyStatsData) GetAssistRewardNum() uint32 {
	if x != nil {
		return x.AssistRewardNum
	}
	return 0
}

func (x *DailyStatsData) GetNormalDungeonSweep() uint32 {
	if x != nil {
		return x.NormalDungeonSweep
	}
	return 0
}

func (x *DailyStatsData) GetEliteDungeonSweep() uint32 {
	if x != nil {
		return x.EliteDungeonSweep
	}
	return 0
}

func (x *DailyStatsData) GetTowerTakeRewardsTimes() uint32 {
	if x != nil {
		return x.TowerTakeRewardsTimes
	}
	return 0
}

func (x *DailyStatsData) GetGveChallengeTimes() uint32 {
	if x != nil {
		return x.GveChallengeTimes
	}
	return 0
}

func (x *DailyStatsData) GetLimitChallgeTimes() uint32 {
	if x != nil {
		return x.LimitChallgeTimes
	}
	return 0
}

func (x *DailyStatsData) GetRecharge() *RechargeStatDaily {
	if x != nil {
		return x.Recharge
	}
	return nil
}

func (x *DailyStatsData) GetRechargeReal() *RechargeStatDaily {
	if x != nil {
		return x.RechargeReal
	}
	return nil
}

func (x *DailyStatsData) GetCommanderBattleSweepTimes() uint32 {
	if x != nil {
		return x.CommanderBattleSweepTimes
	}
	return 0
}

func (x *DailyStatsData) GetChooseDrawCount() uint32 {
	if x != nil {
		return x.ChooseDrawCount
	}
	return 0
}

func (x *DailyStatsData) GetWorldBossChallengeTimes() uint32 {
	if x != nil {
		return x.WorldBossChallengeTimes
	}
	return 0
}

func (x *DailyStatsData) GetGvgOccupyMineTimes() uint32 {
	if x != nil {
		return x.GvgOccupyMineTimes
	}
	return 0
}

func (x *DailyStatsData) GetExpeditionSweepTimes() uint32 {
	if x != nil {
		return x.ExpeditionSweepTimes
	}
	return 0
}

func (x *DailyStatsData) GetEnterWon() uint32 {
	if x != nil {
		return x.EnterWon
	}
	return 0
}

func (x *DailyStatsData) GetOverlordBattleTimes() uint32 {
	if x != nil {
		return x.OverlordBattleTimes
	}
	return 0
}

func (x *DailyStatsData) GetNavalBattleTimes() uint32 {
	if x != nil {
		return x.NavalBattleTimes
	}
	return 0
}

func (x *DailyStatsData) GetCostPhysical() uint32 {
	if x != nil {
		return x.CostPhysical
	}
	return 0
}

func (x *DailyStatsData) GetActiveScore() uint32 {
	if x != nil {
		return x.ActiveScore
	}
	return 0
}

type RechargeStatDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RechargeMoney   float32 `protobuf:"fixed32,1,opt,name=rechargeMoney,proto3" json:"rechargeMoney,omitempty"`    // 当日充值金额
	RechargeDiamond uint32  `protobuf:"varint,2,opt,name=rechargeDiamond,proto3" json:"rechargeDiamond,omitempty"` // 当日充值钻石
}

func (x *RechargeStatDaily) Reset() {
	*x = RechargeStatDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeStatDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeStatDaily) ProtoMessage() {}

func (x *RechargeStatDaily) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeStatDaily.ProtoReflect.Descriptor instead.
func (*RechargeStatDaily) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{64}
}

func (x *RechargeStatDaily) GetRechargeMoney() float32 {
	if x != nil {
		return x.RechargeMoney
	}
	return 0
}

func (x *RechargeStatDaily) GetRechargeDiamond() uint32 {
	if x != nil {
		return x.RechargeDiamond
	}
	return 0
}

// 统计数据
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyOnlineTime uint32          `protobuf:"varint,2,opt,name=dailyOnlineTime,proto3" json:"dailyOnlineTime,omitempty"` // 每日在线时长（秒）
	DailyActive     uint32          `protobuf:"varint,5,opt,name=dailyActive,proto3" json:"dailyActive,omitempty"`         // 每日活跃度
	Daily           *DailyStatsData `protobuf:"bytes,10,opt,name=daily,proto3" json:"daily,omitempty"`                     // 每日
	Total           *StatsData      `protobuf:"bytes,11,opt,name=total,proto3" json:"total,omitempty"`                     // 永久
	LowActiveScore  uint32          `protobuf:"varint,12,opt,name=lowActiveScore,proto3" json:"lowActiveScore,omitempty"`  // 低活积分
	Act             *ActivityData   `protobuf:"bytes,13,opt,name=act,proto3" json:"act,omitempty"`                         // 活动数据
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{65}
}

func (x *Stats) GetDailyOnlineTime() uint32 {
	if x != nil {
		return x.DailyOnlineTime
	}
	return 0
}

func (x *Stats) GetDailyActive() uint32 {
	if x != nil {
		return x.DailyActive
	}
	return 0
}

func (x *Stats) GetDaily() *DailyStatsData {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *Stats) GetTotal() *StatsData {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Stats) GetLowActiveScore() uint32 {
	if x != nil {
		return x.LowActiveScore
	}
	return 0
}

func (x *Stats) GetAct() *ActivityData {
	if x != nil {
		return x.Act
	}
	return nil
}

//--------------------------------------------------------------------------------------------------背包
// 背包数据
type Bag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*common.Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Bag) Reset() {
	*x = Bag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bag) ProtoMessage() {}

func (x *Bag) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bag.ProtoReflect.Descriptor instead.
func (*Bag) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{66}
}

func (x *Bag) GetItems() []*common.Item {
	if x != nil {
		return x.Items
	}
	return nil
}

//--------------------------------------------------------------------------------------------------军师
// 军师列表
type CounsellorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnCounsellors     []*common.Counsellor `protobuf:"bytes,1,rep,name=OwnCounsellors,proto3" json:"OwnCounsellors,omitempty"`    // 军师列表
	UnlockMagic3       int32                `protobuf:"varint,2,opt,name=unlockMagic3,proto3" json:"unlockMagic3,omitempty"`       // 第三计谋开启 1 开启 2 已播放
	UnlockMagic4       int32                `protobuf:"varint,3,opt,name=unlockMagic4,proto3" json:"unlockMagic4,omitempty"`       // 第四计谋开启
	TopCounsellorID    int32                `protobuf:"varint,4,opt,name=topCounsellorID,proto3" json:"topCounsellorID,omitempty"` // 最强军师
	TopCounsellorPower uint32               `protobuf:"varint,5,opt,name=topCounsellorPower,proto3" json:"topCounsellorPower,omitempty"`
	UnlockMagic5       int32                `protobuf:"varint,6,opt,name=unlockMagic5,proto3" json:"unlockMagic5,omitempty"` // 第5计谋开启
}

func (x *CounsellorGroup) Reset() {
	*x = CounsellorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounsellorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounsellorGroup) ProtoMessage() {}

func (x *CounsellorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounsellorGroup.ProtoReflect.Descriptor instead.
func (*CounsellorGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{67}
}

func (x *CounsellorGroup) GetOwnCounsellors() []*common.Counsellor {
	if x != nil {
		return x.OwnCounsellors
	}
	return nil
}

func (x *CounsellorGroup) GetUnlockMagic3() int32 {
	if x != nil {
		return x.UnlockMagic3
	}
	return 0
}

func (x *CounsellorGroup) GetUnlockMagic4() int32 {
	if x != nil {
		return x.UnlockMagic4
	}
	return 0
}

func (x *CounsellorGroup) GetTopCounsellorID() int32 {
	if x != nil {
		return x.TopCounsellorID
	}
	return 0
}

func (x *CounsellorGroup) GetTopCounsellorPower() uint32 {
	if x != nil {
		return x.TopCounsellorPower
	}
	return 0
}

func (x *CounsellorGroup) GetUnlockMagic5() int32 {
	if x != nil {
		return x.UnlockMagic5
	}
	return 0
}

// 士兵
type Soldier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soldiers   []*common.Soldier   `protobuf:"bytes,1,rep,name=soldiers,proto3" json:"soldiers,omitempty"`
	ClassTechs []*SoldierClassTech `protobuf:"bytes,2,rep,name=classTechs,proto3" json:"classTechs,omitempty"` // 按索引:盾兵、步兵、轻骑、重骑、弓手、谋士
}

func (x *Soldier) Reset() {
	*x = Soldier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soldier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soldier) ProtoMessage() {}

func (x *Soldier) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soldier.ProtoReflect.Descriptor instead.
func (*Soldier) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{68}
}

func (x *Soldier) GetSoldiers() []*common.Soldier {
	if x != nil {
		return x.Soldiers
	}
	return nil
}

func (x *Soldier) GetClassTechs() []*SoldierClassTech {
	if x != nil {
		return x.ClassTechs
	}
	return nil
}

// 武魂
type WuHunGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnWuHuns      map[uint32]*common.WuHun `protobuf:"bytes,1,rep,name=ownWuHuns,proto3" json:"ownWuHuns,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //武魂列表；uuId：武魂
	UuId           uint32                   `protobuf:"varint,2,opt,name=uuId,proto3" json:"uuId,omitempty"`                                                                                                   //当前武魂最新的UUID，用于生成下一个武魂uuid
	MaterialWuHuns []*common.WuHun          `protobuf:"bytes,3,rep,name=materialWuHuns,proto3" json:"materialWuHuns,omitempty"`                                                                                //武魂材料
}

func (x *WuHunGroup) Reset() {
	*x = WuHunGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WuHunGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WuHunGroup) ProtoMessage() {}

func (x *WuHunGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WuHunGroup.ProtoReflect.Descriptor instead.
func (*WuHunGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{69}
}

func (x *WuHunGroup) GetOwnWuHuns() map[uint32]*common.WuHun {
	if x != nil {
		return x.OwnWuHuns
	}
	return nil
}

func (x *WuHunGroup) GetUuId() uint32 {
	if x != nil {
		return x.UuId
	}
	return 0
}

func (x *WuHunGroup) GetMaterialWuHuns() []*common.WuHun {
	if x != nil {
		return x.MaterialWuHuns
	}
	return nil
}

// 专属装备
type OnlyEquipGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnOnlyEquips map[uint32]*common.OnlyEquip `protobuf:"bytes,1,rep,name=ownOnlyEquips,proto3" json:"ownOnlyEquips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //专属装备列表
	UuId          uint32                       `protobuf:"varint,2,opt,name=uuId,proto3" json:"uuId,omitempty"`                                                                                                           //当前武魂最新的UUID，用于生成下一个uuid
}

func (x *OnlyEquipGroup) Reset() {
	*x = OnlyEquipGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyEquipGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyEquipGroup) ProtoMessage() {}

func (x *OnlyEquipGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyEquipGroup.ProtoReflect.Descriptor instead.
func (*OnlyEquipGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{70}
}

func (x *OnlyEquipGroup) GetOwnOnlyEquips() map[uint32]*common.OnlyEquip {
	if x != nil {
		return x.OwnOnlyEquips
	}
	return nil
}

func (x *OnlyEquipGroup) GetUuId() uint32 {
	if x != nil {
		return x.UuId
	}
	return 0
}

// 兵营科技
type SoldierClassTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfessionLevel int32                 `protobuf:"varint,2,opt,name=professionLevel,proto3" json:"professionLevel,omitempty"` // 职业等级
	Techs           []*common.SoldierTech `protobuf:"bytes,3,rep,name=techs,proto3" json:"techs,omitempty"`
	Power           uint32                `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`                // 战斗力
	RewardIds       []int32               `protobuf:"varint,5,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"` // 已领取奖励id
}

func (x *SoldierClassTech) Reset() {
	*x = SoldierClassTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoldierClassTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoldierClassTech) ProtoMessage() {}

func (x *SoldierClassTech) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoldierClassTech.ProtoReflect.Descriptor instead.
func (*SoldierClassTech) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{71}
}

func (x *SoldierClassTech) GetProfessionLevel() int32 {
	if x != nil {
		return x.ProfessionLevel
	}
	return 0
}

func (x *SoldierClassTech) GetTechs() []*common.SoldierTech {
	if x != nil {
		return x.Techs
	}
	return nil
}

func (x *SoldierClassTech) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *SoldierClassTech) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

// 任务
type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainMission         *common.MissionUnit            `protobuf:"bytes,1,opt,name=MainMission,proto3" json:"MainMission,omitempty"`                                                                                       // 主线任务
	BranchMission       []*common.MissionUnit          `protobuf:"bytes,2,rep,name=BranchMission,proto3" json:"BranchMission,omitempty"`                                                                                   // 支线任务
	FinishBit           map[int32]bool                 `protobuf:"bytes,3,rep,name=FinishBit,proto3" json:"FinishBit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 完成任务的标记
	LastMainMission     int32                          `protobuf:"varint,4,opt,name=lastMainMission,proto3" json:"lastMainMission,omitempty"`                                                                              // 最后完成的主线
	TimeLimitMission    *MissionTimeLimit              `protobuf:"bytes,5,opt,name=timeLimitMission,proto3" json:"timeLimitMission,omitempty"`                                                                             // 限时任务
	NationList          []int32                        `protobuf:"varint,7,rep,packed,name=nationList,proto3" json:"nationList,omitempty"`                                                                                 // 势力列表
	District            []*common.District             `protobuf:"bytes,8,rep,name=district,proto3" json:"district,omitempty"`                                                                                             // 州信息
	Maps                []*common.WorldMap             `protobuf:"bytes,9,rep,name=maps,proto3" json:"maps,omitempty"`                                                                                                     // 地图
	TargetChapter       []*common.MissionTargetChapter `protobuf:"bytes,10,rep,name=targetChapter,proto3" json:"targetChapter,omitempty"`                                                                                  // 目标奖励
	Fortress            []*common.Fortress             `protobuf:"bytes,11,rep,name=fortress,proto3" json:"fortress,omitempty"`                                                                                            // 据点
	Exploratory         int32                          `protobuf:"varint,12,opt,name=exploratory,proto3" json:"exploratory,omitempty"`                                                                                     // 探索度
	ExploratoryRewardId int32                          `protobuf:"varint,13,opt,name=exploratoryRewardId,proto3" json:"exploratoryRewardId,omitempty"`                                                                     // 已领取探索度奖励进度（未领为0，领取了记录表格id）
	MaxPower            uint32                         `protobuf:"varint,14,opt,name=maxPower,proto3" json:"maxPower,omitempty"`                                                                                           // 每日五点最强战斗力
	Level               uint32                         `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`                                                                                                 // 玩家5点等级
}

func (x *Mission) Reset() {
	*x = Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{72}
}

func (x *Mission) GetMainMission() *common.MissionUnit {
	if x != nil {
		return x.MainMission
	}
	return nil
}

func (x *Mission) GetBranchMission() []*common.MissionUnit {
	if x != nil {
		return x.BranchMission
	}
	return nil
}

func (x *Mission) GetFinishBit() map[int32]bool {
	if x != nil {
		return x.FinishBit
	}
	return nil
}

func (x *Mission) GetLastMainMission() int32 {
	if x != nil {
		return x.LastMainMission
	}
	return 0
}

func (x *Mission) GetTimeLimitMission() *MissionTimeLimit {
	if x != nil {
		return x.TimeLimitMission
	}
	return nil
}

func (x *Mission) GetNationList() []int32 {
	if x != nil {
		return x.NationList
	}
	return nil
}

func (x *Mission) GetDistrict() []*common.District {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *Mission) GetMaps() []*common.WorldMap {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *Mission) GetTargetChapter() []*common.MissionTargetChapter {
	if x != nil {
		return x.TargetChapter
	}
	return nil
}

func (x *Mission) GetFortress() []*common.Fortress {
	if x != nil {
		return x.Fortress
	}
	return nil
}

func (x *Mission) GetExploratory() int32 {
	if x != nil {
		return x.Exploratory
	}
	return 0
}

func (x *Mission) GetExploratoryRewardId() int32 {
	if x != nil {
		return x.ExploratoryRewardId
	}
	return 0
}

func (x *Mission) GetMaxPower() uint32 {
	if x != nil {
		return x.MaxPower
	}
	return 0
}

func (x *Mission) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 限时任务
type MissionTimeLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mission        []*common.TimeMission `protobuf:"bytes,1,rep,name=mission,proto3" json:"mission,omitempty"`                       // 限时任务
	Score          uint32                `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                          // 挑战度
	RefreshTime    int64                 `protobuf:"varint,3,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"`              // 刷新时间
	BoxReward      bool                  `protobuf:"varint,4,opt,name=boxReward,proto3" json:"boxReward,omitempty"`                  // 是否领取宝箱奖励
	FinishMissions []int32               `protobuf:"varint,5,rep,packed,name=finishMissions,proto3" json:"finishMissions,omitempty"` // 完成的任务
	UsedTargetId   []uint64              `protobuf:"varint,6,rep,packed,name=usedTargetId,proto3" json:"usedTargetId,omitempty"`     // 使用的作战对象
}

func (x *MissionTimeLimit) Reset() {
	*x = MissionTimeLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionTimeLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionTimeLimit) ProtoMessage() {}

func (x *MissionTimeLimit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionTimeLimit.ProtoReflect.Descriptor instead.
func (*MissionTimeLimit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{73}
}

func (x *MissionTimeLimit) GetMission() []*common.TimeMission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *MissionTimeLimit) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MissionTimeLimit) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *MissionTimeLimit) GetBoxReward() bool {
	if x != nil {
		return x.BoxReward
	}
	return false
}

func (x *MissionTimeLimit) GetFinishMissions() []int32 {
	if x != nil {
		return x.FinishMissions
	}
	return nil
}

func (x *MissionTimeLimit) GetUsedTargetId() []uint64 {
	if x != nil {
		return x.UsedTargetId
	}
	return nil
}

// 副本
type Dungeon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters       []*common.DungeonChapter `protobuf:"bytes,1,rep,name=Chapters,proto3" json:"Chapters,omitempty"` // 副本章节
	Levels         []*common.DungeonLevel   `protobuf:"bytes,2,rep,name=Levels,proto3" json:"Levels,omitempty"`
	ResetTime      int64                    `protobuf:"varint,3,opt,name=ResetTime,proto3" json:"ResetTime,omitempty"`           // 重置时间
	BeginEliteTime int64                    `protobuf:"varint,5,opt,name=beginEliteTime,proto3" json:"beginEliteTime,omitempty"` // 开始精英副本时间
	DropType       uint32                   `protobuf:"varint,6,opt,name=dropType,proto3" json:"dropType,omitempty"`             // 活动掉落类型
	DropTimes      uint32                   `protobuf:"varint,7,opt,name=dropTimes,proto3" json:"dropTimes,omitempty"`           // 活动掉落倍率
}

func (x *Dungeon) Reset() {
	*x = Dungeon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dungeon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dungeon) ProtoMessage() {}

func (x *Dungeon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dungeon.ProtoReflect.Descriptor instead.
func (*Dungeon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{74}
}

func (x *Dungeon) GetChapters() []*common.DungeonChapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Dungeon) GetLevels() []*common.DungeonLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *Dungeon) GetResetTime() int64 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *Dungeon) GetBeginEliteTime() int64 {
	if x != nil {
		return x.BeginEliteTime
	}
	return 0
}

func (x *Dungeon) GetDropType() uint32 {
	if x != nil {
		return x.DropType
	}
	return 0
}

func (x *Dungeon) GetDropTimes() uint32 {
	if x != nil {
		return x.DropTimes
	}
	return 0
}

// 赛季
type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId  int32                      `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"SeasonId,omitempty"`                                                                                           //赛季id
	Reward    *SeasonReward              `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`                                                                                                //赛季奖励
	TaskInfo  map[int32]*SeasonTaskInfo  `protobuf:"bytes,3,rep,name=taskInfo,proto3" json:"taskInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   //mainType 映射 SeasonTaskInfo
	StoreItem map[int32]*SeasonStoreItem `protobuf:"bytes,4,rep,name=storeItem,proto3" json:"storeItem,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //赛季商店
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{75}
}

func (x *Season) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *Season) GetReward() *SeasonReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Season) GetTaskInfo() map[int32]*SeasonTaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *Season) GetStoreItem() map[int32]*SeasonStoreItem {
	if x != nil {
		return x.StoreItem
	}
	return nil
}

type SeasonStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasBuyTimes uint32 `protobuf:"varint,1,opt,name=hasBuyTimes,proto3" json:"hasBuyTimes,omitempty"` //已经购买次数
}

func (x *SeasonStoreItem) Reset() {
	*x = SeasonStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonStoreItem) ProtoMessage() {}

func (x *SeasonStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonStoreItem.ProtoReflect.Descriptor instead.
func (*SeasonStoreItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{76}
}

func (x *SeasonStoreItem) GetHasBuyTimes() uint32 {
	if x != nil {
		return x.HasBuyTimes
	}
	return 0
}

// 私聊消息
type PrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpID     uint64             `protobuf:"varint,1,opt,name=opID,proto3" json:"opID,omitempty"`         // 聊天对方玩家
	Msg      []*common.ChatCell `protobuf:"bytes,2,rep,name=msg,proto3" json:"msg,omitempty"`            // 消息
	ReadTime int64              `protobuf:"varint,3,opt,name=readTime,proto3" json:"readTime,omitempty"` // 读消息时间
}

func (x *PrivateMessage) Reset() {
	*x = PrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateMessage) ProtoMessage() {}

func (x *PrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateMessage.ProtoReflect.Descriptor instead.
func (*PrivateMessage) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{77}
}

func (x *PrivateMessage) GetOpID() uint64 {
	if x != nil {
		return x.OpID
	}
	return 0
}

func (x *PrivateMessage) GetMsg() []*common.ChatCell {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *PrivateMessage) GetReadTime() int64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

// 禁言频道
type BanChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   int32  `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration  uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Reason    string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *BanChannel) Reset() {
	*x = BanChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanChannel) ProtoMessage() {}

func (x *BanChannel) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanChannel.ProtoReflect.Descriptor instead.
func (*BanChannel) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{78}
}

func (x *BanChannel) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *BanChannel) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BanChannel) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BanChannel) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 聊天
type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanChannel      []*BanChannel     `protobuf:"bytes,1,rep,name=banChannel,proto3" json:"banChannel,omitempty"`                   // 屏蔽频道
	PrivateMsg      []*PrivateMessage `protobuf:"bytes,2,rep,name=privateMsg,proto3" json:"privateMsg,omitempty"`                   // 私聊消息
	ReadMessageTime []int64           `protobuf:"varint,3,rep,packed,name=readMessageTime,proto3" json:"readMessageTime,omitempty"` // 读消息的时间(索引：common.ChatChannel value: unix time)
	LastAnnounceId  uint64            `protobuf:"varint,4,opt,name=lastAnnounceId,proto3" json:"lastAnnounceId,omitempty"`          // 上次读的公告id
	PrivateTargetId []uint64          `protobuf:"varint,5,rep,packed,name=privateTargetId,proto3" json:"privateTargetId,omitempty"` // 私聊对方玩家id
	BeChatedId      []uint64          `protobuf:"varint,6,rep,packed,name=beChatedId,proto3" json:"beChatedId,omitempty"`           // 被对方私聊的，不记录私聊对方
	ClearTargetTime int64             `protobuf:"varint,7,opt,name=clearTargetTime,proto3" json:"clearTargetTime,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{79}
}

func (x *Chat) GetBanChannel() []*BanChannel {
	if x != nil {
		return x.BanChannel
	}
	return nil
}

func (x *Chat) GetPrivateMsg() []*PrivateMessage {
	if x != nil {
		return x.PrivateMsg
	}
	return nil
}

func (x *Chat) GetReadMessageTime() []int64 {
	if x != nil {
		return x.ReadMessageTime
	}
	return nil
}

func (x *Chat) GetLastAnnounceId() uint64 {
	if x != nil {
		return x.LastAnnounceId
	}
	return 0
}

func (x *Chat) GetPrivateTargetId() []uint64 {
	if x != nil {
		return x.PrivateTargetId
	}
	return nil
}

func (x *Chat) GetBeChatedId() []uint64 {
	if x != nil {
		return x.BeChatedId
	}
	return nil
}

func (x *Chat) GetClearTargetTime() int64 {
	if x != nil {
		return x.ClearTargetTime
	}
	return 0
}

// 签到
type Checkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckinTimes       uint32   `protobuf:"varint,1,opt,name=checkinTimes,proto3" json:"checkinTimes,omitempty"`           // 已签到次数
	LastCheckinTime    int64    `protobuf:"varint,2,opt,name=lastCheckinTime,proto3" json:"lastCheckinTime,omitempty"`     // 签到时间(正常签到)
	TakedWard          []uint32 `protobuf:"varint,3,rep,packed,name=takedWard,proto3" json:"takedWard,omitempty"`          // 领取了哪些天的累积奖励
	MonthReplenishNum  uint32   `protobuf:"varint,6,opt,name=monthReplenishNum,proto3" json:"monthReplenishNum,omitempty"` // 获得的补签次数
	MonthReplenishTime int64    `protobuf:"varint,7,opt,name=monthReplenishTime,proto3" json:"monthReplenishTime,omitempty"`
	ReplenishNum       uint32   `protobuf:"varint,9,opt,name=replenishNum,proto3" json:"replenishNum,omitempty"`    // 玩家本月累计补签次数
	Days               []uint32 `protobuf:"varint,12,rep,packed,name=days,proto3" json:"days,omitempty"`            // 签到数据
	Replenish          bool     `protobuf:"varint,13,opt,name=replenish,proto3" json:"replenish,omitempty"`         // 是否补签
	DoCheckinTime      int64    `protobuf:"varint,14,opt,name=doCheckinTime,proto3" json:"doCheckinTime,omitempty"` // 执行签到时间（正常签到跟开服签到都有）
}

func (x *Checkin) Reset() {
	*x = Checkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkin) ProtoMessage() {}

func (x *Checkin) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkin.ProtoReflect.Descriptor instead.
func (*Checkin) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{80}
}

func (x *Checkin) GetCheckinTimes() uint32 {
	if x != nil {
		return x.CheckinTimes
	}
	return 0
}

func (x *Checkin) GetLastCheckinTime() int64 {
	if x != nil {
		return x.LastCheckinTime
	}
	return 0
}

func (x *Checkin) GetTakedWard() []uint32 {
	if x != nil {
		return x.TakedWard
	}
	return nil
}

func (x *Checkin) GetMonthReplenishNum() uint32 {
	if x != nil {
		return x.MonthReplenishNum
	}
	return 0
}

func (x *Checkin) GetMonthReplenishTime() int64 {
	if x != nil {
		return x.MonthReplenishTime
	}
	return 0
}

func (x *Checkin) GetReplenishNum() uint32 {
	if x != nil {
		return x.ReplenishNum
	}
	return 0
}

func (x *Checkin) GetDays() []uint32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *Checkin) GetReplenish() bool {
	if x != nil {
		return x.Replenish
	}
	return false
}

func (x *Checkin) GetDoCheckinTime() int64 {
	if x != nil {
		return x.DoCheckinTime
	}
	return 0
}

type Friends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendList     []uint64 `protobuf:"varint,1,rep,packed,name=friendList,proto3" json:"friendList,omitempty"`         //好友
	BlackList      []uint64 `protobuf:"varint,2,rep,packed,name=blackList,proto3" json:"blackList,omitempty"`           //黑名单
	RequestList    []uint64 `protobuf:"varint,3,rep,packed,name=requestList,proto3" json:"requestList,omitempty"`       //申请
	CrossBlackList []uint64 `protobuf:"varint,4,rep,packed,name=crossBlackList,proto3" json:"crossBlackList,omitempty"` // 跨服黑名单列表
}

func (x *Friends) Reset() {
	*x = Friends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friends) ProtoMessage() {}

func (x *Friends) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friends.ProtoReflect.Descriptor instead.
func (*Friends) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{81}
}

func (x *Friends) GetFriendList() []uint64 {
	if x != nil {
		return x.FriendList
	}
	return nil
}

func (x *Friends) GetBlackList() []uint64 {
	if x != nil {
		return x.BlackList
	}
	return nil
}

func (x *Friends) GetRequestList() []uint64 {
	if x != nil {
		return x.RequestList
	}
	return nil
}

func (x *Friends) GetCrossBlackList() []uint64 {
	if x != nil {
		return x.CrossBlackList
	}
	return nil
}

type PhysicalPresent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveList []uint64 `protobuf:"varint,1,rep,packed,name=receiveList,proto3" json:"receiveList,omitempty"` // 收到的体力赠送
	CollectList []uint64 `protobuf:"varint,2,rep,packed,name=collectList,proto3" json:"collectList,omitempty"` // 领取的体力赠送
}

func (x *PhysicalPresent) Reset() {
	*x = PhysicalPresent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalPresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalPresent) ProtoMessage() {}

func (x *PhysicalPresent) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalPresent.ProtoReflect.Descriptor instead.
func (*PhysicalPresent) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{82}
}

func (x *PhysicalPresent) GetReceiveList() []uint64 {
	if x != nil {
		return x.ReceiveList
	}
	return nil
}

func (x *PhysicalPresent) GetCollectList() []uint64 {
	if x != nil {
		return x.CollectList
	}
	return nil
}

//--------------------------------------------------------------------------------------------------购买
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopDailyRecord *common.ShopDailyRecord `protobuf:"bytes,1,opt,name=shopDailyRecord,proto3" json:"shopDailyRecord,omitempty"` //每日购买记录
	ItemMarkets     []*common.ItemMarket    `protobuf:"bytes,2,rep,name=itemMarkets,proto3" json:"itemMarkets,omitempty"`         //全部商店数据
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{83}
}

func (x *Market) GetShopDailyRecord() *common.ShopDailyRecord {
	if x != nil {
		return x.ShopDailyRecord
	}
	return nil
}

func (x *Market) GetItemMarkets() []*common.ItemMarket {
	if x != nil {
		return x.ItemMarkets
	}
	return nil
}

//--------------------------------------------------------------------------------------------------训练
// 训练
type Train struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*common.TrainItem            `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	Replays       []*common.ReplaySimple         `protobuf:"bytes,2,rep,name=replays,proto3" json:"replays,omitempty"`                                                                                          // 回放
	ChapterReward []int32                        `protobuf:"varint,3,rep,packed,name=chapterReward,proto3" json:"chapterReward,omitempty"`                                                                      // 章节奖励
	Barrage       map[int32]*common.TrainBarrage `protobuf:"bytes,4,rep,name=barrage,proto3" json:"barrage,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 弹幕
}

func (x *Train) Reset() {
	*x = Train{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Train) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Train) ProtoMessage() {}

func (x *Train) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Train.ProtoReflect.Descriptor instead.
func (*Train) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{84}
}

func (x *Train) GetItems() []*common.TrainItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Train) GetReplays() []*common.ReplaySimple {
	if x != nil {
		return x.Replays
	}
	return nil
}

func (x *Train) GetChapterReward() []int32 {
	if x != nil {
		return x.ChapterReward
	}
	return nil
}

func (x *Train) GetBarrage() map[int32]*common.TrainBarrage {
	if x != nil {
		return x.Barrage
	}
	return nil
}

//--------------------------------------------------------------------------------------------------日常
type TaskUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks          []*common.TaskCell `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	FinishedTask   map[int32]bool     `protobuf:"bytes,2,rep,name=finishedTask,proto3" json:"finishedTask,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Score          int32              `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                   // 积分
	RewardType     uint32             `protobuf:"varint,4,opt,name=rewardType,proto3" json:"rewardType,omitempty"`         // 每天第一次登录时奖励类型(1.普通，2.神兽)
	RewardProgress int32              `protobuf:"varint,5,opt,name=rewardProgress,proto3" json:"rewardProgress,omitempty"` // 成长奖励
	GotReward      []int32            `protobuf:"varint,6,rep,packed,name=gotReward,proto3" json:"gotReward,omitempty"`    // 每日已领取奖励
	Version        int32              `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`               // 版本
}

func (x *TaskUnit) Reset() {
	*x = TaskUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUnit) ProtoMessage() {}

func (x *TaskUnit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUnit.ProtoReflect.Descriptor instead.
func (*TaskUnit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{85}
}

func (x *TaskUnit) GetTasks() []*common.TaskCell {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskUnit) GetFinishedTask() map[int32]bool {
	if x != nil {
		return x.FinishedTask
	}
	return nil
}

func (x *TaskUnit) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TaskUnit) GetRewardType() uint32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *TaskUnit) GetRewardProgress() int32 {
	if x != nil {
		return x.RewardProgress
	}
	return 0
}

func (x *TaskUnit) GetGotReward() []int32 {
	if x != nil {
		return x.GotReward
	}
	return nil
}

func (x *TaskUnit) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TaskWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     int32   `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`                // 每周活跃积分
	RewardIds []int32 `protobuf:"varint,2,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"` // 已领取奖励id
	Level     uint32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                //每周一记录等级，本周奖励等级不变
}

func (x *TaskWeek) Reset() {
	*x = TaskWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWeek) ProtoMessage() {}

func (x *TaskWeek) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWeek.ProtoReflect.Descriptor instead.
func (*TaskWeek) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{86}
}

func (x *TaskWeek) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TaskWeek) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *TaskWeek) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Week            *TaskWeek                      `protobuf:"bytes,2,opt,name=week,proto3" json:"week,omitempty"`                        // 周奖励
	Daily           *TaskUnit                      `protobuf:"bytes,3,opt,name=daily,proto3" json:"daily,omitempty"`                      // 日常
	Grow            *TaskUnit                      `protobuf:"bytes,4,opt,name=grow,proto3" json:"grow,omitempty"`                        // 生涯
	LastRefreshTime int64                          `protobuf:"varint,5,opt,name=lastRefreshTime,proto3" json:"lastRefreshTime,omitempty"` // 上次刷新时间
	Story           *TaskUnit                      `protobuf:"bytes,6,opt,name=story,proto3" json:"story,omitempty"`                      // 主线
	TargetChapter   []*common.MissionTargetChapter `protobuf:"bytes,7,rep,name=targetChapter,proto3" json:"targetChapter,omitempty"`      // 目标任务
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{87}
}

func (x *Task) GetWeek() *TaskWeek {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *Task) GetDaily() *TaskUnit {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *Task) GetGrow() *TaskUnit {
	if x != nil {
		return x.Grow
	}
	return nil
}

func (x *Task) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *Task) GetStory() *TaskUnit {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *Task) GetTargetChapter() []*common.MissionTargetChapter {
	if x != nil {
		return x.TargetChapter
	}
	return nil
}

type Treasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Treasures []*common.Treasure       `protobuf:"bytes,1,rep,name=treasures,proto3" json:"treasures,omitempty"` // 宝物
	Fates     []*common.TreasureFate   `protobuf:"bytes,4,rep,name=fates,proto3" json:"fates,omitempty"`         // 宝物缘分
	Refine    []*common.TreasureRefine `protobuf:"bytes,5,rep,name=refine,proto3" json:"refine,omitempty"`       // 宝物洗炼
}

func (x *Treasure) Reset() {
	*x = Treasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasure) ProtoMessage() {}

func (x *Treasure) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasure.ProtoReflect.Descriptor instead.
func (*Treasure) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{88}
}

func (x *Treasure) GetTreasures() []*common.Treasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

func (x *Treasure) GetFates() []*common.TreasureFate {
	if x != nil {
		return x.Fates
	}
	return nil
}

func (x *Treasure) GetRefine() []*common.TreasureRefine {
	if x != nil {
		return x.Refine
	}
	return nil
}

//--------------------------------------------------------------------------------------------------机器人
type RobotUIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Robots []uint64 `protobuf:"varint,1,rep,packed,name=robots,proto3" json:"robots,omitempty"` //机器人的uid
}

func (x *RobotUIDs) Reset() {
	*x = RobotUIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotUIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotUIDs) ProtoMessage() {}

func (x *RobotUIDs) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotUIDs.ProtoReflect.Descriptor instead.
func (*RobotUIDs) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{89}
}

func (x *RobotUIDs) GetRobots() []uint64 {
	if x != nil {
		return x.Robots
	}
	return nil
}

//RobotPeakScore 机器人的巅峰竞技场积分
type RobotPeakScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotScores map[uint64]uint32 `protobuf:"bytes,1,rep,name=robotScores,proto3" json:"robotScores,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RobotPeakScore) Reset() {
	*x = RobotPeakScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotPeakScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotPeakScore) ProtoMessage() {}

func (x *RobotPeakScore) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotPeakScore.ProtoReflect.Descriptor instead.
func (*RobotPeakScore) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{90}
}

func (x *RobotPeakScore) GetRobotScores() map[uint64]uint32 {
	if x != nil {
		return x.RobotScores
	}
	return nil
}

//RobotPeakMatchData 机器人的巅峰竞技场积分
type ImagePeakMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId    uint64 `protobuf:"varint,1,opt,name=imageId,proto3" json:"imageId,omitempty"`       // 玩家id
	Score      uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`           //积分
	Power      uint32 `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`           //战斗力
	ActiveTime int64  `protobuf:"varint,4,opt,name=activeTime,proto3" json:"activeTime,omitempty"` //活跃时间
}

func (x *ImagePeakMatchData) Reset() {
	*x = ImagePeakMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePeakMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePeakMatchData) ProtoMessage() {}

func (x *ImagePeakMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePeakMatchData.ProtoReflect.Descriptor instead.
func (*ImagePeakMatchData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{91}
}

func (x *ImagePeakMatchData) GetImageId() uint64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ImagePeakMatchData) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ImagePeakMatchData) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ImagePeakMatchData) GetActiveTime() int64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

//--------------------------------------------------------------------------------------------------竞技场
type ArenaVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionID int64  `protobuf:"varint,1,opt,name=versionID,proto3" json:"versionID,omitempty"` //排行榜的版本id(时间戳为单位)
	TopUID    uint64 `protobuf:"varint,2,opt,name=topUID,proto3" json:"topUID,omitempty"`       //第一名的id
	TopDays   uint32 `protobuf:"varint,3,opt,name=topDays,proto3" json:"topDays,omitempty"`     //第一名的霸榜的天数
}

func (x *ArenaVersion) Reset() {
	*x = ArenaVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaVersion) ProtoMessage() {}

func (x *ArenaVersion) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaVersion.ProtoReflect.Descriptor instead.
func (*ArenaVersion) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{92}
}

func (x *ArenaVersion) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

func (x *ArenaVersion) GetTopUID() uint64 {
	if x != nil {
		return x.TopUID
	}
	return 0
}

func (x *ArenaVersion) GetTopDays() uint32 {
	if x != nil {
		return x.TopDays
	}
	return 0
}

//ArenaRankItem
type ArenaRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rank uint32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"` //
}

func (x *ArenaRankItem) Reset() {
	*x = ArenaRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaRankItem) ProtoMessage() {}

func (x *ArenaRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaRankItem.ProtoReflect.Descriptor instead.
func (*ArenaRankItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{93}
}

func (x *ArenaRankItem) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ArenaRankItem) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

//--------------------------------------------------------------------------------------------------普通排行榜
type RankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionID int64    `protobuf:"varint,1,opt,name=versionID,proto3" json:"versionID,omitempty"`      //排行榜的版本id(时间戳为单位)
	RankList  []uint64 `protobuf:"varint,2,rep,packed,name=rankList,proto3" json:"rankList,omitempty"` //排行榜的玩家排名
}

func (x *RankList) Reset() {
	*x = RankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankList) ProtoMessage() {}

func (x *RankList) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankList.ProtoReflect.Descriptor instead.
func (*RankList) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{94}
}

func (x *RankList) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

func (x *RankList) GetRankList() []uint64 {
	if x != nil {
		return x.RankList
	}
	return nil
}

type SystemOpenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenData map[int32]int32 `protobuf:"bytes,1,rep,name=openData,proto3" json:"openData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SystemOpenData) Reset() {
	*x = SystemOpenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemOpenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemOpenData) ProtoMessage() {}

func (x *SystemOpenData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemOpenData.ProtoReflect.Descriptor instead.
func (*SystemOpenData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{95}
}

func (x *SystemOpenData) GetOpenData() map[int32]int32 {
	if x != nil {
		return x.OpenData
	}
	return nil
}

// 低活领取记录
type DrawLowActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastTime int64  `protobuf:"varint,2,opt,name=lastTime,proto3" json:"lastTime,omitempty"`
}

func (x *DrawLowActive) Reset() {
	*x = DrawLowActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawLowActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawLowActive) ProtoMessage() {}

func (x *DrawLowActive) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawLowActive.ProtoReflect.Descriptor instead.
func (*DrawLowActive) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{96}
}

func (x *DrawLowActive) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DrawLowActive) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

// 抽卡积分
type DrawScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstScore  uint32                   `protobuf:"varint,1,opt,name=firstScore,proto3" json:"firstScore,omitempty"`
	SecondScore uint32                   `protobuf:"varint,2,opt,name=secondScore,proto3" json:"secondScore,omitempty"`
	ThirdScore  uint32                   `protobuf:"varint,3,opt,name=thirdScore,proto3" json:"thirdScore,omitempty"`
	DrawCount   uint32                   `protobuf:"varint,4,opt,name=drawCount,proto3" json:"drawCount,omitempty"`                                                                                         // 抽卡次数
	LowActive   map[int32]*DrawLowActive `protobuf:"bytes,5,rep,name=lowActive,proto3" json:"lowActive,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 低活id map
	FirstCount  uint32                   `protobuf:"varint,6,opt,name=firstCount,proto3" json:"firstCount,omitempty"`                                                                                       // 1档数量
	SecondCount uint32                   `protobuf:"varint,7,opt,name=secondCount,proto3" json:"secondCount,omitempty"`                                                                                     // 2档数量
	ThirdCount  uint32                   `protobuf:"varint,8,opt,name=thirdCount,proto3" json:"thirdCount,omitempty"`                                                                                       // 3档数量
}

func (x *DrawScore) Reset() {
	*x = DrawScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawScore) ProtoMessage() {}

func (x *DrawScore) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawScore.ProtoReflect.Descriptor instead.
func (*DrawScore) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{97}
}

func (x *DrawScore) GetFirstScore() uint32 {
	if x != nil {
		return x.FirstScore
	}
	return 0
}

func (x *DrawScore) GetSecondScore() uint32 {
	if x != nil {
		return x.SecondScore
	}
	return 0
}

func (x *DrawScore) GetThirdScore() uint32 {
	if x != nil {
		return x.ThirdScore
	}
	return 0
}

func (x *DrawScore) GetDrawCount() uint32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *DrawScore) GetLowActive() map[int32]*DrawLowActive {
	if x != nil {
		return x.LowActive
	}
	return nil
}

func (x *DrawScore) GetFirstCount() uint32 {
	if x != nil {
		return x.FirstCount
	}
	return 0
}

func (x *DrawScore) GetSecondCount() uint32 {
	if x != nil {
		return x.SecondCount
	}
	return 0
}

func (x *DrawScore) GetThirdCount() uint32 {
	if x != nil {
		return x.ThirdCount
	}
	return 0
}

// 普通抽卡
type DrawNormal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score        *DrawScore `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	LastFreeTime int64      `protobuf:"varint,2,opt,name=lastFreeTime,proto3" json:"lastFreeTime,omitempty"` // 上次免费刷新时间
	FreeNum      uint32     `protobuf:"varint,3,opt,name=freeNum,proto3" json:"freeNum,omitempty"`           // 免费次数
}

func (x *DrawNormal) Reset() {
	*x = DrawNormal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawNormal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNormal) ProtoMessage() {}

func (x *DrawNormal) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNormal.ProtoReflect.Descriptor instead.
func (*DrawNormal) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{98}
}

func (x *DrawNormal) GetScore() *DrawScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *DrawNormal) GetLastFreeTime() int64 {
	if x != nil {
		return x.LastFreeTime
	}
	return 0
}

func (x *DrawNormal) GetFreeNum() uint32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

// 钻石抽卡
type DrawDiamond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiamondScore      *DrawScore `protobuf:"bytes,2,opt,name=diamondScore,proto3" json:"diamondScore,omitempty"`
	LastFreeTime      int64      `protobuf:"varint,3,opt,name=lastFreeTime,proto3" json:"lastFreeTime,omitempty"`           // 上次免费时间
	LastHalfPriceTime int64      `protobuf:"varint,5,opt,name=lastHalfPriceTime,proto3" json:"lastHalfPriceTime,omitempty"` // 上次半价时间
	HalfPriceNum      uint32     `protobuf:"varint,6,opt,name=halfPriceNum,proto3" json:"halfPriceNum,omitempty"`           // 半价次数
	LevelUse          []uint32   `protobuf:"varint,7,rep,packed,name=levelUse,proto3" json:"levelUse,omitempty"`            // 已经使用的等级
	TotalFreeTimes    uint32     `protobuf:"varint,8,opt,name=totalFreeTimes,proto3" json:"totalFreeTimes,omitempty"`       // 免费钻石抽卡总数
	LevelDrawTimes    uint32     `protobuf:"varint,9,opt,name=levelDrawTimes,proto3" json:"levelDrawTimes,omitempty"`       // 等级抽卡次数
}

func (x *DrawDiamond) Reset() {
	*x = DrawDiamond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawDiamond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawDiamond) ProtoMessage() {}

func (x *DrawDiamond) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawDiamond.ProtoReflect.Descriptor instead.
func (*DrawDiamond) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{99}
}

func (x *DrawDiamond) GetDiamondScore() *DrawScore {
	if x != nil {
		return x.DiamondScore
	}
	return nil
}

func (x *DrawDiamond) GetLastFreeTime() int64 {
	if x != nil {
		return x.LastFreeTime
	}
	return 0
}

func (x *DrawDiamond) GetLastHalfPriceTime() int64 {
	if x != nil {
		return x.LastHalfPriceTime
	}
	return 0
}

func (x *DrawDiamond) GetHalfPriceNum() uint32 {
	if x != nil {
		return x.HalfPriceNum
	}
	return 0
}

func (x *DrawDiamond) GetLevelUse() []uint32 {
	if x != nil {
		return x.LevelUse
	}
	return nil
}

func (x *DrawDiamond) GetTotalFreeTimes() uint32 {
	if x != nil {
		return x.TotalFreeTimes
	}
	return 0
}

func (x *DrawDiamond) GetLevelDrawTimes() uint32 {
	if x != nil {
		return x.LevelDrawTimes
	}
	return 0
}

// 点将抽卡
type DrawChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     *DrawScore `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	Quality16 []int32    `protobuf:"varint,2,rep,packed,name=quality16,proto3" json:"quality16,omitempty"`
	Quality15 []int32    `protobuf:"varint,3,rep,packed,name=quality15,proto3" json:"quality15,omitempty"`
}

func (x *DrawChoose) Reset() {
	*x = DrawChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawChoose) ProtoMessage() {}

func (x *DrawChoose) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawChoose.ProtoReflect.Descriptor instead.
func (*DrawChoose) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{100}
}

func (x *DrawChoose) GetScore() *DrawScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *DrawChoose) GetQuality16() []int32 {
	if x != nil {
		return x.Quality16
	}
	return nil
}

func (x *DrawChoose) GetQuality15() []int32 {
	if x != nil {
		return x.Quality15
	}
	return nil
}

// 宝物抽卡
type DrawTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount           uint32 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                     // 总次数
	GoldScore            int32  `protobuf:"varint,2,opt,name=goldScore,proto3" json:"goldScore,omitempty"`                       // 金色积分
	OrangeScore          int32  `protobuf:"varint,3,opt,name=orangeScore,proto3" json:"orangeScore,omitempty"`                   // 橙色积分
	PurpleScore          int32  `protobuf:"varint,4,opt,name=purpleScore,proto3" json:"purpleScore,omitempty"`                   // 紫色积分
	TodayNormalFreeCount uint32 `protobuf:"varint,5,opt,name=todayNormalFreeCount,proto3" json:"todayNormalFreeCount,omitempty"` // 普通免费次数
	HalfPriceTime        int64  `protobuf:"varint,6,opt,name=halfPriceTime,proto3" json:"halfPriceTime,omitempty"`               // 半价购买时间
	TodayBuyCount        uint32 `protobuf:"varint,7,opt,name=todayBuyCount,proto3" json:"todayBuyCount,omitempty"`               // 今日购买次数
	RefreshTime          int64  `protobuf:"varint,9,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"`                   // 上次刷新时间
	DrawOrangeTimes      int32  `protobuf:"varint,10,opt,name=drawOrangeTimes,proto3" json:"drawOrangeTimes,omitempty"`          // 橙卡总积分数
	DrawTimes            uint32 `protobuf:"varint,11,opt,name=drawTimes,proto3" json:"drawTimes,omitempty"`                      // 橙卡后抽卡次数
	DrawGoldTimes        uint32 `protobuf:"varint,12,opt,name=drawGoldTimes,proto3" json:"drawGoldTimes,omitempty"`              // 金卡次数
	EnterTime            int64  `protobuf:"varint,13,opt,name=enterTime,proto3" json:"enterTime,omitempty"`                      // 进入天工府时间戳
	HitOrangeHotTimes    uint32 `protobuf:"varint,14,opt,name=hitOrangeHotTimes,proto3" json:"hitOrangeHotTimes,omitempty"`      // 热点宝物中的橙色次数
	HitGoldHotTimes      uint32 `protobuf:"varint,15,opt,name=hitGoldHotTimes,proto3" json:"hitGoldHotTimes,omitempty"`          // 热点宝物中的金色次数
	HotActId             uint32 `protobuf:"varint,16,opt,name=hotActId,proto3" json:"hotActId,omitempty"`                        //热点宝物活动Id
}

func (x *DrawTreasure) Reset() {
	*x = DrawTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawTreasure) ProtoMessage() {}

func (x *DrawTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawTreasure.ProtoReflect.Descriptor instead.
func (*DrawTreasure) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{101}
}

func (x *DrawTreasure) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DrawTreasure) GetGoldScore() int32 {
	if x != nil {
		return x.GoldScore
	}
	return 0
}

func (x *DrawTreasure) GetOrangeScore() int32 {
	if x != nil {
		return x.OrangeScore
	}
	return 0
}

func (x *DrawTreasure) GetPurpleScore() int32 {
	if x != nil {
		return x.PurpleScore
	}
	return 0
}

func (x *DrawTreasure) GetTodayNormalFreeCount() uint32 {
	if x != nil {
		return x.TodayNormalFreeCount
	}
	return 0
}

func (x *DrawTreasure) GetHalfPriceTime() int64 {
	if x != nil {
		return x.HalfPriceTime
	}
	return 0
}

func (x *DrawTreasure) GetTodayBuyCount() uint32 {
	if x != nil {
		return x.TodayBuyCount
	}
	return 0
}

func (x *DrawTreasure) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *DrawTreasure) GetDrawOrangeTimes() int32 {
	if x != nil {
		return x.DrawOrangeTimes
	}
	return 0
}

func (x *DrawTreasure) GetDrawTimes() uint32 {
	if x != nil {
		return x.DrawTimes
	}
	return 0
}

func (x *DrawTreasure) GetDrawGoldTimes() uint32 {
	if x != nil {
		return x.DrawGoldTimes
	}
	return 0
}

func (x *DrawTreasure) GetEnterTime() int64 {
	if x != nil {
		return x.EnterTime
	}
	return 0
}

func (x *DrawTreasure) GetHitOrangeHotTimes() uint32 {
	if x != nil {
		return x.HitOrangeHotTimes
	}
	return 0
}

func (x *DrawTreasure) GetHitGoldHotTimes() uint32 {
	if x != nil {
		return x.HitGoldHotTimes
	}
	return 0
}

func (x *DrawTreasure) GetHotActId() uint32 {
	if x != nil {
		return x.HotActId
	}
	return 0
}

// 武魂抽卡
type DrawWuHun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     uint32          `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                                                                                              // 总次数
	Score          map[int32]int32 `protobuf:"bytes,2,rep,name=score,proto3" json:"score,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`               // 积分
	RefreshTime    int64           `protobuf:"varint,3,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"`                                                                                            // 上次刷新时间
	TodayBuyCount  uint32          `protobuf:"varint,4,opt,name=todayBuyCount,proto3" json:"todayBuyCount,omitempty"`                                                                                        // 今日购买次数
	WishId         int32           `protobuf:"varint,5,opt,name=wishId,proto3" json:"wishId,omitempty"`                                                                                                      // 心愿单
	TriggerTimes   map[int32]int32 `protobuf:"bytes,6,rep,name=triggerTimes,proto3" json:"triggerTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 触发次数
	TodayDrawCount uint32          `protobuf:"varint,7,opt,name=todayDrawCount,proto3" json:"todayDrawCount,omitempty"`                                                                                      // 今天抽卡次数
}

func (x *DrawWuHun) Reset() {
	*x = DrawWuHun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawWuHun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawWuHun) ProtoMessage() {}

func (x *DrawWuHun) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawWuHun.ProtoReflect.Descriptor instead.
func (*DrawWuHun) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{102}
}

func (x *DrawWuHun) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DrawWuHun) GetScore() map[int32]int32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *DrawWuHun) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *DrawWuHun) GetTodayBuyCount() uint32 {
	if x != nil {
		return x.TodayBuyCount
	}
	return 0
}

func (x *DrawWuHun) GetWishId() int32 {
	if x != nil {
		return x.WishId
	}
	return 0
}

func (x *DrawWuHun) GetTriggerTimes() map[int32]int32 {
	if x != nil {
		return x.TriggerTimes
	}
	return nil
}

func (x *DrawWuHun) GetTodayDrawCount() uint32 {
	if x != nil {
		return x.TodayDrawCount
	}
	return 0
}

//专属装备抽卡
type DrawOnlyEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawData map[int32]*DrawOnlyEquip_DrawData `protobuf:"bytes,1,rep,name=drawData,proto3" json:"drawData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DrawOnlyEquip) Reset() {
	*x = DrawOnlyEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawOnlyEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawOnlyEquip) ProtoMessage() {}

func (x *DrawOnlyEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawOnlyEquip.ProtoReflect.Descriptor instead.
func (*DrawOnlyEquip) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{103}
}

func (x *DrawOnlyEquip) GetDrawData() map[int32]*DrawOnlyEquip_DrawData {
	if x != nil {
		return x.DrawData
	}
	return nil
}

// 抽卡
type Draw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Normal        *DrawNormal    `protobuf:"bytes,1,opt,name=normal,proto3" json:"normal,omitempty"`
	Diamond       *DrawDiamond   `protobuf:"bytes,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Treasure      *DrawTreasure  `protobuf:"bytes,3,opt,name=treasure,proto3" json:"treasure,omitempty"`
	Select        *DrawChoose    `protobuf:"bytes,4,opt,name=select,proto3" json:"select,omitempty"`
	NormalWuHun   *DrawWuHun     `protobuf:"bytes,5,opt,name=normalWuHun,proto3" json:"normalWuHun,omitempty"`
	DiamondWuHun  *DrawWuHun     `protobuf:"bytes,6,opt,name=diamondWuHun,proto3" json:"diamondWuHun,omitempty"`
	DrawMount     *DrawMount     `protobuf:"bytes,7,opt,name=drawMount,proto3" json:"drawMount,omitempty"`
	DrawOnlyEquip *DrawOnlyEquip `protobuf:"bytes,8,opt,name=drawOnlyEquip,proto3" json:"drawOnlyEquip,omitempty"`
}

func (x *Draw) Reset() {
	*x = Draw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Draw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Draw) ProtoMessage() {}

func (x *Draw) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Draw.ProtoReflect.Descriptor instead.
func (*Draw) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{104}
}

func (x *Draw) GetNormal() *DrawNormal {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *Draw) GetDiamond() *DrawDiamond {
	if x != nil {
		return x.Diamond
	}
	return nil
}

func (x *Draw) GetTreasure() *DrawTreasure {
	if x != nil {
		return x.Treasure
	}
	return nil
}

func (x *Draw) GetSelect() *DrawChoose {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *Draw) GetNormalWuHun() *DrawWuHun {
	if x != nil {
		return x.NormalWuHun
	}
	return nil
}

func (x *Draw) GetDiamondWuHun() *DrawWuHun {
	if x != nil {
		return x.DiamondWuHun
	}
	return nil
}

func (x *Draw) GetDrawMount() *DrawMount {
	if x != nil {
		return x.DrawMount
	}
	return nil
}

func (x *Draw) GetDrawOnlyEquip() *DrawOnlyEquip {
	if x != nil {
		return x.DrawOnlyEquip
	}
	return nil
}

//--------------------------------------------------------------------------------------------------活动
// 活动任务
type ActivityTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Finish   int32  `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"` // 已领奖次数（未领为0）
	Progress uint32 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *ActivityTask) Reset() {
	*x = ActivityTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTask) ProtoMessage() {}

func (x *ActivityTask) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTask.ProtoReflect.Descriptor instead.
func (*ActivityTask) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{105}
}

func (x *ActivityTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityTask) GetFinish() int32 {
	if x != nil {
		return x.Finish
	}
	return 0
}

func (x *ActivityTask) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// 通用活动
type ActivityCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId            int32           `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	CumulativeLoginTime   int64           `protobuf:"varint,2,opt,name=CumulativeLoginTime,proto3" json:"CumulativeLoginTime,omitempty"`     // 累积登录时间
	ContinueDays          uint32          `protobuf:"varint,3,opt,name=ContinueDays,proto3" json:"ContinueDays,omitempty"`                   // 连续登录天数
	ContinueLoginTime     int64           `protobuf:"varint,4,opt,name=ContinueLoginTime,proto3" json:"ContinueLoginTime,omitempty"`         // 记录上次活动登录时间（跨天直接设置）
	ContinuePay           uint32          `protobuf:"varint,5,opt,name=ContinuePay,proto3" json:"ContinuePay,omitempty"`                     // 连续充值
	ContinuePayTime       int64           `protobuf:"varint,6,opt,name=ContinuePayTime,proto3" json:"ContinuePayTime,omitempty"`             // 记录上次时间
	CumulativePayDaysTime int64           `protobuf:"varint,7,opt,name=CumulativePayDaysTime,proto3" json:"CumulativePayDaysTime,omitempty"` // 累积充值天数时间
	PeakContinueWin       uint32          `protobuf:"varint,8,opt,name=peakContinueWin,proto3" json:"peakContinueWin,omitempty"`             // 巅峰竞技场 连续胜利
	OpenId                int32           `protobuf:"varint,9,opt,name=openId,proto3" json:"openId,omitempty"`                               // 活动开启id
	Tasks                 []*ActivityTask `protobuf:"bytes,10,rep,name=tasks,proto3" json:"tasks,omitempty"`                                 // 任务
}

func (x *ActivityCommon) Reset() {
	*x = ActivityCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCommon) ProtoMessage() {}

func (x *ActivityCommon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCommon.ProtoReflect.Descriptor instead.
func (*ActivityCommon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{106}
}

func (x *ActivityCommon) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityCommon) GetCumulativeLoginTime() int64 {
	if x != nil {
		return x.CumulativeLoginTime
	}
	return 0
}

func (x *ActivityCommon) GetContinueDays() uint32 {
	if x != nil {
		return x.ContinueDays
	}
	return 0
}

func (x *ActivityCommon) GetContinueLoginTime() int64 {
	if x != nil {
		return x.ContinueLoginTime
	}
	return 0
}

func (x *ActivityCommon) GetContinuePay() uint32 {
	if x != nil {
		return x.ContinuePay
	}
	return 0
}

func (x *ActivityCommon) GetContinuePayTime() int64 {
	if x != nil {
		return x.ContinuePayTime
	}
	return 0
}

func (x *ActivityCommon) GetCumulativePayDaysTime() int64 {
	if x != nil {
		return x.CumulativePayDaysTime
	}
	return 0
}

func (x *ActivityCommon) GetPeakContinueWin() uint32 {
	if x != nil {
		return x.PeakContinueWin
	}
	return 0
}

func (x *ActivityCommon) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *ActivityCommon) GetTasks() []*ActivityTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 活动总数据
type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activities      []*ActivityCommon         `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`            // 通用活动
	Extra           *ActivityExtra            `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`                      // 加成活动
	DailyRecharge   *DailyRecharge            `protobuf:"bytes,3,opt,name=dailyRecharge,proto3" json:"dailyRecharge,omitempty"`      // 每日充值
	ActRechargeGift []*ActivityRechargeGift   `protobuf:"bytes,4,rep,name=actRechargeGift,proto3" json:"actRechargeGift,omitempty"`  // 直购礼包
	TotalCommander  []*ActivityTotalCommander `protobuf:"bytes,5,rep,name=totalCommander,proto3" json:"totalCommander,omitempty"`    // 累积主将
	Foundation      *Foundation               `protobuf:"bytes,6,opt,name=foundation,proto3" json:"foundation,omitempty"`            // 基金
	CashGift        []*CashGift               `protobuf:"bytes,7,rep,name=cashGift,proto3" json:"cashGift,omitempty"`                // 直购礼包
	VipCashGift     []*VipCashGift            `protobuf:"bytes,8,rep,name=vipCashGift,proto3" json:"vipCashGift,omitempty"`          // 贵族特惠礼包
	Star            []*StarActivity           `protobuf:"bytes,9,rep,name=star,proto3" json:"star,omitempty"`                        // 明星活动
	GoldenDragon    []*GoldenDragon           `protobuf:"bytes,19,rep,name=goldenDragon,proto3" json:"goldenDragon,omitempty"`       // 嘉年华
	TotalLogin      *TotalLogin               `protobuf:"bytes,20,opt,name=totalLogin,proto3" json:"totalLogin,omitempty"`           //累计登录
	LevelGift       *LevelGift                `protobuf:"bytes,21,opt,name=LevelGift,proto3" json:"LevelGift,omitempty"`             // 等级奖励
	DailyDiscount   *DailyDiscount            `protobuf:"bytes,22,opt,name=dailyDiscount,proto3" json:"dailyDiscount,omitempty"`     // 每日折扣
	SoulBox         []*SoulBox                `protobuf:"bytes,23,rep,name=soulBox,proto3" json:"soulBox,omitempty"`                 //限时神将（魂匣）
	TowerFund       *TowerFund                `protobuf:"bytes,24,opt,name=towerFund,proto3" json:"towerFund,omitempty"`             // 爬塔基金
	TianGongFund    *TianGongFund             `protobuf:"bytes,25,opt,name=tianGongFund,proto3" json:"tianGongFund,omitempty"`       // 天工基金
	AppComment      *AppComment               `protobuf:"bytes,26,opt,name=appComment,proto3" json:"appComment,omitempty"`           //app评价有礼
	SuperWelGift    *SuperWelGift             `protobuf:"bytes,27,opt,name=superWelGift,proto3" json:"superWelGift,omitempty"`       //阵容推荐活动
	ResourceRecover *ResourceRecover          `protobuf:"bytes,28,opt,name=resourceRecover,proto3" json:"resourceRecover,omitempty"` //资源找回
	RecruitCard     *RecruitCard              `protobuf:"bytes,29,opt,name=recruitCard,proto3" json:"recruitCard,omitempty"`         //终身招募卡
	SeasonFund      *SeasonFund               `protobuf:"bytes,30,opt,name=seasonFund,proto3" json:"seasonFund,omitempty"`           // 赛季基金
	CityItems       *CityGiftAct              `protobuf:"bytes,31,opt,name=cityItems,proto3" json:"cityItems,omitempty"`             //主城小物件
	VisitList       []*CommanderVisit         `protobuf:"bytes,32,rep,name=visitList,proto3" json:"visitList,omitempty"`             //主将寻访
	CommonTowerFund []*CommonTowerFundAct     `protobuf:"bytes,33,rep,name=commonTowerFund,proto3" json:"commonTowerFund,omitempty"` //通用爬塔基金
	LuckDraw        []*LuckDrawAct            `protobuf:"bytes,34,rep,name=luckDraw,proto3" json:"luckDraw,omitempty"`               //幸运转盘
	GiftRain        []*GiftRainAct            `protobuf:"bytes,35,rep,name=giftRain,proto3" json:"giftRain,omitempty"`               // 红包雨
	CollectWord     *CollectWord              `protobuf:"bytes,36,opt,name=collectWord,proto3" json:"collectWord,omitempty"`         // 集字
	ShiLengSignIn   *ShiLengSignIn            `protobuf:"bytes,37,opt,name=shiLengSignIn,proto3" json:"shiLengSignIn,omitempty"`     // 十冷
	ShiLengJigsaw   *ShiLengJigsaw            `protobuf:"bytes,38,opt,name=shiLengJigsaw,proto3" json:"shiLengJigsaw,omitempty"`     // 十冷集图
	WuHunAstrolabe  []*WuHunAstrolabe         `protobuf:"bytes,39,rep,name=wuHunAstrolabe,proto3" json:"wuHunAstrolabe,omitempty"`   // 武魂星盘
	Acts            []*ActWrapper             `protobuf:"bytes,42,rep,name=acts,proto3" json:"acts,omitempty"`                       // 活动
	SuperDraw       *SuperDraw                `protobuf:"bytes,43,opt,name=superDraw,proto3" json:"superDraw,omitempty"`             // 魂匣抽卡类活动
	PlayerCheat     []*PlayerCheatData        `protobuf:"bytes,44,rep,name=playerCheat,proto3" json:"playerCheat,omitempty"`         //玩家注水活动个人数据
	RechargeRank    *RechargeRank             `protobuf:"bytes,99,opt,name=rechargeRank,proto3" json:"rechargeRank,omitempty"`       // 充值排行
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{107}
}

func (x *Activity) GetActivities() []*ActivityCommon {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *Activity) GetExtra() *ActivityExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Activity) GetDailyRecharge() *DailyRecharge {
	if x != nil {
		return x.DailyRecharge
	}
	return nil
}

func (x *Activity) GetActRechargeGift() []*ActivityRechargeGift {
	if x != nil {
		return x.ActRechargeGift
	}
	return nil
}

func (x *Activity) GetTotalCommander() []*ActivityTotalCommander {
	if x != nil {
		return x.TotalCommander
	}
	return nil
}

func (x *Activity) GetFoundation() *Foundation {
	if x != nil {
		return x.Foundation
	}
	return nil
}

func (x *Activity) GetCashGift() []*CashGift {
	if x != nil {
		return x.CashGift
	}
	return nil
}

func (x *Activity) GetVipCashGift() []*VipCashGift {
	if x != nil {
		return x.VipCashGift
	}
	return nil
}

func (x *Activity) GetStar() []*StarActivity {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *Activity) GetGoldenDragon() []*GoldenDragon {
	if x != nil {
		return x.GoldenDragon
	}
	return nil
}

func (x *Activity) GetTotalLogin() *TotalLogin {
	if x != nil {
		return x.TotalLogin
	}
	return nil
}

func (x *Activity) GetLevelGift() *LevelGift {
	if x != nil {
		return x.LevelGift
	}
	return nil
}

func (x *Activity) GetDailyDiscount() *DailyDiscount {
	if x != nil {
		return x.DailyDiscount
	}
	return nil
}

func (x *Activity) GetSoulBox() []*SoulBox {
	if x != nil {
		return x.SoulBox
	}
	return nil
}

func (x *Activity) GetTowerFund() *TowerFund {
	if x != nil {
		return x.TowerFund
	}
	return nil
}

func (x *Activity) GetTianGongFund() *TianGongFund {
	if x != nil {
		return x.TianGongFund
	}
	return nil
}

func (x *Activity) GetAppComment() *AppComment {
	if x != nil {
		return x.AppComment
	}
	return nil
}

func (x *Activity) GetSuperWelGift() *SuperWelGift {
	if x != nil {
		return x.SuperWelGift
	}
	return nil
}

func (x *Activity) GetResourceRecover() *ResourceRecover {
	if x != nil {
		return x.ResourceRecover
	}
	return nil
}

func (x *Activity) GetRecruitCard() *RecruitCard {
	if x != nil {
		return x.RecruitCard
	}
	return nil
}

func (x *Activity) GetSeasonFund() *SeasonFund {
	if x != nil {
		return x.SeasonFund
	}
	return nil
}

func (x *Activity) GetCityItems() *CityGiftAct {
	if x != nil {
		return x.CityItems
	}
	return nil
}

func (x *Activity) GetVisitList() []*CommanderVisit {
	if x != nil {
		return x.VisitList
	}
	return nil
}

func (x *Activity) GetCommonTowerFund() []*CommonTowerFundAct {
	if x != nil {
		return x.CommonTowerFund
	}
	return nil
}

func (x *Activity) GetLuckDraw() []*LuckDrawAct {
	if x != nil {
		return x.LuckDraw
	}
	return nil
}

func (x *Activity) GetGiftRain() []*GiftRainAct {
	if x != nil {
		return x.GiftRain
	}
	return nil
}

func (x *Activity) GetCollectWord() *CollectWord {
	if x != nil {
		return x.CollectWord
	}
	return nil
}

func (x *Activity) GetShiLengSignIn() *ShiLengSignIn {
	if x != nil {
		return x.ShiLengSignIn
	}
	return nil
}

func (x *Activity) GetShiLengJigsaw() *ShiLengJigsaw {
	if x != nil {
		return x.ShiLengJigsaw
	}
	return nil
}

func (x *Activity) GetWuHunAstrolabe() []*WuHunAstrolabe {
	if x != nil {
		return x.WuHunAstrolabe
	}
	return nil
}

func (x *Activity) GetActs() []*ActWrapper {
	if x != nil {
		return x.Acts
	}
	return nil
}

func (x *Activity) GetSuperDraw() *SuperDraw {
	if x != nil {
		return x.SuperDraw
	}
	return nil
}

func (x *Activity) GetPlayerCheat() []*PlayerCheatData {
	if x != nil {
		return x.PlayerCheat
	}
	return nil
}

func (x *Activity) GetRechargeRank() *RechargeRank {
	if x != nil {
		return x.RechargeRank
	}
	return nil
}

// 加成类活动
type ActivityExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ActivityExtraItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // 加成活动
}

func (x *ActivityExtra) Reset() {
	*x = ActivityExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityExtra) ProtoMessage() {}

func (x *ActivityExtra) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityExtra.ProtoReflect.Descriptor instead.
func (*ActivityExtra) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{108}
}

func (x *ActivityExtra) GetItems() []*ActivityExtraItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ActivityExtraItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"` // 活动id
	OpenId     int32 `protobuf:"varint,2,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *ActivityExtraItem) Reset() {
	*x = ActivityExtraItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityExtraItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityExtraItem) ProtoMessage() {}

func (x *ActivityExtraItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityExtraItem.ProtoReflect.Descriptor instead.
func (*ActivityExtraItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{109}
}

func (x *ActivityExtraItem) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityExtraItem) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

// 直购礼包
type ActivityRechargeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID int32                       `protobuf:"varint,1,opt,name=activityID,proto3" json:"activityID,omitempty"` // 活动id
	Items      []*ActivityRechargeGiftItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	OpenId     int32                       `protobuf:"varint,3,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *ActivityRechargeGift) Reset() {
	*x = ActivityRechargeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRechargeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRechargeGift) ProtoMessage() {}

func (x *ActivityRechargeGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRechargeGift.ProtoReflect.Descriptor instead.
func (*ActivityRechargeGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{110}
}

func (x *ActivityRechargeGift) GetActivityID() int32 {
	if x != nil {
		return x.ActivityID
	}
	return 0
}

func (x *ActivityRechargeGift) GetItems() []*ActivityRechargeGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ActivityRechargeGift) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type ActivityRechargeGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyTimes int32 `protobuf:"varint,2,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"` // 已购买次数
}

func (x *ActivityRechargeGiftItem) Reset() {
	*x = ActivityRechargeGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRechargeGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRechargeGiftItem) ProtoMessage() {}

func (x *ActivityRechargeGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRechargeGiftItem.ProtoReflect.Descriptor instead.
func (*ActivityRechargeGiftItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{111}
}

func (x *ActivityRechargeGiftItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivityRechargeGiftItem) GetBuyTimes() int32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

type ActivityTotalCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *ActivityCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RewardIds []int32         `protobuf:"varint,2,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"` // 已领取奖励
}

func (x *ActivityTotalCommander) Reset() {
	*x = ActivityTotalCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTotalCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTotalCommander) ProtoMessage() {}

func (x *ActivityTotalCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTotalCommander.ProtoReflect.Descriptor instead.
func (*ActivityTotalCommander) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{112}
}

func (x *ActivityTotalCommander) GetCommon() *ActivityCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ActivityTotalCommander) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

//------------------------------------------------------------------------------------------------评价有礼
type AppComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID   int32           `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`    //活动ID
	ActTask []*ActivityTask `protobuf:"bytes,3,rep,name=actTask,proto3" json:"actTask,omitempty"` //活动任务
}

func (x *AppComment) Reset() {
	*x = AppComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppComment) ProtoMessage() {}

func (x *AppComment) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppComment.ProtoReflect.Descriptor instead.
func (*AppComment) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{113}
}

func (x *AppComment) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *AppComment) GetActTask() []*ActivityTask {
	if x != nil {
		return x.ActTask
	}
	return nil
}

//------------------------------------------------------------------------------------------------阵容推荐活动
type SuperWelGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID               int32    `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`                             //活动ID
	DrawTimes           int32    `protobuf:"varint,2,opt,name=drawTimes,proto3" json:"drawTimes,omitempty"`                     //已抽奖次数
	LastLoginOnlineTime int64    `protobuf:"varint,3,opt,name=lastLoginOnlineTime,proto3" json:"lastLoginOnlineTime,omitempty"` //活动开启后，从登陆到下线时长
	OpenId              int32    `protobuf:"varint,4,opt,name=openId,proto3" json:"openId,omitempty"`
	LastDrawTime        int64    `protobuf:"varint,5,opt,name=lastDrawTime,proto3" json:"lastDrawTime,omitempty"`                  //上次抽奖时间
	HaveGainCommander   []uint32 `protobuf:"varint,6,rep,packed,name=haveGainCommander,proto3" json:"haveGainCommander,omitempty"` //已经获得的武将id
}

func (x *SuperWelGift) Reset() {
	*x = SuperWelGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperWelGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperWelGift) ProtoMessage() {}

func (x *SuperWelGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperWelGift.ProtoReflect.Descriptor instead.
func (*SuperWelGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{114}
}

func (x *SuperWelGift) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *SuperWelGift) GetDrawTimes() int32 {
	if x != nil {
		return x.DrawTimes
	}
	return 0
}

func (x *SuperWelGift) GetLastLoginOnlineTime() int64 {
	if x != nil {
		return x.LastLoginOnlineTime
	}
	return 0
}

func (x *SuperWelGift) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *SuperWelGift) GetLastDrawTime() int64 {
	if x != nil {
		return x.LastDrawTime
	}
	return 0
}

func (x *SuperWelGift) GetHaveGainCommander() []uint32 {
	if x != nil {
		return x.HaveGainCommander
	}
	return nil
}

//-----------------------------------------------------------------------------------------------资源找回
type ResourceRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID           int32                     `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"` //活动id
	Resource        map[int32]*ResourceCommon `protobuf:"bytes,2,rep,name=resource,proto3" json:"resource,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastRecoverTime int64                     `protobuf:"varint,3,opt,name=lastRecoverTime,proto3" json:"lastRecoverTime,omitempty"` //上次资源恢复时间
}

func (x *ResourceRecover) Reset() {
	*x = ResourceRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecover) ProtoMessage() {}

func (x *ResourceRecover) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecover.ProtoReflect.Descriptor instead.
func (*ResourceRecover) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{115}
}

func (x *ResourceRecover) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *ResourceRecover) GetResource() map[int32]*ResourceCommon {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceRecover) GetLastRecoverTime() int64 {
	if x != nil {
		return x.LastRecoverTime
	}
	return 0
}

type ResourceCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`           //可找回的资源总数
	Spend      uint64 `protobuf:"varint,2,opt,name=spend,proto3" json:"spend,omitempty"`           //需要花费的元宝
	FreeFlag   bool   `protobuf:"varint,3,opt,name=freeFlag,proto3" json:"freeFlag,omitempty"`     //免费找回标志
	MoneyFlag  bool   `protobuf:"varint,4,opt,name=moneyFlag,proto3" json:"moneyFlag,omitempty"`   //花元宝找回标志
	FreeCount  uint64 `protobuf:"varint,5,opt,name=freeCount,proto3" json:"freeCount,omitempty"`   //可找回的免费资源
	MoneyCount uint64 `protobuf:"varint,6,opt,name=moneyCount,proto3" json:"moneyCount,omitempty"` //可找回的花元宝的资源
}

func (x *ResourceCommon) Reset() {
	*x = ResourceCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCommon) ProtoMessage() {}

func (x *ResourceCommon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCommon.ProtoReflect.Descriptor instead.
func (*ResourceCommon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{116}
}

func (x *ResourceCommon) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResourceCommon) GetSpend() uint64 {
	if x != nil {
		return x.Spend
	}
	return 0
}

func (x *ResourceCommon) GetFreeFlag() bool {
	if x != nil {
		return x.FreeFlag
	}
	return false
}

func (x *ResourceCommon) GetMoneyFlag() bool {
	if x != nil {
		return x.MoneyFlag
	}
	return false
}

func (x *ResourceCommon) GetFreeCount() uint64 {
	if x != nil {
		return x.FreeCount
	}
	return 0
}

func (x *ResourceCommon) GetMoneyCount() uint64 {
	if x != nil {
		return x.MoneyCount
	}
	return 0
}

type TianGongFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundCommon      *FundCommon `protobuf:"bytes,1,opt,name=fundCommon,proto3" json:"fundCommon,omitempty"`
	LastActiveScore uint32      `protobuf:"varint,2,opt,name=lastActiveScore,proto3" json:"lastActiveScore,omitempty"` // 上次开启时累计活跃度
	HasReset        bool        `protobuf:"varint,3,opt,name=hasReset,proto3" json:"hasReset,omitempty"`               // 是否重置过
}

func (x *TianGongFund) Reset() {
	*x = TianGongFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TianGongFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TianGongFund) ProtoMessage() {}

func (x *TianGongFund) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TianGongFund.ProtoReflect.Descriptor instead.
func (*TianGongFund) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{117}
}

func (x *TianGongFund) GetFundCommon() *FundCommon {
	if x != nil {
		return x.FundCommon
	}
	return nil
}

func (x *TianGongFund) GetLastActiveScore() uint32 {
	if x != nil {
		return x.LastActiveScore
	}
	return 0
}

func (x *TianGongFund) GetHasReset() bool {
	if x != nil {
		return x.HasReset
	}
	return false
}

type FundCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   int32   `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	IsRecharged  bool    `protobuf:"varint,2,opt,name=isRecharged,proto3" json:"isRecharged,omitempty"` // 是否付费
	GotFreeGifts []int32 `protobuf:"varint,3,rep,packed,name=gotFreeGifts,proto3" json:"gotFreeGifts,omitempty"`
	GotPayGifts  []int32 `protobuf:"varint,4,rep,packed,name=gotPayGifts,proto3" json:"gotPayGifts,omitempty"`
}

func (x *FundCommon) Reset() {
	*x = FundCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundCommon) ProtoMessage() {}

func (x *FundCommon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundCommon.ProtoReflect.Descriptor instead.
func (*FundCommon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{118}
}

func (x *FundCommon) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *FundCommon) GetIsRecharged() bool {
	if x != nil {
		return x.IsRecharged
	}
	return false
}

func (x *FundCommon) GetGotFreeGifts() []int32 {
	if x != nil {
		return x.GotFreeGifts
	}
	return nil
}

func (x *FundCommon) GetGotPayGifts() []int32 {
	if x != nil {
		return x.GotPayGifts
	}
	return nil
}

type TowerFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funds      []*TowerFundData `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds,omitempty"`
	ActivityId int32            `protobuf:"varint,2,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (x *TowerFund) Reset() {
	*x = TowerFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFund) ProtoMessage() {}

func (x *TowerFund) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFund.ProtoReflect.Descriptor instead.
func (*TowerFund) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{119}
}

func (x *TowerFund) GetFunds() []*TowerFundData {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *TowerFund) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type TowerFundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPaid       bool    `protobuf:"varint,2,opt,name=isPaid,proto3" json:"isPaid,omitempty"`
	GotFreeGifts []int32 `protobuf:"varint,3,rep,packed,name=gotFreeGifts,proto3" json:"gotFreeGifts,omitempty"`
	GotPayGifts  []int32 `protobuf:"varint,4,rep,packed,name=gotPayGifts,proto3" json:"gotPayGifts,omitempty"`
}

func (x *TowerFundData) Reset() {
	*x = TowerFundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFundData) ProtoMessage() {}

func (x *TowerFundData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFundData.ProtoReflect.Descriptor instead.
func (*TowerFundData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{120}
}

func (x *TowerFundData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TowerFundData) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *TowerFundData) GetGotFreeGifts() []int32 {
	if x != nil {
		return x.GotFreeGifts
	}
	return nil
}

func (x *TowerFundData) GetGotPayGifts() []int32 {
	if x != nil {
		return x.GotPayGifts
	}
	return nil
}

type CollectWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId        int32            `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`
	ActivityId    int32            `protobuf:"varint,2,opt,name=activityId,proto3" json:"activityId,omitempty"`
	UseGiftCount  uint32           `protobuf:"varint,3,opt,name=useGiftCount,proto3" json:"useGiftCount,omitempty"`                                                                                             // 使用礼包次数
	GotAwards     bool             `protobuf:"varint,4,opt,name=gotAwards,proto3" json:"gotAwards,omitempty"`                                                                                                   // 是否已领奖
	WordScore     uint32           `protobuf:"varint,5,opt,name=wordScore,proto3" json:"wordScore,omitempty"`                                                                                                   // 文字积分
	ExchangeTimes map[int32]uint32 `protobuf:"bytes,14,rep,name=exchangeTimes,proto3" json:"exchangeTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 兑换次数
}

func (x *CollectWord) Reset() {
	*x = CollectWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWord) ProtoMessage() {}

func (x *CollectWord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWord.ProtoReflect.Descriptor instead.
func (*CollectWord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{121}
}

func (x *CollectWord) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CollectWord) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *CollectWord) GetUseGiftCount() uint32 {
	if x != nil {
		return x.UseGiftCount
	}
	return 0
}

func (x *CollectWord) GetGotAwards() bool {
	if x != nil {
		return x.GotAwards
	}
	return false
}

func (x *CollectWord) GetWordScore() uint32 {
	if x != nil {
		return x.WordScore
	}
	return 0
}

func (x *CollectWord) GetExchangeTimes() map[int32]uint32 {
	if x != nil {
		return x.ExchangeTimes
	}
	return nil
}

type CollectWordPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GotWords  map[int32]uint32   `protobuf:"bytes,1,rep,name=gotWords,proto3" json:"gotWords,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GotAwards bool               `protobuf:"varint,2,opt,name=gotAwards,proto3" json:"gotAwards,omitempty"`
	GiftWords []*CollectWordGift `protobuf:"bytes,3,rep,name=giftWords,proto3" json:"giftWords,omitempty"`
}

func (x *CollectWordPlayer) Reset() {
	*x = CollectWordPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWordPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWordPlayer) ProtoMessage() {}

func (x *CollectWordPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWordPlayer.ProtoReflect.Descriptor instead.
func (*CollectWordPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{122}
}

func (x *CollectWordPlayer) GetGotWords() map[int32]uint32 {
	if x != nil {
		return x.GotWords
	}
	return nil
}

func (x *CollectWordPlayer) GetGotAwards() bool {
	if x != nil {
		return x.GotAwards
	}
	return false
}

func (x *CollectWordPlayer) GetGiftWords() []*CollectWordGift {
	if x != nil {
		return x.GiftWords
	}
	return nil
}

type CollectWordGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint64 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Word     int32  `protobuf:"varint,2,opt,name=word,proto3" json:"word,omitempty"`
	Count    uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CollectWordGift) Reset() {
	*x = CollectWordGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWordGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWordGift) ProtoMessage() {}

func (x *CollectWordGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWordGift.ProtoReflect.Descriptor instead.
func (*CollectWordGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{123}
}

func (x *CollectWordGift) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *CollectWordGift) GetWord() int32 {
	if x != nil {
		return x.Word
	}
	return 0
}

func (x *CollectWordGift) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SeasonFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSeason *SeasonFundData `protobuf:"bytes,1,opt,name=lastSeason,proto3" json:"lastSeason,omitempty"`  // 上个赛季
	CurSeason  *SeasonFundData `protobuf:"bytes,2,opt,name=curSeason,proto3" json:"curSeason,omitempty"`    // 当前赛季
	WaitOpenId int32           `protobuf:"varint,3,opt,name=waitOpenId,proto3" json:"waitOpenId,omitempty"` // 等待开启id
}

func (x *SeasonFund) Reset() {
	*x = SeasonFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonFund) ProtoMessage() {}

func (x *SeasonFund) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonFund.ProtoReflect.Descriptor instead.
func (*SeasonFund) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{124}
}

func (x *SeasonFund) GetLastSeason() *SeasonFundData {
	if x != nil {
		return x.LastSeason
	}
	return nil
}

func (x *SeasonFund) GetCurSeason() *SeasonFundData {
	if x != nil {
		return x.CurSeason
	}
	return nil
}

func (x *SeasonFund) GetWaitOpenId() int32 {
	if x != nil {
		return x.WaitOpenId
	}
	return 0
}

type SeasonFundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId         int32                    `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	Level              uint32                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                  // 赛季等级
	Score              uint32                   `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                                  // 赛季积分
	IsRecharged        bool                     `protobuf:"varint,4,opt,name=isRecharged,proto3" json:"isRecharged,omitempty"`                      // 是否充值
	GotFreeRewards     []int32                  `protobuf:"varint,5,rep,packed,name=gotFreeRewards,proto3" json:"gotFreeRewards,omitempty"`         // 免费奖励领取记录
	GotRechargeRewards []int32                  `protobuf:"varint,6,rep,packed,name=gotRechargeRewards,proto3" json:"gotRechargeRewards,omitempty"` // 付费奖励领取记录
	DailyTask          *common.SeasonFundTask   `protobuf:"bytes,8,opt,name=dailyTask,proto3" json:"dailyTask,omitempty"`                           // 每日任务
	SeasonTasks        []*common.SeasonFundTask `protobuf:"bytes,9,rep,name=seasonTasks,proto3" json:"seasonTasks,omitempty"`                       // 赛季任务
	ExclusiveTasks     []*common.SeasonFundTask `protobuf:"bytes,10,rep,name=exclusiveTasks,proto3" json:"exclusiveTasks,omitempty"`                // 专属任务
	SeasonId           int32                    `protobuf:"varint,11,opt,name=seasonId,proto3" json:"seasonId,omitempty"`                           // 赛季id
	IsClosed           bool                     `protobuf:"varint,12,opt,name=isClosed,proto3" json:"isClosed,omitempty"`                           // 是否已结算
	OpenId             int32                    `protobuf:"varint,13,opt,name=openId,proto3" json:"openId,omitempty"`                               // 活动开启id
	LastGenTaskTime    int64                    `protobuf:"varint,14,opt,name=lastGenTaskTime,proto3" json:"lastGenTaskTime,omitempty"`             // 上次生成任务时间
	UsedTaskIds        []int32                  `protobuf:"varint,15,rep,packed,name=usedTaskIds,proto3" json:"usedTaskIds,omitempty"`              // 已使用的任务id
}

func (x *SeasonFundData) Reset() {
	*x = SeasonFundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonFundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonFundData) ProtoMessage() {}

func (x *SeasonFundData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonFundData.ProtoReflect.Descriptor instead.
func (*SeasonFundData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{125}
}

func (x *SeasonFundData) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SeasonFundData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SeasonFundData) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SeasonFundData) GetIsRecharged() bool {
	if x != nil {
		return x.IsRecharged
	}
	return false
}

func (x *SeasonFundData) GetGotFreeRewards() []int32 {
	if x != nil {
		return x.GotFreeRewards
	}
	return nil
}

func (x *SeasonFundData) GetGotRechargeRewards() []int32 {
	if x != nil {
		return x.GotRechargeRewards
	}
	return nil
}

func (x *SeasonFundData) GetDailyTask() *common.SeasonFundTask {
	if x != nil {
		return x.DailyTask
	}
	return nil
}

func (x *SeasonFundData) GetSeasonTasks() []*common.SeasonFundTask {
	if x != nil {
		return x.SeasonTasks
	}
	return nil
}

func (x *SeasonFundData) GetExclusiveTasks() []*common.SeasonFundTask {
	if x != nil {
		return x.ExclusiveTasks
	}
	return nil
}

func (x *SeasonFundData) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonFundData) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *SeasonFundData) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *SeasonFundData) GetLastGenTaskTime() int64 {
	if x != nil {
		return x.LastGenTaskTime
	}
	return 0
}

func (x *SeasonFundData) GetUsedTaskIds() []int32 {
	if x != nil {
		return x.UsedTaskIds
	}
	return nil
}

type ActZmsn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActZmsn) Reset() {
	*x = ActZmsn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActZmsn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActZmsn) ProtoMessage() {}

func (x *ActZmsn) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActZmsn.ProtoReflect.Descriptor instead.
func (*ActZmsn) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{126}
}

type ActWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      int32             `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"` // 活动开启id
	Zmsn        *ActZmsn          `protobuf:"bytes,2,opt,name=zmsn,proto3" json:"zmsn,omitempty"`
	Explorer    *ZmSnExplore      `protobuf:"bytes,3,opt,name=explorer,proto3" json:"explorer,omitempty"`
	SignIn      *ActCommonSignIn  `protobuf:"bytes,4,opt,name=signIn,proto3" json:"signIn,omitempty"`
	Task        *ActivityCommon   `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`               // 任务
	Anniversary *ActAnniversary   `protobuf:"bytes,6,opt,name=anniversary,proto3" json:"anniversary,omitempty"` // 周年庆
	MainSsr     *ActMainSsr       `protobuf:"bytes,7,opt,name=mainSsr,proto3" json:"mainSsr,omitempty"`         // 神将集结
	CakeFeast   *common.CakeFeast `protobuf:"bytes,8,opt,name=cakeFeast,proto3" json:"cakeFeast,omitempty"`     // 蛋糕盛宴
	HappyFlop   *common.HappyFlop `protobuf:"bytes,9,opt,name=happyFlop,proto3" json:"happyFlop,omitempty"`     // 欢乐翻牌
}

func (x *ActWrapper) Reset() {
	*x = ActWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActWrapper) ProtoMessage() {}

func (x *ActWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActWrapper.ProtoReflect.Descriptor instead.
func (*ActWrapper) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{127}
}

func (x *ActWrapper) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *ActWrapper) GetZmsn() *ActZmsn {
	if x != nil {
		return x.Zmsn
	}
	return nil
}

func (x *ActWrapper) GetExplorer() *ZmSnExplore {
	if x != nil {
		return x.Explorer
	}
	return nil
}

func (x *ActWrapper) GetSignIn() *ActCommonSignIn {
	if x != nil {
		return x.SignIn
	}
	return nil
}

func (x *ActWrapper) GetTask() *ActivityCommon {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ActWrapper) GetAnniversary() *ActAnniversary {
	if x != nil {
		return x.Anniversary
	}
	return nil
}

func (x *ActWrapper) GetMainSsr() *ActMainSsr {
	if x != nil {
		return x.MainSsr
	}
	return nil
}

func (x *ActWrapper) GetCakeFeast() *common.CakeFeast {
	if x != nil {
		return x.CakeFeast
	}
	return nil
}

func (x *ActWrapper) GetHappyFlop() *common.HappyFlop {
	if x != nil {
		return x.HappyFlop
	}
	return nil
}

type TotalLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakeRewards []int32 `protobuf:"varint,1,rep,packed,name=takeRewards,proto3" json:"takeRewards,omitempty"` //领奖记录（领取了哪天的奖励）
}

func (x *TotalLogin) Reset() {
	*x = TotalLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalLogin) ProtoMessage() {}

func (x *TotalLogin) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalLogin.ProtoReflect.Descriptor instead.
func (*TotalLogin) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{128}
}

func (x *TotalLogin) GetTakeRewards() []int32 {
	if x != nil {
		return x.TakeRewards
	}
	return nil
}

type DailyPhysical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakeRecords            []int32                            `protobuf:"varint,1,rep,packed,name=takeRecords,proto3" json:"takeRecords,omitempty"`                                                                                            // 领取记录
	OverdueTakeRecords     []int32                            `protobuf:"varint,2,rep,packed,name=overdueTakeRecords,proto3" json:"overdueTakeRecords,omitempty"`                                                                              // 补领记录
	FullAttendTimes        uint32                             `protobuf:"varint,3,opt,name=fullAttendTimes,proto3" json:"fullAttendTimes,omitempty"`                                                                                           // 全勤次数
	LuckyTimes             map[int32]uint32                   `protobuf:"bytes,4,rep,name=luckyTimes,proto3" json:"luckyTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`            // 成功触发幸运奖励次数
	LuckyGiftRecords       map[int32]*PhysicalLuckyGiftRecord `protobuf:"bytes,5,rep,name=luckyGiftRecords,proto3" json:"luckyGiftRecords,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 已领取的幸运奖励记录
	FullAttendGifts        []*common.Item                     `protobuf:"bytes,6,rep,name=fullAttendGifts,proto3" json:"fullAttendGifts,omitempty"`                                                                                            // 全勤奖励
	FullAttendGiftId       int32                              `protobuf:"varint,7,opt,name=fullAttendGiftId,proto3" json:"fullAttendGiftId,omitempty"`                                                                                         // 全勤奖励的配置id
	IsFullAttendGiftsTaken bool                               `protobuf:"varint,8,opt,name=isFullAttendGiftsTaken,proto3" json:"isFullAttendGiftsTaken,omitempty"`                                                                             // 全勤奖是否已领取
}

func (x *DailyPhysical) Reset() {
	*x = DailyPhysical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyPhysical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyPhysical) ProtoMessage() {}

func (x *DailyPhysical) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyPhysical.ProtoReflect.Descriptor instead.
func (*DailyPhysical) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{129}
}

func (x *DailyPhysical) GetTakeRecords() []int32 {
	if x != nil {
		return x.TakeRecords
	}
	return nil
}

func (x *DailyPhysical) GetOverdueTakeRecords() []int32 {
	if x != nil {
		return x.OverdueTakeRecords
	}
	return nil
}

func (x *DailyPhysical) GetFullAttendTimes() uint32 {
	if x != nil {
		return x.FullAttendTimes
	}
	return 0
}

func (x *DailyPhysical) GetLuckyTimes() map[int32]uint32 {
	if x != nil {
		return x.LuckyTimes
	}
	return nil
}

func (x *DailyPhysical) GetLuckyGiftRecords() map[int32]*PhysicalLuckyGiftRecord {
	if x != nil {
		return x.LuckyGiftRecords
	}
	return nil
}

func (x *DailyPhysical) GetFullAttendGifts() []*common.Item {
	if x != nil {
		return x.FullAttendGifts
	}
	return nil
}

func (x *DailyPhysical) GetFullAttendGiftId() int32 {
	if x != nil {
		return x.FullAttendGiftId
	}
	return 0
}

func (x *DailyPhysical) GetIsFullAttendGiftsTaken() bool {
	if x != nil {
		return x.IsFullAttendGiftsTaken
	}
	return false
}

type PhysicalLuckyGiftRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIds []int32 `protobuf:"varint,1,rep,packed,name=itemIds,proto3" json:"itemIds,omitempty"`
}

func (x *PhysicalLuckyGiftRecord) Reset() {
	*x = PhysicalLuckyGiftRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalLuckyGiftRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalLuckyGiftRecord) ProtoMessage() {}

func (x *PhysicalLuckyGiftRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalLuckyGiftRecord.ProtoReflect.Descriptor instead.
func (*PhysicalLuckyGiftRecord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{130}
}

func (x *PhysicalLuckyGiftRecord) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

// 等级奖励
type LevelGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakeRewards []uint32 `protobuf:"varint,1,rep,packed,name=takeRewards,proto3" json:"takeRewards,omitempty"` // 领取了哪天的奖励
}

func (x *LevelGift) Reset() {
	*x = LevelGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelGift) ProtoMessage() {}

func (x *LevelGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelGift.ProtoReflect.Descriptor instead.
func (*LevelGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{131}
}

func (x *LevelGift) GetTakeRewards() []uint32 {
	if x != nil {
		return x.TakeRewards
	}
	return nil
}

// 基金
type Foundation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*FoundationItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Recharged     bool              `protobuf:"varint,2,opt,name=recharged,proto3" json:"recharged,omitempty"`                // 是否充过值
	RechargeID    int32             `protobuf:"varint,3,opt,name=rechargeID,proto3" json:"rechargeID,omitempty"`              // 充值id
	TotalRewardID []int32           `protobuf:"varint,4,rep,packed,name=totalRewardID,proto3" json:"totalRewardID,omitempty"` // 全服领奖id
	ActivityID    int32             `protobuf:"varint,5,opt,name=activityID,proto3" json:"activityID,omitempty"`
	OpenId        int32             `protobuf:"varint,6,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *Foundation) Reset() {
	*x = Foundation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Foundation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foundation) ProtoMessage() {}

func (x *Foundation) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foundation.ProtoReflect.Descriptor instead.
func (*Foundation) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{132}
}

func (x *Foundation) GetItems() []*FoundationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Foundation) GetRecharged() bool {
	if x != nil {
		return x.Recharged
	}
	return false
}

func (x *Foundation) GetRechargeID() int32 {
	if x != nil {
		return x.RechargeID
	}
	return 0
}

func (x *Foundation) GetTotalRewardID() []int32 {
	if x != nil {
		return x.TotalRewardID
	}
	return nil
}

func (x *Foundation) GetActivityID() int32 {
	if x != nil {
		return x.ActivityID
	}
	return 0
}

func (x *Foundation) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type FoundationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FreeReward bool  `protobuf:"varint,2,opt,name=freeReward,proto3" json:"freeReward,omitempty"`
	PayReward  bool  `protobuf:"varint,3,opt,name=payReward,proto3" json:"payReward,omitempty"`
}

func (x *FoundationItem) Reset() {
	*x = FoundationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoundationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundationItem) ProtoMessage() {}

func (x *FoundationItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundationItem.ProtoReflect.Descriptor instead.
func (*FoundationItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{133}
}

func (x *FoundationItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FoundationItem) GetFreeReward() bool {
	if x != nil {
		return x.FreeReward
	}
	return false
}

func (x *FoundationItem) GetPayReward() bool {
	if x != nil {
		return x.PayReward
	}
	return false
}

// 直购礼包
type CashGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID  int32           `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`
	Items  []*CashGiftItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	OpenId int32           `protobuf:"varint,3,opt,name=openId,proto3" json:"openId,omitempty"`
	Rebate map[int32]int32 `protobuf:"bytes,4,rep,name=rebate,proto3" json:"rebate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 返利
}

func (x *CashGift) Reset() {
	*x = CashGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashGift) ProtoMessage() {}

func (x *CashGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashGift.ProtoReflect.Descriptor instead.
func (*CashGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{134}
}

func (x *CashGift) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *CashGift) GetItems() []*CashGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CashGift) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CashGift) GetRebate() map[int32]int32 {
	if x != nil {
		return x.Rebate
	}
	return nil
}

type CashGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RechargeTimes int32 `protobuf:"varint,2,opt,name=rechargeTimes,proto3" json:"rechargeTimes,omitempty"`
	RewardTimes   int32 `protobuf:"varint,3,opt,name=rewardTimes,proto3" json:"rewardTimes,omitempty"`
}

func (x *CashGiftItem) Reset() {
	*x = CashGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashGiftItem) ProtoMessage() {}

func (x *CashGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashGiftItem.ProtoReflect.Descriptor instead.
func (*CashGiftItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{135}
}

func (x *CashGiftItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CashGiftItem) GetRechargeTimes() int32 {
	if x != nil {
		return x.RechargeTimes
	}
	return 0
}

func (x *CashGiftItem) GetRewardTimes() int32 {
	if x != nil {
		return x.RewardTimes
	}
	return 0
}

// 贵族特惠礼包
type VipCashGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID       int32           `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`
	Items       []*CashGiftItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	GenVipLevel uint32          `protobuf:"varint,3,opt,name=genVipLevel,proto3" json:"genVipLevel,omitempty"` // 生成礼包时的vip
	OpenId      int32           `protobuf:"varint,4,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *VipCashGift) Reset() {
	*x = VipCashGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipCashGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipCashGift) ProtoMessage() {}

func (x *VipCashGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipCashGift.ProtoReflect.Descriptor instead.
func (*VipCashGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{136}
}

func (x *VipCashGift) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *VipCashGift) GetItems() []*CashGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *VipCashGift) GetGenVipLevel() uint32 {
	if x != nil {
		return x.GenVipLevel
	}
	return 0
}

func (x *VipCashGift) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

// 嘉年华
type GoldenDragon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *ActivityCommon `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"`
	RewardIds  []int32         `protobuf:"varint,3,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"` // 已领取奖励
	DailyScore uint32          `protobuf:"varint,4,opt,name=dailyScore,proto3" json:"dailyScore,omitempty"`      // 每日龙气
	GoldCloud  []int32         `protobuf:"varint,5,rep,packed,name=goldCloud,proto3" json:"goldCloud,omitempty"` // 龙气
	OldScore   uint32          `protobuf:"varint,6,opt,name=oldScore,proto3" json:"oldScore,omitempty"`          // 昨日龙气
}

func (x *GoldenDragon) Reset() {
	*x = GoldenDragon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldenDragon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenDragon) ProtoMessage() {}

func (x *GoldenDragon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenDragon.ProtoReflect.Descriptor instead.
func (*GoldenDragon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{137}
}

func (x *GoldenDragon) GetCommon() *ActivityCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GoldenDragon) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *GoldenDragon) GetDailyScore() uint32 {
	if x != nil {
		return x.DailyScore
	}
	return 0
}

func (x *GoldenDragon) GetGoldCloud() []int32 {
	if x != nil {
		return x.GoldCloud
	}
	return nil
}

func (x *GoldenDragon) GetOldScore() uint32 {
	if x != nil {
		return x.OldScore
	}
	return 0
}

//限时神将（魂匣）
type SoulBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID          int32    `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`
	KillTotalCount uint32   `protobuf:"varint,2,opt,name=killTotalCount,proto3" json:"killTotalCount,omitempty"`        //当前活动击杀敌人总数
	GiftTotalArray []uint32 `protobuf:"varint,3,rep,packed,name=giftTotalArray,proto3" json:"giftTotalArray,omitempty"` //当前获得的宝箱总数
	RewardIds      []int32  `protobuf:"varint,4,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"`           //已领取奖励
	// repeated int32 talentSkill = 5;//天赋技能是否触发
	Count int32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"` // 征战次数（1或10）
	//  ActivityCommon common = 7;//任务
	Gift4Remainder uint32 `protobuf:"varint,8,opt,name=gift4Remainder,proto3" json:"gift4Remainder,omitempty"` //计算gift4宝箱数量的余数
	CritNum        uint32 `protobuf:"varint,9,opt,name=critNum,proto3" json:"critNum,omitempty"`               //暴击倍数
	Stage16Flag    bool   `protobuf:"varint,10,opt,name=stage16Flag,proto3" json:"stage16Flag,omitempty"`      //16阶段标志位：每3次十连后，第4次十连触发一次3倍收益
	Times          uint32 `protobuf:"varint,11,opt,name=times,proto3" json:"times,omitempty"`                  //16阶段之后十连的次数
	//  uint32 buyTimes = 12; // 购买令牌次数
	// bool curTalSkill = 13; // 是否3倍buff
	IsHitServerSoul bool `protobuf:"varint,14,opt,name=isHitServerSoul,proto3" json:"isHitServerSoul,omitempty"` // 是否中了服务器积分大奖
	// uint64 gift4CritHitCount = 15; // 暴击中神将碎片次数
	// uint64 gift4CritTotalCount = 16; // 总的抽暴击神将碎片次数
	CritLimitId   uint32                      `protobuf:"varint,17,opt,name=critLimitId,proto3" json:"critLimitId,omitempty"`                                                                                             //暴击限制
	Gift4CritData map[int32]*SoulBoxGift4Crit `protobuf:"bytes,18,rep,name=gift4CritData,proto3" json:"gift4CritData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 神将暴击相关数据记录
	OpenId        int32                       `protobuf:"varint,19,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *SoulBox) Reset() {
	*x = SoulBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulBox) ProtoMessage() {}

func (x *SoulBox) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulBox.ProtoReflect.Descriptor instead.
func (*SoulBox) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{138}
}

func (x *SoulBox) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *SoulBox) GetKillTotalCount() uint32 {
	if x != nil {
		return x.KillTotalCount
	}
	return 0
}

func (x *SoulBox) GetGiftTotalArray() []uint32 {
	if x != nil {
		return x.GiftTotalArray
	}
	return nil
}

func (x *SoulBox) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *SoulBox) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SoulBox) GetGift4Remainder() uint32 {
	if x != nil {
		return x.Gift4Remainder
	}
	return 0
}

func (x *SoulBox) GetCritNum() uint32 {
	if x != nil {
		return x.CritNum
	}
	return 0
}

func (x *SoulBox) GetStage16Flag() bool {
	if x != nil {
		return x.Stage16Flag
	}
	return false
}

func (x *SoulBox) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *SoulBox) GetIsHitServerSoul() bool {
	if x != nil {
		return x.IsHitServerSoul
	}
	return false
}

func (x *SoulBox) GetCritLimitId() uint32 {
	if x != nil {
		return x.CritLimitId
	}
	return 0
}

func (x *SoulBox) GetGift4CritData() map[int32]*SoulBoxGift4Crit {
	if x != nil {
		return x.Gift4CritData
	}
	return nil
}

func (x *SoulBox) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

// 神将暴击相关数据记录
type SoulBoxGift4Crit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gift4CritHitCount   uint64 `protobuf:"varint,1,opt,name=gift4CritHitCount,proto3" json:"gift4CritHitCount,omitempty"`     // 暴击中神将碎片次数
	Gift4CritTotalCount uint64 `protobuf:"varint,2,opt,name=gift4CritTotalCount,proto3" json:"gift4CritTotalCount,omitempty"` // 总的抽暴击神将碎片次数
	UseFreeCf           bool   `protobuf:"varint,3,opt,name=useFreeCf,proto3" json:"useFreeCf,omitempty"`                     // 是否使用下限
}

func (x *SoulBoxGift4Crit) Reset() {
	*x = SoulBoxGift4Crit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulBoxGift4Crit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulBoxGift4Crit) ProtoMessage() {}

func (x *SoulBoxGift4Crit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulBoxGift4Crit.ProtoReflect.Descriptor instead.
func (*SoulBoxGift4Crit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{139}
}

func (x *SoulBoxGift4Crit) GetGift4CritHitCount() uint64 {
	if x != nil {
		return x.Gift4CritHitCount
	}
	return 0
}

func (x *SoulBoxGift4Crit) GetGift4CritTotalCount() uint64 {
	if x != nil {
		return x.Gift4CritTotalCount
	}
	return 0
}

func (x *SoulBoxGift4Crit) GetUseFreeCf() bool {
	if x != nil {
		return x.UseFreeCf
	}
	return false
}

type SoulBoxLogMgr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 openID = 1; //openid
	OpenIdMapLogs map[int32]*SoulLogsBoth `protobuf:"bytes,2,rep,name=openIdMapLogs,proto3" json:"openIdMapLogs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //openId到魂匣日志的映射
	// uint64 serverScore = 3; // 服务器积分，每玩家征战一次积分
	// uint32 serverScorePlace = 4; // 服务器积分逻辑抽整卡名额数量
	// uint32 serverScoreIndex = 5; // 服务器积分当前档位
	OpenIdMapServerScore map[int32]*SoulServerScore `protobuf:"bytes,6,rep,name=openIdMapServerScore,proto3" json:"openIdMapServerScore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //openId到服务器积分逻辑映射
}

func (x *SoulBoxLogMgr) Reset() {
	*x = SoulBoxLogMgr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulBoxLogMgr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulBoxLogMgr) ProtoMessage() {}

func (x *SoulBoxLogMgr) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulBoxLogMgr.ProtoReflect.Descriptor instead.
func (*SoulBoxLogMgr) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{140}
}

func (x *SoulBoxLogMgr) GetOpenIdMapLogs() map[int32]*SoulLogsBoth {
	if x != nil {
		return x.OpenIdMapLogs
	}
	return nil
}

func (x *SoulBoxLogMgr) GetOpenIdMapServerScore() map[int32]*SoulServerScore {
	if x != nil {
		return x.OpenIdMapServerScore
	}
	return nil
}

type SoulLogsBoth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderLogs []*common.SoulBoxLog `protobuf:"bytes,2,rep,name=commanderLogs,proto3" json:"commanderLogs,omitempty"` //魂匣日志1
	BoxLogs       []*common.SoulBoxLog `protobuf:"bytes,3,rep,name=BoxLogs,proto3" json:"BoxLogs,omitempty"`             //魂匣日志2
}

func (x *SoulLogsBoth) Reset() {
	*x = SoulLogsBoth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulLogsBoth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulLogsBoth) ProtoMessage() {}

func (x *SoulLogsBoth) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulLogsBoth.ProtoReflect.Descriptor instead.
func (*SoulLogsBoth) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{141}
}

func (x *SoulLogsBoth) GetCommanderLogs() []*common.SoulBoxLog {
	if x != nil {
		return x.CommanderLogs
	}
	return nil
}

func (x *SoulLogsBoth) GetBoxLogs() []*common.SoulBoxLog {
	if x != nil {
		return x.BoxLogs
	}
	return nil
}

type SoulServerScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerScore      uint64 `protobuf:"varint,3,opt,name=serverScore,proto3" json:"serverScore,omitempty"`           // 服务器积分，每玩家征战一次积分
	ServerScorePlace uint32 `protobuf:"varint,4,opt,name=serverScorePlace,proto3" json:"serverScorePlace,omitempty"` // 服务器积分逻辑抽整卡名额数量
	ServerScoreIndex uint32 `protobuf:"varint,5,opt,name=serverScoreIndex,proto3" json:"serverScoreIndex,omitempty"` // 服务器积分当前档位
}

func (x *SoulServerScore) Reset() {
	*x = SoulServerScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulServerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulServerScore) ProtoMessage() {}

func (x *SoulServerScore) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulServerScore.ProtoReflect.Descriptor instead.
func (*SoulServerScore) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{142}
}

func (x *SoulServerScore) GetServerScore() uint64 {
	if x != nil {
		return x.ServerScore
	}
	return 0
}

func (x *SoulServerScore) GetServerScorePlace() uint32 {
	if x != nil {
		return x.ServerScorePlace
	}
	return 0
}

func (x *SoulServerScore) GetServerScoreIndex() uint32 {
	if x != nil {
		return x.ServerScoreIndex
	}
	return 0
}

// 每日折扣
type DailyDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acts []*DailyDiscountAct `protobuf:"bytes,3,rep,name=acts,proto3" json:"acts,omitempty"`
}

func (x *DailyDiscount) Reset() {
	*x = DailyDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDiscount) ProtoMessage() {}

func (x *DailyDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDiscount.ProtoReflect.Descriptor instead.
func (*DailyDiscount) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{143}
}

func (x *DailyDiscount) GetActs() []*DailyDiscountAct {
	if x != nil {
		return x.Acts
	}
	return nil
}

type DailyDiscountAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*DailyDiscountItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	ActID  int32                `protobuf:"varint,2,opt,name=actID,proto3" json:"actID,omitempty"`
	OpenId int32                `protobuf:"varint,3,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *DailyDiscountAct) Reset() {
	*x = DailyDiscountAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDiscountAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDiscountAct) ProtoMessage() {}

func (x *DailyDiscountAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDiscountAct.ProtoReflect.Descriptor instead.
func (*DailyDiscountAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{144}
}

func (x *DailyDiscountAct) GetItems() []*DailyDiscountItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DailyDiscountAct) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *DailyDiscountAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type DailyDiscountItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Bought bool  `protobuf:"varint,2,opt,name=bought,proto3" json:"bought,omitempty"` // 购买
}

func (x *DailyDiscountItem) Reset() {
	*x = DailyDiscountItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDiscountItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDiscountItem) ProtoMessage() {}

func (x *DailyDiscountItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDiscountItem.ProtoReflect.Descriptor instead.
func (*DailyDiscountItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{145}
}

func (x *DailyDiscountItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DailyDiscountItem) GetBought() bool {
	if x != nil {
		return x.Bought
	}
	return false
}

// 明星活动
type StarActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID     int32  `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`
	OpenTime  int64  `protobuf:"varint,2,opt,name=openTime,proto3" json:"openTime,omitempty"`   // 开启时间
	LuckyCode int32  `protobuf:"varint,3,opt,name=luckyCode,proto3" json:"luckyCode,omitempty"` // 幸运码
	Diamond   uint32 `protobuf:"varint,4,opt,name=diamond,proto3" json:"diamond,omitempty"`     // 元宝数
	OpenID    int32  `protobuf:"varint,5,opt,name=openID,proto3" json:"openID,omitempty"`
}

func (x *StarActivity) Reset() {
	*x = StarActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarActivity) ProtoMessage() {}

func (x *StarActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarActivity.ProtoReflect.Descriptor instead.
func (*StarActivity) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{146}
}

func (x *StarActivity) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *StarActivity) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *StarActivity) GetLuckyCode() int32 {
	if x != nil {
		return x.LuckyCode
	}
	return 0
}

func (x *StarActivity) GetDiamond() uint32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *StarActivity) GetOpenID() int32 {
	if x != nil {
		return x.OpenID
	}
	return 0
}

// 每日充值
type DailyRecharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Act []*DailyRechargeAct `protobuf:"bytes,1,rep,name=act,proto3" json:"act,omitempty"`
}

func (x *DailyRecharge) Reset() {
	*x = DailyRecharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyRecharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyRecharge) ProtoMessage() {}

func (x *DailyRecharge) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyRecharge.ProtoReflect.Descriptor instead.
func (*DailyRecharge) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{147}
}

func (x *DailyRecharge) GetAct() []*DailyRechargeAct {
	if x != nil {
		return x.Act
	}
	return nil
}

type DailyRechargeAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID        int32                `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`
	Items        []*DailyRechargeItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	RechargeTime int64                `protobuf:"varint,3,opt,name=rechargeTime,proto3" json:"rechargeTime,omitempty"` // 充值第几天时间戳
	RechargeDay  int32                `protobuf:"varint,4,opt,name=rechargeDay,proto3" json:"rechargeDay,omitempty"`   // 第几天
	SurpriseTime int64                `protobuf:"varint,5,opt,name=surpriseTime,proto3" json:"surpriseTime,omitempty"` // 惊喜奖励领取时间
	OpenId       int32                `protobuf:"varint,6,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *DailyRechargeAct) Reset() {
	*x = DailyRechargeAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyRechargeAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyRechargeAct) ProtoMessage() {}

func (x *DailyRechargeAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyRechargeAct.ProtoReflect.Descriptor instead.
func (*DailyRechargeAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{148}
}

func (x *DailyRechargeAct) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *DailyRechargeAct) GetItems() []*DailyRechargeItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DailyRechargeAct) GetRechargeTime() int64 {
	if x != nil {
		return x.RechargeTime
	}
	return 0
}

func (x *DailyRechargeAct) GetRechargeDay() int32 {
	if x != nil {
		return x.RechargeDay
	}
	return 0
}

func (x *DailyRechargeAct) GetSurpriseTime() int64 {
	if x != nil {
		return x.SurpriseTime
	}
	return 0
}

func (x *DailyRechargeAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type DailyRechargeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reward      bool   `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`
	RechargeNum uint32 `protobuf:"varint,3,opt,name=rechargeNum,proto3" json:"rechargeNum,omitempty"`
}

func (x *DailyRechargeItem) Reset() {
	*x = DailyRechargeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyRechargeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyRechargeItem) ProtoMessage() {}

func (x *DailyRechargeItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyRechargeItem.ProtoReflect.Descriptor instead.
func (*DailyRechargeItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{149}
}

func (x *DailyRechargeItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DailyRechargeItem) GetReward() bool {
	if x != nil {
		return x.Reward
	}
	return false
}

func (x *DailyRechargeItem) GetRechargeNum() uint32 {
	if x != nil {
		return x.RechargeNum
	}
	return 0
}

type SlayCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommanderId int32 `protobuf:"varint,1,opt,name=commanderId,proto3" json:"commanderId,omitempty"` // 主将
	Level       int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`             // 削弱等级
	Hp          int32 `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`                   // hp百分比（0-100）
	TplIndex    int32 `protobuf:"varint,4,opt,name=tplIndex,proto3" json:"tplIndex,omitempty"`       // Slay中对应模板索引
}

func (x *SlayCommander) Reset() {
	*x = SlayCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayCommander) ProtoMessage() {}

func (x *SlayCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayCommander.ProtoReflect.Descriptor instead.
func (*SlayCommander) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{150}
}

func (x *SlayCommander) GetCommanderId() int32 {
	if x != nil {
		return x.CommanderId
	}
	return 0
}

func (x *SlayCommander) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SlayCommander) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *SlayCommander) GetTplIndex() int32 {
	if x != nil {
		return x.TplIndex
	}
	return 0
}

type SlayCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PowerId        int32             `protobuf:"varint,2,opt,name=powerId,proto3" json:"powerId,omitempty"` // 所属势力
	Formation      *common.Formation `protobuf:"bytes,3,opt,name=formation,proto3" json:"formation,omitempty"`
	SlayCommanders []*SlayCommander  `protobuf:"bytes,4,rep,name=slayCommanders,proto3" json:"slayCommanders,omitempty"`
	TaxPer         int32             `protobuf:"varint,5,opt,name=taxPer,proto3" json:"taxPer,omitempty"`            // 税收加成百分比(默认100)
	FightPower     uint32            `protobuf:"varint,6,opt,name=fightPower,proto3" json:"fightPower,omitempty"`    // 战斗力
	NotUsedGrid    []*common.Grid    `protobuf:"bytes,8,rep,name=notUsedGrid,proto3" json:"notUsedGrid,omitempty"`   // 备用布阵格子
	BanCallArmy    bool              `protobuf:"varint,10,opt,name=banCallArmy,proto3" json:"banCallArmy,omitempty"` // 是否禁止征兵
}

func (x *SlayCity) Reset() {
	*x = SlayCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayCity) ProtoMessage() {}

func (x *SlayCity) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayCity.ProtoReflect.Descriptor instead.
func (*SlayCity) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{151}
}

func (x *SlayCity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SlayCity) GetPowerId() int32 {
	if x != nil {
		return x.PowerId
	}
	return 0
}

func (x *SlayCity) GetFormation() *common.Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *SlayCity) GetSlayCommanders() []*SlayCommander {
	if x != nil {
		return x.SlayCommanders
	}
	return nil
}

func (x *SlayCity) GetTaxPer() int32 {
	if x != nil {
		return x.TaxPer
	}
	return 0
}

func (x *SlayCity) GetFightPower() uint32 {
	if x != nil {
		return x.FightPower
	}
	return 0
}

func (x *SlayCity) GetNotUsedGrid() []*common.Grid {
	if x != nil {
		return x.NotUsedGrid
	}
	return nil
}

func (x *SlayCity) GetBanCallArmy() bool {
	if x != nil {
		return x.BanCallArmy
	}
	return false
}

type SlayAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType int32              `protobuf:"varint,1,opt,name=actionType,proto3" json:"actionType,omitempty"` // 1,攻击 2，征兵
	Attack     *common.SlayAttack `protobuf:"bytes,2,opt,name=attack,proto3" json:"attack,omitempty"`
	PowerId    int32              `protobuf:"varint,3,opt,name=powerId,proto3" json:"powerId,omitempty"` // 所属势力
}

func (x *SlayAction) Reset() {
	*x = SlayAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlayAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlayAction) ProtoMessage() {}

func (x *SlayAction) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlayAction.ProtoReflect.Descriptor instead.
func (*SlayAction) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{152}
}

func (x *SlayAction) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *SlayAction) GetAttack() *common.SlayAttack {
	if x != nil {
		return x.Attack
	}
	return nil
}

func (x *SlayAction) GetPowerId() int32 {
	if x != nil {
		return x.PowerId
	}
	return 0
}

type Slay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        int64                         `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"` // 开始时间
	Level            int32                         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`         // 难度等级
	Credit           int32                         `protobuf:"varint,3,opt,name=credit,proto3" json:"credit,omitempty"`       // 声望
	Round            int32                         `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`         // 回合
	Cities           []*SlayCity                   `protobuf:"bytes,5,rep,name=cities,proto3" json:"cities,omitempty"`
	Forces           []*common.SlayPower           `protobuf:"bytes,6,rep,name=forces,proto3" json:"forces,omitempty"`
	PlayerBeAttacked int32                         `protobuf:"varint,7,opt,name=playerBeAttacked,proto3" json:"playerBeAttacked,omitempty"`      // 每回合玩家被打次数
	RoundDoAIForces  []int32                       `protobuf:"varint,8,rep,packed,name=roundDoAIForces,proto3" json:"roundDoAIForces,omitempty"` // 每回合需要执行ai的势力
	Actions          []*SlayAction                 `protobuf:"bytes,9,rep,name=actions,proto3" json:"actions,omitempty"`                         // 需要执行的行为
	RoundReports     []*common.SlayRoundReport     `protobuf:"bytes,10,rep,name=roundReports,proto3" json:"roundReports,omitempty"`              // 战报
	PlayerCommanders []*common.SlayPlayerCommander `protobuf:"bytes,11,rep,name=playerCommanders,proto3" json:"playerCommanders,omitempty"`      // 玩家武将数据
	SelectBags       []*common.SlaySilkBuy         `protobuf:"bytes,12,rep,name=selectBags,proto3" json:"selectBags,omitempty"`                  // 随机的锦囊
	SilkBag          *common.SilkBag               `protobuf:"bytes,13,opt,name=silkBag,proto3" json:"silkBag,omitempty"`                        // 锦囊
	Event            *common.SlayEvent             `protobuf:"bytes,14,opt,name=event,proto3" json:"event,omitempty"`                            // 世界事件
	AiTemplate       *common.BattlePlayerInfo      `protobuf:"bytes,15,opt,name=aiTemplate,proto3" json:"aiTemplate,omitempty"`                  // ai数据模板
	TopCommanders    []*common.Commander           `protobuf:"bytes,16,rep,name=topCommanders,proto3" json:"topCommanders,omitempty"`            // 最强的武将
	AiCount          int32                         `protobuf:"varint,17,opt,name=aiCount,proto3" json:"aiCount,omitempty"`
	End              bool                          `protobuf:"varint,18,opt,name=end,proto3" json:"end,omitempty"`                            // 是否结束
	EffectSilkBag    int32                         `protobuf:"varint,19,opt,name=effectSilkBag,proto3" json:"effectSilkBag,omitempty"`        // 正在生效的锦囊
	UsedFormation    []int32                       `protobuf:"varint,20,rep,packed,name=usedFormation,proto3" json:"usedFormation,omitempty"` // 当前回合已经行动过的布阵
	DefendCityId     int32                         `protobuf:"varint,21,opt,name=defendCityId,proto3" json:"defendCityId,omitempty"`          // 玩家攻打的城池id
}

func (x *Slay) Reset() {
	*x = Slay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slay) ProtoMessage() {}

func (x *Slay) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slay.ProtoReflect.Descriptor instead.
func (*Slay) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{153}
}

func (x *Slay) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Slay) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Slay) GetCredit() int32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *Slay) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Slay) GetCities() []*SlayCity {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *Slay) GetForces() []*common.SlayPower {
	if x != nil {
		return x.Forces
	}
	return nil
}

func (x *Slay) GetPlayerBeAttacked() int32 {
	if x != nil {
		return x.PlayerBeAttacked
	}
	return 0
}

func (x *Slay) GetRoundDoAIForces() []int32 {
	if x != nil {
		return x.RoundDoAIForces
	}
	return nil
}

func (x *Slay) GetActions() []*SlayAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Slay) GetRoundReports() []*common.SlayRoundReport {
	if x != nil {
		return x.RoundReports
	}
	return nil
}

func (x *Slay) GetPlayerCommanders() []*common.SlayPlayerCommander {
	if x != nil {
		return x.PlayerCommanders
	}
	return nil
}

func (x *Slay) GetSelectBags() []*common.SlaySilkBuy {
	if x != nil {
		return x.SelectBags
	}
	return nil
}

func (x *Slay) GetSilkBag() *common.SilkBag {
	if x != nil {
		return x.SilkBag
	}
	return nil
}

func (x *Slay) GetEvent() *common.SlayEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Slay) GetAiTemplate() *common.BattlePlayerInfo {
	if x != nil {
		return x.AiTemplate
	}
	return nil
}

func (x *Slay) GetTopCommanders() []*common.Commander {
	if x != nil {
		return x.TopCommanders
	}
	return nil
}

func (x *Slay) GetAiCount() int32 {
	if x != nil {
		return x.AiCount
	}
	return 0
}

func (x *Slay) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *Slay) GetEffectSilkBag() int32 {
	if x != nil {
		return x.EffectSilkBag
	}
	return 0
}

func (x *Slay) GetUsedFormation() []int32 {
	if x != nil {
		return x.UsedFormation
	}
	return nil
}

func (x *Slay) GetDefendCityId() int32 {
	if x != nil {
		return x.DefendCityId
	}
	return 0
}

//--------------------------------------------------------------------------------------------------竞技场
type PlayerArena struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTimes    uint32  `protobuf:"varint,1,opt,name=challengeTimes,proto3" json:"challengeTimes,omitempty"`       //挑战次数
	ChallengeBuyTimes uint32  `protobuf:"varint,2,opt,name=challengeBuyTimes,proto3" json:"challengeBuyTimes,omitempty"` //使用过的挑战购买次数
	MaxRank           uint32  `protobuf:"varint,3,opt,name=maxRank,proto3" json:"maxRank,omitempty"`                     //个人的最大排名 (0)表示没有上榜
	ExchangeIds       []int32 `protobuf:"varint,4,rep,packed,name=exchangeIds,proto3" json:"exchangeIds,omitempty"`      //已经兑换的奖励id
	//  int32 rewardScore = 5; //发奖积分
	BattleLogs               []*common.ArenaBattleLog `protobuf:"bytes,6,rep,name=battleLogs,proto3" json:"battleLogs,omitempty"`                                                                                             //战报
	RewardScore              map[int32]int32          `protobuf:"bytes,7,rep,name=rewardScore,proto3" json:"rewardScore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //发奖积分
	BattleTimesExchangeIds   []int32                  `protobuf:"varint,8,rep,packed,name=battleTimesExchangeIds,proto3" json:"battleTimesExchangeIds,omitempty"`                                                             //已经兑换的战斗次数奖励id
	ArenaBattleInfo          *common.ArenaBattleInfo  `protobuf:"bytes,9,opt,name=arenaBattleInfo,proto3" json:"arenaBattleInfo,omitempty"`                                                                                   //当前未完成的战斗
	IsOfflineRankChangeAsked bool                     `protobuf:"varint,10,opt,name=isOfflineRankChangeAsked,proto3" json:"isOfflineRankChangeAsked,omitempty"`                                                               // 离线排名变化是否已请求
}

func (x *PlayerArena) Reset() {
	*x = PlayerArena{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerArena) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerArena) ProtoMessage() {}

func (x *PlayerArena) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerArena.ProtoReflect.Descriptor instead.
func (*PlayerArena) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{154}
}

func (x *PlayerArena) GetChallengeTimes() uint32 {
	if x != nil {
		return x.ChallengeTimes
	}
	return 0
}

func (x *PlayerArena) GetChallengeBuyTimes() uint32 {
	if x != nil {
		return x.ChallengeBuyTimes
	}
	return 0
}

func (x *PlayerArena) GetMaxRank() uint32 {
	if x != nil {
		return x.MaxRank
	}
	return 0
}

func (x *PlayerArena) GetExchangeIds() []int32 {
	if x != nil {
		return x.ExchangeIds
	}
	return nil
}

func (x *PlayerArena) GetBattleLogs() []*common.ArenaBattleLog {
	if x != nil {
		return x.BattleLogs
	}
	return nil
}

func (x *PlayerArena) GetRewardScore() map[int32]int32 {
	if x != nil {
		return x.RewardScore
	}
	return nil
}

func (x *PlayerArena) GetBattleTimesExchangeIds() []int32 {
	if x != nil {
		return x.BattleTimesExchangeIds
	}
	return nil
}

func (x *PlayerArena) GetArenaBattleInfo() *common.ArenaBattleInfo {
	if x != nil {
		return x.ArenaBattleInfo
	}
	return nil
}

func (x *PlayerArena) GetIsOfflineRankChangeAsked() bool {
	if x != nil {
		return x.IsOfflineRankChangeAsked
	}
	return false
}

//------------------------------------------------------------------------------------------切磋
type PlayerQieCuo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTimes uint32 `protobuf:"varint,1,opt,name=challengeTimes,proto3" json:"challengeTimes,omitempty"` //挑战次数
}

func (x *PlayerQieCuo) Reset() {
	*x = PlayerQieCuo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQieCuo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQieCuo) ProtoMessage() {}

func (x *PlayerQieCuo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQieCuo.ProtoReflect.Descriptor instead.
func (*PlayerQieCuo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{155}
}

func (x *PlayerQieCuo) GetChallengeTimes() uint32 {
	if x != nil {
		return x.ChallengeTimes
	}
	return 0
}

//--------------------------------------------------------------------------------------------------巅峰竞技场
type PlayerPeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionID                      int64                   `protobuf:"varint,1,opt,name=versionID,proto3" json:"versionID,omitempty"`                                           //当前赛季的 版本id （0表示没有参与本赛季）
	ChallengeTimes                 uint32                  `protobuf:"varint,2,opt,name=challengeTimes,proto3" json:"challengeTimes,omitempty"`                                 //可用的挑战次数
	LastAccumulatePeakCoin         uint32                  `protobuf:"varint,3,opt,name=lastAccumulatePeakCoin,proto3" json:"lastAccumulatePeakCoin,omitempty"`                 //之前累计的联赛币
	NowAccumulatePeakCoinBeginTime int64                   `protobuf:"varint,4,opt,name=nowAccumulatePeakCoinBeginTime,proto3" json:"nowAccumulatePeakCoinBeginTime,omitempty"` //本轮累计开始的时间
	ExchangeIds                    []int32                 `protobuf:"varint,5,rep,packed,name=exchangeIds,proto3" json:"exchangeIds,omitempty"`                                //已经兑换的奖励id
	BattleLogs                     []*common.PeakBattleLog `protobuf:"bytes,6,rep,name=battleLogs,proto3" json:"battleLogs,omitempty"`                                          //战报
	MaxScore                       uint32                  `protobuf:"varint,7,opt,name=maxScore,proto3" json:"maxScore,omitempty"`                                             //本赛季最大天梯积分
	PeakRank                       int32                   `protobuf:"varint,8,opt,name=peakRank,proto3" json:"peakRank,omitempty"`                                             //排名 (纯显示，真正的排名在PeakManager上)
	TotalBattleTimes               int32                   `protobuf:"varint,9,opt,name=totalBattleTimes,proto3" json:"totalBattleTimes,omitempty"`                             //本赛季总战斗次数
	TotalBattleWinTimes            int32                   `protobuf:"varint,10,opt,name=totalBattleWinTimes,proto3" json:"totalBattleWinTimes,omitempty"`                      //总胜利次数
	LastConsecutiveWinTimes        int32                   `protobuf:"varint,11,opt,name=lastConsecutiveWinTimes,proto3" json:"lastConsecutiveWinTimes,omitempty"`              //最近连胜次数
	BattleUids                     []uint64                `protobuf:"varint,12,rep,packed,name=battleUids,proto3" json:"battleUids,omitempty"`                                 //战斗过的uid（每日清空一次）
	ChallengeBuyTimes              uint32                  `protobuf:"varint,13,opt,name=challengeBuyTimes,proto3" json:"challengeBuyTimes,omitempty"`                          //使用过的挑战购买次数
	HasChallengeList               []uint64                `protobuf:"varint,14,rep,packed,name=hasChallengeList,proto3" json:"hasChallengeList,omitempty"`                     //已经挑战过的列表
	LastWin                        bool                    `protobuf:"varint,15,opt,name=lastWin,proto3" json:"lastWin,omitempty"`                                              //日志可能被清掉，只能用个单独变量来记
	ExchangeMailIds                []int32                 `protobuf:"varint,16,rep,packed,name=exchangeMailIds,proto3" json:"exchangeMailIds,omitempty"`                       //已经兑换的邮件id
}

func (x *PlayerPeak) Reset() {
	*x = PlayerPeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPeak) ProtoMessage() {}

func (x *PlayerPeak) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPeak.ProtoReflect.Descriptor instead.
func (*PlayerPeak) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{156}
}

func (x *PlayerPeak) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

func (x *PlayerPeak) GetChallengeTimes() uint32 {
	if x != nil {
		return x.ChallengeTimes
	}
	return 0
}

func (x *PlayerPeak) GetLastAccumulatePeakCoin() uint32 {
	if x != nil {
		return x.LastAccumulatePeakCoin
	}
	return 0
}

func (x *PlayerPeak) GetNowAccumulatePeakCoinBeginTime() int64 {
	if x != nil {
		return x.NowAccumulatePeakCoinBeginTime
	}
	return 0
}

func (x *PlayerPeak) GetExchangeIds() []int32 {
	if x != nil {
		return x.ExchangeIds
	}
	return nil
}

func (x *PlayerPeak) GetBattleLogs() []*common.PeakBattleLog {
	if x != nil {
		return x.BattleLogs
	}
	return nil
}

func (x *PlayerPeak) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *PlayerPeak) GetPeakRank() int32 {
	if x != nil {
		return x.PeakRank
	}
	return 0
}

func (x *PlayerPeak) GetTotalBattleTimes() int32 {
	if x != nil {
		return x.TotalBattleTimes
	}
	return 0
}

func (x *PlayerPeak) GetTotalBattleWinTimes() int32 {
	if x != nil {
		return x.TotalBattleWinTimes
	}
	return 0
}

func (x *PlayerPeak) GetLastConsecutiveWinTimes() int32 {
	if x != nil {
		return x.LastConsecutiveWinTimes
	}
	return 0
}

func (x *PlayerPeak) GetBattleUids() []uint64 {
	if x != nil {
		return x.BattleUids
	}
	return nil
}

func (x *PlayerPeak) GetChallengeBuyTimes() uint32 {
	if x != nil {
		return x.ChallengeBuyTimes
	}
	return 0
}

func (x *PlayerPeak) GetHasChallengeList() []uint64 {
	if x != nil {
		return x.HasChallengeList
	}
	return nil
}

func (x *PlayerPeak) GetLastWin() bool {
	if x != nil {
		return x.LastWin
	}
	return false
}

func (x *PlayerPeak) GetExchangeMailIds() []int32 {
	if x != nil {
		return x.ExchangeMailIds
	}
	return nil
}

type PurePeakPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`               //玩家id
	Score      uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`           //积分
	PowerScore int32  `protobuf:"varint,3,opt,name=powerScore,proto3" json:"powerScore,omitempty"` //战力积分
}

func (x *PurePeakPlayer) Reset() {
	*x = PurePeakPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurePeakPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurePeakPlayer) ProtoMessage() {}

func (x *PurePeakPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurePeakPlayer.ProtoReflect.Descriptor instead.
func (*PurePeakPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{157}
}

func (x *PurePeakPlayer) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PurePeakPlayer) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PurePeakPlayer) GetPowerScore() int32 {
	if x != nil {
		return x.PowerScore
	}
	return 0
}

type HotCommanders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score          uint32  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`                          //积分
	RankCommanders []int32 `protobuf:"varint,2,rep,packed,name=rankCommanders,proto3" json:"rankCommanders,omitempty"` //热点英雄map
}

func (x *HotCommanders) Reset() {
	*x = HotCommanders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotCommanders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotCommanders) ProtoMessage() {}

func (x *HotCommanders) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotCommanders.ProtoReflect.Descriptor instead.
func (*HotCommanders) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{158}
}

func (x *HotCommanders) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *HotCommanders) GetRankCommanders() []int32 {
	if x != nil {
		return x.RankCommanders
	}
	return nil
}

type Peak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionList []int64 `protobuf:"varint,1,rep,packed,name=versionList,proto3" json:"versionList,omitempty"` //赛季记录
	LastTopDays uint32  `protobuf:"varint,2,opt,name=lastTopDays,proto3" json:"lastTopDays,omitempty"`        //第一名的霸榜的天数
	LastTopUID  uint64  `protobuf:"varint,3,opt,name=lastTopUID,proto3" json:"lastTopUID,omitempty"`          //第一名的id
}

func (x *Peak) Reset() {
	*x = Peak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peak) ProtoMessage() {}

func (x *Peak) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peak.ProtoReflect.Descriptor instead.
func (*Peak) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{159}
}

func (x *Peak) GetVersionList() []int64 {
	if x != nil {
		return x.VersionList
	}
	return nil
}

func (x *Peak) GetLastTopDays() uint32 {
	if x != nil {
		return x.LastTopDays
	}
	return 0
}

func (x *Peak) GetLastTopUID() uint64 {
	if x != nil {
		return x.LastTopUID
	}
	return 0
}

type PeakRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`             //玩家id
	HScore    uint32 `protobuf:"varint,2,opt,name=hScore,proto3" json:"hScore,omitempty"`       //积分 不用socre的原因是和跳表的排序函数命名冲突
	TimeStamp int64  `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"` //更新时间
	CmpScore  uint64 `protobuf:"varint,4,opt,name=cmpScore,proto3" json:"cmpScore,omitempty"`   //用来排序
}

func (x *PeakRankItem) Reset() {
	*x = PeakRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakRankItem) ProtoMessage() {}

func (x *PeakRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakRankItem.ProtoReflect.Descriptor instead.
func (*PeakRankItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{160}
}

func (x *PeakRankItem) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PeakRankItem) GetHScore() uint32 {
	if x != nil {
		return x.HScore
	}
	return 0
}

func (x *PeakRankItem) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *PeakRankItem) GetCmpScore() uint64 {
	if x != nil {
		return x.CmpScore
	}
	return 0
}

//--------------------------------------------------------------------------------------------------决战巅峰
type PlayerDyPeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampReward  bool          `protobuf:"varint,1,opt,name=champReward,proto3" json:"champReward,omitempty"`
	SecondReward bool          `protobuf:"varint,2,opt,name=secondReward,proto3" json:"secondReward,omitempty"`
	ThirdReward  bool          `protobuf:"varint,3,opt,name=thirdReward,proto3" json:"thirdReward,omitempty"`
	SignUp       *DyPeakSignUp `protobuf:"bytes,4,opt,name=signUp,proto3" json:"signUp,omitempty"`
}

func (x *PlayerDyPeak) Reset() {
	*x = PlayerDyPeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDyPeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDyPeak) ProtoMessage() {}

func (x *PlayerDyPeak) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDyPeak.ProtoReflect.Descriptor instead.
func (*PlayerDyPeak) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{161}
}

func (x *PlayerDyPeak) GetChampReward() bool {
	if x != nil {
		return x.ChampReward
	}
	return false
}

func (x *PlayerDyPeak) GetSecondReward() bool {
	if x != nil {
		return x.SecondReward
	}
	return false
}

func (x *PlayerDyPeak) GetThirdReward() bool {
	if x != nil {
		return x.ThirdReward
	}
	return false
}

func (x *PlayerDyPeak) GetSignUp() *DyPeakSignUp {
	if x != nil {
		return x.SignUp
	}
	return nil
}

// 决战巅峰玩家报名数据
type DyPeakSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season             int32  `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`                         // 赛季
	SignUpTime         int64  `protobuf:"varint,2,opt,name=signUpTime,proto3" json:"signUpTime,omitempty"`                 // 报名时间
	SyncFormationTime  int64  `protobuf:"varint,3,opt,name=syncFormationTime,proto3" json:"syncFormationTime,omitempty"`   // 上次布阵时间
	SyncFormationPower uint32 `protobuf:"varint,4,opt,name=syncFormationPower,proto3" json:"syncFormationPower,omitempty"` // 同步布阵战斗力
	ChooseReward       bool   `protobuf:"varint,5,opt,name=chooseReward,proto3" json:"chooseReward,omitempty"`             // 是否领取选拔奖励
	SyncMaxPower       uint32 `protobuf:"varint,6,opt,name=syncMaxPower,proto3" json:"syncMaxPower,omitempty"`             // 同步的最大战斗力
}

func (x *DyPeakSignUp) Reset() {
	*x = DyPeakSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakSignUp) ProtoMessage() {}

func (x *DyPeakSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakSignUp.ProtoReflect.Descriptor instead.
func (*DyPeakSignUp) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{162}
}

func (x *DyPeakSignUp) GetSeason() int32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *DyPeakSignUp) GetSignUpTime() int64 {
	if x != nil {
		return x.SignUpTime
	}
	return 0
}

func (x *DyPeakSignUp) GetSyncFormationTime() int64 {
	if x != nil {
		return x.SyncFormationTime
	}
	return 0
}

func (x *DyPeakSignUp) GetSyncFormationPower() uint32 {
	if x != nil {
		return x.SyncFormationPower
	}
	return 0
}

func (x *DyPeakSignUp) GetChooseReward() bool {
	if x != nil {
		return x.ChooseReward
	}
	return false
}

func (x *DyPeakSignUp) GetSyncMaxPower() uint32 {
	if x != nil {
		return x.SyncMaxPower
	}
	return 0
}

// 选拔赛玩家
type DyPeakChoosePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Score    uint32 `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	BattleID uint64 `protobuf:"varint,3,opt,name=BattleID,proto3" json:"BattleID,omitempty"`
	Win      bool   `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *DyPeakChoosePlayer) Reset() {
	*x = DyPeakChoosePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakChoosePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakChoosePlayer) ProtoMessage() {}

func (x *DyPeakChoosePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakChoosePlayer.ProtoReflect.Descriptor instead.
func (*DyPeakChoosePlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{163}
}

func (x *DyPeakChoosePlayer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DyPeakChoosePlayer) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DyPeakChoosePlayer) GetBattleID() uint64 {
	if x != nil {
		return x.BattleID
	}
	return 0
}

func (x *DyPeakChoosePlayer) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type DyPeakChooseRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*DyPeakChoosePlayer `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
}

func (x *DyPeakChooseRound) Reset() {
	*x = DyPeakChooseRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakChooseRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakChooseRound) ProtoMessage() {}

func (x *DyPeakChooseRound) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakChooseRound.ProtoReflect.Descriptor instead.
func (*DyPeakChooseRound) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{164}
}

func (x *DyPeakChooseRound) GetPlayers() []*DyPeakChoosePlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type DyPeakChooseGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds         []*DyPeakChooseRound `protobuf:"bytes,1,rep,name=Rounds,proto3" json:"Rounds,omitempty"`
	RoundIndex     int32                `protobuf:"varint,2,opt,name=RoundIndex,proto3" json:"RoundIndex,omitempty"`
	AdvancedPlayer uint64               `protobuf:"varint,3,opt,name=AdvancedPlayer,proto3" json:"AdvancedPlayer,omitempty"`
	ReqProgress    int32                `protobuf:"varint,6,opt,name=ReqProgress,proto3" json:"ReqProgress,omitempty"`   // 验算请求进度
	RespProgress   int32                `protobuf:"varint,7,opt,name=RespProgress,proto3" json:"RespProgress,omitempty"` // 验算结果进度
}

func (x *DyPeakChooseGroup) Reset() {
	*x = DyPeakChooseGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakChooseGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakChooseGroup) ProtoMessage() {}

func (x *DyPeakChooseGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakChooseGroup.ProtoReflect.Descriptor instead.
func (*DyPeakChooseGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{165}
}

func (x *DyPeakChooseGroup) GetRounds() []*DyPeakChooseRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *DyPeakChooseGroup) GetRoundIndex() int32 {
	if x != nil {
		return x.RoundIndex
	}
	return 0
}

func (x *DyPeakChooseGroup) GetAdvancedPlayer() uint64 {
	if x != nil {
		return x.AdvancedPlayer
	}
	return 0
}

func (x *DyPeakChooseGroup) GetReqProgress() int32 {
	if x != nil {
		return x.ReqProgress
	}
	return 0
}

func (x *DyPeakChooseGroup) GetRespProgress() int32 {
	if x != nil {
		return x.RespProgress
	}
	return 0
}

type PlaceFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList          []*PlaceFinishTask `protobuf:"bytes,1,rep,name=taskList,proto3" json:"taskList,omitempty"`                    // 任务列表
	Task1EverFinished bool               `protobuf:"varint,2,opt,name=task1EverFinished,proto3" json:"task1EverFinished,omitempty"` // 第一个任务是否完成过（引导使用）
}

func (x *PlaceFinish) Reset() {
	*x = PlaceFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceFinish) ProtoMessage() {}

func (x *PlaceFinish) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceFinish.ProtoReflect.Descriptor instead.
func (*PlaceFinish) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{166}
}

func (x *PlaceFinish) GetTaskList() []*PlaceFinishTask {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PlaceFinish) GetTask1EverFinished() bool {
	if x != nil {
		return x.Task1EverFinished
	}
	return false
}

type PlaceFinishTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId     int32        `protobuf:"varint,1,opt,name=cityId,proto3" json:"cityId,omitempty"`        // 城池id
	TaskType   uint32       `protobuf:"varint,2,opt,name=taskType,proto3" json:"taskType,omitempty"`    // 任务类型
	StartTime  int64        `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`  // 开始时间
	BaseReward *common.Item `protobuf:"bytes,4,opt,name=baseReward,proto3" json:"baseReward,omitempty"` // 基础奖励
}

func (x *PlaceFinishTask) Reset() {
	*x = PlaceFinishTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceFinishTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceFinishTask) ProtoMessage() {}

func (x *PlaceFinishTask) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceFinishTask.ProtoReflect.Descriptor instead.
func (*PlaceFinishTask) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{167}
}

func (x *PlaceFinishTask) GetCityId() int32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *PlaceFinishTask) GetTaskType() uint32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *PlaceFinishTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PlaceFinishTask) GetBaseReward() *common.Item {
	if x != nil {
		return x.BaseReward
	}
	return nil
}

//--------------------------------------------------------------------------------------------------guild
//guild玩家的简单信息
type GuildPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid             uint64                     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Icon            *common.PlayerHeadPortrait `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Power           uint32                     `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`                     //战斗力
	LastLogout      int64                      `protobuf:"varint,4,opt,name=lastLogout,proto3" json:"lastLogout,omitempty"`           //下线时间
	CounsellorId    int32                      `protobuf:"varint,5,opt,name=counsellorId,proto3" json:"counsellorId,omitempty"`       //军师id
	CounsellorStar  uint32                     `protobuf:"varint,6,opt,name=counsellorStar,proto3" json:"counsellorStar,omitempty"`   //军师星级
	OfficialType    int32                      `protobuf:"varint,7,opt,name=officialType,proto3" json:"officialType,omitempty"`       //官职类型
	DayContribution uint64                     `protobuf:"varint,8,opt,name=dayContribution,proto3" json:"dayContribution,omitempty"` //今日贡献
	//  uint64 weekContribution = 9; //周贡献
	TotalContribution     uint64          `protobuf:"varint,10,opt,name=totalContribution,proto3" json:"totalContribution,omitempty"`                                                                                              //总贡献
	IsOfficialTypeChanged bool            `protobuf:"varint,11,opt,name=isOfficialTypeChanged,proto3" json:"isOfficialTypeChanged,omitempty"`                                                                                      //官职类型是否变化
	HideVipSystems        []int32         `protobuf:"varint,12,rep,packed,name=hideVipSystems,proto3" json:"hideVipSystems,omitempty"`                                                                                             //需要隐藏Vip标识的功能
	ShowCommanderId       int32           `protobuf:"varint,13,opt,name=showCommanderId,proto3" json:"showCommanderId,omitempty"`                                                                                                  //要展示的武将
	EnterTime             int64           `protobuf:"varint,15,opt,name=enterTime,proto3" json:"enterTime,omitempty"`                                                                                                              //进入联盟时间
	OfflineMails          []*common.Mail  `protobuf:"bytes,16,rep,name=offlineMails,proto3" json:"offlineMails,omitempty"`                                                                                                         //离线邮件
	OfflineCompleteTask   map[uint32]bool `protobuf:"bytes,17,rep,name=offlineCompleteTask,proto3" json:"offlineCompleteTask,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //离线完成了任务
	//gve相关
	Coordinate                    *common.Coordinate      `protobuf:"bytes,20,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	Bag                           *Bag                    `protobuf:"bytes,22,opt,name=bag,proto3" json:"bag,omitempty"`                                                                                                                               //联盟个人背包
	TotalDamageRecord             *common.GveDamageRecord `protobuf:"bytes,23,opt,name=totalDamageRecord,proto3" json:"totalDamageRecord,omitempty"`                                                                                                   //伤害记录
	OccupiedProgressState         map[uint32]bool         `protobuf:"bytes,24,rep,name=occupiedProgressState,proto3" json:"occupiedProgressState,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //完成度奖励领取状态
	GveBattleInfo                 *GveBattleInfo          `protobuf:"bytes,25,opt,name=gveBattleInfo,proto3" json:"gveBattleInfo,omitempty"`                                                                                                           // gve战斗信息
	Team                          int32                   `protobuf:"varint,26,opt,name=team,proto3" json:"team,omitempty"`                                                                                                                            //gve二阶段攻城技能（只有二阶段工程需要）
	BattleId                      uint64                  `protobuf:"varint,27,opt,name=battleId,proto3" json:"battleId,omitempty"`                                                                                                                    //战斗id （只有二阶段工程需要）
	LastFormationTime             uint64                  `protobuf:"varint,28,opt,name=lastFormationTime,proto3" json:"lastFormationTime,omitempty"`                                                                                                  // 上次布阵时间，用于做布阵cd控制
	IsGetGveBattleReward          bool                    `protobuf:"varint,29,opt,name=isGetGveBattleReward,proto3" json:"isGetGveBattleReward,omitempty"`                                                                                            // 是否领过gve攻城奖励
	LastReceiveCityRewardPos      int32                   `protobuf:"varint,30,opt,name=lastReceiveCityRewardPos,proto3" json:"lastReceiveCityRewardPos,omitempty"`                                                                                    // 上次领取攻城阶段的奖励 默认-1
	DayDamageRecord               *common.GveDamageRecord `protobuf:"bytes,31,opt,name=dayDamageRecord,proto3" json:"dayDamageRecord,omitempty"`                                                                                                       // 每天的伤害记录
	CurrentWeekGveId              uint32                  `protobuf:"varint,32,opt,name=currentWeekGveId,proto3" json:"currentWeekGveId,omitempty"`                                                                                                    // 当周首次攻打的gveid
	LastGetDayDidHpRewardPos      uint32                  `protobuf:"varint,33,opt,name=lastGetDayDidHpRewardPos,proto3" json:"lastGetDayDidHpRewardPos,omitempty"`                                                                                    // 上次玩家领取过奖励的每日攻城值档位，用于绑定在玩家身上
	OfflineGveChange              *GveChange              `protobuf:"bytes,34,opt,name=offlineGveChange,proto3" json:"offlineGveChange,omitempty"`                                                                                                     // 离线的gve变化
	WeekFirstEnterGuild           uint64                  `protobuf:"varint,35,opt,name=weekFirstEnterGuild,proto3" json:"weekFirstEnterGuild,omitempty"`                                                                                              // 本周首次进入是哪个联盟(换联盟某些功能禁用)
	SameGveInteractiveBoxAndTrans []*common.Coordinate    `protobuf:"bytes,36,rep,name=sameGveInteractiveBoxAndTrans,proto3" json:"sameGveInteractiveBoxAndTrans,omitempty"`                                                                           // 玩家同关卡交互的宝箱和运粮
	IsWeekChangeGuild             bool                    `protobuf:"varint,37,opt,name=isWeekChangeGuild,proto3" json:"isWeekChangeGuild,omitempty"`                                                                                                  // 当周是否更换过联盟
	LastSeeGveFlagTime            int64                   `protobuf:"varint,38,opt,name=lastSeeGveFlagTime,proto3" json:"lastSeeGveFlagTime,omitempty"`                                                                                                // 上次查看gve标记的时间
	ActivitySubscribeDueTime      int64                   `protobuf:"varint,39,opt,name=activitySubscribeDueTime,proto3" json:"activitySubscribeDueTime,omitempty"`                                                                                    // 订阅到期时间
	IsDealEnterGve                bool                    `protobuf:"varint,40,opt,name=isDealEnterGve,proto3" json:"isDealEnterGve,omitempty"`                                                                                                        // 处理进入gve逻辑标识，避免每次都处理进入gve逻辑
	LeftTaxReward                 []*common.Item          `protobuf:"bytes,41,rep,name=leftTaxReward,proto3" json:"leftTaxReward,omitempty"`                                                                                                           // 剩余税收，跨周时候将没领取的税收领了
	RecruitCDTime                 int64                   `protobuf:"varint,42,opt,name=recruitCDTime,proto3" json:"recruitCDTime,omitempty"`                                                                                                          // 招募cd时间
	IsAutoFormationSiege          bool                    `protobuf:"varint,43,opt,name=isAutoFormationSiege,proto3" json:"isAutoFormationSiege,omitempty"`                                                                                            // 玩家选择是否二阶段自动布阵
	AutoFormationSiegeTeam        int32                   `protobuf:"varint,44,opt,name=autoFormationSiegeTeam,proto3" json:"autoFormationSiegeTeam,omitempty"`                                                                                        // 玩家选择自动二阶段布阵的阵营
	IsAutoFormationTeam           bool                    `protobuf:"varint,45,opt,name=isAutoFormationTeam,proto3" json:"isAutoFormationTeam,omitempty"`                                                                                              // 是否是二阶段自动布阵生成的阵营，用来标识team字段是否是自动布阵生成的
	GveHistoryMaxDmg              map[uint32]uint64       `protobuf:"bytes,46,rep,name=gveHistoryMaxDmg,proto3" json:"gveHistoryMaxDmg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // 玩家gve地图最高伤害
	YouthReturnExpiredTime        int64                   `protobuf:"varint,47,opt,name=youthReturnExpiredTime,proto3" json:"youthReturnExpiredTime,omitempty"`                                                                                        // 少年回归结束时间
}

func (x *GuildPlayer) Reset() {
	*x = GuildPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildPlayer) ProtoMessage() {}

func (x *GuildPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildPlayer.ProtoReflect.Descriptor instead.
func (*GuildPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{168}
}

func (x *GuildPlayer) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GuildPlayer) GetIcon() *common.PlayerHeadPortrait {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GuildPlayer) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *GuildPlayer) GetLastLogout() int64 {
	if x != nil {
		return x.LastLogout
	}
	return 0
}

func (x *GuildPlayer) GetCounsellorId() int32 {
	if x != nil {
		return x.CounsellorId
	}
	return 0
}

func (x *GuildPlayer) GetCounsellorStar() uint32 {
	if x != nil {
		return x.CounsellorStar
	}
	return 0
}

func (x *GuildPlayer) GetOfficialType() int32 {
	if x != nil {
		return x.OfficialType
	}
	return 0
}

func (x *GuildPlayer) GetDayContribution() uint64 {
	if x != nil {
		return x.DayContribution
	}
	return 0
}

func (x *GuildPlayer) GetTotalContribution() uint64 {
	if x != nil {
		return x.TotalContribution
	}
	return 0
}

func (x *GuildPlayer) GetIsOfficialTypeChanged() bool {
	if x != nil {
		return x.IsOfficialTypeChanged
	}
	return false
}

func (x *GuildPlayer) GetHideVipSystems() []int32 {
	if x != nil {
		return x.HideVipSystems
	}
	return nil
}

func (x *GuildPlayer) GetShowCommanderId() int32 {
	if x != nil {
		return x.ShowCommanderId
	}
	return 0
}

func (x *GuildPlayer) GetEnterTime() int64 {
	if x != nil {
		return x.EnterTime
	}
	return 0
}

func (x *GuildPlayer) GetOfflineMails() []*common.Mail {
	if x != nil {
		return x.OfflineMails
	}
	return nil
}

func (x *GuildPlayer) GetOfflineCompleteTask() map[uint32]bool {
	if x != nil {
		return x.OfflineCompleteTask
	}
	return nil
}

func (x *GuildPlayer) GetCoordinate() *common.Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *GuildPlayer) GetBag() *Bag {
	if x != nil {
		return x.Bag
	}
	return nil
}

func (x *GuildPlayer) GetTotalDamageRecord() *common.GveDamageRecord {
	if x != nil {
		return x.TotalDamageRecord
	}
	return nil
}

func (x *GuildPlayer) GetOccupiedProgressState() map[uint32]bool {
	if x != nil {
		return x.OccupiedProgressState
	}
	return nil
}

func (x *GuildPlayer) GetGveBattleInfo() *GveBattleInfo {
	if x != nil {
		return x.GveBattleInfo
	}
	return nil
}

func (x *GuildPlayer) GetTeam() int32 {
	if x != nil {
		return x.Team
	}
	return 0
}

func (x *GuildPlayer) GetBattleId() uint64 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

func (x *GuildPlayer) GetLastFormationTime() uint64 {
	if x != nil {
		return x.LastFormationTime
	}
	return 0
}

func (x *GuildPlayer) GetIsGetGveBattleReward() bool {
	if x != nil {
		return x.IsGetGveBattleReward
	}
	return false
}

func (x *GuildPlayer) GetLastReceiveCityRewardPos() int32 {
	if x != nil {
		return x.LastReceiveCityRewardPos
	}
	return 0
}

func (x *GuildPlayer) GetDayDamageRecord() *common.GveDamageRecord {
	if x != nil {
		return x.DayDamageRecord
	}
	return nil
}

func (x *GuildPlayer) GetCurrentWeekGveId() uint32 {
	if x != nil {
		return x.CurrentWeekGveId
	}
	return 0
}

func (x *GuildPlayer) GetLastGetDayDidHpRewardPos() uint32 {
	if x != nil {
		return x.LastGetDayDidHpRewardPos
	}
	return 0
}

func (x *GuildPlayer) GetOfflineGveChange() *GveChange {
	if x != nil {
		return x.OfflineGveChange
	}
	return nil
}

func (x *GuildPlayer) GetWeekFirstEnterGuild() uint64 {
	if x != nil {
		return x.WeekFirstEnterGuild
	}
	return 0
}

func (x *GuildPlayer) GetSameGveInteractiveBoxAndTrans() []*common.Coordinate {
	if x != nil {
		return x.SameGveInteractiveBoxAndTrans
	}
	return nil
}

func (x *GuildPlayer) GetIsWeekChangeGuild() bool {
	if x != nil {
		return x.IsWeekChangeGuild
	}
	return false
}

func (x *GuildPlayer) GetLastSeeGveFlagTime() int64 {
	if x != nil {
		return x.LastSeeGveFlagTime
	}
	return 0
}

func (x *GuildPlayer) GetActivitySubscribeDueTime() int64 {
	if x != nil {
		return x.ActivitySubscribeDueTime
	}
	return 0
}

func (x *GuildPlayer) GetIsDealEnterGve() bool {
	if x != nil {
		return x.IsDealEnterGve
	}
	return false
}

func (x *GuildPlayer) GetLeftTaxReward() []*common.Item {
	if x != nil {
		return x.LeftTaxReward
	}
	return nil
}

func (x *GuildPlayer) GetRecruitCDTime() int64 {
	if x != nil {
		return x.RecruitCDTime
	}
	return 0
}

func (x *GuildPlayer) GetIsAutoFormationSiege() bool {
	if x != nil {
		return x.IsAutoFormationSiege
	}
	return false
}

func (x *GuildPlayer) GetAutoFormationSiegeTeam() int32 {
	if x != nil {
		return x.AutoFormationSiegeTeam
	}
	return 0
}

func (x *GuildPlayer) GetIsAutoFormationTeam() bool {
	if x != nil {
		return x.IsAutoFormationTeam
	}
	return false
}

func (x *GuildPlayer) GetGveHistoryMaxDmg() map[uint32]uint64 {
	if x != nil {
		return x.GveHistoryMaxDmg
	}
	return nil
}

func (x *GuildPlayer) GetYouthReturnExpiredTime() int64 {
	if x != nil {
		return x.YouthReturnExpiredTime
	}
	return 0
}

// gve战斗信息
type GveBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleStartInfo  *common.BattleStartInfo  `protobuf:"bytes,1,opt,name=battleStartInfo,proto3" json:"battleStartInfo,omitempty"`
	BattleResultInfo *common.BattleResultInfo `protobuf:"bytes,2,opt,name=battleResultInfo,proto3" json:"battleResultInfo,omitempty"` // 战斗结果信息，废弃
	Status           GveBattleStatus          `protobuf:"varint,3,opt,name=status,proto3,enum=common1.GveBattleStatus" json:"status,omitempty"`
	BattleRealDmg    uint64                   `protobuf:"varint,4,opt,name=battleRealDmg,proto3" json:"battleRealDmg,omitempty"` // 打二阶段城池造成的伤害
}

func (x *GveBattleInfo) Reset() {
	*x = GveBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveBattleInfo) ProtoMessage() {}

func (x *GveBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveBattleInfo.ProtoReflect.Descriptor instead.
func (*GveBattleInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{169}
}

func (x *GveBattleInfo) GetBattleStartInfo() *common.BattleStartInfo {
	if x != nil {
		return x.BattleStartInfo
	}
	return nil
}

func (x *GveBattleInfo) GetBattleResultInfo() *common.BattleResultInfo {
	if x != nil {
		return x.BattleResultInfo
	}
	return nil
}

func (x *GveBattleInfo) GetStatus() GveBattleStatus {
	if x != nil {
		return x.Status
	}
	return GveBattleStatus_INIT
}

func (x *GveBattleInfo) GetBattleRealDmg() uint64 {
	if x != nil {
		return x.BattleRealDmg
	}
	return 0
}

//联盟商品
type GuildGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`               //商品id
	Tid        int32  `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`               //商品模板id
	Owner      uint64 `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`           //拥有者
	PriceShift int32  `protobuf:"varint,4,opt,name=priceShift,proto3" json:"priceShift,omitempty"` //价格变动
	Time       int64  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`             //上架时间
	HasSold    bool   `protobuf:"varint,6,opt,name=hasSold,proto3" json:"hasSold,omitempty"`       //已售出（需要卖方领取才消息）
}

func (x *GuildGoods) Reset() {
	*x = GuildGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildGoods) ProtoMessage() {}

func (x *GuildGoods) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildGoods.ProtoReflect.Descriptor instead.
func (*GuildGoods) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{170}
}

func (x *GuildGoods) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GuildGoods) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *GuildGoods) GetOwner() uint64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *GuildGoods) GetPriceShift() int32 {
	if x != nil {
		return x.PriceShift
	}
	return 0
}

func (x *GuildGoods) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GuildGoods) GetHasSold() bool {
	if x != nil {
		return x.HasSold
	}
	return false
}

type GuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lv  uint32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
	Exp uint32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *GuildBuilding) Reset() {
	*x = GuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuilding) ProtoMessage() {}

func (x *GuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuilding.ProtoReflect.Descriptor instead.
func (*GuildBuilding) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{171}
}

func (x *GuildBuilding) GetLv() uint32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

func (x *GuildBuilding) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

type GveGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapGrid             *GveMapGrid                        `protobuf:"bytes,1,opt,name=mapGrid,proto3" json:"mapGrid,omitempty"`
	Occupied            bool                               `protobuf:"varint,2,opt,name=occupied,proto3" json:"occupied,omitempty"`                                                                                                                //是否占领
	OccupiedTime        int64                              `protobuf:"varint,3,opt,name=occupiedTime,proto3" json:"occupiedTime,omitempty"`                                                                                                        // 占领时间
	LastInteractiveTime map[uint64]int64                   `protobuf:"bytes,4,rep,name=lastInteractiveTime,proto3" json:"lastInteractiveTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 上次领取时间 离开联盟要清掉，进入联盟的按照进入联盟时间算
	Hp                  uint64                             `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`                                                                                                                            //血量
	DidHp               map[uint64]*common.GveDamageRecord `protobuf:"bytes,6,rep,name=didHp,proto3" json:"didHp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                              // 造成的hp
	RiceGetTime         map[uint64]int64                   `protobuf:"bytes,7,rep,name=riceGetTime,proto3" json:"riceGetTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                 // 酝酿是否已经领取（只有运粮需要这个字段）
	TaxGetTime          map[uint64]int64                   `protobuf:"bytes,8,rep,name=taxGetTime,proto3" json:"taxGetTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                   // 税收领取时间
}

func (x *GveGrid) Reset() {
	*x = GveGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveGrid) ProtoMessage() {}

func (x *GveGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveGrid.ProtoReflect.Descriptor instead.
func (*GveGrid) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{172}
}

func (x *GveGrid) GetMapGrid() *GveMapGrid {
	if x != nil {
		return x.MapGrid
	}
	return nil
}

func (x *GveGrid) GetOccupied() bool {
	if x != nil {
		return x.Occupied
	}
	return false
}

func (x *GveGrid) GetOccupiedTime() int64 {
	if x != nil {
		return x.OccupiedTime
	}
	return 0
}

func (x *GveGrid) GetLastInteractiveTime() map[uint64]int64 {
	if x != nil {
		return x.LastInteractiveTime
	}
	return nil
}

func (x *GveGrid) GetHp() uint64 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *GveGrid) GetDidHp() map[uint64]*common.GveDamageRecord {
	if x != nil {
		return x.DidHp
	}
	return nil
}

func (x *GveGrid) GetRiceGetTime() map[uint64]int64 {
	if x != nil {
		return x.RiceGetTime
	}
	return nil
}

func (x *GveGrid) GetTaxGetTime() map[uint64]int64 {
	if x != nil {
		return x.TaxGetTime
	}
	return nil
}

type GveMapGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate *common.Coordinate   `protobuf:"bytes,1,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	TypeId     uint32               `protobuf:"varint,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Shape      []*common.Coordinate `protobuf:"bytes,3,rep,name=shape,proto3" json:"shape,omitempty"`      //形状
	IsBirth    bool                 `protobuf:"varint,4,opt,name=isBirth,proto3" json:"isBirth,omitempty"` // 出生点
	Uid        uint32               `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`         // 唯一id
}

func (x *GveMapGrid) Reset() {
	*x = GveMapGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveMapGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveMapGrid) ProtoMessage() {}

func (x *GveMapGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveMapGrid.ProtoReflect.Descriptor instead.
func (*GveMapGrid) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{173}
}

func (x *GveMapGrid) GetCoordinate() *common.Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *GveMapGrid) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *GveMapGrid) GetShape() []*common.Coordinate {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *GveMapGrid) GetIsBirth() bool {
	if x != nil {
		return x.IsBirth
	}
	return false
}

func (x *GveMapGrid) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// gve地图标记
type GveFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate *common.Coordinate `protobuf:"bytes,1,opt,name=coordinate,proto3" json:"coordinate,omitempty"`  // 坐标
	Name       string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`              // 名称
	CreateTime int64              `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"` // 创建标记时间
}

func (x *GveFlag) Reset() {
	*x = GveFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveFlag) ProtoMessage() {}

func (x *GveFlag) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveFlag.ProtoReflect.Descriptor instead.
func (*GveFlag) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{174}
}

func (x *GveFlag) GetCoordinate() *common.Coordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *GveFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GveFlag) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// gve地图数据
type Gve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string               `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Id          uint32               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Width       uint32               `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32               `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	GveMapGrids []*GveMapGrid        `protobuf:"bytes,6,rep,name=gveMapGrids,proto3" json:"gveMapGrids,omitempty"`
	SiegeShape  []*common.Coordinate `protobuf:"bytes,7,rep,name=siegeShape,proto3" json:"siegeShape,omitempty"` //最终攻城地点坐标
}

func (x *Gve) Reset() {
	*x = Gve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gve) ProtoMessage() {}

func (x *Gve) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gve.ProtoReflect.Descriptor instead.
func (*Gve) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{175}
}

func (x *Gve) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Gve) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Gve) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Gve) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Gve) GetGveMapGrids() []*GveMapGrid {
	if x != nil {
		return x.GveMapGrids
	}
	return nil
}

func (x *Gve) GetSiegeShape() []*common.Coordinate {
	if x != nil {
		return x.SiegeShape
	}
	return nil
}

// 每个联盟变化的gve数据
type GuildGve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                               // 地图id
	Grids                 map[uint32]*GveGrid `protobuf:"bytes,2,rep,name=grids,proto3" json:"grids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 变化的地块
	OccupiedProgress      uint32              `protobuf:"varint,3,opt,name=occupiedProgress,proto3" json:"occupiedProgress,omitempty"`
	MaxLevel              uint32              `protobuf:"varint,4,opt,name=maxLevel,proto3" json:"maxLevel,omitempty"`
	HeroicTimes           uint32              `protobuf:"varint,5,opt,name=heroicTimes,proto3" json:"heroicTimes,omitempty"`     //鼓励次数
	SiegeOpenTime         int64               `protobuf:"varint,6,opt,name=siegeOpenTime,proto3" json:"siegeOpenTime,omitempty"` //攻城开启时间
	GveStep               int32               `protobuf:"varint,7,opt,name=GveStep,proto3" json:"GveStep,omitempty"`
	SiegeFirstBattleTime  int64               `protobuf:"varint,8,opt,name=siegeFirstBattleTime,proto3" json:"siegeFirstBattleTime,omitempty"`                                                                                             // 第一次攻打城池时间
	EditGveFlagLockTime   int64               `protobuf:"varint,9,opt,name=editGveFlagLockTime,proto3" json:"editGveFlagLockTime,omitempty"`                                                                                               // 修改gve地图标记时间
	EditGveFlagLockUser   uint64              `protobuf:"varint,10,opt,name=editGveFlagLockUser,proto3" json:"editGveFlagLockUser,omitempty"`                                                                                              // 修改gve地图标记的人
	OccupiedLevelProgress map[uint32]uint32   `protobuf:"bytes,11,rep,name=occupiedLevelProgress,proto3" json:"occupiedLevelProgress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 占领各个等级地块的数量 地块id-占领数量
	Version               string              `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`                                                                                                                       // 地图版本
	SiegePassTime         int64               `protobuf:"varint,13,opt,name=siegePassTime,proto3" json:"siegePassTime,omitempty"`                                                                                                          // 通关时间
}

func (x *GuildGve) Reset() {
	*x = GuildGve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildGve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildGve) ProtoMessage() {}

func (x *GuildGve) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildGve.ProtoReflect.Descriptor instead.
func (*GuildGve) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{176}
}

func (x *GuildGve) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuildGve) GetGrids() map[uint32]*GveGrid {
	if x != nil {
		return x.Grids
	}
	return nil
}

func (x *GuildGve) GetOccupiedProgress() uint32 {
	if x != nil {
		return x.OccupiedProgress
	}
	return 0
}

func (x *GuildGve) GetMaxLevel() uint32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *GuildGve) GetHeroicTimes() uint32 {
	if x != nil {
		return x.HeroicTimes
	}
	return 0
}

func (x *GuildGve) GetSiegeOpenTime() int64 {
	if x != nil {
		return x.SiegeOpenTime
	}
	return 0
}

func (x *GuildGve) GetGveStep() int32 {
	if x != nil {
		return x.GveStep
	}
	return 0
}

func (x *GuildGve) GetSiegeFirstBattleTime() int64 {
	if x != nil {
		return x.SiegeFirstBattleTime
	}
	return 0
}

func (x *GuildGve) GetEditGveFlagLockTime() int64 {
	if x != nil {
		return x.EditGveFlagLockTime
	}
	return 0
}

func (x *GuildGve) GetEditGveFlagLockUser() uint64 {
	if x != nil {
		return x.EditGveFlagLockUser
	}
	return 0
}

func (x *GuildGve) GetOccupiedLevelProgress() map[uint32]uint32 {
	if x != nil {
		return x.OccupiedLevelProgress
	}
	return nil
}

func (x *GuildGve) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GuildGve) GetSiegePassTime() int64 {
	if x != nil {
		return x.SiegePassTime
	}
	return 0
}

//guild
type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId     uint64 `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`        //id
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               //名字
	CreateTime  int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`  //创建时间
	Declaration string `protobuf:"bytes,4,opt,name=declaration,proto3" json:"declaration,omitempty"` //宣言
	Word        string `protobuf:"bytes,5,opt,name=word,proto3" json:"word,omitempty"`               //文字
	Badge       int32  `protobuf:"varint,6,opt,name=badge,proto3" json:"badge,omitempty"`            //徽章
	FlagSide    int32  `protobuf:"varint,7,opt,name=flagSide,proto3" json:"flagSide,omitempty"`      //旗边
	Color       int32  `protobuf:"varint,8,opt,name=color,proto3" json:"color,omitempty"`            //颜色
	//  uint32 level = 9; //等级
	//  uint32 exp = 10; //经验
	Rank       int32                   `protobuf:"varint,11,opt,name=rank,proto3" json:"rank,omitempty"`                                                                                               //排名
	Confirm    bool                    `protobuf:"varint,12,opt,name=confirm,proto3" json:"confirm,omitempty"`                                                                                         //是否需要审核
	LevelLimit uint32                  `protobuf:"varint,13,opt,name=levelLimit,proto3" json:"levelLimit,omitempty"`                                                                                   //加入等级限制
	Members    map[uint64]*GuildPlayer `protobuf:"bytes,14,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //成员
	Logs       []*common.GuildLog      `protobuf:"bytes,15,rep,name=logs,proto3" json:"logs,omitempty"`                                                                                                //事件
	//  map<uint64, bool> requests = 16; //等待审核的列表
	Announcement *common.GuildAnnouncement `protobuf:"bytes,17,opt,name=Announcement,proto3" json:"Announcement,omitempty"`                                                                                    //公告
	TotalPower   uint64                    `protobuf:"varint,19,opt,name=totalPower,proto3" json:"totalPower,omitempty"`                                                                                       //总战斗力
	Qq           uint64                    `protobuf:"varint,20,opt,name=qq,proto3" json:"qq,omitempty"`                                                                                                       //qq号/微信号
	NoticeTimes  uint32                    `protobuf:"varint,21,opt,name=noticeTimes,proto3" json:"noticeTimes,omitempty"`                                                                                     //已经通知次数
	FounderID    uint64                    `protobuf:"varint,22,opt,name=founderID,proto3" json:"founderID,omitempty"`                                                                                         //创始人ID
	Buildings    map[int32]*GuildBuilding  `protobuf:"bytes,23,rep,name=buildings,proto3" json:"buildings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //建筑信息
	// uint32 todayTotalBuildPeopleCount = 24; //今日建造次数
	TodayTotalActivity        uint32                     `protobuf:"varint,25,opt,name=todayTotalActivity,proto3" json:"todayTotalActivity,omitempty"`                                                                                            //今日活跃度
	TodayImportantLog         []*common.GuildLog         `protobuf:"bytes,26,rep,name=todayImportantLog,proto3" json:"todayImportantLog,omitempty"`                                                                                               //今天日重要日报
	YesterdayGuildHonorPlayer []*common.GuildHonorPlayer `protobuf:"bytes,27,rep,name=yesterdayGuildHonorPlayer,proto3" json:"yesterdayGuildHonorPlayer,omitempty"`                                                                               //昨日荣誉榜（玩家可能已经在联盟）
	SetOfficialTypeTime       map[int32]int64            `protobuf:"bytes,28,rep,name=setOfficialTypeTime,proto3" json:"setOfficialTypeTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 设置官职类型时间
	//  uint64 recommendScore = 29; //推荐评分用来排序
	ExchangeGoods             map[uint64]*GuildGoods              `protobuf:"bytes,30,rep,name=exchangeGoods,proto3" json:"exchangeGoods,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                         //交易行物资
	Requests                  map[uint64]int64                    `protobuf:"bytes,31,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                                  //等待审核的列表-申请时间
	Assist                    *GameAssist                         `protobuf:"bytes,32,opt,name=assist,proto3" json:"assist,omitempty"`                                                                                                                                // 助战
	Gve                       *GuildGve                           `protobuf:"bytes,33,opt,name=Gve,proto3" json:"Gve,omitempty"`                                                                                                                                      //联盟gve
	CurrentGveId              uint32                              `protobuf:"varint,34,opt,name=currentGveId,proto3" json:"currentGveId,omitempty"`                                                                                                                   // 当前联盟的gve的id
	MaxPassGveId              uint32                              `protobuf:"varint,35,opt,name=maxPassGveId,proto3" json:"maxPassGveId,omitempty"`                                                                                                                   // 通过的最大关卡id
	GveFirstPassTime          map[uint32]int64                    `protobuf:"bytes,36,rep,name=gveFirstPassTime,proto3" json:"gveFirstPassTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                  // gve关卡首次通关时间
	GveFirstOpenTime          int64                               `protobuf:"varint,37,opt,name=gveFirstOpenTime,proto3" json:"gveFirstOpenTime,omitempty"`                                                                                                           // gve功能开启时间
	IsFake                    bool                                `protobuf:"varint,38,opt,name=isFake,proto3" json:"isFake,omitempty"`                                                                                                                               // 假联盟，保底的
	GveFlags                  map[uint32]*GveFlag                 `protobuf:"bytes,39,rep,name=gveFlags,proto3" json:"gveFlags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                   // gve地图标记，随联盟走，清空gve时候不清空标记，用于后续gve地图使用
	LastRecruit               string                              `protobuf:"bytes,40,opt,name=lastRecruit,proto3" json:"lastRecruit,omitempty"`                                                                                                                      // 上次编辑的招募信息
	GuildRecruitPowerTypeLogs map[int32]*GuildRecruitPowerTypeLog `protobuf:"bytes,41,rep,name=guildRecruitPowerTypeLogs,proto3" json:"guildRecruitPowerTypeLogs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 联盟不同职责的发布招募管理
	WorldBossHp               uint64                              `protobuf:"varint,42,opt,name=worldBossHp,proto3" json:"worldBossHp,omitempty"`                                                                                                                     //世界boss外部血量
	WorldBossDmg              uint64                              `protobuf:"varint,43,opt,name=worldBossDmg,proto3" json:"worldBossDmg,omitempty"`                                                                                                                   //世界boss真实伤害
	FirstBuildUids            []uint64                            `protobuf:"varint,44,rep,packed,name=firstBuildUids,proto3" json:"firstBuildUids,omitempty"`                                                                                                        // 联盟首次捐赠人数组
	IsWeekAnyMemEnterGvg      bool                                `protobuf:"varint,45,opt,name=isWeekAnyMemEnterGvg,proto3" json:"isWeekAnyMemEnterGvg,omitempty"`                                                                                                   // 本周是否有成员已经进入过gvg
	RollInfo                  *GuildRoll                          `protobuf:"bytes,46,opt,name=rollInfo,proto3" json:"rollInfo,omitempty"`                                                                                                                            //本联盟roll信息
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{177}
}

func (x *Guild) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Guild) GetDeclaration() string {
	if x != nil {
		return x.Declaration
	}
	return ""
}

func (x *Guild) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Guild) GetBadge() int32 {
	if x != nil {
		return x.Badge
	}
	return 0
}

func (x *Guild) GetFlagSide() int32 {
	if x != nil {
		return x.FlagSide
	}
	return 0
}

func (x *Guild) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Guild) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Guild) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *Guild) GetLevelLimit() uint32 {
	if x != nil {
		return x.LevelLimit
	}
	return 0
}

func (x *Guild) GetMembers() map[uint64]*GuildPlayer {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Guild) GetLogs() []*common.GuildLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Guild) GetAnnouncement() *common.GuildAnnouncement {
	if x != nil {
		return x.Announcement
	}
	return nil
}

func (x *Guild) GetTotalPower() uint64 {
	if x != nil {
		return x.TotalPower
	}
	return 0
}

func (x *Guild) GetQq() uint64 {
	if x != nil {
		return x.Qq
	}
	return 0
}

func (x *Guild) GetNoticeTimes() uint32 {
	if x != nil {
		return x.NoticeTimes
	}
	return 0
}

func (x *Guild) GetFounderID() uint64 {
	if x != nil {
		return x.FounderID
	}
	return 0
}

func (x *Guild) GetBuildings() map[int32]*GuildBuilding {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *Guild) GetTodayTotalActivity() uint32 {
	if x != nil {
		return x.TodayTotalActivity
	}
	return 0
}

func (x *Guild) GetTodayImportantLog() []*common.GuildLog {
	if x != nil {
		return x.TodayImportantLog
	}
	return nil
}

func (x *Guild) GetYesterdayGuildHonorPlayer() []*common.GuildHonorPlayer {
	if x != nil {
		return x.YesterdayGuildHonorPlayer
	}
	return nil
}

func (x *Guild) GetSetOfficialTypeTime() map[int32]int64 {
	if x != nil {
		return x.SetOfficialTypeTime
	}
	return nil
}

func (x *Guild) GetExchangeGoods() map[uint64]*GuildGoods {
	if x != nil {
		return x.ExchangeGoods
	}
	return nil
}

func (x *Guild) GetRequests() map[uint64]int64 {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *Guild) GetAssist() *GameAssist {
	if x != nil {
		return x.Assist
	}
	return nil
}

func (x *Guild) GetGve() *GuildGve {
	if x != nil {
		return x.Gve
	}
	return nil
}

func (x *Guild) GetCurrentGveId() uint32 {
	if x != nil {
		return x.CurrentGveId
	}
	return 0
}

func (x *Guild) GetMaxPassGveId() uint32 {
	if x != nil {
		return x.MaxPassGveId
	}
	return 0
}

func (x *Guild) GetGveFirstPassTime() map[uint32]int64 {
	if x != nil {
		return x.GveFirstPassTime
	}
	return nil
}

func (x *Guild) GetGveFirstOpenTime() int64 {
	if x != nil {
		return x.GveFirstOpenTime
	}
	return 0
}

func (x *Guild) GetIsFake() bool {
	if x != nil {
		return x.IsFake
	}
	return false
}

func (x *Guild) GetGveFlags() map[uint32]*GveFlag {
	if x != nil {
		return x.GveFlags
	}
	return nil
}

func (x *Guild) GetLastRecruit() string {
	if x != nil {
		return x.LastRecruit
	}
	return ""
}

func (x *Guild) GetGuildRecruitPowerTypeLogs() map[int32]*GuildRecruitPowerTypeLog {
	if x != nil {
		return x.GuildRecruitPowerTypeLogs
	}
	return nil
}

func (x *Guild) GetWorldBossHp() uint64 {
	if x != nil {
		return x.WorldBossHp
	}
	return 0
}

func (x *Guild) GetWorldBossDmg() uint64 {
	if x != nil {
		return x.WorldBossDmg
	}
	return 0
}

func (x *Guild) GetFirstBuildUids() []uint64 {
	if x != nil {
		return x.FirstBuildUids
	}
	return nil
}

func (x *Guild) GetIsWeekAnyMemEnterGvg() bool {
	if x != nil {
		return x.IsWeekAnyMemEnterGvg
	}
	return false
}

func (x *Guild) GetRollInfo() *GuildRoll {
	if x != nil {
		return x.RollInfo
	}
	return nil
}

// 不同职责的发布招募日志
type GuildRecruitPowerTypeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []uint64 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"` // 发布过招募的用户id
}

func (x *GuildRecruitPowerTypeLog) Reset() {
	*x = GuildRecruitPowerTypeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRecruitPowerTypeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRecruitPowerTypeLog) ProtoMessage() {}

func (x *GuildRecruitPowerTypeLog) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRecruitPowerTypeLog.ProtoReflect.Descriptor instead.
func (*GuildRecruitPowerTypeLog) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{178}
}

func (x *GuildRecruitPowerTypeLog) GetUids() []uint64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

// gve相关改变
type GveChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cues  map[int32]bool     `protobuf:"bytes,1,rep,name=cues,proto3" json:"cues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`  // 变化的cue
	Grids map[int32]*GveGrid `protobuf:"bytes,2,rep,name=grids,proto3" json:"grids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 变化的格子
}

func (x *GveChange) Reset() {
	*x = GveChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GveChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GveChange) ProtoMessage() {}

func (x *GveChange) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GveChange.ProtoReflect.Descriptor instead.
func (*GveChange) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{179}
}

func (x *GveChange) GetCues() map[int32]bool {
	if x != nil {
		return x.Cues
	}
	return nil
}

func (x *GveChange) GetGrids() map[int32]*GveGrid {
	if x != nil {
		return x.Grids
	}
	return nil
}

//所有的guild
type Guilds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guilds []*Guild `protobuf:"bytes,1,rep,name=guilds,proto3" json:"guilds,omitempty"` //所有的guild
}

func (x *Guilds) Reset() {
	*x = Guilds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guilds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guilds) ProtoMessage() {}

func (x *Guilds) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guilds.ProtoReflect.Descriptor instead.
func (*Guilds) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{180}
}

func (x *Guilds) GetGuilds() []*Guild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

type StrMansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talents []*common.StrTalent `protobuf:"bytes,1,rep,name=talents,proto3" json:"talents,omitempty"`
}

func (x *StrMansion) Reset() {
	*x = StrMansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrMansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrMansion) ProtoMessage() {}

func (x *StrMansion) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrMansion.ProtoReflect.Descriptor instead.
func (*StrMansion) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{181}
}

func (x *StrMansion) GetTalents() []*common.StrTalent {
	if x != nil {
		return x.Talents
	}
	return nil
}

type Privilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peerage      int32                      `protobuf:"varint,1,opt,name=peerage,proto3" json:"peerage,omitempty"`                //爵位
	GetWagesTime int64                      `protobuf:"varint,2,opt,name=getWagesTime,proto3" json:"getWagesTime,omitempty"`      //俸禄领取时间
	BuyBuffList  []int32                    `protobuf:"varint,3,rep,packed,name=buyBuffList,proto3" json:"buyBuffList,omitempty"` //购买生效buff列表
	AbilityList  []*common.PrivilegeAbility `protobuf:"bytes,4,rep,name=abilityList,proto3" json:"abilityList,omitempty"`         //能力列表
}

func (x *Privilege) Reset() {
	*x = Privilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Privilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Privilege) ProtoMessage() {}

func (x *Privilege) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Privilege.ProtoReflect.Descriptor instead.
func (*Privilege) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{182}
}

func (x *Privilege) GetPeerage() int32 {
	if x != nil {
		return x.Peerage
	}
	return 0
}

func (x *Privilege) GetGetWagesTime() int64 {
	if x != nil {
		return x.GetWagesTime
	}
	return 0
}

func (x *Privilege) GetBuyBuffList() []int32 {
	if x != nil {
		return x.BuyBuffList
	}
	return nil
}

func (x *Privilege) GetAbilityList() []*common.PrivilegeAbility {
	if x != nil {
		return x.AbilityList
	}
	return nil
}

type Vip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftBuyRecord []int32 `protobuf:"varint,1,rep,packed,name=giftBuyRecord,proto3" json:"giftBuyRecord,omitempty"` //已购买特权礼包记录
}

func (x *Vip) Reset() {
	*x = Vip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vip) ProtoMessage() {}

func (x *Vip) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vip.ProtoReflect.Descriptor instead.
func (*Vip) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{183}
}

func (x *Vip) GetGiftBuyRecord() []int32 {
	if x != nil {
		return x.GiftBuyRecord
	}
	return nil
}

//--------------------------------------------------------------------------------------------------充值
// OrderData 订单
type OrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//orderId string = 1; // 订单id
	RechargeID int32 `protobuf:"varint,1,opt,name=rechargeID,proto3" json:"rechargeID,omitempty"` //充值id
	//string producrtId =2 ; // 商品id
	//string productName = 3; // 商品名字
	Amount float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"` // 支付货币数
	Time   int64   `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`      // 支付时间
}

func (x *OrderData) Reset() {
	*x = OrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderData) ProtoMessage() {}

func (x *OrderData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderData.ProtoReflect.Descriptor instead.
func (*OrderData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{184}
}

func (x *OrderData) GetRechargeID() int32 {
	if x != nil {
		return x.RechargeID
	}
	return 0
}

func (x *OrderData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Recharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstRecharges     []int32 `protobuf:"varint,1,rep,packed,name=firstRecharges,proto3" json:"firstRecharges,omitempty"`  // 档位首充记录
	IsWelcomeGiftTaken bool    `protobuf:"varint,2,opt,name=isWelcomeGiftTaken,proto3" json:"isWelcomeGiftTaken,omitempty"` // 是否领取了欢迎奖励
	//map<string, float> order = 3; // 订单
	TotalRechargeDiamond     uint32                `protobuf:"varint,4,opt,name=totalRechargeDiamond,proto3" json:"totalRechargeDiamond,omitempty"`                                                          // 充值获得的钻石总数量
	IsFirstRechargeFinished  bool                  `protobuf:"varint,5,opt,name=isFirstRechargeFinished,proto3" json:"isFirstRechargeFinished,omitempty"`                                                    // 是否完成首充
	IsFirstRechargeGiftTaken bool                  `protobuf:"varint,6,opt,name=isFirstRechargeGiftTaken,proto3" json:"isFirstRechargeGiftTaken,omitempty"`                                                  // 是否领取了首充奖励
	MonthCards               *MonthCards           `protobuf:"bytes,7,opt,name=monthCards,proto3" json:"monthCards,omitempty"`                                                                               // 月卡
	Order                    map[string]*OrderData `protobuf:"bytes,8,rep,name=order,proto3" json:"order,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 订单信息
	Subscribes               *Subscribes           `protobuf:"bytes,9,opt,name=subscribes,proto3" json:"subscribes,omitempty"`                                                                               //订阅
	IsRefundWarned           bool                  `protobuf:"varint,10,opt,name=isRefundWarned,proto3" json:"isRefundWarned,omitempty"`                                                                     // 是否收到过退款警告
}

func (x *Recharge) Reset() {
	*x = Recharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recharge) ProtoMessage() {}

func (x *Recharge) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recharge.ProtoReflect.Descriptor instead.
func (*Recharge) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{185}
}

func (x *Recharge) GetFirstRecharges() []int32 {
	if x != nil {
		return x.FirstRecharges
	}
	return nil
}

func (x *Recharge) GetIsWelcomeGiftTaken() bool {
	if x != nil {
		return x.IsWelcomeGiftTaken
	}
	return false
}

func (x *Recharge) GetTotalRechargeDiamond() uint32 {
	if x != nil {
		return x.TotalRechargeDiamond
	}
	return 0
}

func (x *Recharge) GetIsFirstRechargeFinished() bool {
	if x != nil {
		return x.IsFirstRechargeFinished
	}
	return false
}

func (x *Recharge) GetIsFirstRechargeGiftTaken() bool {
	if x != nil {
		return x.IsFirstRechargeGiftTaken
	}
	return false
}

func (x *Recharge) GetMonthCards() *MonthCards {
	if x != nil {
		return x.MonthCards
	}
	return nil
}

func (x *Recharge) GetOrder() map[string]*OrderData {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Recharge) GetSubscribes() *Subscribes {
	if x != nil {
		return x.Subscribes
	}
	return nil
}

func (x *Recharge) GetIsRefundWarned() bool {
	if x != nil {
		return x.IsRefundWarned
	}
	return false
}

// 充值礼包
type RechargeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*RechargeGiftItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	OpenId int32               `protobuf:"varint,2,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *RechargeGift) Reset() {
	*x = RechargeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeGift) ProtoMessage() {}

func (x *RechargeGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeGift.ProtoReflect.Descriptor instead.
func (*RechargeGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{186}
}

func (x *RechargeGift) GetItems() []*RechargeGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RechargeGift) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

type RechargeGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId   int32 `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`
	BuyCount int32 `protobuf:"varint,2,opt,name=buyCount,proto3" json:"buyCount,omitempty"`
}

func (x *RechargeGiftItem) Reset() {
	*x = RechargeGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeGiftItem) ProtoMessage() {}

func (x *RechargeGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeGiftItem.ProtoReflect.Descriptor instead.
func (*RechargeGiftItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{187}
}

func (x *RechargeGiftItem) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *RechargeGiftItem) GetBuyCount() int32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

type MonthCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // 月卡id
	DueTime           int64 `protobuf:"varint,2,opt,name=dueTime,proto3" json:"dueTime,omitempty"`                     // 到期时间
	LastActiveTime    int64 `protobuf:"varint,4,opt,name=lastActiveTime,proto3" json:"lastActiveTime,omitempty"`       // 上次激活时间
	LastTakePrizeTime int64 `protobuf:"varint,8,opt,name=lastTakePrizeTime,proto3" json:"lastTakePrizeTime,omitempty"` // 上次领奖时间
}

func (x *MonthCard) Reset() {
	*x = MonthCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCard) ProtoMessage() {}

func (x *MonthCard) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCard.ProtoReflect.Descriptor instead.
func (*MonthCard) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{188}
}

func (x *MonthCard) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonthCard) GetDueTime() int64 {
	if x != nil {
		return x.DueTime
	}
	return 0
}

func (x *MonthCard) GetLastActiveTime() int64 {
	if x != nil {
		return x.LastActiveTime
	}
	return 0
}

func (x *MonthCard) GetLastTakePrizeTime() int64 {
	if x != nil {
		return x.LastTakePrizeTime
	}
	return 0
}

type MonthCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards           []*MonthCard     `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	LastTakeBoxTime int64            `protobuf:"varint,2,opt,name=lastTakeBoxTime,proto3" json:"lastTakeBoxTime,omitempty"` // 上次领取宝箱时间
	CardAct         []*MonthCardsAct `protobuf:"bytes,3,rep,name=cardAct,proto3" json:"cardAct,omitempty"`                  //月卡活动信息
}

func (x *MonthCards) Reset() {
	*x = MonthCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCards) ProtoMessage() {}

func (x *MonthCards) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCards.ProtoReflect.Descriptor instead.
func (*MonthCards) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{189}
}

func (x *MonthCards) GetCards() []*MonthCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MonthCards) GetLastTakeBoxTime() int64 {
	if x != nil {
		return x.LastTakeBoxTime
	}
	return 0
}

func (x *MonthCards) GetCardAct() []*MonthCardsAct {
	if x != nil {
		return x.CardAct
	}
	return nil
}

type MonthCardsAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthCardId       uint32 `protobuf:"varint,1,opt,name=monthCardId,proto3" json:"monthCardId,omitempty"`             //普通，至尊
	BuyTimes          int64  `protobuf:"varint,2,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"`                   //购买次数
	LastBuyTime       int64  `protobuf:"varint,3,opt,name=lastBuyTime,proto3" json:"lastBuyTime,omitempty"`             //最后一次购买时间
	ReNewTimes        int64  `protobuf:"varint,4,opt,name=reNewTimes,proto3" json:"reNewTimes,omitempty"`               //续费次数
	LastRenewTime     int64  `protobuf:"varint,5,opt,name=lastRenewTime,proto3" json:"lastRenewTime,omitempty"`         //最后一次续费时间
	LastCommonBuyTime int64  `protobuf:"varint,6,opt,name=lastCommonBuyTime,proto3" json:"lastCommonBuyTime,omitempty"` // 最后一次（无限制条件）购买时间
	CommonBuyTimes    uint32 `protobuf:"varint,7,opt,name=commonBuyTimes,proto3" json:"commonBuyTimes,omitempty"`       // 无限制条件购买次数
}

func (x *MonthCardsAct) Reset() {
	*x = MonthCardsAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardsAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardsAct) ProtoMessage() {}

func (x *MonthCardsAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardsAct.ProtoReflect.Descriptor instead.
func (*MonthCardsAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{190}
}

func (x *MonthCardsAct) GetMonthCardId() uint32 {
	if x != nil {
		return x.MonthCardId
	}
	return 0
}

func (x *MonthCardsAct) GetBuyTimes() int64 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *MonthCardsAct) GetLastBuyTime() int64 {
	if x != nil {
		return x.LastBuyTime
	}
	return 0
}

func (x *MonthCardsAct) GetReNewTimes() int64 {
	if x != nil {
		return x.ReNewTimes
	}
	return 0
}

func (x *MonthCardsAct) GetLastRenewTime() int64 {
	if x != nil {
		return x.LastRenewTime
	}
	return 0
}

func (x *MonthCardsAct) GetLastCommonBuyTime() int64 {
	if x != nil {
		return x.LastCommonBuyTime
	}
	return 0
}

func (x *MonthCardsAct) GetCommonBuyTimes() uint32 {
	if x != nil {
		return x.CommonBuyTimes
	}
	return 0
}

//订阅
type Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 订阅id
	DueTime             int64 `protobuf:"varint,2,opt,name=dueTime,proto3" json:"dueTime,omitempty"`                         // 订阅到期时间戳
	FirstActiveTime     int64 `protobuf:"varint,3,opt,name=firstActiveTime,proto3" json:"firstActiveTime,omitempty"`         // 首次激活时间
	LastActiveTime      int64 `protobuf:"varint,4,opt,name=lastActiveTime,proto3" json:"lastActiveTime,omitempty"`           // 上次激活时间
	LastTakeGiftBagTime int64 `protobuf:"varint,5,opt,name=lastTakeGiftBagTime,proto3" json:"lastTakeGiftBagTime,omitempty"` // 上次领取每日礼包时间戳
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{191}
}

func (x *Subscribe) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subscribe) GetDueTime() int64 {
	if x != nil {
		return x.DueTime
	}
	return 0
}

func (x *Subscribe) GetFirstActiveTime() int64 {
	if x != nil {
		return x.FirstActiveTime
	}
	return 0
}

func (x *Subscribe) GetLastActiveTime() int64 {
	if x != nil {
		return x.LastActiveTime
	}
	return 0
}

func (x *Subscribe) GetLastTakeGiftBagTime() int64 {
	if x != nil {
		return x.LastTakeGiftBagTime
	}
	return 0
}

type Subscribes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subs []*Subscribe `protobuf:"bytes,1,rep,name=subs,proto3" json:"subs,omitempty"`
}

func (x *Subscribes) Reset() {
	*x = Subscribes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribes) ProtoMessage() {}

func (x *Subscribes) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribes.ProtoReflect.Descriptor instead.
func (*Subscribes) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{192}
}

func (x *Subscribes) GetSubs() []*Subscribe {
	if x != nil {
		return x.Subs
	}
	return nil
}

// 直购商店
type CashShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyRecords map[int32]uint32 `protobuf:"bytes,1,rep,name=buyRecords,proto3" json:"buyRecords,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CashShop) Reset() {
	*x = CashShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashShop) ProtoMessage() {}

func (x *CashShop) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashShop.ProtoReflect.Descriptor instead.
func (*CashShop) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{193}
}

func (x *CashShop) GetBuyRecords() map[int32]uint32 {
	if x != nil {
		return x.BuyRecords
	}
	return nil
}

type HandBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedPageIds []int32                         `protobuf:"varint,1,rep,packed,name=finishedPageIds,proto3" json:"finishedPageIds,omitempty"`
	Quests          map[int32]*common.HandBookQuest `protobuf:"bytes,2,rep,name=quests,proto3" json:"quests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HandBook) Reset() {
	*x = HandBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBook) ProtoMessage() {}

func (x *HandBook) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBook.ProtoReflect.Descriptor instead.
func (*HandBook) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{194}
}

func (x *HandBook) GetFinishedPageIds() []int32 {
	if x != nil {
		return x.FinishedPageIds
	}
	return nil
}

func (x *HandBook) GetQuests() map[int32]*common.HandBookQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type DailyExpVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionID int64 `protobuf:"varint,1,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (x *DailyExpVersion) Reset() {
	*x = DailyExpVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyExpVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyExpVersion) ProtoMessage() {}

func (x *DailyExpVersion) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyExpVersion.ProtoReflect.Descriptor instead.
func (*DailyExpVersion) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{195}
}

func (x *DailyExpVersion) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

type DailyExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengedTime       uint32  `protobuf:"varint,1,opt,name=challengedTime,proto3" json:"challengedTime,omitempty"`                    //今日已挑战次数
	DayKillNum           uint32  `protobuf:"varint,2,opt,name=dayKillNum,proto3" json:"dayKillNum,omitempty"`                            //今日累计击杀数
	WeekKillNum          uint32  `protobuf:"varint,3,opt,name=weekKillNum,proto3" json:"weekKillNum,omitempty"`                          //本周累计击杀数
	BestKillNum          uint32  `protobuf:"varint,4,opt,name=bestKillNum,proto3" json:"bestKillNum,omitempty"`                          //历史最高击杀数
	LastChallengePower   uint32  `protobuf:"varint,5,opt,name=lastChallengePower,proto3" json:"lastChallengePower,omitempty"`            //上次挑战时的战斗力
	DayAwardTakenRecords []int32 `protobuf:"varint,6,rep,packed,name=dayAwardTakenRecords,proto3" json:"dayAwardTakenRecords,omitempty"` //今日累计奖励领取记录
	BestOutputNum        uint32  `protobuf:"varint,7,opt,name=bestOutputNum,proto3" json:"bestOutputNum,omitempty"`                      //历史最高产出
	BestOutputPower      uint32  `protobuf:"varint,8,opt,name=bestOutputPower,proto3" json:"bestOutputPower,omitempty"`                  // 最高产出时的战斗力
	DayAwardMaxLevel     uint32  `protobuf:"varint,9,opt,name=dayAwardMaxLevel,proto3" json:"dayAwardMaxLevel,omitempty"`                // 今日可领奖最高等级
	BestInitOutput       uint32  `protobuf:"varint,10,opt,name=bestInitOutput,proto3" json:"bestInitOutput,omitempty"`                   // 历史最高初始产出（不含任何加成）
	ActivityAdd          uint32  `protobuf:"varint,11,opt,name=activityAdd,proto3" json:"activityAdd,omitempty"`                         // 活动加成
	BestRank             uint32  `protobuf:"varint,12,opt,name=bestRank,proto3" json:"bestRank,omitempty"`                               // 历史最高排名
}

func (x *DailyExp) Reset() {
	*x = DailyExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyExp) ProtoMessage() {}

func (x *DailyExp) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyExp.ProtoReflect.Descriptor instead.
func (*DailyExp) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{196}
}

func (x *DailyExp) GetChallengedTime() uint32 {
	if x != nil {
		return x.ChallengedTime
	}
	return 0
}

func (x *DailyExp) GetDayKillNum() uint32 {
	if x != nil {
		return x.DayKillNum
	}
	return 0
}

func (x *DailyExp) GetWeekKillNum() uint32 {
	if x != nil {
		return x.WeekKillNum
	}
	return 0
}

func (x *DailyExp) GetBestKillNum() uint32 {
	if x != nil {
		return x.BestKillNum
	}
	return 0
}

func (x *DailyExp) GetLastChallengePower() uint32 {
	if x != nil {
		return x.LastChallengePower
	}
	return 0
}

func (x *DailyExp) GetDayAwardTakenRecords() []int32 {
	if x != nil {
		return x.DayAwardTakenRecords
	}
	return nil
}

func (x *DailyExp) GetBestOutputNum() uint32 {
	if x != nil {
		return x.BestOutputNum
	}
	return 0
}

func (x *DailyExp) GetBestOutputPower() uint32 {
	if x != nil {
		return x.BestOutputPower
	}
	return 0
}

func (x *DailyExp) GetDayAwardMaxLevel() uint32 {
	if x != nil {
		return x.DayAwardMaxLevel
	}
	return 0
}

func (x *DailyExp) GetBestInitOutput() uint32 {
	if x != nil {
		return x.BestInitOutput
	}
	return 0
}

func (x *DailyExp) GetActivityAdd() uint32 {
	if x != nil {
		return x.ActivityAdd
	}
	return 0
}

func (x *DailyExp) GetBestRank() uint32 {
	if x != nil {
		return x.BestRank
	}
	return 0
}

type DailyCoinVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionID int64 `protobuf:"varint,1,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (x *DailyCoinVersion) Reset() {
	*x = DailyCoinVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyCoinVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCoinVersion) ProtoMessage() {}

func (x *DailyCoinVersion) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCoinVersion.ProtoReflect.Descriptor instead.
func (*DailyCoinVersion) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{197}
}

func (x *DailyCoinVersion) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

type DailyCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengedTime       uint32  `protobuf:"varint,1,opt,name=challengedTime,proto3" json:"challengedTime,omitempty"`                    //今日已挑战次数
	DayDamage            uint64  `protobuf:"varint,2,opt,name=dayDamage,proto3" json:"dayDamage,omitempty"`                              // 今日累计伤害
	WeekDamage           uint64  `protobuf:"varint,3,opt,name=weekDamage,proto3" json:"weekDamage,omitempty"`                            // 本周累计伤害
	BestDamage           uint64  `protobuf:"varint,4,opt,name=bestDamage,proto3" json:"bestDamage,omitempty"`                            // 历史最高伤害
	LastChallengePower   uint32  `protobuf:"varint,5,opt,name=lastChallengePower,proto3" json:"lastChallengePower,omitempty"`            //上次挑战时的战斗力
	DayAwardTakenRecords []int32 `protobuf:"varint,6,rep,packed,name=dayAwardTakenRecords,proto3" json:"dayAwardTakenRecords,omitempty"` //今日累计奖励领取记录
	BestOutputNum        uint32  `protobuf:"varint,7,opt,name=bestOutputNum,proto3" json:"bestOutputNum,omitempty"`                      //历史最高产出
	BestOutputPower      uint32  `protobuf:"varint,8,opt,name=bestOutputPower,proto3" json:"bestOutputPower,omitempty"`                  // 历史最高产出时的战斗力
	BestKillNum          uint32  `protobuf:"varint,9,opt,name=bestKillNum,proto3" json:"bestKillNum,omitempty"`                          // 历史最高击杀数
	BestRoundNum         uint32  `protobuf:"varint,10,opt,name=bestRoundNum,proto3" json:"bestRoundNum,omitempty"`                       // 历史最高波数
	DayAwardMaxLevel     uint32  `protobuf:"varint,11,opt,name=dayAwardMaxLevel,proto3" json:"dayAwardMaxLevel,omitempty"`               // 今日可领奖最高等级
	BestInitOutput       uint32  `protobuf:"varint,12,opt,name=bestInitOutput,proto3" json:"bestInitOutput,omitempty"`                   // 历史最高初始产出（不含任何加成）
	ActivityAdd          uint32  `protobuf:"varint,13,opt,name=activityAdd,proto3" json:"activityAdd,omitempty"`                         // 活动加成
	BestRank             uint32  `protobuf:"varint,14,opt,name=bestRank,proto3" json:"bestRank,omitempty"`                               // 历史最高排名
}

func (x *DailyCoin) Reset() {
	*x = DailyCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCoin) ProtoMessage() {}

func (x *DailyCoin) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCoin.ProtoReflect.Descriptor instead.
func (*DailyCoin) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{198}
}

func (x *DailyCoin) GetChallengedTime() uint32 {
	if x != nil {
		return x.ChallengedTime
	}
	return 0
}

func (x *DailyCoin) GetDayDamage() uint64 {
	if x != nil {
		return x.DayDamage
	}
	return 0
}

func (x *DailyCoin) GetWeekDamage() uint64 {
	if x != nil {
		return x.WeekDamage
	}
	return 0
}

func (x *DailyCoin) GetBestDamage() uint64 {
	if x != nil {
		return x.BestDamage
	}
	return 0
}

func (x *DailyCoin) GetLastChallengePower() uint32 {
	if x != nil {
		return x.LastChallengePower
	}
	return 0
}

func (x *DailyCoin) GetDayAwardTakenRecords() []int32 {
	if x != nil {
		return x.DayAwardTakenRecords
	}
	return nil
}

func (x *DailyCoin) GetBestOutputNum() uint32 {
	if x != nil {
		return x.BestOutputNum
	}
	return 0
}

func (x *DailyCoin) GetBestOutputPower() uint32 {
	if x != nil {
		return x.BestOutputPower
	}
	return 0
}

func (x *DailyCoin) GetBestKillNum() uint32 {
	if x != nil {
		return x.BestKillNum
	}
	return 0
}

func (x *DailyCoin) GetBestRoundNum() uint32 {
	if x != nil {
		return x.BestRoundNum
	}
	return 0
}

func (x *DailyCoin) GetDayAwardMaxLevel() uint32 {
	if x != nil {
		return x.DayAwardMaxLevel
	}
	return 0
}

func (x *DailyCoin) GetBestInitOutput() uint32 {
	if x != nil {
		return x.BestInitOutput
	}
	return 0
}

func (x *DailyCoin) GetActivityAdd() uint32 {
	if x != nil {
		return x.ActivityAdd
	}
	return 0
}

func (x *DailyCoin) GetBestRank() uint32 {
	if x != nil {
		return x.BestRank
	}
	return 0
}

//--------------------------------------------------------------------------------------------------沙盘
type Drama struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stages             []*common.DramaStage      `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty"`                                                                                                        // 关卡
	Enemy              []*DramaBattle            `protobuf:"bytes,2,rep,name=enemy,proto3" json:"enemy,omitempty"`                                                                                                          // 战斗信息
	PlayerLevel        uint32                    `protobuf:"varint,3,opt,name=playerLevel,proto3" json:"playerLevel,omitempty"`                                                                                             // 玩家五点等级；新角色为第一次获取战斗信息时等级
	MaxSweepLevel      uint32                    `protobuf:"varint,4,opt,name=maxSweepLevel,proto3" json:"maxSweepLevel,omitempty"`                                                                                         // 重置最大关
	BoxItemScore       []int32                   `protobuf:"varint,5,rep,packed,name=boxItemScore,proto3" json:"boxItemScore,omitempty"`                                                                                    // 宝箱积分
	OwnSkills          []*common.Skill           `protobuf:"bytes,6,rep,name=ownSkills,proto3" json:"ownSkills,omitempty"`                                                                                                  // 已经拥有的buff
	BoxCount           int32                     `protobuf:"varint,7,opt,name=boxCount,proto3" json:"boxCount,omitempty"`                                                                                                   // 当前生成宝箱个数
	BoxScore           int32                     `protobuf:"varint,8,opt,name=boxScore,proto3" json:"boxScore,omitempty"`                                                                                                   // 当前生成宝箱积分
	DieCommanders      []int32                   `protobuf:"varint,9,rep,packed,name=dieCommanders,proto3" json:"dieCommanders,omitempty"`                                                                                  // 死亡主将
	ResetTime          int64                     `protobuf:"varint,10,opt,name=resetTime,proto3" json:"resetTime,omitempty"`                                                                                                // 重置时间
	TreasureTimes      int32                     `protobuf:"varint,11,opt,name=treasureTimes,proto3" json:"treasureTimes,omitempty"`                                                                                        // 已挖宝次数
	NeedPieceNum       int32                     `protobuf:"varint,12,opt,name=needPieceNum,proto3" json:"needPieceNum,omitempty"`                                                                                          // 需要碎片数
	TreasurePieceCount int32                     `protobuf:"varint,13,opt,name=treasurePieceCount,proto3" json:"treasurePieceCount,omitempty"`                                                                              // 藏宝图碎片数量
	TreasurePos        int32                     `protobuf:"varint,14,opt,name=treasurePos,proto3" json:"treasurePos,omitempty"`                                                                                            // 宝物位置
	OpenBoxCount       int32                     `protobuf:"varint,15,opt,name=openBoxCount,proto3" json:"openBoxCount,omitempty"`                                                                                          // 开启宝箱次数
	StartTimes         int32                     `protobuf:"varint,16,opt,name=startTimes,proto3" json:"startTimes,omitempty"`                                                                                              // 开始次数
	AssistCommanders   []*common.AssistCommander `protobuf:"bytes,17,rep,name=assistCommanders,proto3" json:"assistCommanders,omitempty"`                                                                                   // 助战主将
	AssistRewards      []*AssistReward           `protobuf:"bytes,18,rep,name=assistRewards,proto3" json:"assistRewards,omitempty"`                                                                                         // 记录是否领过奖
	CommanderHp        map[int32]int32           `protobuf:"bytes,19,rep,name=commanderHp,proto3" json:"commanderHp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 主将hp
	ResetPower         uint32                    `protobuf:"varint,20,opt,name=resetPower,proto3" json:"resetPower,omitempty"`                                                                                              // 重置时战斗力
	SeasonID           int32                     `protobuf:"varint,21,opt,name=seasonID,proto3" json:"seasonID,omitempty"`                                                                                                  //赛季id
	EmperorId          int32                     `protobuf:"varint,22,opt,name=emperorId,proto3" json:"emperorId,omitempty"`                                                                                                //君主id
	CanStartTimes      int32                     `protobuf:"varint,23,opt,name=canStartTimes,proto3" json:"canStartTimes,omitempty"`                                                                                        //可以开始打剧本的次数
	GainBuffFlag       map[int32]bool            `protobuf:"bytes,24,rep,name=gainBuffFlag,proto3" json:"gainBuffFlag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //每个君主buff只能获得一次
	ActRewardTimes     uint32                    `protobuf:"varint,26,opt,name=actRewardTimes,proto3" json:"actRewardTimes,omitempty"`                                                                                      // 活动奖励次数
	DieBeasts          []int32                   `protobuf:"varint,27,rep,packed,name=dieBeasts,proto3" json:"dieBeasts,omitempty"`                                                                                         // 死亡神兽
	BeastHp            map[int32]int32           `protobuf:"bytes,28,rep,name=beastHp,proto3" json:"beastHp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // 神兽hp
	CurOneClickSweep   int32                     `protobuf:"varint,29,opt,name=curOneClickSweep,proto3" json:"curOneClickSweep,omitempty"`                                                                                  // 一键扫荡当前关卡
	IsPassLastLevel    bool                      `protobuf:"varint,30,opt,name=isPassLastLevel,proto3" json:"isPassLastLevel,omitempty"`                                                                                    // 剧本是否通关过
}

func (x *Drama) Reset() {
	*x = Drama{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Drama) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drama) ProtoMessage() {}

func (x *Drama) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drama.ProtoReflect.Descriptor instead.
func (*Drama) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{199}
}

func (x *Drama) GetStages() []*common.DramaStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Drama) GetEnemy() []*DramaBattle {
	if x != nil {
		return x.Enemy
	}
	return nil
}

func (x *Drama) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *Drama) GetMaxSweepLevel() uint32 {
	if x != nil {
		return x.MaxSweepLevel
	}
	return 0
}

func (x *Drama) GetBoxItemScore() []int32 {
	if x != nil {
		return x.BoxItemScore
	}
	return nil
}

func (x *Drama) GetOwnSkills() []*common.Skill {
	if x != nil {
		return x.OwnSkills
	}
	return nil
}

func (x *Drama) GetBoxCount() int32 {
	if x != nil {
		return x.BoxCount
	}
	return 0
}

func (x *Drama) GetBoxScore() int32 {
	if x != nil {
		return x.BoxScore
	}
	return 0
}

func (x *Drama) GetDieCommanders() []int32 {
	if x != nil {
		return x.DieCommanders
	}
	return nil
}

func (x *Drama) GetResetTime() int64 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *Drama) GetTreasureTimes() int32 {
	if x != nil {
		return x.TreasureTimes
	}
	return 0
}

func (x *Drama) GetNeedPieceNum() int32 {
	if x != nil {
		return x.NeedPieceNum
	}
	return 0
}

func (x *Drama) GetTreasurePieceCount() int32 {
	if x != nil {
		return x.TreasurePieceCount
	}
	return 0
}

func (x *Drama) GetTreasurePos() int32 {
	if x != nil {
		return x.TreasurePos
	}
	return 0
}

func (x *Drama) GetOpenBoxCount() int32 {
	if x != nil {
		return x.OpenBoxCount
	}
	return 0
}

func (x *Drama) GetStartTimes() int32 {
	if x != nil {
		return x.StartTimes
	}
	return 0
}

func (x *Drama) GetAssistCommanders() []*common.AssistCommander {
	if x != nil {
		return x.AssistCommanders
	}
	return nil
}

func (x *Drama) GetAssistRewards() []*AssistReward {
	if x != nil {
		return x.AssistRewards
	}
	return nil
}

func (x *Drama) GetCommanderHp() map[int32]int32 {
	if x != nil {
		return x.CommanderHp
	}
	return nil
}

func (x *Drama) GetResetPower() uint32 {
	if x != nil {
		return x.ResetPower
	}
	return 0
}

func (x *Drama) GetSeasonID() int32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *Drama) GetEmperorId() int32 {
	if x != nil {
		return x.EmperorId
	}
	return 0
}

func (x *Drama) GetCanStartTimes() int32 {
	if x != nil {
		return x.CanStartTimes
	}
	return 0
}

func (x *Drama) GetGainBuffFlag() map[int32]bool {
	if x != nil {
		return x.GainBuffFlag
	}
	return nil
}

func (x *Drama) GetActRewardTimes() uint32 {
	if x != nil {
		return x.ActRewardTimes
	}
	return 0
}

func (x *Drama) GetDieBeasts() []int32 {
	if x != nil {
		return x.DieBeasts
	}
	return nil
}

func (x *Drama) GetBeastHp() map[int32]int32 {
	if x != nil {
		return x.BeastHp
	}
	return nil
}

func (x *Drama) GetCurOneClickSweep() int32 {
	if x != nil {
		return x.CurOneClickSweep
	}
	return 0
}

func (x *Drama) GetIsPassLastLevel() bool {
	if x != nil {
		return x.IsPassLastLevel
	}
	return false
}

type AssistReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID    uint64 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	CommanderID int32  `protobuf:"varint,2,opt,name=commanderID,proto3" json:"commanderID,omitempty"`
}

func (x *AssistReward) Reset() {
	*x = AssistReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistReward) ProtoMessage() {}

func (x *AssistReward) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistReward.ProtoReflect.Descriptor instead.
func (*AssistReward) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{200}
}

func (x *AssistReward) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *AssistReward) GetCommanderID() int32 {
	if x != nil {
		return x.CommanderID
	}
	return 0
}

type DramaBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageID       int32                     `protobuf:"varint,1,opt,name=stageID,proto3" json:"stageID,omitempty"`
	EnemyPlayerID uint64                    `protobuf:"varint,2,opt,name=enemyPlayerID,proto3" json:"enemyPlayerID,omitempty"`
	BattleInfo    *common.BattlePlayerInfo  `protobuf:"bytes,3,opt,name=battleInfo,proto3" json:"battleInfo,omitempty"`
	Power         uint32                    `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`                // 敌方当前战斗力
	DieCommanders []*common.BattleCommander `protobuf:"bytes,5,rep,name=dieCommanders,proto3" json:"dieCommanders,omitempty"` // 死亡主将
	GenPower      uint32                    `protobuf:"varint,6,opt,name=genPower,proto3" json:"genPower,omitempty"`          // 选取敌人时的战斗力
	DieBeasts     []*common.BattleBeast     `protobuf:"bytes,7,rep,name=dieBeasts,proto3" json:"dieBeasts,omitempty"`         // 死亡神兽
}

func (x *DramaBattle) Reset() {
	*x = DramaBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaBattle) ProtoMessage() {}

func (x *DramaBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaBattle.ProtoReflect.Descriptor instead.
func (*DramaBattle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{201}
}

func (x *DramaBattle) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *DramaBattle) GetEnemyPlayerID() uint64 {
	if x != nil {
		return x.EnemyPlayerID
	}
	return 0
}

func (x *DramaBattle) GetBattleInfo() *common.BattlePlayerInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

func (x *DramaBattle) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *DramaBattle) GetDieCommanders() []*common.BattleCommander {
	if x != nil {
		return x.DieCommanders
	}
	return nil
}

func (x *DramaBattle) GetGenPower() uint32 {
	if x != nil {
		return x.GenPower
	}
	return 0
}

func (x *DramaBattle) GetDieBeasts() []*common.BattleBeast {
	if x != nil {
		return x.DieBeasts
	}
	return nil
}

type DramaRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*DramaPlayer `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *DramaRank) Reset() {
	*x = DramaRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaRank) ProtoMessage() {}

func (x *DramaRank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaRank.ProtoReflect.Descriptor instead.
func (*DramaRank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{202}
}

func (x *DramaRank) GetPlayers() []*DramaPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

// DramaPlayer
type DramaPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power    uint32 `protobuf:"varint,1,opt,name=Power,proto3" json:"Power,omitempty"`
	PlayerID uint64 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (x *DramaPlayer) Reset() {
	*x = DramaPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DramaPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DramaPlayer) ProtoMessage() {}

func (x *DramaPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DramaPlayer.ProtoReflect.Descriptor instead.
func (*DramaPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{203}
}

func (x *DramaPlayer) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *DramaPlayer) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryChapters []*HistoryChapter `protobuf:"bytes,1,rep,name=historyChapters,proto3" json:"historyChapters,omitempty"` // 史记章节
	CurChapterId    int32             `protobuf:"varint,2,opt,name=curChapterId,proto3" json:"curChapterId,omitempty"`      // 当前章节id
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{204}
}

func (x *History) GetHistoryChapters() []*HistoryChapter {
	if x != nil {
		return x.HistoryChapters
	}
	return nil
}

func (x *History) GetCurChapterId() int32 {
	if x != nil {
		return x.CurChapterId
	}
	return 0
}

type HistoryChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterID      int32   `protobuf:"varint,1,opt,name=chapterID,proto3" json:"chapterID,omitempty"`                  // 章节id
	FinishMissions []int32 `protobuf:"varint,2,rep,packed,name=finishMissions,proto3" json:"finishMissions,omitempty"` // 已完成的史记任务
	TakenAwardIds  []int32 `protobuf:"varint,3,rep,packed,name=takenAwardIds,proto3" json:"takenAwardIds,omitempty"`   // 已领取的史记章节奖励
}

func (x *HistoryChapter) Reset() {
	*x = HistoryChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryChapter) ProtoMessage() {}

func (x *HistoryChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryChapter.ProtoReflect.Descriptor instead.
func (*HistoryChapter) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{205}
}

func (x *HistoryChapter) GetChapterID() int32 {
	if x != nil {
		return x.ChapterID
	}
	return 0
}

func (x *HistoryChapter) GetFinishMissions() []int32 {
	if x != nil {
		return x.FinishMissions
	}
	return nil
}

func (x *HistoryChapter) GetTakenAwardIds() []int32 {
	if x != nil {
		return x.TakenAwardIds
	}
	return nil
}

type ChibiAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID        uint64                  `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	BattleCommander *common.BattleCommander `protobuf:"bytes,2,opt,name=BattleCommander,proto3" json:"BattleCommander,omitempty"`
	FuncID          int32                   `protobuf:"varint,3,opt,name=funcID,proto3" json:"funcID,omitempty"`
}

func (x *ChibiAssist) Reset() {
	*x = ChibiAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiAssist) ProtoMessage() {}

func (x *ChibiAssist) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiAssist.ProtoReflect.Descriptor instead.
func (*ChibiAssist) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{206}
}

func (x *ChibiAssist) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ChibiAssist) GetBattleCommander() *common.BattleCommander {
	if x != nil {
		return x.BattleCommander
	}
	return nil
}

func (x *ChibiAssist) GetFuncID() int32 {
	if x != nil {
		return x.FuncID
	}
	return 0
}

type Chibi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurStageID          int32                         `protobuf:"varint,1,opt,name=curStageID,proto3" json:"curStageID,omitempty"`                                                                                                 // 当前关卡id
	CurStageStartTime   int64                         `protobuf:"varint,2,opt,name=curStageStartTime,proto3" json:"curStageStartTime,omitempty"`                                                                                   // 当前关卡开始时间戳 用于记录当前关卡驻留时间
	ChallengedTimes     uint32                        `protobuf:"varint,3,opt,name=challengedTimes,proto3" json:"challengedTimes,omitempty"`                                                                                       // 今日已挑战次数
	BuyChallengeTimes   uint32                        `protobuf:"varint,4,opt,name=buyChallengeTimes,proto3" json:"buyChallengeTimes,omitempty"`                                                                                   // 今日已购买挑战次数
	TargetAwardTakenIds []int32                       `protobuf:"varint,5,rep,packed,name=targetAwardTakenIds,proto3" json:"targetAwardTakenIds,omitempty"`                                                                        // 目标奖励领取记录
	FinishedStages      map[int32]*ChibiFinishedStage `protobuf:"bytes,6,rep,name=finishedStages,proto3" json:"finishedStages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 已完成的关卡数据
	FightProgress       *ChibiFightProgress           `protobuf:"bytes,7,opt,name=fightProgress,proto3" json:"fightProgress,omitempty"`                                                                                            // 战斗进度
	Assist              *ChibiAssist                  `protobuf:"bytes,8,opt,name=assist,proto3" json:"assist,omitempty"`                                                                                                          // 赤壁第一场保存数据(第二场打完后统一结算)
	Formation1          *common.Formation             `protobuf:"bytes,9,opt,name=formation1,proto3" json:"formation1,omitempty"`
	Formation2          *common.Formation             `protobuf:"bytes,10,opt,name=formation2,proto3" json:"formation2,omitempty"`
}

func (x *Chibi) Reset() {
	*x = Chibi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chibi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chibi) ProtoMessage() {}

func (x *Chibi) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chibi.ProtoReflect.Descriptor instead.
func (*Chibi) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{207}
}

func (x *Chibi) GetCurStageID() int32 {
	if x != nil {
		return x.CurStageID
	}
	return 0
}

func (x *Chibi) GetCurStageStartTime() int64 {
	if x != nil {
		return x.CurStageStartTime
	}
	return 0
}

func (x *Chibi) GetChallengedTimes() uint32 {
	if x != nil {
		return x.ChallengedTimes
	}
	return 0
}

func (x *Chibi) GetBuyChallengeTimes() uint32 {
	if x != nil {
		return x.BuyChallengeTimes
	}
	return 0
}

func (x *Chibi) GetTargetAwardTakenIds() []int32 {
	if x != nil {
		return x.TargetAwardTakenIds
	}
	return nil
}

func (x *Chibi) GetFinishedStages() map[int32]*ChibiFinishedStage {
	if x != nil {
		return x.FinishedStages
	}
	return nil
}

func (x *Chibi) GetFightProgress() *ChibiFightProgress {
	if x != nil {
		return x.FightProgress
	}
	return nil
}

func (x *Chibi) GetAssist() *ChibiAssist {
	if x != nil {
		return x.Assist
	}
	return nil
}

func (x *Chibi) GetFormation1() *common.Formation {
	if x != nil {
		return x.Formation1
	}
	return nil
}

func (x *Chibi) GetFormation2() *common.Formation {
	if x != nil {
		return x.Formation2
	}
	return nil
}

type ChibiFinishedStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastFinishDate int64  `protobuf:"varint,1,opt,name=lastFinishDate,proto3" json:"lastFinishDate,omitempty"` // 最近通关时间
	MinFinishTime  uint32 `protobuf:"varint,2,opt,name=minFinishTime,proto3" json:"minFinishTime,omitempty"`   // 最速通关时间
	MinFinishPower uint32 `protobuf:"varint,3,opt,name=minFinishPower,proto3" json:"minFinishPower,omitempty"` // 最低通关战力
}

func (x *ChibiFinishedStage) Reset() {
	*x = ChibiFinishedStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiFinishedStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiFinishedStage) ProtoMessage() {}

func (x *ChibiFinishedStage) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiFinishedStage.ProtoReflect.Descriptor instead.
func (*ChibiFinishedStage) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{208}
}

func (x *ChibiFinishedStage) GetLastFinishDate() int64 {
	if x != nil {
		return x.LastFinishDate
	}
	return 0
}

func (x *ChibiFinishedStage) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

func (x *ChibiFinishedStage) GetMinFinishPower() uint32 {
	if x != nil {
		return x.MinFinishPower
	}
	return 0
}

type ChibiFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightIndex  int32  `protobuf:"varint,1,opt,name=fightIndex,proto3" json:"fightIndex,omitempty"`   // 战斗场次
	FinishTime  uint32 `protobuf:"varint,2,opt,name=finishTime,proto3" json:"finishTime,omitempty"`   // 通关时间
	FinishPower uint32 `protobuf:"varint,3,opt,name=finishPower,proto3" json:"finishPower,omitempty"` // 通关战力
	BattleId    uint64 `protobuf:"varint,4,opt,name=battleId,proto3" json:"battleId,omitempty"`       // 战斗id
}

func (x *ChibiFight) Reset() {
	*x = ChibiFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiFight) ProtoMessage() {}

func (x *ChibiFight) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiFight.ProtoReflect.Descriptor instead.
func (*ChibiFight) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{209}
}

func (x *ChibiFight) GetFightIndex() int32 {
	if x != nil {
		return x.FightIndex
	}
	return 0
}

func (x *ChibiFight) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *ChibiFight) GetFinishPower() uint32 {
	if x != nil {
		return x.FinishPower
	}
	return 0
}

func (x *ChibiFight) GetBattleId() uint64 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

type ChibiFightProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    int32         `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`       // 关卡id
	FinishDate int64         `protobuf:"varint,2,opt,name=finishDate,proto3" json:"finishDate,omitempty"` // 通关日期
	Fights     []*ChibiFight `protobuf:"bytes,3,rep,name=fights,proto3" json:"fights,omitempty"`          // 战斗数据
}

func (x *ChibiFightProgress) Reset() {
	*x = ChibiFightProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiFightProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiFightProgress) ProtoMessage() {}

func (x *ChibiFightProgress) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiFightProgress.ProtoReflect.Descriptor instead.
func (*ChibiFightProgress) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{210}
}

func (x *ChibiFightProgress) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChibiFightProgress) GetFinishDate() int64 {
	if x != nil {
		return x.FinishDate
	}
	return 0
}

func (x *ChibiFightProgress) GetFights() []*ChibiFight {
	if x != nil {
		return x.Fights
	}
	return nil
}

type ChibiRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   int32  `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`     // 关卡id
	FirstName string `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`  // 首通玩家名字
	FinishNum uint32 `protobuf:"varint,3,opt,name=finishNum,proto3" json:"finishNum,omitempty"` // 通关玩家数量
	FirstId   uint64 `protobuf:"varint,4,opt,name=firstId,proto3" json:"firstId,omitempty"`     // 首通玩家id
}

func (x *ChibiRecord) Reset() {
	*x = ChibiRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiRecord) ProtoMessage() {}

func (x *ChibiRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiRecord.ProtoReflect.Descriptor instead.
func (*ChibiRecord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{211}
}

func (x *ChibiRecord) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChibiRecord) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ChibiRecord) GetFinishNum() uint32 {
	if x != nil {
		return x.FinishNum
	}
	return 0
}

func (x *ChibiRecord) GetFirstId() uint64 {
	if x != nil {
		return x.FirstId
	}
	return 0
}

type ChibiRankPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID  uint64   `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Score     int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	ReplayIds []uint64 `protobuf:"varint,3,rep,packed,name=replayIds,proto3" json:"replayIds,omitempty"`
}

func (x *ChibiRankPlayer) Reset() {
	*x = ChibiRankPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiRankPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiRankPlayer) ProtoMessage() {}

func (x *ChibiRankPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiRankPlayer.ProtoReflect.Descriptor instead.
func (*ChibiRankPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{212}
}

func (x *ChibiRankPlayer) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ChibiRankPlayer) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChibiRankPlayer) GetReplayIds() []uint64 {
	if x != nil {
		return x.ReplayIds
	}
	return nil
}

type ChibiRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType    int32              `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"`
	StageID     int32              `protobuf:"varint,2,opt,name=stageID,proto3" json:"stageID,omitempty"`
	RankPlayers []*ChibiRankPlayer `protobuf:"bytes,3,rep,name=rankPlayers,proto3" json:"rankPlayers,omitempty"`
}

func (x *ChibiRank) Reset() {
	*x = ChibiRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiRank) ProtoMessage() {}

func (x *ChibiRank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiRank.ProtoReflect.Descriptor instead.
func (*ChibiRank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{213}
}

func (x *ChibiRank) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ChibiRank) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *ChibiRank) GetRankPlayers() []*ChibiRankPlayer {
	if x != nil {
		return x.RankPlayers
	}
	return nil
}

type ChibiStageRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageID int32                `protobuf:"varint,1,opt,name=stageID,proto3" json:"stageID,omitempty"`
	Ranks   map[int32]*ChibiRank `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChibiStageRank) Reset() {
	*x = ChibiStageRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiStageRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiStageRank) ProtoMessage() {}

func (x *ChibiStageRank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiStageRank.ProtoReflect.Descriptor instead.
func (*ChibiStageRank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{214}
}

func (x *ChibiStageRank) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *ChibiStageRank) GetRanks() map[int32]*ChibiRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type ChibiReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint64   `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	FinishDate  int64    `protobuf:"varint,2,opt,name=finishDate,proto3" json:"finishDate,omitempty"`
	FinishPower uint32   `protobuf:"varint,3,opt,name=finishPower,proto3" json:"finishPower,omitempty"`
	BattleIds   []uint64 `protobuf:"varint,4,rep,packed,name=battleIds,proto3" json:"battleIds,omitempty"`
}

func (x *ChibiReport) Reset() {
	*x = ChibiReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiReport) ProtoMessage() {}

func (x *ChibiReport) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiReport.ProtoReflect.Descriptor instead.
func (*ChibiReport) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{215}
}

func (x *ChibiReport) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ChibiReport) GetFinishDate() int64 {
	if x != nil {
		return x.FinishDate
	}
	return 0
}

func (x *ChibiReport) GetFinishPower() uint32 {
	if x != nil {
		return x.FinishPower
	}
	return 0
}

func (x *ChibiReport) GetBattleIds() []uint64 {
	if x != nil {
		return x.BattleIds
	}
	return nil
}

type ChibiStageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      int32          `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DateReports  []*ChibiReport `protobuf:"bytes,2,rep,name=dateReports,proto3" json:"dateReports,omitempty"`
	PowerReports []*ChibiReport `protobuf:"bytes,3,rep,name=powerReports,proto3" json:"powerReports,omitempty"`
}

func (x *ChibiStageReport) Reset() {
	*x = ChibiStageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiStageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiStageReport) ProtoMessage() {}

func (x *ChibiStageReport) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiStageReport.ProtoReflect.Descriptor instead.
func (*ChibiStageReport) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{216}
}

func (x *ChibiStageReport) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChibiStageReport) GetDateReports() []*ChibiReport {
	if x != nil {
		return x.DateReports
	}
	return nil
}

func (x *ChibiStageReport) GetPowerReports() []*ChibiReport {
	if x != nil {
		return x.PowerReports
	}
	return nil
}

type ChibiStageRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records map[int32]*ChibiRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChibiStageRecords) Reset() {
	*x = ChibiStageRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChibiStageRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChibiStageRecords) ProtoMessage() {}

func (x *ChibiStageRecords) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChibiStageRecords.ProtoReflect.Descriptor instead.
func (*ChibiStageRecords) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{217}
}

func (x *ChibiStageRecords) GetRecords() map[int32]*ChibiRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalExp         uint32       `protobuf:"varint,1,opt,name=totalExp,proto3" json:"totalExp,omitempty"`
	TotalLevel       uint32       `protobuf:"varint,2,opt,name=totalLevel,proto3" json:"totalLevel,omitempty"`
	TotalPower       uint32       `protobuf:"varint,3,opt,name=totalPower,proto3" json:"totalPower,omitempty"`
	AlbumItems       []*AlbumItem `protobuf:"bytes,4,rep,name=albumItems,proto3" json:"albumItems,omitempty"`
	ActivedAllusions []int32      `protobuf:"varint,5,rep,packed,name=activedAllusions,proto3" json:"activedAllusions,omitempty"` // 已激活的绘卷
	AlbumQuas        []*AlbumQua  `protobuf:"bytes,6,rep,name=albumQuas,proto3" json:"albumQuas,omitempty"`                       // 关系谱
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{218}
}

func (x *Album) GetTotalExp() uint32 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

func (x *Album) GetTotalLevel() uint32 {
	if x != nil {
		return x.TotalLevel
	}
	return 0
}

func (x *Album) GetTotalPower() uint32 {
	if x != nil {
		return x.TotalPower
	}
	return 0
}

func (x *Album) GetAlbumItems() []*AlbumItem {
	if x != nil {
		return x.AlbumItems
	}
	return nil
}

func (x *Album) GetActivedAllusions() []int32 {
	if x != nil {
		return x.ActivedAllusions
	}
	return nil
}

func (x *Album) GetAlbumQuas() []*AlbumQua {
	if x != nil {
		return x.AlbumQuas
	}
	return nil
}

type AlbumItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//   uint32 exp = 2;
	Level uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"` //   uint32 power = 4;
}

func (x *AlbumItem) Reset() {
	*x = AlbumItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumItem) ProtoMessage() {}

func (x *AlbumItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumItem.ProtoReflect.Descriptor instead.
func (*AlbumItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{219}
}

func (x *AlbumItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlbumItem) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlbumQua struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlbumQua) Reset() {
	*x = AlbumQua{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumQua) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumQua) ProtoMessage() {}

func (x *AlbumQua) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumQua.ProtoReflect.Descriptor instead.
func (*AlbumQua) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{220}
}

func (x *AlbumQua) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlbumQua) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

//------------------------------------------------------
// 玩家助战数据
type Assist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees   []*common.Employee  `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`     // 雇佣数据
	EmployLog   []*common.AssistLog `protobuf:"bytes,2,rep,name=employLog,proto3" json:"employLog,omitempty"`     // 雇佣记录
	EmployedLog []*common.AssistLog `protobuf:"bytes,3,rep,name=employedLog,proto3" json:"employedLog,omitempty"` // 被雇佣记录
}

func (x *Assist) Reset() {
	*x = Assist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assist) ProtoMessage() {}

func (x *Assist) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assist.ProtoReflect.Descriptor instead.
func (*Assist) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{221}
}

func (x *Assist) GetEmployees() []*common.Employee {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *Assist) GetEmployLog() []*common.AssistLog {
	if x != nil {
		return x.EmployLog
	}
	return nil
}

func (x *Assist) GetEmployedLog() []*common.AssistLog {
	if x != nil {
		return x.EmployedLog
	}
	return nil
}

// 助战主将
type AssistCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commander      *common.Commander `protobuf:"bytes,1,opt,name=Commander,proto3" json:"Commander,omitempty"`            // 主将数据
	PlayerID       uint64            `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`             // 玩家id
	PlayerLevel    uint32            `protobuf:"varint,5,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`       // 玩家等级
	EmployedTimes  uint32            `protobuf:"varint,6,opt,name=employedTimes,proto3" json:"employedTimes,omitempty"`   // 每天被雇佣次数
	RewardTime     int64             `protobuf:"varint,7,opt,name=RewardTime,proto3" json:"RewardTime,omitempty"`         // 领奖时间
	CanRewardTimes uint32            `protobuf:"varint,8,opt,name=CanRewardTimes,proto3" json:"CanRewardTimes,omitempty"` // 每天可领奖次数
	PlayerName     string            `protobuf:"bytes,9,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`          // 玩家名字
	Soldier        *common.Soldier   `protobuf:"bytes,10,opt,name=soldier,proto3" json:"soldier,omitempty"`               // 士兵
	WuHun          []*common.WuHun   `protobuf:"bytes,11,rep,name=wuHun,proto3" json:"wuHun,omitempty"`                   // 武魂列表
	Mount          *common.MountItem `protobuf:"bytes,12,opt,name=mount,proto3" json:"mount,omitempty"`                   // 主将坐骑
	OnlyEquip      *common.OnlyEquip `protobuf:"bytes,13,opt,name=onlyEquip,proto3" json:"onlyEquip,omitempty"`           // 专属装备
	Deputy         *common.Commander `protobuf:"bytes,14,opt,name=deputy,proto3" json:"deputy,omitempty"`                 // 副将
}

func (x *AssistCommander) Reset() {
	*x = AssistCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistCommander) ProtoMessage() {}

func (x *AssistCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistCommander.ProtoReflect.Descriptor instead.
func (*AssistCommander) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{222}
}

func (x *AssistCommander) GetCommander() *common.Commander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *AssistCommander) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *AssistCommander) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *AssistCommander) GetEmployedTimes() uint32 {
	if x != nil {
		return x.EmployedTimes
	}
	return 0
}

func (x *AssistCommander) GetRewardTime() int64 {
	if x != nil {
		return x.RewardTime
	}
	return 0
}

func (x *AssistCommander) GetCanRewardTimes() uint32 {
	if x != nil {
		return x.CanRewardTimes
	}
	return 0
}

func (x *AssistCommander) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *AssistCommander) GetSoldier() *common.Soldier {
	if x != nil {
		return x.Soldier
	}
	return nil
}

func (x *AssistCommander) GetWuHun() []*common.WuHun {
	if x != nil {
		return x.WuHun
	}
	return nil
}

func (x *AssistCommander) GetMount() *common.MountItem {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *AssistCommander) GetOnlyEquip() *common.OnlyEquip {
	if x != nil {
		return x.OnlyEquip
	}
	return nil
}

func (x *AssistCommander) GetDeputy() *common.Commander {
	if x != nil {
		return x.Deputy
	}
	return nil
}

// AssistSlot 助战栏位
type AssistSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int32            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                       // 栏位
	Commander     *AssistCommander `protobuf:"bytes,2,opt,name=Commander,proto3" json:"Commander,omitempty"`          //
	AssistTime    int64            `protobuf:"varint,3,opt,name=AssistTime,proto3" json:"AssistTime,omitempty"`       // 派遣时间
	BroadCastTime int64            `protobuf:"varint,4,opt,name=broadCastTime,proto3" json:"broadCastTime,omitempty"` // 派遣广播时间
}

func (x *AssistSlot) Reset() {
	*x = AssistSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistSlot) ProtoMessage() {}

func (x *AssistSlot) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistSlot.ProtoReflect.Descriptor instead.
func (*AssistSlot) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{223}
}

func (x *AssistSlot) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AssistSlot) GetCommander() *AssistCommander {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *AssistSlot) GetAssistTime() int64 {
	if x != nil {
		return x.AssistTime
	}
	return 0
}

func (x *AssistSlot) GetBroadCastTime() int64 {
	if x != nil {
		return x.BroadCastTime
	}
	return 0
}

// AssistPlayer 助战玩家
type AssistPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots         []*AssistSlot       `protobuf:"bytes,1,rep,name=Slots,proto3" json:"Slots,omitempty"`                  // 派遣主将
	EmployedTimes uint32              `protobuf:"varint,2,opt,name=employedTimes,proto3" json:"employedTimes,omitempty"` // 每天被雇佣次数
	EmployedTime  int64               `protobuf:"varint,3,opt,name=employedTime,proto3" json:"employedTime,omitempty"`   // 最后被雇佣时间
	EmployedLog   []*common.AssistLog `protobuf:"bytes,4,rep,name=employedLog,proto3" json:"employedLog,omitempty"`      // 被雇佣log
}

func (x *AssistPlayer) Reset() {
	*x = AssistPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistPlayer) ProtoMessage() {}

func (x *AssistPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistPlayer.ProtoReflect.Descriptor instead.
func (*AssistPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{224}
}

func (x *AssistPlayer) GetSlots() []*AssistSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *AssistPlayer) GetEmployedTimes() uint32 {
	if x != nil {
		return x.EmployedTimes
	}
	return 0
}

func (x *AssistPlayer) GetEmployedTime() int64 {
	if x != nil {
		return x.EmployedTime
	}
	return 0
}

func (x *AssistPlayer) GetEmployedLog() []*common.AssistLog {
	if x != nil {
		return x.EmployedLog
	}
	return nil
}

// GameAssist 助战
type GameAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players map[uint64]*AssistPlayer `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GameAssist) Reset() {
	*x = GameAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAssist) ProtoMessage() {}

func (x *GameAssist) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAssist.ProtoReflect.Descriptor instead.
func (*GameAssist) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{225}
}

func (x *GameAssist) GetPlayers() map[uint64]*AssistPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type DynamicGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gifts     []*DynamicGiftItem `protobuf:"bytes,1,rep,name=gifts,proto3" json:"gifts,omitempty"`
	WeightAdd map[int32]int32    `protobuf:"bytes,2,rep,name=weightAdd,proto3" json:"weightAdd,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 序列增加
}

func (x *DynamicGift) Reset() {
	*x = DynamicGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicGift) ProtoMessage() {}

func (x *DynamicGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicGift.ProtoReflect.Descriptor instead.
func (*DynamicGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{226}
}

func (x *DynamicGift) GetGifts() []*DynamicGiftItem {
	if x != nil {
		return x.Gifts
	}
	return nil
}

func (x *DynamicGift) GetWeightAdd() map[int32]int32 {
	if x != nil {
		return x.WeightAdd
	}
	return nil
}

type DynamicGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GiftId        int32                   `protobuf:"varint,2,opt,name=giftId,proto3" json:"giftId,omitempty"`
	Items         []*DynamicGiftRangeItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Status        GiftStatus              `protobuf:"varint,4,opt,name=status,proto3,enum=common1.GiftStatus" json:"status,omitempty"`
	CreateTime    int64                   `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`        // 时间
	BeginBuyTime  int64                   `protobuf:"varint,6,opt,name=beginBuyTime,proto3" json:"beginBuyTime,omitempty"`    // 标记开始购买时间，防止结束被删除
	Times         int32                   `protobuf:"varint,7,opt,name=times,proto3" json:"times,omitempty"`                  // 触发次数
	ActID         int32                   `protobuf:"varint,8,opt,name=actID,proto3" json:"actID,omitempty"`                  // 活动开启的记录id
	ExceptItem    []int32                 `protobuf:"varint,9,rep,packed,name=exceptItem,proto3" json:"exceptItem,omitempty"` // 排除物品
	UnbuyTimes    int32                   `protobuf:"varint,10,opt,name=unbuyTimes,proto3" json:"unbuyTimes,omitempty"`       // 连续未购买次数
	ReactiveTimes int32                   `protobuf:"varint,11,opt,name=reactiveTimes,proto3" json:"reactiveTimes,omitempty"` // 重新激活次数
}

func (x *DynamicGiftItem) Reset() {
	*x = DynamicGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicGiftItem) ProtoMessage() {}

func (x *DynamicGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicGiftItem.ProtoReflect.Descriptor instead.
func (*DynamicGiftItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{227}
}

func (x *DynamicGiftItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DynamicGiftItem) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *DynamicGiftItem) GetItems() []*DynamicGiftRangeItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DynamicGiftItem) GetStatus() GiftStatus {
	if x != nil {
		return x.Status
	}
	return GiftStatus_init
}

func (x *DynamicGiftItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DynamicGiftItem) GetBeginBuyTime() int64 {
	if x != nil {
		return x.BeginBuyTime
	}
	return 0
}

func (x *DynamicGiftItem) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *DynamicGiftItem) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *DynamicGiftItem) GetExceptItem() []int32 {
	if x != nil {
		return x.ExceptItem
	}
	return nil
}

func (x *DynamicGiftItem) GetUnbuyTimes() int32 {
	if x != nil {
		return x.UnbuyTimes
	}
	return 0
}

func (x *DynamicGiftItem) GetReactiveTimes() int32 {
	if x != nil {
		return x.ReactiveTimes
	}
	return 0
}

type DynamicGiftRangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeID int32        `protobuf:"varint,1,opt,name=rangeID,proto3" json:"rangeID,omitempty"`
	Item    *common.Item `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *DynamicGiftRangeItem) Reset() {
	*x = DynamicGiftRangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicGiftRangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicGiftRangeItem) ProtoMessage() {}

func (x *DynamicGiftRangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicGiftRangeItem.ProtoReflect.Descriptor instead.
func (*DynamicGiftRangeItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{228}
}

func (x *DynamicGiftRangeItem) GetRangeID() int32 {
	if x != nil {
		return x.RangeID
	}
	return 0
}

func (x *DynamicGiftRangeItem) GetItem() *common.Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type DyPeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season int32         `protobuf:"varint,1,opt,name=Season,proto3" json:"Season,omitempty"`
	Choose *DyPeakChoose `protobuf:"bytes,2,opt,name=choose,proto3" json:"choose,omitempty"`
	LastID int32         `protobuf:"varint,3,opt,name=lastID,proto3" json:"lastID,omitempty"`
	UnOpen bool          `protobuf:"varint,8,opt,name=unOpen,proto3" json:"unOpen,omitempty"` // 未开启成功
}

func (x *DyPeak) Reset() {
	*x = DyPeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeak) ProtoMessage() {}

func (x *DyPeak) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeak.ProtoReflect.Descriptor instead.
func (*DyPeak) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{229}
}

func (x *DyPeak) GetSeason() int32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *DyPeak) GetChoose() *DyPeakChoose {
	if x != nil {
		return x.Choose
	}
	return nil
}

func (x *DyPeak) GetLastID() int32 {
	if x != nil {
		return x.LastID
	}
	return 0
}

func (x *DyPeak) GetUnOpen() bool {
	if x != nil {
		return x.UnOpen
	}
	return false
}

type DyPeakChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvanceNum   int32   `protobuf:"varint,1,opt,name=advanceNum,proto3" json:"advanceNum,omitempty"` // 晋级玩家数量
	RoundEndTime []int64 `protobuf:"varint,4,rep,packed,name=RoundEndTime,proto3" json:"RoundEndTime,omitempty"`
	CurrentRound int32   `protobuf:"varint,5,opt,name=CurrentRound,proto3" json:"CurrentRound,omitempty"`
	CurrentGroup int32   `protobuf:"varint,6,opt,name=CurrentGroup,proto3" json:"CurrentGroup,omitempty"`
}

func (x *DyPeakChoose) Reset() {
	*x = DyPeakChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakChoose) ProtoMessage() {}

func (x *DyPeakChoose) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakChoose.ProtoReflect.Descriptor instead.
func (*DyPeakChoose) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{230}
}

func (x *DyPeakChoose) GetAdvanceNum() int32 {
	if x != nil {
		return x.AdvanceNum
	}
	return 0
}

func (x *DyPeakChoose) GetRoundEndTime() []int64 {
	if x != nil {
		return x.RoundEndTime
	}
	return nil
}

func (x *DyPeakChoose) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *DyPeakChoose) GetCurrentGroup() int32 {
	if x != nil {
		return x.CurrentGroup
	}
	return 0
}

type DyPeakSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar      int32  `protobuf:"varint,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarFrame int32  `protobuf:"varint,3,opt,name=avatarFrame,proto3" json:"avatarFrame,omitempty"`
	Model       int32  `protobuf:"varint,4,opt,name=model,proto3" json:"model,omitempty"`
	Level       uint32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *DyPeakSimpleInfo) Reset() {
	*x = DyPeakSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakSimpleInfo) ProtoMessage() {}

func (x *DyPeakSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakSimpleInfo.ProtoReflect.Descriptor instead.
func (*DyPeakSimpleInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{231}
}

func (x *DyPeakSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DyPeakSimpleInfo) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *DyPeakSimpleInfo) GetAvatarFrame() int32 {
	if x != nil {
		return x.AvatarFrame
	}
	return 0
}

func (x *DyPeakSimpleInfo) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *DyPeakSimpleInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type PkBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id1        uint64            `protobuf:"varint,1,opt,name=Id1,proto3" json:"Id1,omitempty"`
	Id2        uint64            `protobuf:"varint,2,opt,name=Id2,proto3" json:"Id2,omitempty"`
	Result     []*PkBattleResult `protobuf:"bytes,3,rep,name=Result,proto3" json:"Result,omitempty"`
	GuessMulId int32             `protobuf:"varint,4,opt,name=guessMulId,proto3" json:"guessMulId,omitempty"`
}

func (x *PkBattle) Reset() {
	*x = PkBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkBattle) ProtoMessage() {}

func (x *PkBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkBattle.ProtoReflect.Descriptor instead.
func (*PkBattle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{232}
}

func (x *PkBattle) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

func (x *PkBattle) GetId2() uint64 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *PkBattle) GetResult() []*PkBattleResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PkBattle) GetGuessMulId() int32 {
	if x != nil {
		return x.GuessMulId
	}
	return 0
}

type PkBattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleID uint64 `protobuf:"varint,1,opt,name=BattleID,proto3" json:"BattleID,omitempty"`
	Winner   uint64 `protobuf:"varint,2,opt,name=Winner,proto3" json:"Winner,omitempty"`
	Id1Hp    uint32 `protobuf:"varint,3,opt,name=Id1Hp,proto3" json:"Id1Hp,omitempty"`
	Id2Hp    uint32 `protobuf:"varint,4,opt,name=Id2Hp,proto3" json:"Id2Hp,omitempty"`
}

func (x *PkBattleResult) Reset() {
	*x = PkBattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkBattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkBattleResult) ProtoMessage() {}

func (x *PkBattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkBattleResult.ProtoReflect.Descriptor instead.
func (*PkBattleResult) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{233}
}

func (x *PkBattleResult) GetBattleID() uint64 {
	if x != nil {
		return x.BattleID
	}
	return 0
}

func (x *PkBattleResult) GetWinner() uint64 {
	if x != nil {
		return x.Winner
	}
	return 0
}

func (x *PkBattleResult) GetId1Hp() uint32 {
	if x != nil {
		return x.Id1Hp
	}
	return 0
}

func (x *PkBattleResult) GetId2Hp() uint32 {
	if x != nil {
		return x.Id2Hp
	}
	return 0
}

type GroupBattleRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Battles []*PkBattle `protobuf:"bytes,1,rep,name=battles,proto3" json:"battles,omitempty"`
}

func (x *GroupBattleRound) Reset() {
	*x = GroupBattleRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBattleRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBattleRound) ProtoMessage() {}

func (x *GroupBattleRound) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBattleRound.ProtoReflect.Descriptor instead.
func (*GroupBattleRound) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{234}
}

func (x *GroupBattleRound) GetBattles() []*PkBattle {
	if x != nil {
		return x.Battles
	}
	return nil
}

//加赛信息
type ExtraPk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players    []uint64 `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
	AdvanceNum uint32   `protobuf:"varint,2,opt,name=advanceNum,proto3" json:"advanceNum,omitempty"` //晋级的人数
}

func (x *ExtraPk) Reset() {
	*x = ExtraPk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraPk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraPk) ProtoMessage() {}

func (x *ExtraPk) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraPk.ProtoReflect.Descriptor instead.
func (*ExtraPk) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{235}
}

func (x *ExtraPk) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *ExtraPk) GetAdvanceNum() uint32 {
	if x != nil {
		return x.AdvanceNum
	}
	return 0
}

type PkGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players        []*PkGroupPlayer    `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Round          []*GroupBattleRound `protobuf:"bytes,2,rep,name=round,proto3" json:"round,omitempty"`
	Extra          *ExtraPk            `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`                           //加赛信息
	AdvancePlayers []uint64            `protobuf:"varint,4,rep,packed,name=advancePlayers,proto3" json:"advancePlayers,omitempty"` // 晋级玩家
}

func (x *PkGroup) Reset() {
	*x = PkGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkGroup) ProtoMessage() {}

func (x *PkGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkGroup.ProtoReflect.Descriptor instead.
func (*PkGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{236}
}

func (x *PkGroup) GetPlayers() []*PkGroupPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PkGroup) GetRound() []*GroupBattleRound {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *PkGroup) GetExtra() *ExtraPk {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PkGroup) GetAdvancePlayers() []uint64 {
	if x != nil {
		return x.AdvancePlayers
	}
	return nil
}

type PkGroupPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint64 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Score       uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	SecondScore uint32 `protobuf:"varint,3,opt,name=secondScore,proto3" json:"secondScore,omitempty"`
}

func (x *PkGroupPlayer) Reset() {
	*x = PkGroupPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkGroupPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkGroupPlayer) ProtoMessage() {}

func (x *PkGroupPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkGroupPlayer.ProtoReflect.Descriptor instead.
func (*PkGroupPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{237}
}

func (x *PkGroupPlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PkGroupPlayer) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PkGroupPlayer) GetSecondScore() uint32 {
	if x != nil {
		return x.SecondScore
	}
	return 0
}

type DyPeakBattlePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfos []*common.BattlePlayerInfo `protobuf:"bytes,2,rep,name=playerInfos,proto3" json:"playerInfos,omitempty"`
}

func (x *DyPeakBattlePlayer) Reset() {
	*x = DyPeakBattlePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakBattlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakBattlePlayer) ProtoMessage() {}

func (x *DyPeakBattlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakBattlePlayer.ProtoReflect.Descriptor instead.
func (*DyPeakBattlePlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{238}
}

func (x *DyPeakBattlePlayer) GetPlayerInfos() []*common.BattlePlayerInfo {
	if x != nil {
		return x.PlayerInfos
	}
	return nil
}

// 决战巅峰比赛进度
type DyPeakSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players   []uint64    `protobuf:"varint,1,rep,packed,name=Players,proto3" json:"Players,omitempty"` // 参赛玩家
	Groups    []*PkGroup  `protobuf:"bytes,2,rep,name=Groups,proto3" json:"Groups,omitempty"`           // 小组赛对阵
	QuarterPK []*PkBattle `protobuf:"bytes,3,rep,name=QuarterPK,proto3" json:"QuarterPK,omitempty"`     // 8强对阵
	SemiPK    []*PkBattle `protobuf:"bytes,4,rep,name=SemiPK,proto3" json:"SemiPK,omitempty"`           // 4强
	Third     *PkBattle   `protobuf:"bytes,5,opt,name=Third,proto3" json:"Third,omitempty"`
	Champ     *PkBattle   `protobuf:"bytes,6,opt,name=Champ,proto3" json:"Champ,omitempty"`
	Top16PK   []*PkBattle `protobuf:"bytes,8,rep,name=Top16PK,proto3" json:"Top16PK,omitempty"` // 16强
}

func (x *DyPeakSchedule) Reset() {
	*x = DyPeakSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakSchedule) ProtoMessage() {}

func (x *DyPeakSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakSchedule.ProtoReflect.Descriptor instead.
func (*DyPeakSchedule) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{239}
}

func (x *DyPeakSchedule) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *DyPeakSchedule) GetGroups() []*PkGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *DyPeakSchedule) GetQuarterPK() []*PkBattle {
	if x != nil {
		return x.QuarterPK
	}
	return nil
}

func (x *DyPeakSchedule) GetSemiPK() []*PkBattle {
	if x != nil {
		return x.SemiPK
	}
	return nil
}

func (x *DyPeakSchedule) GetThird() *PkBattle {
	if x != nil {
		return x.Third
	}
	return nil
}

func (x *DyPeakSchedule) GetChamp() *PkBattle {
	if x != nil {
		return x.Champ
	}
	return nil
}

func (x *DyPeakSchedule) GetTop16PK() []*PkBattle {
	if x != nil {
		return x.Top16PK
	}
	return nil
}

type DyPeakGuess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    map[uint64]*DyPeakGuessReward `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Support map[uint64]uint32             `protobuf:"bytes,3,rep,name=support,proto3" json:"support,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DyPeakGuess) Reset() {
	*x = DyPeakGuess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakGuess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakGuess) ProtoMessage() {}

func (x *DyPeakGuess) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakGuess.ProtoReflect.Descriptor instead.
func (*DyPeakGuess) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{240}
}

func (x *DyPeakGuess) GetData() map[uint64]*DyPeakGuessReward {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DyPeakGuess) GetSupport() map[uint64]uint32 {
	if x != nil {
		return x.Support
	}
	return nil
}

type DyPeakGuessReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//uint64 targetId = 1;
	Reward bool  `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`
	Choose int32 `protobuf:"varint,3,opt,name=choose,proto3" json:"choose,omitempty"` // 竞猜选择
}

func (x *DyPeakGuessReward) Reset() {
	*x = DyPeakGuessReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakGuessReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakGuessReward) ProtoMessage() {}

func (x *DyPeakGuessReward) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakGuessReward.ProtoReflect.Descriptor instead.
func (*DyPeakGuessReward) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{241}
}

func (x *DyPeakGuessReward) GetReward() bool {
	if x != nil {
		return x.Reward
	}
	return false
}

func (x *DyPeakGuessReward) GetChoose() int32 {
	if x != nil {
		return x.Choose
	}
	return 0
}

// 红包
type DyPeakRed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red map[int32]*DyPeakRedItem `protobuf:"bytes,1,rep,name=red,proto3" json:"red,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 红包
}

func (x *DyPeakRed) Reset() {
	*x = DyPeakRed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakRed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakRed) ProtoMessage() {}

func (x *DyPeakRed) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakRed.ProtoReflect.Descriptor instead.
func (*DyPeakRed) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{242}
}

func (x *DyPeakRed) GetRed() map[int32]*DyPeakRedItem {
	if x != nil {
		return x.Red
	}
	return nil
}

type DyPeakRedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime int64           `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                        // 生成时间
	GotPlayer  map[uint64]bool `protobuf:"bytes,3,rep,name=gotPlayer,proto3" json:"gotPlayer,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 领取玩家
}

func (x *DyPeakRedItem) Reset() {
	*x = DyPeakRedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyPeakRedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyPeakRedItem) ProtoMessage() {}

func (x *DyPeakRedItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyPeakRedItem.ProtoReflect.Descriptor instead.
func (*DyPeakRedItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{243}
}

func (x *DyPeakRedItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DyPeakRedItem) GetGotPlayer() map[uint64]bool {
	if x != nil {
		return x.GotPlayer
	}
	return nil
}

type StarSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalHpDamage uint64                     `protobuf:"varint,1,opt,name=totalHpDamage,proto3" json:"totalHpDamage,omitempty"`                                                                              // 全服累计Hp伤害
	StarClearTime int64                      `protobuf:"varint,2,opt,name=starClearTime,proto3" json:"starClearTime,omitempty"`                                                                              // 星宿封印解除时间
	IsUnlocked    bool                       `protobuf:"varint,3,opt,name=isUnlocked,proto3" json:"isUnlocked,omitempty"`                                                                                    // 是否已解锁
	UnlockStars   []int32                    `protobuf:"varint,4,rep,packed,name=unlockStars,proto3" json:"unlockStars,omitempty"`                                                                           // 已解锁星宿
	StartTime     int64                      `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                      // 挑战开启时间
	OldLevelLimit uint32                     `protobuf:"varint,13,opt,name=oldLevelLimit,proto3" json:"oldLevelLimit,omitempty"`                                                                             // 解锁之前等级上限
	Players       map[uint64]*StarSealPlayer `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 参与玩家
	Logs          []*common.StarSealLog      `protobuf:"bytes,15,rep,name=logs,proto3" json:"logs,omitempty"`                                                                                                // 挑战日志
}

func (x *StarSeal) Reset() {
	*x = StarSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarSeal) ProtoMessage() {}

func (x *StarSeal) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarSeal.ProtoReflect.Descriptor instead.
func (*StarSeal) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{244}
}

func (x *StarSeal) GetTotalHpDamage() uint64 {
	if x != nil {
		return x.TotalHpDamage
	}
	return 0
}

func (x *StarSeal) GetStarClearTime() int64 {
	if x != nil {
		return x.StarClearTime
	}
	return 0
}

func (x *StarSeal) GetIsUnlocked() bool {
	if x != nil {
		return x.IsUnlocked
	}
	return false
}

func (x *StarSeal) GetUnlockStars() []int32 {
	if x != nil {
		return x.UnlockStars
	}
	return nil
}

func (x *StarSeal) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StarSeal) GetOldLevelLimit() uint32 {
	if x != nil {
		return x.OldLevelLimit
	}
	return 0
}

func (x *StarSeal) GetPlayers() map[uint64]*StarSealPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *StarSeal) GetLogs() []*common.StarSealLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type StarSealPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengedTimes uint32 `protobuf:"varint,1,opt,name=challengedTimes,proto3" json:"challengedTimes,omitempty"` // 今日已挑战次数
	TotalRealDamage uint64 `protobuf:"varint,2,opt,name=totalRealDamage,proto3" json:"totalRealDamage,omitempty"` // 累计真实伤害
	GotRewards      bool   `protobuf:"varint,3,opt,name=gotRewards,proto3" json:"gotRewards,omitempty"`           // 是否已领奖
	FightStar       int32  `protobuf:"varint,4,opt,name=fightStar,proto3" json:"fightStar,omitempty"`             // 当前挑战的星宿 进入战斗时记录 结束战斗时用于校验和伤害比例计算
}

func (x *StarSealPlayer) Reset() {
	*x = StarSealPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarSealPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarSealPlayer) ProtoMessage() {}

func (x *StarSealPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarSealPlayer.ProtoReflect.Descriptor instead.
func (*StarSealPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{245}
}

func (x *StarSealPlayer) GetChallengedTimes() uint32 {
	if x != nil {
		return x.ChallengedTimes
	}
	return 0
}

func (x *StarSealPlayer) GetTotalRealDamage() uint64 {
	if x != nil {
		return x.TotalRealDamage
	}
	return 0
}

func (x *StarSealPlayer) GetGotRewards() bool {
	if x != nil {
		return x.GotRewards
	}
	return false
}

func (x *StarSealPlayer) GetFightStar() int32 {
	if x != nil {
		return x.FightStar
	}
	return 0
}

type BulletData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowId  int32            `protobuf:"varint,1,opt,name=showId,proto3" json:"showId,omitempty"`
	Bullets []*common.Bullet `protobuf:"bytes,2,rep,name=bullets,proto3" json:"bullets,omitempty"`
}

func (x *BulletData) Reset() {
	*x = BulletData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulletData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulletData) ProtoMessage() {}

func (x *BulletData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulletData.ProtoReflect.Descriptor instead.
func (*BulletData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{246}
}

func (x *BulletData) GetShowId() int32 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *BulletData) GetBullets() []*common.Bullet {
	if x != nil {
		return x.Bullets
	}
	return nil
}

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//map<int32,ShareData> OBSOLETE_shareDatas = 1; // 废弃
	ShareDatas []*ShareData `protobuf:"bytes,2,rep,name=shareDatas,proto3" json:"shareDatas,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{247}
}

func (x *Share) GetShareDatas() []*ShareData {
	if x != nil {
		return x.ShareDatas
	}
	return nil
}

type ShareData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId    int32  `protobuf:"varint,1,opt,name=shareId,proto3" json:"shareId,omitempty"`
	ShareTimes uint32 `protobuf:"varint,2,opt,name=shareTimes,proto3" json:"shareTimes,omitempty"` // 已分享次数
}

func (x *ShareData) Reset() {
	*x = ShareData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareData) ProtoMessage() {}

func (x *ShareData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareData.ProtoReflect.Descriptor instead.
func (*ShareData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{248}
}

func (x *ShareData) GetShareId() int32 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

func (x *ShareData) GetShareTimes() uint32 {
	if x != nil {
		return x.ShareTimes
	}
	return 0
}

type OBSOLETE_Tower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurLevel               int32          `protobuf:"varint,1,opt,name=curLevel,proto3" json:"curLevel,omitempty"`                                   // 当前关卡
	FreeFastHangUpTimes    uint32         `protobuf:"varint,2,opt,name=freeFastHangUpTimes,proto3" json:"freeFastHangUpTimes,omitempty"`             // 免费快速挂机次数
	BuyFastHangUpTimes     uint32         `protobuf:"varint,3,opt,name=buyFastHangUpTimes,proto3" json:"buyFastHangUpTimes,omitempty"`               // 付费快速挂机次数
	LastPassTime           int64          `protobuf:"varint,4,opt,name=lastPassTime,proto3" json:"lastPassTime,omitempty"`                           // 上次通关时间
	StartHangUpTime        int64          `protobuf:"varint,5,opt,name=startHangUpTime,proto3" json:"startHangUpTime,omitempty"`                     // 开始挂机时间
	CurLevelKeepHangUpTime int64          `protobuf:"varint,6,opt,name=curLevelKeepHangUpTime,proto3" json:"curLevelKeepHangUpTime,omitempty"`       // 当前关卡保留挂机时长
	HandUpData             []*TowerHangUp `protobuf:"bytes,15,rep,name=handUpData,proto3" json:"handUpData,omitempty"`                               // 挂机数据
	TakenTotalPassRewards  []int32        `protobuf:"varint,16,rep,packed,name=takenTotalPassRewards,proto3" json:"takenTotalPassRewards,omitempty"` // 累计通关奖励领取记录
}

func (x *OBSOLETE_Tower) Reset() {
	*x = OBSOLETE_Tower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBSOLETE_Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_Tower) ProtoMessage() {}

func (x *OBSOLETE_Tower) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_Tower.ProtoReflect.Descriptor instead.
func (*OBSOLETE_Tower) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{249}
}

func (x *OBSOLETE_Tower) GetCurLevel() int32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *OBSOLETE_Tower) GetFreeFastHangUpTimes() uint32 {
	if x != nil {
		return x.FreeFastHangUpTimes
	}
	return 0
}

func (x *OBSOLETE_Tower) GetBuyFastHangUpTimes() uint32 {
	if x != nil {
		return x.BuyFastHangUpTimes
	}
	return 0
}

func (x *OBSOLETE_Tower) GetLastPassTime() int64 {
	if x != nil {
		return x.LastPassTime
	}
	return 0
}

func (x *OBSOLETE_Tower) GetStartHangUpTime() int64 {
	if x != nil {
		return x.StartHangUpTime
	}
	return 0
}

func (x *OBSOLETE_Tower) GetCurLevelKeepHangUpTime() int64 {
	if x != nil {
		return x.CurLevelKeepHangUpTime
	}
	return 0
}

func (x *OBSOLETE_Tower) GetHandUpData() []*TowerHangUp {
	if x != nil {
		return x.HandUpData
	}
	return nil
}

func (x *OBSOLETE_Tower) GetTakenTotalPassRewards() []int32 {
	if x != nil {
		return x.TakenTotalPassRewards
	}
	return nil
}

type Tower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeFastHangUpTimes uint32       `protobuf:"varint,1,opt,name=freeFastHangUpTimes,proto3" json:"freeFastHangUpTimes,omitempty"` // 免费快速挂机次数
	BuyFastHangUpTimes  uint32       `protobuf:"varint,2,opt,name=buyFastHangUpTimes,proto3" json:"buyFastHangUpTimes,omitempty"`   // 付费快速挂机次数
	StartHangUpTime     int64        `protobuf:"varint,3,opt,name=startHangUpTime,proto3" json:"startHangUpTime,omitempty"`         // 开始挂机时间
	TowerDatas          []*TowerData `protobuf:"bytes,15,rep,name=towerDatas,proto3" json:"towerDatas,omitempty"`                   // 爬塔数据
}

func (x *Tower) Reset() {
	*x = Tower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tower) ProtoMessage() {}

func (x *Tower) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tower.ProtoReflect.Descriptor instead.
func (*Tower) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{250}
}

func (x *Tower) GetFreeFastHangUpTimes() uint32 {
	if x != nil {
		return x.FreeFastHangUpTimes
	}
	return 0
}

func (x *Tower) GetBuyFastHangUpTimes() uint32 {
	if x != nil {
		return x.BuyFastHangUpTimes
	}
	return 0
}

func (x *Tower) GetStartHangUpTime() int64 {
	if x != nil {
		return x.StartHangUpTime
	}
	return 0
}

func (x *Tower) GetTowerDatas() []*TowerData {
	if x != nil {
		return x.TowerDatas
	}
	return nil
}

type TowerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerType             int32           `protobuf:"varint,1,opt,name=towerType,proto3" json:"towerType,omitempty"`                                                                                             // 类型
	CurLevel              int32           `protobuf:"varint,2,opt,name=curLevel,proto3" json:"curLevel,omitempty"`                                                                                               // 当前关卡
	LastPassTime          int64           `protobuf:"varint,3,opt,name=lastPassTime,proto3" json:"lastPassTime,omitempty"`                                                                                       // 上次通关时间
	LastUpdateTime        int64           `protobuf:"varint,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`                                                                                   // 上次更新时间
	HangUpTime            map[int32]int64 `protobuf:"bytes,14,rep,name=hangUpTime,proto3" json:"hangUpTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 挂机时间
	TakenTotalPassRewards []int32         `protobuf:"varint,15,rep,packed,name=takenTotalPassRewards,proto3" json:"takenTotalPassRewards,omitempty"`                                                             // 累计通关奖励领取记录
}

func (x *TowerData) Reset() {
	*x = TowerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerData) ProtoMessage() {}

func (x *TowerData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerData.ProtoReflect.Descriptor instead.
func (*TowerData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{251}
}

func (x *TowerData) GetTowerType() int32 {
	if x != nil {
		return x.TowerType
	}
	return 0
}

func (x *TowerData) GetCurLevel() int32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *TowerData) GetLastPassTime() int64 {
	if x != nil {
		return x.LastPassTime
	}
	return 0
}

func (x *TowerData) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *TowerData) GetHangUpTime() map[int32]int64 {
	if x != nil {
		return x.HangUpTime
	}
	return nil
}

func (x *TowerData) GetTakenTotalPassRewards() []int32 {
	if x != nil {
		return x.TakenTotalPassRewards
	}
	return nil
}

type TowerHangUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`           // 关卡
	HangUpTime int64 `protobuf:"varint,2,opt,name=hangUpTime,proto3" json:"hangUpTime,omitempty"` // 挂机时长
}

func (x *TowerHangUp) Reset() {
	*x = TowerHangUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerHangUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerHangUp) ProtoMessage() {}

func (x *TowerHangUp) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerHangUp.ProtoReflect.Descriptor instead.
func (*TowerHangUp) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{252}
}

func (x *TowerHangUp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TowerHangUp) GetHangUpTime() int64 {
	if x != nil {
		return x.HangUpTime
	}
	return 0
}

type TowerBattleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint64 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	FinishDate  int64  `protobuf:"varint,2,opt,name=finishDate,proto3" json:"finishDate,omitempty"`
	FinishPower uint32 `protobuf:"varint,3,opt,name=finishPower,proto3" json:"finishPower,omitempty"`
	BattleId    uint64 `protobuf:"varint,4,opt,name=battleId,proto3" json:"battleId,omitempty"`
}

func (x *TowerBattleReport) Reset() {
	*x = TowerBattleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerBattleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerBattleReport) ProtoMessage() {}

func (x *TowerBattleReport) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerBattleReport.ProtoReflect.Descriptor instead.
func (*TowerBattleReport) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{253}
}

func (x *TowerBattleReport) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *TowerBattleReport) GetFinishDate() int64 {
	if x != nil {
		return x.FinishDate
	}
	return 0
}

func (x *TowerBattleReport) GetFinishPower() uint32 {
	if x != nil {
		return x.FinishPower
	}
	return 0
}

func (x *TowerBattleReport) GetBattleId() uint64 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

type TowerLevelReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32              `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                  // 关卡
	MinPowerReport *TowerBattleReport `protobuf:"bytes,2,opt,name=minPowerReport,proto3" json:"minPowerReport,omitempty"` // 最低战力
	FirstReport    *TowerBattleReport `protobuf:"bytes,3,opt,name=firstReport,proto3" json:"firstReport,omitempty"`       // 最早通关
	LastReport     *TowerBattleReport `protobuf:"bytes,4,opt,name=lastReport,proto3" json:"lastReport,omitempty"`         // 最近通关
}

func (x *TowerLevelReports) Reset() {
	*x = TowerLevelReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelReports) ProtoMessage() {}

func (x *TowerLevelReports) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelReports.ProtoReflect.Descriptor instead.
func (*TowerLevelReports) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{254}
}

func (x *TowerLevelReports) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TowerLevelReports) GetMinPowerReport() *TowerBattleReport {
	if x != nil {
		return x.MinPowerReport
	}
	return nil
}

func (x *TowerLevelReports) GetFirstReport() *TowerBattleReport {
	if x != nil {
		return x.FirstReport
	}
	return nil
}

func (x *TowerLevelReports) GetLastReport() *TowerBattleReport {
	if x != nil {
		return x.LastReport
	}
	return nil
}

type TowerReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerType int32                        `protobuf:"varint,1,opt,name=towerType,proto3" json:"towerType,omitempty"`
	Reports   map[int32]*TowerLevelReports `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TowerReports) Reset() {
	*x = TowerReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerReports) ProtoMessage() {}

func (x *TowerReports) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerReports.ProtoReflect.Descriptor instead.
func (*TowerReports) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{255}
}

func (x *TowerReports) GetTowerType() int32 {
	if x != nil {
		return x.TowerType
	}
	return 0
}

func (x *TowerReports) GetReports() map[int32]*TowerLevelReports {
	if x != nil {
		return x.Reports
	}
	return nil
}

type CommanderBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleDatas []*CommanderBattleData `protobuf:"bytes,1,rep,name=battleDatas,proto3" json:"battleDatas,omitempty"`
}

func (x *CommanderBattle) Reset() {
	*x = CommanderBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderBattle) ProtoMessage() {}

func (x *CommanderBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderBattle.ProtoReflect.Descriptor instead.
func (*CommanderBattle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{256}
}

func (x *CommanderBattle) GetBattleDatas() []*CommanderBattleData {
	if x != nil {
		return x.BattleDatas
	}
	return nil
}

type CommanderBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType      int32   `protobuf:"varint,1,opt,name=battleType,proto3" json:"battleType,omitempty"`                  // 对战类型
	CurLevel        int32   `protobuf:"varint,2,opt,name=curLevel,proto3" json:"curLevel,omitempty"`                      // 当前关卡
	TodaySweepTimes uint32  `protobuf:"varint,3,opt,name=todaySweepTimes,proto3" json:"todaySweepTimes,omitempty"`        // 今日已扫荡次数
	GotStageRewards []int32 `protobuf:"varint,4,rep,packed,name=gotStageRewards,proto3" json:"gotStageRewards,omitempty"` // 已领取阶段奖励
}

func (x *CommanderBattleData) Reset() {
	*x = CommanderBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderBattleData) ProtoMessage() {}

func (x *CommanderBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderBattleData.ProtoReflect.Descriptor instead.
func (*CommanderBattleData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{257}
}

func (x *CommanderBattleData) GetBattleType() int32 {
	if x != nil {
		return x.BattleType
	}
	return 0
}

func (x *CommanderBattleData) GetCurLevel() int32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *CommanderBattleData) GetTodaySweepTimes() uint32 {
	if x != nil {
		return x.TodaySweepTimes
	}
	return 0
}

func (x *CommanderBattleData) GetGotStageRewards() []int32 {
	if x != nil {
		return x.GotStageRewards
	}
	return nil
}

type RecruitCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID     int32 `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`         //活动id
	HasActive bool  `protobuf:"varint,2,opt,name=hasActive,proto3" json:"hasActive,omitempty"` //是否激活
	OpenID    int32 `protobuf:"varint,3,opt,name=openID,proto3" json:"openID,omitempty"`       // 开启id
}

func (x *RecruitCard) Reset() {
	*x = RecruitCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitCard) ProtoMessage() {}

func (x *RecruitCard) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitCard.ProtoReflect.Descriptor instead.
func (*RecruitCard) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{258}
}

func (x *RecruitCard) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *RecruitCard) GetHasActive() bool {
	if x != nil {
		return x.HasActive
	}
	return false
}

func (x *RecruitCard) GetOpenID() int32 {
	if x != nil {
		return x.OpenID
	}
	return 0
}

//--------------------------------------------------------------------------------------------------gvg
// 保存在玩家身上的gvg信息
type PlayerGvg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                 uint64                 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`                                                                                          // 积分
	Moves                 uint32                 `protobuf:"varint,2,opt,name=moves,proto3" json:"moves,omitempty"`                                                                                          // 挑战次数
	BuyMoves              uint32                 `protobuf:"varint,3,opt,name=buyMoves,proto3" json:"buyMoves,omitempty"`                                                                                    //购买过的移动次数
	Tasks                 map[uint32]bool        `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // gvg任务 id:isget
	Holys                 map[uint32]uint32      `protobuf:"bytes,5,rep,name=holys,proto3" json:"holys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // gvg圣物 id:level
	AttackLogs            []*common.GvgBattleLog `protobuf:"bytes,6,rep,name=attackLogs,proto3" json:"attackLogs,omitempty"`                                                                                 // 进攻日志
	DefendLogs            []*common.GvgBattleLog `protobuf:"bytes,7,rep,name=defendLogs,proto3" json:"defendLogs,omitempty"`                                                                                 // 防守日志
	KilledLogs            []*common.GvgBattleLog `protobuf:"bytes,8,rep,name=killedLogs,proto3" json:"killedLogs,omitempty"`                                                                                 // 被击杀日志
	HasGvgDefendMessage   bool                   `protobuf:"varint,9,opt,name=hasGvgDefendMessage,proto3" json:"hasGvgDefendMessage,omitempty"`                                                              // gvg战报有防御消息
	SeeDefendMessageTime  int64                  `protobuf:"varint,10,opt,name=seeDefendMessageTime,proto3" json:"seeDefendMessageTime,omitempty"`                                                           // 查看防守消息时间戳
	OverflowMoves         uint32                 `protobuf:"varint,11,opt,name=overflowMoves,proto3" json:"overflowMoves,omitempty"`                                                                         // 溢出移动次数
	HasWeekEnterGvg       bool                   `protobuf:"varint,12,opt,name=hasWeekEnterGvg,proto3" json:"hasWeekEnterGvg,omitempty"`                                                                     // 本周进入过gvg
	BeginBattleData       *GvgBeginBattleData    `protobuf:"bytes,13,opt,name=beginBattleData,proto3" json:"beginBattleData,omitempty"`                                                                      // 开始战斗的参数用于校验
	LastSeeGvgFlagTime    int64                  `protobuf:"varint,14,opt,name=lastSeeGvgFlagTime,proto3" json:"lastSeeGvgFlagTime,omitempty"`                                                               // 上次查看gvg标记的时间
	IsDealCrossSeasonTask bool                   `protobuf:"varint,15,opt,name=isDealCrossSeasonTask,proto3" json:"isDealCrossSeasonTask,omitempty"`                                                         // 是否处理了没请赛季数据的标识，3月份以后可以删除
}

func (x *PlayerGvg) Reset() {
	*x = PlayerGvg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGvg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGvg) ProtoMessage() {}

func (x *PlayerGvg) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGvg.ProtoReflect.Descriptor instead.
func (*PlayerGvg) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{259}
}

func (x *PlayerGvg) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerGvg) GetMoves() uint32 {
	if x != nil {
		return x.Moves
	}
	return 0
}

func (x *PlayerGvg) GetBuyMoves() uint32 {
	if x != nil {
		return x.BuyMoves
	}
	return 0
}

func (x *PlayerGvg) GetTasks() map[uint32]bool {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *PlayerGvg) GetHolys() map[uint32]uint32 {
	if x != nil {
		return x.Holys
	}
	return nil
}

func (x *PlayerGvg) GetAttackLogs() []*common.GvgBattleLog {
	if x != nil {
		return x.AttackLogs
	}
	return nil
}

func (x *PlayerGvg) GetDefendLogs() []*common.GvgBattleLog {
	if x != nil {
		return x.DefendLogs
	}
	return nil
}

func (x *PlayerGvg) GetKilledLogs() []*common.GvgBattleLog {
	if x != nil {
		return x.KilledLogs
	}
	return nil
}

func (x *PlayerGvg) GetHasGvgDefendMessage() bool {
	if x != nil {
		return x.HasGvgDefendMessage
	}
	return false
}

func (x *PlayerGvg) GetSeeDefendMessageTime() int64 {
	if x != nil {
		return x.SeeDefendMessageTime
	}
	return 0
}

func (x *PlayerGvg) GetOverflowMoves() uint32 {
	if x != nil {
		return x.OverflowMoves
	}
	return 0
}

func (x *PlayerGvg) GetHasWeekEnterGvg() bool {
	if x != nil {
		return x.HasWeekEnterGvg
	}
	return false
}

func (x *PlayerGvg) GetBeginBattleData() *GvgBeginBattleData {
	if x != nil {
		return x.BeginBattleData
	}
	return nil
}

func (x *PlayerGvg) GetLastSeeGvgFlagTime() int64 {
	if x != nil {
		return x.LastSeeGvgFlagTime
	}
	return 0
}

func (x *PlayerGvg) GetIsDealCrossSeasonTask() bool {
	if x != nil {
		return x.IsDealCrossSeasonTask
	}
	return false
}

// gvg玩家
type GvgPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               uint64            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                      // 用户id
	GuildId           uint64            `protobuf:"varint,2,opt,name=guildId,proto3" json:"guildId,omitempty"`                                                                                                              // 联盟id
	ServerId          uint64            `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                                                                                            // 服务器id
	MaxInCityPercents map[uint64]uint32 `protobuf:"bytes,4,rep,name=maxInCityPercents,proto3" json:"maxInCityPercents,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 返回玩家占领过的矿排名在城池的最高百分比，由小到大
	Holys             map[uint32]uint32 `protobuf:"bytes,5,rep,name=holys,proto3" json:"holys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                         // gvg圣物 id:level
	WinCount          uint32            `protobuf:"varint,13,opt,name=winCount,proto3" json:"winCount,omitempty"`                                                                                                           // 胜次数
}

func (x *GvgPlayer) Reset() {
	*x = GvgPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgPlayer) ProtoMessage() {}

func (x *GvgPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgPlayer.ProtoReflect.Descriptor instead.
func (*GvgPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{260}
}

func (x *GvgPlayer) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GvgPlayer) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GvgPlayer) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GvgPlayer) GetMaxInCityPercents() map[uint64]uint32 {
	if x != nil {
		return x.MaxInCityPercents
	}
	return nil
}

func (x *GvgPlayer) GetHolys() map[uint32]uint32 {
	if x != nil {
		return x.Holys
	}
	return nil
}

func (x *GvgPlayer) GetWinCount() uint32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

// Gvg服务器信息
type GvgServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 服务器id
	ServerName       string `protobuf:"bytes,2,opt,name=serverName,proto3" json:"serverName,omitempty"`              // 服务器名称
	Camp             uint32 `protobuf:"varint,3,opt,name=camp,proto3" json:"camp,omitempty"`                         // 阵营
	Score            uint64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                       // 积分
	MapId            uint64 `protobuf:"varint,5,opt,name=mapId,proto3" json:"mapId,omitempty"`                       // 地图id
	Dirty            bool   `protobuf:"varint,6,opt,name=dirty,proto3" json:"dirty,omitempty"`                       // 脏标记
	EnterPlayerCount uint32 `protobuf:"varint,7,opt,name=enterPlayerCount,proto3" json:"enterPlayerCount,omitempty"` // 参与gvg玩法玩家数量
}

func (x *GvgServer) Reset() {
	*x = GvgServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgServer) ProtoMessage() {}

func (x *GvgServer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgServer.ProtoReflect.Descriptor instead.
func (*GvgServer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{261}
}

func (x *GvgServer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GvgServer) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *GvgServer) GetCamp() uint32 {
	if x != nil {
		return x.Camp
	}
	return 0
}

func (x *GvgServer) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GvgServer) GetMapId() uint64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *GvgServer) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *GvgServer) GetEnterPlayerCount() uint32 {
	if x != nil {
		return x.EnterPlayerCount
	}
	return 0
}

// Gvg城池信息
type GvgCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // 城池id
	OccupyInfo  *GvgOccupyInfo `protobuf:"bytes,2,opt,name=occupyInfo,proto3" json:"occupyInfo,omitempty"`    // 占领信息，具体到联盟
	HasAddScore bool           `protobuf:"varint,3,opt,name=hasAddScore,proto3" json:"hasAddScore,omitempty"` // 是否加过积分--优化
}

func (x *GvgCity) Reset() {
	*x = GvgCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgCity) ProtoMessage() {}

func (x *GvgCity) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgCity.ProtoReflect.Descriptor instead.
func (*GvgCity) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{262}
}

func (x *GvgCity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GvgCity) GetOccupyInfo() *GvgOccupyInfo {
	if x != nil {
		return x.OccupyInfo
	}
	return nil
}

func (x *GvgCity) GetHasAddScore() bool {
	if x != nil {
		return x.HasAddScore
	}
	return false
}

// Gvg矿点
type GvgMine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 矿点id
	OccupyInfo     *GvgOccupyInfo `protobuf:"bytes,2,opt,name=occupyInfo,proto3" json:"occupyInfo,omitempty"`          // 占领信息
	TypeId         uint32         `protobuf:"varint,3,opt,name=typeId,proto3" json:"typeId,omitempty"`                 // 矿点id
	BattleConfigId int32          `protobuf:"varint,4,opt,name=battleConfigId,proto3" json:"battleConfigId,omitempty"` // 矿点的战斗配置id
}

func (x *GvgMine) Reset() {
	*x = GvgMine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgMine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgMine) ProtoMessage() {}

func (x *GvgMine) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgMine.ProtoReflect.Descriptor instead.
func (*GvgMine) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{263}
}

func (x *GvgMine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GvgMine) GetOccupyInfo() *GvgOccupyInfo {
	if x != nil {
		return x.OccupyInfo
	}
	return nil
}

func (x *GvgMine) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *GvgMine) GetBattleConfigId() int32 {
	if x != nil {
		return x.BattleConfigId
	}
	return 0
}

// Gvg通用占领信息
type GvgOccupyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camp          uint32 `protobuf:"varint,1,opt,name=camp,proto3" json:"camp,omitempty"`                    // 占领的阵营
	ServerId      uint64 `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`            // 占领的服务器id
	GuildId       uint64 `protobuf:"varint,3,opt,name=guildId,proto3" json:"guildId,omitempty"`              // 占领城池的联盟id
	PlayerId      uint64 `protobuf:"varint,4,opt,name=playerId,proto3" json:"playerId,omitempty"`            // 占领的玩家id（当具体到玩家时候会有这个字段），存在即占领
	Ft            uint32 `protobuf:"varint,5,opt,name=ft,proto3" json:"ft,omitempty"`                        // 队伍id
	OccupyTime    int64  `protobuf:"varint,6,opt,name=occupyTime,proto3" json:"occupyTime,omitempty"`        // 占领时间戳
	AddTime       int64  `protobuf:"varint,7,opt,name=addTime,proto3" json:"addTime,omitempty"`              // 添加积分的时间：动态在变
	GetRewardTime int64  `protobuf:"varint,8,opt,name=getRewardTime,proto3" json:"getRewardTime,omitempty"`  // 领取挂机奖励时间戳
	HolyScoreAdd  uint32 `protobuf:"varint,9,opt,name=holyScoreAdd,proto3" json:"holyScoreAdd,omitempty"`    // 玩家占领养成相关添加值
	HolyItemAdd   uint32 `protobuf:"varint,10,opt,name=holyItemAdd,proto3" json:"holyItemAdd,omitempty"`     // 玩家占领养成相关添加值
	TotalScoreAdd uint32 `protobuf:"varint,11,opt,name=totalScoreAdd,proto3" json:"totalScoreAdd,omitempty"` // 累计积分
	TotalItemAdd  uint32 `protobuf:"varint,12,opt,name=totalItemAdd,proto3" json:"totalItemAdd,omitempty"`   // 累计道具
}

func (x *GvgOccupyInfo) Reset() {
	*x = GvgOccupyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgOccupyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgOccupyInfo) ProtoMessage() {}

func (x *GvgOccupyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgOccupyInfo.ProtoReflect.Descriptor instead.
func (*GvgOccupyInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{264}
}

func (x *GvgOccupyInfo) GetCamp() uint32 {
	if x != nil {
		return x.Camp
	}
	return 0
}

func (x *GvgOccupyInfo) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GvgOccupyInfo) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GvgOccupyInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GvgOccupyInfo) GetFt() uint32 {
	if x != nil {
		return x.Ft
	}
	return 0
}

func (x *GvgOccupyInfo) GetOccupyTime() int64 {
	if x != nil {
		return x.OccupyTime
	}
	return 0
}

func (x *GvgOccupyInfo) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *GvgOccupyInfo) GetGetRewardTime() int64 {
	if x != nil {
		return x.GetRewardTime
	}
	return 0
}

func (x *GvgOccupyInfo) GetHolyScoreAdd() uint32 {
	if x != nil {
		return x.HolyScoreAdd
	}
	return 0
}

func (x *GvgOccupyInfo) GetHolyItemAdd() uint32 {
	if x != nil {
		return x.HolyItemAdd
	}
	return 0
}

func (x *GvgOccupyInfo) GetTotalScoreAdd() uint32 {
	if x != nil {
		return x.TotalScoreAdd
	}
	return 0
}

func (x *GvgOccupyInfo) GetTotalItemAdd() uint32 {
	if x != nil {
		return x.TotalItemAdd
	}
	return 0
}

// 安全区存储结构
type GvgSafeAreaOccupyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OccupyInfos map[uint32]*GvgOccupyInfo `protobuf:"bytes,1,rep,name=occupyInfos,proto3" json:"occupyInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GvgSafeAreaOccupyInfo) Reset() {
	*x = GvgSafeAreaOccupyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgSafeAreaOccupyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgSafeAreaOccupyInfo) ProtoMessage() {}

func (x *GvgSafeAreaOccupyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgSafeAreaOccupyInfo.ProtoReflect.Descriptor instead.
func (*GvgSafeAreaOccupyInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{265}
}

func (x *GvgSafeAreaOccupyInfo) GetOccupyInfos() map[uint32]*GvgOccupyInfo {
	if x != nil {
		return x.OccupyInfos
	}
	return nil
}

type GvgPlayerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`              // 玩家id
	ServerId   uint64 `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`    // 服务器id
	PlayerName string `protobuf:"bytes,3,opt,name=playerName,proto3" json:"playerName,omitempty"` // 玩家名称 (当具体到玩家的时候会有这个字段)
}

func (x *GvgPlayerMetadata) Reset() {
	*x = GvgPlayerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgPlayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgPlayerMetadata) ProtoMessage() {}

func (x *GvgPlayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgPlayerMetadata.ProtoReflect.Descriptor instead.
func (*GvgPlayerMetadata) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{266}
}

func (x *GvgPlayerMetadata) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GvgPlayerMetadata) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GvgPlayerMetadata) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type GvgGuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   uint64 `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`     // 联盟id
	ServerId  uint64 `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`   // 服务器id
	GuildName string `protobuf:"bytes,3,opt,name=guildName,proto3" json:"guildName,omitempty"`  // 联盟名称
	GuildFlag int32  `protobuf:"varint,4,opt,name=guildFlag,proto3" json:"guildFlag,omitempty"` // 联盟旗帜
}

func (x *GvgGuildMetadata) Reset() {
	*x = GvgGuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgGuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgGuildMetadata) ProtoMessage() {}

func (x *GvgGuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgGuildMetadata.ProtoReflect.Descriptor instead.
func (*GvgGuildMetadata) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{267}
}

func (x *GvgGuildMetadata) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GvgGuildMetadata) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GvgGuildMetadata) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *GvgGuildMetadata) GetGuildFlag() int32 {
	if x != nil {
		return x.GuildFlag
	}
	return 0
}

// gvg基础数据
type GvgCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`               // 当前版本
	DealDayEndTime int64 `protobuf:"varint,2,opt,name=dealDayEndTime,proto3" json:"dealDayEndTime,omitempty"` // 处理每日结算的时间戳
}

func (x *GvgCommon) Reset() {
	*x = GvgCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgCommon) ProtoMessage() {}

func (x *GvgCommon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgCommon.ProtoReflect.Descriptor instead.
func (*GvgCommon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{268}
}

func (x *GvgCommon) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GvgCommon) GetDealDayEndTime() int64 {
	if x != nil {
		return x.DealDayEndTime
	}
	return 0
}

// 开始战斗信息
type GvgBeginBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                   // uid
	Ft           uint32 `protobuf:"varint,2,opt,name=ft,proto3" json:"ft,omitempty"`                     // 自己的队伍
	TargetUid    uint64 `protobuf:"varint,3,opt,name=targetUid,proto3" json:"targetUid,omitempty"`       // 目标玩家
	TargetFt     uint32 `protobuf:"varint,4,opt,name=targetFt,proto3" json:"targetFt,omitempty"`         // 目标队伍
	MineId       uint64 `protobuf:"varint,5,opt,name=mineId,proto3" json:"mineId,omitempty"`             // 目标矿
	BeforeMineId uint64 `protobuf:"varint,6,opt,name=beforeMineId,proto3" json:"beforeMineId,omitempty"` // 当前队伍所在矿
}

func (x *GvgBeginBattleData) Reset() {
	*x = GvgBeginBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgBeginBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgBeginBattleData) ProtoMessage() {}

func (x *GvgBeginBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgBeginBattleData.ProtoReflect.Descriptor instead.
func (*GvgBeginBattleData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{269}
}

func (x *GvgBeginBattleData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GvgBeginBattleData) GetFt() uint32 {
	if x != nil {
		return x.Ft
	}
	return 0
}

func (x *GvgBeginBattleData) GetTargetUid() uint64 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *GvgBeginBattleData) GetTargetFt() uint32 {
	if x != nil {
		return x.TargetFt
	}
	return 0
}

func (x *GvgBeginBattleData) GetMineId() uint64 {
	if x != nil {
		return x.MineId
	}
	return 0
}

func (x *GvgBeginBattleData) GetBeforeMineId() uint64 {
	if x != nil {
		return x.BeforeMineId
	}
	return 0
}

// gvg标记
type GvgGuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GvgFlags         map[uint64]*GvgFlag `protobuf:"bytes,1,rep,name=gvgFlags,proto3" json:"gvgFlags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // cityId->标记
	EditFlagLockTime int64               `protobuf:"varint,2,opt,name=editFlagLockTime,proto3" json:"editFlagLockTime,omitempty"`                                                                         // 修改地图标记时间
	EditFlagLockUser uint64              `protobuf:"varint,3,opt,name=editFlagLockUser,proto3" json:"editFlagLockUser,omitempty"`                                                                         // 修改地图标记的人
}

func (x *GvgGuildData) Reset() {
	*x = GvgGuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgGuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgGuildData) ProtoMessage() {}

func (x *GvgGuildData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgGuildData.ProtoReflect.Descriptor instead.
func (*GvgGuildData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{270}
}

func (x *GvgGuildData) GetGvgFlags() map[uint64]*GvgFlag {
	if x != nil {
		return x.GvgFlags
	}
	return nil
}

func (x *GvgGuildData) GetEditFlagLockTime() int64 {
	if x != nil {
		return x.EditFlagLockTime
	}
	return 0
}

func (x *GvgGuildData) GetEditFlagLockUser() uint64 {
	if x != nil {
		return x.EditFlagLockUser
	}
	return 0
}

type GvgFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId     uint64 `protobuf:"varint,1,opt,name=cityId,proto3" json:"cityId,omitempty"`         // 城池id
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`              // 名称
	CreateTime int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"` // 创建标记时间
}

func (x *GvgFlag) Reset() {
	*x = GvgFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgFlag) ProtoMessage() {}

func (x *GvgFlag) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgFlag.ProtoReflect.Descriptor instead.
func (*GvgFlag) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{271}
}

func (x *GvgFlag) GetCityId() uint64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *GvgFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GvgFlag) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// SeasonReward 赛季奖励
type SeasonReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasGainRedEnvelope     bool     `protobuf:"varint,2,opt,name=HasGainRedEnvelope,proto3" json:"HasGainRedEnvelope,omitempty"`                //首次领取红包
	LoginRewardTimes       int32    `protobuf:"varint,3,opt,name=LoginRewardTimes,proto3" json:"LoginRewardTimes,omitempty"`                    //登录奖励天数
	HasGainLoginRewardList []uint32 `protobuf:"varint,5,rep,packed,name=HasGainLoginRewardList,proto3" json:"HasGainLoginRewardList,omitempty"` //已领取的奖励列表
	LastGetRandomGiftTime  int64    `protobuf:"varint,6,opt,name=lastGetRandomGiftTime,proto3" json:"lastGetRandomGiftTime,omitempty"`          //最后一次领取随机红包时间
}

func (x *SeasonReward) Reset() {
	*x = SeasonReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonReward) ProtoMessage() {}

func (x *SeasonReward) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonReward.ProtoReflect.Descriptor instead.
func (*SeasonReward) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{272}
}

func (x *SeasonReward) GetHasGainRedEnvelope() bool {
	if x != nil {
		return x.HasGainRedEnvelope
	}
	return false
}

func (x *SeasonReward) GetLoginRewardTimes() int32 {
	if x != nil {
		return x.LoginRewardTimes
	}
	return 0
}

func (x *SeasonReward) GetHasGainLoginRewardList() []uint32 {
	if x != nil {
		return x.HasGainLoginRewardList
	}
	return nil
}

func (x *SeasonReward) GetLastGetRandomGiftTime() int64 {
	if x != nil {
		return x.LastGetRandomGiftTime
	}
	return 0
}

//GainReward 已领取的奖励列表
type SeasonTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      int32   `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                  //挑战次数
	GainReward []int32 `protobuf:"varint,2,rep,packed,name=GainReward,proto3" json:"GainReward,omitempty"` //已领取的奖励
}

func (x *SeasonTaskInfo) Reset() {
	*x = SeasonTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTaskInfo) ProtoMessage() {}

func (x *SeasonTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTaskInfo.ProtoReflect.Descriptor instead.
func (*SeasonTaskInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{273}
}

func (x *SeasonTaskInfo) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *SeasonTaskInfo) GetGainReward() []int32 {
	if x != nil {
		return x.GainReward
	}
	return nil
}

// worldBoss------------------------------manager--------------
type GameWorldBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossData     *BossData `protobuf:"bytes,1,opt,name=bossData,proto3" json:"bossData,omitempty"`
	KilledBossId int32     `protobuf:"varint,2,opt,name=killedBossId,proto3" json:"killedBossId,omitempty"` //已经击杀的bossId
	VersionID    int64     `protobuf:"varint,3,opt,name=versionID,proto3" json:"versionID,omitempty"`       //版本
}

func (x *GameWorldBoss) Reset() {
	*x = GameWorldBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameWorldBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameWorldBoss) ProtoMessage() {}

func (x *GameWorldBoss) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameWorldBoss.ProtoReflect.Descriptor instead.
func (*GameWorldBoss) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{274}
}

func (x *GameWorldBoss) GetBossData() *BossData {
	if x != nil {
		return x.BossData
	}
	return nil
}

func (x *GameWorldBoss) GetKilledBossId() int32 {
	if x != nil {
		return x.KilledBossId
	}
	return 0
}

func (x *GameWorldBoss) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

type BossData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId            int32  `protobuf:"varint,1,opt,name=bossId,proto3" json:"bossId,omitempty"`
	PlayerTotalDamgHp uint64 `protobuf:"varint,2,opt,name=playerTotalDamgHp,proto3" json:"playerTotalDamgHp,omitempty"` //玩家对当前boss累计造成的伤害
}

func (x *BossData) Reset() {
	*x = BossData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossData) ProtoMessage() {}

func (x *BossData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossData.ProtoReflect.Descriptor instead.
func (*BossData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{275}
}

func (x *BossData) GetBossId() int32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *BossData) GetPlayerTotalDamgHp() uint64 {
	if x != nil {
		return x.PlayerTotalDamgHp
	}
	return 0
}

//worldBoss----------------------------player---------------------
type WorldBossPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCaseHp          uint64                      `protobuf:"varint,1,opt,name=totalCaseHp,proto3" json:"totalCaseHp,omitempty"`                                                                                      //累计造成Boss血量
	TotalRealDmg         uint64                      `protobuf:"varint,2,opt,name=totalRealDmg,proto3" json:"totalRealDmg,omitempty"`                                                                                    //累计造成的真实伤害
	ChallengeTimes       int32                       `protobuf:"varint,3,opt,name=challengeTimes,proto3" json:"challengeTimes,omitempty"`                                                                                //已经挑战次数
	UsedCommanders       []int32                     `protobuf:"varint,5,rep,packed,name=usedCommanders,proto3" json:"usedCommanders,omitempty"`                                                                         // 使用过的主将
	UsedCounsellor       []int32                     `protobuf:"varint,6,rep,packed,name=usedCounsellor,proto3" json:"usedCounsellor,omitempty"`                                                                         //使用过的军师
	ChallengeTimesReward []int32                     `protobuf:"varint,7,rep,packed,name=challengeTimesReward,proto3" json:"challengeTimesReward,omitempty"`                                                             //已领取的挑战次数奖励
	KilledBossReward     []int32                     `protobuf:"varint,8,rep,packed,name=killedBossReward,proto3" json:"killedBossReward,omitempty"`                                                                     //已经领取过的击杀boss奖励
	BestRank             uint32                      `protobuf:"varint,9,opt,name=bestRank,proto3" json:"bestRank,omitempty"`                                                                                            // 历史最高排名
	UsedBeast            []int32                     `protobuf:"varint,10,rep,packed,name=usedBeast,proto3" json:"usedBeast,omitempty"`                                                                                  //使用过的神兽
	RewardIndex          int32                       `protobuf:"varint,11,opt,name=rewardIndex,proto3" json:"rewardIndex,omitempty"`                                                                                     //奖励索引
	SweepInfo            map[int32]*WorldBossHisInfo `protobuf:"bytes,12,rep,name=sweepInfo,proto3" json:"sweepInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扫荡记录信息 bossId : info
}

func (x *WorldBossPlayer) Reset() {
	*x = WorldBossPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldBossPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldBossPlayer) ProtoMessage() {}

func (x *WorldBossPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldBossPlayer.ProtoReflect.Descriptor instead.
func (*WorldBossPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{276}
}

func (x *WorldBossPlayer) GetTotalCaseHp() uint64 {
	if x != nil {
		return x.TotalCaseHp
	}
	return 0
}

func (x *WorldBossPlayer) GetTotalRealDmg() uint64 {
	if x != nil {
		return x.TotalRealDmg
	}
	return 0
}

func (x *WorldBossPlayer) GetChallengeTimes() int32 {
	if x != nil {
		return x.ChallengeTimes
	}
	return 0
}

func (x *WorldBossPlayer) GetUsedCommanders() []int32 {
	if x != nil {
		return x.UsedCommanders
	}
	return nil
}

func (x *WorldBossPlayer) GetUsedCounsellor() []int32 {
	if x != nil {
		return x.UsedCounsellor
	}
	return nil
}

func (x *WorldBossPlayer) GetChallengeTimesReward() []int32 {
	if x != nil {
		return x.ChallengeTimesReward
	}
	return nil
}

func (x *WorldBossPlayer) GetKilledBossReward() []int32 {
	if x != nil {
		return x.KilledBossReward
	}
	return nil
}

func (x *WorldBossPlayer) GetBestRank() uint32 {
	if x != nil {
		return x.BestRank
	}
	return 0
}

func (x *WorldBossPlayer) GetUsedBeast() []int32 {
	if x != nil {
		return x.UsedBeast
	}
	return nil
}

func (x *WorldBossPlayer) GetRewardIndex() int32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *WorldBossPlayer) GetSweepInfo() map[int32]*WorldBossHisInfo {
	if x != nil {
		return x.SweepInfo
	}
	return nil
}

type WorldBossHisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurCausedHp         uint64  `protobuf:"varint,1,opt,name=curCausedHp,proto3" json:"curCausedHp,omitempty"`                        //当日当前累计造成的伤害
	CurUsedCommanders   []int32 `protobuf:"varint,2,rep,packed,name=curUsedCommanders,proto3" json:"curUsedCommanders,omitempty"`     // 当日当前使用过的主将
	CurUsedCounsellor   []int32 `protobuf:"varint,3,rep,packed,name=curUsedCounsellor,proto3" json:"curUsedCounsellor,omitempty"`     //当日当前使用过的军师
	CurUsedBeast        []int32 `protobuf:"varint,4,rep,packed,name=curUsedBeast,proto3" json:"curUsedBeast,omitempty"`               //当日当前使用过的神兽
	MaxHpCurBoss        uint64  `protobuf:"varint,5,opt,name=maxHpCurBoss,proto3" json:"maxHpCurBoss,omitempty"`                      //对当前boss造成的最高伤害
	MaxHpUsedCommanders []int32 `protobuf:"varint,6,rep,packed,name=maxHpUsedCommanders,proto3" json:"maxHpUsedCommanders,omitempty"` // 最高伤害时使用的主将集合
	MaxHpUsedCounsellor []int32 `protobuf:"varint,7,rep,packed,name=maxHpUsedCounsellor,proto3" json:"maxHpUsedCounsellor,omitempty"` //最高伤害时使用的军师集合
	MaxHpUsedBeast      []int32 `protobuf:"varint,8,rep,packed,name=maxHpUsedBeast,proto3" json:"maxHpUsedBeast,omitempty"`           //最高伤害时使用的神兽集合
	MaxHpPower          uint32  `protobuf:"varint,9,opt,name=maxHpPower,proto3" json:"maxHpPower,omitempty"`                          //最大伤害时玩家战力
}

func (x *WorldBossHisInfo) Reset() {
	*x = WorldBossHisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldBossHisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldBossHisInfo) ProtoMessage() {}

func (x *WorldBossHisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldBossHisInfo.ProtoReflect.Descriptor instead.
func (*WorldBossHisInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{277}
}

func (x *WorldBossHisInfo) GetCurCausedHp() uint64 {
	if x != nil {
		return x.CurCausedHp
	}
	return 0
}

func (x *WorldBossHisInfo) GetCurUsedCommanders() []int32 {
	if x != nil {
		return x.CurUsedCommanders
	}
	return nil
}

func (x *WorldBossHisInfo) GetCurUsedCounsellor() []int32 {
	if x != nil {
		return x.CurUsedCounsellor
	}
	return nil
}

func (x *WorldBossHisInfo) GetCurUsedBeast() []int32 {
	if x != nil {
		return x.CurUsedBeast
	}
	return nil
}

func (x *WorldBossHisInfo) GetMaxHpCurBoss() uint64 {
	if x != nil {
		return x.MaxHpCurBoss
	}
	return 0
}

func (x *WorldBossHisInfo) GetMaxHpUsedCommanders() []int32 {
	if x != nil {
		return x.MaxHpUsedCommanders
	}
	return nil
}

func (x *WorldBossHisInfo) GetMaxHpUsedCounsellor() []int32 {
	if x != nil {
		return x.MaxHpUsedCounsellor
	}
	return nil
}

func (x *WorldBossHisInfo) GetMaxHpUsedBeast() []int32 {
	if x != nil {
		return x.MaxHpUsedBeast
	}
	return nil
}

func (x *WorldBossHisInfo) GetMaxHpPower() uint32 {
	if x != nil {
		return x.MaxHpPower
	}
	return 0
}

//CityGiftAct 主城小物件活动
type CityGiftAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActID       int32                    `protobuf:"varint,1,opt,name=actID,proto3" json:"actID,omitempty"`                                                                                       // 活动id
	CdTime      int64                    `protobuf:"varint,2,opt,name=cdTime,proto3" json:"cdTime,omitempty"`                                                                                     // 奖品上一次使用时间，记录cd
	Score       uint32                   `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                                                                                       // 奖品积分
	Item        map[uint32]*CityGiftInfo `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 主城物件列表
	RewardTimes uint32                   `protobuf:"varint,5,opt,name=rewardTimes,proto3" json:"rewardTimes,omitempty"`                                                                           // 领奖次数
	OpenId      int32                    `protobuf:"varint,6,opt,name=openId,proto3" json:"openId,omitempty"`                                                                                     // 开启Id
	HasGenItems []uint32                 `protobuf:"varint,7,rep,packed,name=hasGenItems,proto3" json:"hasGenItems,omitempty"`                                                                    // 已经生成过的列表
}

func (x *CityGiftAct) Reset() {
	*x = CityGiftAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityGiftAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityGiftAct) ProtoMessage() {}

func (x *CityGiftAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityGiftAct.ProtoReflect.Descriptor instead.
func (*CityGiftAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{278}
}

func (x *CityGiftAct) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *CityGiftAct) GetCdTime() int64 {
	if x != nil {
		return x.CdTime
	}
	return 0
}

func (x *CityGiftAct) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CityGiftAct) GetItem() map[uint32]*CityGiftInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CityGiftAct) GetRewardTimes() uint32 {
	if x != nil {
		return x.RewardTimes
	}
	return 0
}

func (x *CityGiftAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CityGiftAct) GetHasGenItems() []uint32 {
	if x != nil {
		return x.HasGenItems
	}
	return nil
}

type CityGiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenTime    int64  `protobuf:"varint,1,opt,name=genTime,proto3" json:"genTime,omitempty"`       // 生成时的时间戳
	ExpireTime int64  `protobuf:"varint,2,opt,name=expireTime,proto3" json:"expireTime,omitempty"` // 生成物品的到期时间
	IndexId    uint32 `protobuf:"varint,3,opt,name=indexId,proto3" json:"indexId,omitempty"`       // 物件位置坐标
	PicId      uint32 `protobuf:"varint,5,opt,name=picId,proto3" json:"picId,omitempty"`           // 生成物品图片
	Id         int32  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                 // cityItemGenerate表Id
}

func (x *CityGiftInfo) Reset() {
	*x = CityGiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityGiftInfo) ProtoMessage() {}

func (x *CityGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityGiftInfo.ProtoReflect.Descriptor instead.
func (*CityGiftInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{279}
}

func (x *CityGiftInfo) GetGenTime() int64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *CityGiftInfo) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *CityGiftInfo) GetIndexId() uint32 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *CityGiftInfo) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

func (x *CityGiftInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 跨服通用数据
type CrossData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOffset int64 `protobuf:"varint,1,opt,name=timeOffset,proto3" json:"timeOffset,omitempty"` // 时间偏移
}

func (x *CrossData) Reset() {
	*x = CrossData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossData) ProtoMessage() {}

func (x *CrossData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossData.ProtoReflect.Descriptor instead.
func (*CrossData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{280}
}

func (x *CrossData) GetTimeOffset() int64 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

// CommanderVisit 猛将如云
type CommanderVisit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score          uint32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`                   // 抽奖积分
	TodayPlayTimes uint32 `protobuf:"varint,2,opt,name=todayPlayTimes,proto3" json:"todayPlayTimes,omitempty"` // 今日寻访次数
	OpenId         int32  `protobuf:"varint,3,opt,name=openId,proto3" json:"openId,omitempty"`                 //开启id
	ActId          int32  `protobuf:"varint,4,opt,name=actId,proto3" json:"actId,omitempty"`                   // 活动id
	CritTimes      uint32 `protobuf:"varint,5,opt,name=critTimes,proto3" json:"critTimes,omitempty"`           // 暴击次数
}

func (x *CommanderVisit) Reset() {
	*x = CommanderVisit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommanderVisit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommanderVisit) ProtoMessage() {}

func (x *CommanderVisit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommanderVisit.ProtoReflect.Descriptor instead.
func (*CommanderVisit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{281}
}

func (x *CommanderVisit) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CommanderVisit) GetTodayPlayTimes() uint32 {
	if x != nil {
		return x.TodayPlayTimes
	}
	return 0
}

func (x *CommanderVisit) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CommanderVisit) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *CommanderVisit) GetCritTimes() uint32 {
	if x != nil {
		return x.CritTimes
	}
	return 0
}

type CommonTowerFundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPaid       bool    `protobuf:"varint,2,opt,name=isPaid,proto3" json:"isPaid,omitempty"`                    // 是否付费
	GotFreeGifts []int32 `protobuf:"varint,3,rep,packed,name=gotFreeGifts,proto3" json:"gotFreeGifts,omitempty"` // 已领免费礼品
	GotPayGifts  []int32 `protobuf:"varint,4,rep,packed,name=gotPayGifts,proto3" json:"gotPayGifts,omitempty"`   // 已领付费礼品
}

func (x *CommonTowerFundData) Reset() {
	*x = CommonTowerFundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTowerFundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTowerFundData) ProtoMessage() {}

func (x *CommonTowerFundData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTowerFundData.ProtoReflect.Descriptor instead.
func (*CommonTowerFundData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{282}
}

func (x *CommonTowerFundData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonTowerFundData) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *CommonTowerFundData) GetGotFreeGifts() []int32 {
	if x != nil {
		return x.GotFreeGifts
	}
	return nil
}

func (x *CommonTowerFundData) GetGotPayGifts() []int32 {
	if x != nil {
		return x.GotPayGifts
	}
	return nil
}

// 通用爬塔基金活动
type CommonTowerFundAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funds  []*CommonTowerFundData `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds,omitempty"`
	OpenId int32                  `protobuf:"varint,2,opt,name=openId,proto3" json:"openId,omitempty"` // 活动开启id
	ActId  int32                  `protobuf:"varint,3,opt,name=actId,proto3" json:"actId,omitempty"`   // 活动Id
}

func (x *CommonTowerFundAct) Reset() {
	*x = CommonTowerFundAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTowerFundAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTowerFundAct) ProtoMessage() {}

func (x *CommonTowerFundAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTowerFundAct.ProtoReflect.Descriptor instead.
func (*CommonTowerFundAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{283}
}

func (x *CommonTowerFundAct) GetFunds() []*CommonTowerFundData {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *CommonTowerFundAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CommonTowerFundAct) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

// LuckDrawAct 轮盘抽奖
type LuckDrawAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId           int32            `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                                                                                                  // 活动开启id
	ActId            int32            `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`                                                                                                    // 活动id
	BuyCoin          []*BuyDrawInfo   `protobuf:"bytes,3,rep,name=buyCoin,proto3" json:"buyCoin,omitempty"`                                                                                                 // 购买代币
	BuyItem          []*BuyDrawInfo   `protobuf:"bytes,4,rep,name=buyItem,proto3" json:"buyItem,omitempty"`                                                                                                 // 购买商店商品
	PlayTimes        uint32           `protobuf:"varint,5,opt,name=playTimes,proto3" json:"playTimes,omitempty"`                                                                                            // 抽奖次数
	GotGifts         []uint32         `protobuf:"varint,6,rep,packed,name=gotGifts,proto3" json:"gotGifts,omitempty"`                                                                                       // 已领取的进度奖励
	LuckInfo         *LuckDrawInfo    `protobuf:"bytes,7,opt,name=luckInfo,proto3" json:"luckInfo,omitempty"`                                                                                               // 幸运值
	AwardTimes       map[int32]uint32 `protobuf:"bytes,8,rep,name=awardTimes,proto3" json:"awardTimes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //奖励id->次数
	Score            uint32           `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`                                                                                                    // 玩家积分
	HasServiceReward bool             `protobuf:"varint,10,opt,name=hasServiceReward,proto3" json:"hasServiceReward,omitempty"`                                                                             //是否领取过服务器大奖
	HasLastTime      bool             `protobuf:"varint,11,opt,name=hasLastTime,proto3" json:"hasLastTime,omitempty"`                                                                                       // 最终时刻已出现
}

func (x *LuckDrawAct) Reset() {
	*x = LuckDrawAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckDrawAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckDrawAct) ProtoMessage() {}

func (x *LuckDrawAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckDrawAct.ProtoReflect.Descriptor instead.
func (*LuckDrawAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{284}
}

func (x *LuckDrawAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *LuckDrawAct) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *LuckDrawAct) GetBuyCoin() []*BuyDrawInfo {
	if x != nil {
		return x.BuyCoin
	}
	return nil
}

func (x *LuckDrawAct) GetBuyItem() []*BuyDrawInfo {
	if x != nil {
		return x.BuyItem
	}
	return nil
}

func (x *LuckDrawAct) GetPlayTimes() uint32 {
	if x != nil {
		return x.PlayTimes
	}
	return 0
}

func (x *LuckDrawAct) GetGotGifts() []uint32 {
	if x != nil {
		return x.GotGifts
	}
	return nil
}

func (x *LuckDrawAct) GetLuckInfo() *LuckDrawInfo {
	if x != nil {
		return x.LuckInfo
	}
	return nil
}

func (x *LuckDrawAct) GetAwardTimes() map[int32]uint32 {
	if x != nil {
		return x.AwardTimes
	}
	return nil
}

func (x *LuckDrawAct) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LuckDrawAct) GetHasServiceReward() bool {
	if x != nil {
		return x.HasServiceReward
	}
	return false
}

func (x *LuckDrawAct) GetHasLastTime() bool {
	if x != nil {
		return x.HasLastTime
	}
	return false
}

type LuckDrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score uint32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"` //幸运值
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"` //阶段 从1开始
}

func (x *LuckDrawInfo) Reset() {
	*x = LuckDrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckDrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckDrawInfo) ProtoMessage() {}

func (x *LuckDrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckDrawInfo.ProtoReflect.Descriptor instead.
func (*LuckDrawInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{285}
}

func (x *LuckDrawInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LuckDrawInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// BuyDrawItem 夺宝转盘购买代币
type BuyDrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             // 物品id
	BuyTimes uint32 `protobuf:"varint,2,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"` //购买次数
}

func (x *BuyDrawInfo) Reset() {
	*x = BuyDrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyDrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyDrawInfo) ProtoMessage() {}

func (x *BuyDrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyDrawInfo.ProtoReflect.Descriptor instead.
func (*BuyDrawInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{286}
}

func (x *BuyDrawInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuyDrawInfo) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

// GiftRainAct 红包雨
type GiftRainAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId           int32   `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                        // 活动开启id
	ActId            int32   `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`                          // 活动id
	DoubleGiftTimes  uint32  `protobuf:"varint,3,opt,name=doubleGiftTimes,proto3" json:"doubleGiftTimes,omitempty"`      // 触发双倍次数
	TakeRewardTime   []int64 `protobuf:"varint,4,rep,packed,name=takeRewardTime,proto3" json:"takeRewardTime,omitempty"` // 今日已领奖阶段数
	HasServiceReward bool    `protobuf:"varint,5,opt,name=hasServiceReward,proto3" json:"hasServiceReward,omitempty"`    // 是否获得服务器大奖
}

func (x *GiftRainAct) Reset() {
	*x = GiftRainAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftRainAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftRainAct) ProtoMessage() {}

func (x *GiftRainAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftRainAct.ProtoReflect.Descriptor instead.
func (*GiftRainAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{287}
}

func (x *GiftRainAct) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *GiftRainAct) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *GiftRainAct) GetDoubleGiftTimes() uint32 {
	if x != nil {
		return x.DoubleGiftTimes
	}
	return 0
}

func (x *GiftRainAct) GetTakeRewardTime() []int64 {
	if x != nil {
		return x.TakeRewardTime
	}
	return nil
}

func (x *GiftRainAct) GetHasServiceReward() bool {
	if x != nil {
		return x.HasServiceReward
	}
	return false
}

// 神兽系统
type BeastGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnBeast          []*common.Beast          `protobuf:"bytes,1,rep,name=ownBeast,proto3" json:"ownBeast,omitempty"`                                                                                                  // 神兽列表
	LocationInfo      map[int32]*BeastLocation `protobuf:"bytes,2,rep,name=locationInfo,proto3" json:"locationInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 神兽蛋信息
	Talents           *common.BeastTalent      `protobuf:"bytes,3,opt,name=talents,proto3" json:"talents,omitempty"`                                                                                                    // 神兽天赋
	Power             uint32                   `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`                                                                                                       // 神兽天赋总战力
	NoviceGuideStatus uint32                   `protobuf:"varint,5,opt,name=noviceGuideStatus,proto3" json:"noviceGuideStatus,omitempty"`                                                                               // 新手引导状态
	EnterHatchStatus  int32                    `protobuf:"varint,6,opt,name=enterHatchStatus,proto3" json:"enterHatchStatus,omitempty"`                                                                                 //0:没进入过孵化界面；1:进入过孵化界面，没孵化过 ; 2:孵化过，没打开过蛋;3:打开过蛋
}

func (x *BeastGroup) Reset() {
	*x = BeastGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeastGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeastGroup) ProtoMessage() {}

func (x *BeastGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeastGroup.ProtoReflect.Descriptor instead.
func (*BeastGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{288}
}

func (x *BeastGroup) GetOwnBeast() []*common.Beast {
	if x != nil {
		return x.OwnBeast
	}
	return nil
}

func (x *BeastGroup) GetLocationInfo() map[int32]*BeastLocation {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

func (x *BeastGroup) GetTalents() *common.BeastTalent {
	if x != nil {
		return x.Talents
	}
	return nil
}

func (x *BeastGroup) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *BeastGroup) GetNoviceGuideStatus() uint32 {
	if x != nil {
		return x.NoviceGuideStatus
	}
	return 0
}

func (x *BeastGroup) GetEnterHatchStatus() int32 {
	if x != nil {
		return x.EnterHatchStatus
	}
	return 0
}

// 神兽蛋信息
type BeastLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HatchTimeStamp int64 `protobuf:"varint,1,opt,name=hatchTimeStamp,proto3" json:"hatchTimeStamp,omitempty"` //孵化时间戳
	IsAccelerate   bool  `protobuf:"varint,2,opt,name=isAccelerate,proto3" json:"isAccelerate,omitempty"`     //是否加速过
}

func (x *BeastLocation) Reset() {
	*x = BeastLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeastLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeastLocation) ProtoMessage() {}

func (x *BeastLocation) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeastLocation.ProtoReflect.Descriptor instead.
func (*BeastLocation) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{289}
}

func (x *BeastLocation) GetHatchTimeStamp() int64 {
	if x != nil {
		return x.HatchTimeStamp
	}
	return 0
}

func (x *BeastLocation) GetIsAccelerate() bool {
	if x != nil {
		return x.IsAccelerate
	}
	return false
}

// ShiLengSignIn 十冷活动
type ShiLengSignIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      int32  `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`           // 活动开启id
	ActId       int32  `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`             // 活动id
	SignInTimes uint32 `protobuf:"varint,3,opt,name=signInTimes,proto3" json:"signInTimes,omitempty"` // 签到次数
	SignInTime  int64  `protobuf:"varint,4,opt,name=signInTime,proto3" json:"signInTime,omitempty"`   // 签到时间
}

func (x *ShiLengSignIn) Reset() {
	*x = ShiLengSignIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiLengSignIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiLengSignIn) ProtoMessage() {}

func (x *ShiLengSignIn) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiLengSignIn.ProtoReflect.Descriptor instead.
func (*ShiLengSignIn) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{290}
}

func (x *ShiLengSignIn) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *ShiLengSignIn) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *ShiLengSignIn) GetSignInTimes() uint32 {
	if x != nil {
		return x.SignInTimes
	}
	return 0
}

func (x *ShiLengSignIn) GetSignInTime() int64 {
	if x != nil {
		return x.SignInTime
	}
	return 0
}

// ActCommonSignIn 活动签到
type ActCommonSignIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInTimes uint32 `protobuf:"varint,1,opt,name=signInTimes,proto3" json:"signInTimes,omitempty"` // 签到次数
	SignInTime  int64  `protobuf:"varint,2,opt,name=signInTime,proto3" json:"signInTime,omitempty"`   // 签到时间
}

func (x *ActCommonSignIn) Reset() {
	*x = ActCommonSignIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActCommonSignIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActCommonSignIn) ProtoMessage() {}

func (x *ActCommonSignIn) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActCommonSignIn.ProtoReflect.Descriptor instead.
func (*ActCommonSignIn) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{291}
}

func (x *ActCommonSignIn) GetSignInTimes() uint32 {
	if x != nil {
		return x.SignInTimes
	}
	return 0
}

func (x *ActCommonSignIn) GetSignInTime() int64 {
	if x != nil {
		return x.SignInTime
	}
	return 0
}

// SyntheticPuzzle 拼图活动
type ShiLengJigsaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId              int32           `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                           // 活动开启id
	ActId               int32           `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`                             // 活动id
	StageID             int32           `protobuf:"varint,3,opt,name=stageID,proto3" json:"stageID,omitempty"`                         // 阶段ID
	RewardIds           []int32         `protobuf:"varint,4,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"`              // 每个阶段领取记录
	ClientRewardIds     []int32         `protobuf:"varint,5,rep,packed,name=clientRewardIds,proto3" json:"clientRewardIds,omitempty"`  // 每个阶段领取记录
	IsTakeFinallyReward bool            `protobuf:"varint,6,opt,name=isTakeFinallyReward,proto3" json:"isTakeFinallyReward,omitempty"` // 是否领取最终大奖
	Common              *ActivityCommon `protobuf:"bytes,7,opt,name=common,proto3" json:"common,omitempty"`                            //任务
}

func (x *ShiLengJigsaw) Reset() {
	*x = ShiLengJigsaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiLengJigsaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiLengJigsaw) ProtoMessage() {}

func (x *ShiLengJigsaw) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiLengJigsaw.ProtoReflect.Descriptor instead.
func (*ShiLengJigsaw) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{292}
}

func (x *ShiLengJigsaw) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *ShiLengJigsaw) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *ShiLengJigsaw) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *ShiLengJigsaw) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *ShiLengJigsaw) GetClientRewardIds() []int32 {
	if x != nil {
		return x.ClientRewardIds
	}
	return nil
}

func (x *ShiLengJigsaw) GetIsTakeFinallyReward() bool {
	if x != nil {
		return x.IsTakeFinallyReward
	}
	return false
}

func (x *ShiLengJigsaw) GetCommon() *ActivityCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

// 坐骑系统
type MountGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountInfo map[int32]*common.MountItem `protobuf:"bytes,1,rep,name=mountInfo,proto3" json:"mountInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //坐骑Id -> 坐骑信息
}

func (x *MountGroup) Reset() {
	*x = MountGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountGroup) ProtoMessage() {}

func (x *MountGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountGroup.ProtoReflect.Descriptor instead.
func (*MountGroup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{293}
}

func (x *MountGroup) GetMountInfo() map[int32]*common.MountItem {
	if x != nil {
		return x.MountInfo
	}
	return nil
}

type WuHunAstrolabe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId              int32                `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                          // 活动开启id
	ActId               int32                `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`                            // 活动id
	BuyTimes            uint32               `protobuf:"varint,3,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"`                      // 元宝购买次数
	DigitalMatrix       *DigitalMatrix       `protobuf:"bytes,4,opt,name=digitalMatrix,proto3" json:"digitalMatrix,omitempty"`             // 武魂星盘数字
	NumberTreasureChest *NumberTreasureChest `protobuf:"bytes,5,opt,name=numberTreasureChest,proto3" json:"numberTreasureChest,omitempty"` // 数字宝箱
	ScoreProgress       []uint32             `protobuf:"varint,6,rep,packed,name=scoreProgress,proto3" json:"scoreProgress,omitempty"`     // 积分领取进度
}

func (x *WuHunAstrolabe) Reset() {
	*x = WuHunAstrolabe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WuHunAstrolabe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WuHunAstrolabe) ProtoMessage() {}

func (x *WuHunAstrolabe) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WuHunAstrolabe.ProtoReflect.Descriptor instead.
func (*WuHunAstrolabe) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{294}
}

func (x *WuHunAstrolabe) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *WuHunAstrolabe) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *WuHunAstrolabe) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *WuHunAstrolabe) GetDigitalMatrix() *DigitalMatrix {
	if x != nil {
		return x.DigitalMatrix
	}
	return nil
}

func (x *WuHunAstrolabe) GetNumberTreasureChest() *NumberTreasureChest {
	if x != nil {
		return x.NumberTreasureChest
	}
	return nil
}

func (x *WuHunAstrolabe) GetScoreProgress() []uint32 {
	if x != nil {
		return x.ScoreProgress
	}
	return nil
}

type NumberTreasureChest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuckyNumber     []uint32 `protobuf:"varint,1,rep,packed,name=luckyNumber,proto3" json:"luckyNumber,omitempty"`  // 幸运数字
	ActivationTimes uint32   `protobuf:"varint,2,opt,name=activationTimes,proto3" json:"activationTimes,omitempty"` // 激活次数
	Stage           uint32   `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`                     // 宝箱阶段
	StageProgress   uint32   `protobuf:"varint,4,opt,name=stageProgress,proto3" json:"stageProgress,omitempty"`     // 宝箱领取进度
	ErrorChest      []uint32 `protobuf:"varint,5,rep,packed,name=errorChest,proto3" json:"errorChest,omitempty"`    // 配置错误的宝箱
	NumberCount     []uint32 `protobuf:"varint,6,rep,packed,name=numberCount,proto3" json:"numberCount,omitempty"`  // 幸运数字个数
}

func (x *NumberTreasureChest) Reset() {
	*x = NumberTreasureChest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberTreasureChest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberTreasureChest) ProtoMessage() {}

func (x *NumberTreasureChest) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberTreasureChest.ProtoReflect.Descriptor instead.
func (*NumberTreasureChest) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{295}
}

func (x *NumberTreasureChest) GetLuckyNumber() []uint32 {
	if x != nil {
		return x.LuckyNumber
	}
	return nil
}

func (x *NumberTreasureChest) GetActivationTimes() uint32 {
	if x != nil {
		return x.ActivationTimes
	}
	return 0
}

func (x *NumberTreasureChest) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *NumberTreasureChest) GetStageProgress() uint32 {
	if x != nil {
		return x.StageProgress
	}
	return 0
}

func (x *NumberTreasureChest) GetErrorChest() []uint32 {
	if x != nil {
		return x.ErrorChest
	}
	return nil
}

func (x *NumberTreasureChest) GetNumberCount() []uint32 {
	if x != nil {
		return x.NumberCount
	}
	return nil
}

type DigitalMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage                  uint32            `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`                                                                                                                            // 阶段
	ActivationTimes        uint32            `protobuf:"varint,2,opt,name=activationTimes,proto3" json:"activationTimes,omitempty"`                                                                                                        // 当前阶段激活数字次数
	ActivationNumber       []uint32          `protobuf:"varint,3,rep,packed,name=activationNumber,proto3" json:"activationNumber,omitempty"`                                                                                               // 武魂星盘数字
	Position               map[uint32]uint32 `protobuf:"bytes,4,rep,name=position,proto3" json:"position,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                             // 已经激活数字位置
	OnlineCollectionRecord map[uint32]uint32 `protobuf:"bytes,5,rep,name=onlineCollectionRecord,proto3" json:"onlineCollectionRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 连线领取记录
	ScoreCollectionRecord  uint32            `protobuf:"varint,6,opt,name=scoreCollectionRecord,proto3" json:"scoreCollectionRecord,omitempty"`                                                                                            // 积分领取次数
}

func (x *DigitalMatrix) Reset() {
	*x = DigitalMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalMatrix) ProtoMessage() {}

func (x *DigitalMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalMatrix.ProtoReflect.Descriptor instead.
func (*DigitalMatrix) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{296}
}

func (x *DigitalMatrix) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *DigitalMatrix) GetActivationTimes() uint32 {
	if x != nil {
		return x.ActivationTimes
	}
	return 0
}

func (x *DigitalMatrix) GetActivationNumber() []uint32 {
	if x != nil {
		return x.ActivationNumber
	}
	return nil
}

func (x *DigitalMatrix) GetPosition() map[uint32]uint32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DigitalMatrix) GetOnlineCollectionRecord() map[uint32]uint32 {
	if x != nil {
		return x.OnlineCollectionRecord
	}
	return nil
}

func (x *DigitalMatrix) GetScoreCollectionRecord() uint32 {
	if x != nil {
		return x.ScoreCollectionRecord
	}
	return 0
}

// 直购礼包
type SpecialBuyGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SpecialBuyGiftItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SpecialBuyGift) Reset() {
	*x = SpecialBuyGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialBuyGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialBuyGift) ProtoMessage() {}

func (x *SpecialBuyGift) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialBuyGift.ProtoReflect.Descriptor instead.
func (*SpecialBuyGift) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{297}
}

func (x *SpecialBuyGift) GetItems() []*SpecialBuyGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SpecialBuyGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyTimes int32 `protobuf:"varint,2,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"` // 已购买次数
}

func (x *SpecialBuyGiftItem) Reset() {
	*x = SpecialBuyGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialBuyGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialBuyGiftItem) ProtoMessage() {}

func (x *SpecialBuyGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialBuyGiftItem.ProtoReflect.Descriptor instead.
func (*SpecialBuyGiftItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{298}
}

func (x *SpecialBuyGiftItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpecialBuyGiftItem) GetBuyTimes() int32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

type Ladder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId               int32                       `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"`                             // 赛季Id
	Score                  uint32                      `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                                   // 段位积分
	LastWinTimeStamp       int64                       `protobuf:"varint,3,opt,name=lastWinTimeStamp,proto3" json:"lastWinTimeStamp,omitempty"`             // 上次胜利时间戳
	LastTakeFirstWinReward int64                       `protobuf:"varint,4,opt,name=lastTakeFirstWinReward,proto3" json:"lastTakeFirstWinReward,omitempty"` // 上次领取每日首胜奖励时间戳
	SeasonWinTimes         uint32                      `protobuf:"varint,5,opt,name=seasonWinTimes,proto3" json:"seasonWinTimes,omitempty"`                 // 赛季胜场次数
	SeasonWinTimesIds      []int32                     `protobuf:"varint,6,rep,packed,name=seasonWinTimesIds,proto3" json:"seasonWinTimesIds,omitempty"`    // 已领取的赛季胜场次数Id
	SeasonLadderIds        []int32                     `protobuf:"varint,7,rep,packed,name=seasonLadderIds,proto3" json:"seasonLadderIds,omitempty"`        // 已领取的赛季段位达成Id(小段位ID)
	HisInfo                []*common.LadderHistoryInfo `protobuf:"bytes,8,rep,name=hisInfo,proto3" json:"hisInfo,omitempty"`                                // 玩家历史段位信息
	BanCommander           []int32                     `protobuf:"varint,9,rep,packed,name=banCommander,proto3" json:"banCommander,omitempty"`              // ban commander
	SecondPickTimes        int32                       `protobuf:"varint,10,opt,name=secondPickTimes,proto3" json:"secondPickTimes,omitempty"`              // 后手次数
	CurWinStreak           uint32                      `protobuf:"varint,11,opt,name=curWinStreak,proto3" json:"curWinStreak,omitempty"`                    // 当前连胜次数
	MaxWinStreak           uint32                      `protobuf:"varint,12,opt,name=maxWinStreak,proto3" json:"maxWinStreak,omitempty"`                    // 最高连胜次数
	BattleTimes            uint32                      `protobuf:"varint,13,opt,name=battleTimes,proto3" json:"battleTimes,omitempty"`                      // 对战总次数
	BattleLogs             []*common.LadderBattleLog   `protobuf:"bytes,15,rep,name=battleLogs,proto3" json:"battleLogs,omitempty"`                         // 个人战报
	TakeRewardSeasonId     int32                       `protobuf:"varint,16,opt,name=takeRewardSeasonId,proto3" json:"takeRewardSeasonId,omitempty"`        // 已领取赛季结算奖励的赛季ID
	LastMatchTime          int64                       `protobuf:"varint,17,opt,name=lastMatchTime,proto3" json:"lastMatchTime,omitempty"`                  // 上次匹配时间
	LastCancelMatchTime    int64                       `protobuf:"varint,18,opt,name=lastCancelMatchTime,proto3" json:"lastCancelMatchTime,omitempty"`      // 上次取消匹配时间
	LastMatchedTime        int64                       `protobuf:"varint,19,opt,name=lastMatchedTime,proto3" json:"lastMatchedTime,omitempty"`              // 上次匹配成功时间
	LastCloseSeasonId      int32                       `protobuf:"varint,20,opt,name=lastCloseSeasonId,proto3" json:"lastCloseSeasonId,omitempty"`          // 上一个结算赛季
	MaxScore               uint32                      `protobuf:"varint,21,opt,name=maxScore,proto3" json:"maxScore,omitempty"`                            // 最大积分
	FirstIntoSeasonId      int32                       `protobuf:"varint,22,opt,name=firstIntoSeasonId,proto3" json:"firstIntoSeasonId,omitempty"`          // 首次进入的赛季Id
	SeasonFirstTime        int64                       `protobuf:"varint,23,opt,name=seasonFirstTime,proto3" json:"seasonFirstTime,omitempty"`              // 当前赛季首次进入时间戳
	LoseStreakTimes        uint32                      `protobuf:"varint,24,opt,name=loseStreakTimes,proto3" json:"loseStreakTimes,omitempty"`              // 连败次数
}

func (x *Ladder) Reset() {
	*x = Ladder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ladder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ladder) ProtoMessage() {}

func (x *Ladder) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ladder.ProtoReflect.Descriptor instead.
func (*Ladder) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{299}
}

func (x *Ladder) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *Ladder) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Ladder) GetLastWinTimeStamp() int64 {
	if x != nil {
		return x.LastWinTimeStamp
	}
	return 0
}

func (x *Ladder) GetLastTakeFirstWinReward() int64 {
	if x != nil {
		return x.LastTakeFirstWinReward
	}
	return 0
}

func (x *Ladder) GetSeasonWinTimes() uint32 {
	if x != nil {
		return x.SeasonWinTimes
	}
	return 0
}

func (x *Ladder) GetSeasonWinTimesIds() []int32 {
	if x != nil {
		return x.SeasonWinTimesIds
	}
	return nil
}

func (x *Ladder) GetSeasonLadderIds() []int32 {
	if x != nil {
		return x.SeasonLadderIds
	}
	return nil
}

func (x *Ladder) GetHisInfo() []*common.LadderHistoryInfo {
	if x != nil {
		return x.HisInfo
	}
	return nil
}

func (x *Ladder) GetBanCommander() []int32 {
	if x != nil {
		return x.BanCommander
	}
	return nil
}

func (x *Ladder) GetSecondPickTimes() int32 {
	if x != nil {
		return x.SecondPickTimes
	}
	return 0
}

func (x *Ladder) GetCurWinStreak() uint32 {
	if x != nil {
		return x.CurWinStreak
	}
	return 0
}

func (x *Ladder) GetMaxWinStreak() uint32 {
	if x != nil {
		return x.MaxWinStreak
	}
	return 0
}

func (x *Ladder) GetBattleTimes() uint32 {
	if x != nil {
		return x.BattleTimes
	}
	return 0
}

func (x *Ladder) GetBattleLogs() []*common.LadderBattleLog {
	if x != nil {
		return x.BattleLogs
	}
	return nil
}

func (x *Ladder) GetTakeRewardSeasonId() int32 {
	if x != nil {
		return x.TakeRewardSeasonId
	}
	return 0
}

func (x *Ladder) GetLastMatchTime() int64 {
	if x != nil {
		return x.LastMatchTime
	}
	return 0
}

func (x *Ladder) GetLastCancelMatchTime() int64 {
	if x != nil {
		return x.LastCancelMatchTime
	}
	return 0
}

func (x *Ladder) GetLastMatchedTime() int64 {
	if x != nil {
		return x.LastMatchedTime
	}
	return 0
}

func (x *Ladder) GetLastCloseSeasonId() int32 {
	if x != nil {
		return x.LastCloseSeasonId
	}
	return 0
}

func (x *Ladder) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *Ladder) GetFirstIntoSeasonId() int32 {
	if x != nil {
		return x.FirstIntoSeasonId
	}
	return 0
}

func (x *Ladder) GetSeasonFirstTime() int64 {
	if x != nil {
		return x.SeasonFirstTime
	}
	return 0
}

func (x *Ladder) GetLoseStreakTimes() uint32 {
	if x != nil {
		return x.LoseStreakTimes
	}
	return 0
}

// ladder的manager模块
type LadderGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSeasonId       int32 `protobuf:"varint,1,opt,name=curSeasonId,proto3" json:"curSeasonId,omitempty"`             // 当前赛季
	LastCloseSeasonId int32 `protobuf:"varint,2,opt,name=lastCloseSeasonId,proto3" json:"lastCloseSeasonId,omitempty"` // 上一个结算赛季
	FirstSeasonId     int32 `protobuf:"varint,3,opt,name=firstSeasonId,proto3" json:"firstSeasonId,omitempty"`         // 首次开启赛季
}

func (x *LadderGame) Reset() {
	*x = LadderGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderGame) ProtoMessage() {}

func (x *LadderGame) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderGame.ProtoReflect.Descriptor instead.
func (*LadderGame) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{300}
}

func (x *LadderGame) GetCurSeasonId() int32 {
	if x != nil {
		return x.CurSeasonId
	}
	return 0
}

func (x *LadderGame) GetLastCloseSeasonId() int32 {
	if x != nil {
		return x.LastCloseSeasonId
	}
	return 0
}

func (x *LadderGame) GetFirstSeasonId() int32 {
	if x != nil {
		return x.FirstSeasonId
	}
	return 0
}

type LadderCross struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSeasonId   int32                                 `protobuf:"varint,1,opt,name=curSeasonId,proto3" json:"curSeasonId,omitempty"`                                                                                             // 当前赛季id
	GodBattleLogs map[int32]*common.LadderGodBattleLogs `protobuf:"bytes,2,rep,name=godBattleLogs,proto3" json:"godBattleLogs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 大神战报
}

func (x *LadderCross) Reset() {
	*x = LadderCross{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderCross) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderCross) ProtoMessage() {}

func (x *LadderCross) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderCross.ProtoReflect.Descriptor instead.
func (*LadderCross) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{301}
}

func (x *LadderCross) GetCurSeasonId() int32 {
	if x != nil {
		return x.CurSeasonId
	}
	return 0
}

func (x *LadderCross) GetGodBattleLogs() map[int32]*common.LadderGodBattleLogs {
	if x != nil {
		return x.GodBattleLogs
	}
	return nil
}

// ----------------------------------------跨服排行榜
type CrossRankSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotData map[uint64]uint32 `protobuf:"bytes,1,rep,name=snapshotData,proto3" json:"snapshotData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 排行榜快照数据  id->score
}

func (x *CrossRankSnapshot) Reset() {
	*x = CrossRankSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRankSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRankSnapshot) ProtoMessage() {}

func (x *CrossRankSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRankSnapshot.ProtoReflect.Descriptor instead.
func (*CrossRankSnapshot) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{302}
}

func (x *CrossRankSnapshot) GetSnapshotData() map[uint64]uint32 {
	if x != nil {
		return x.SnapshotData
	}
	return nil
}

type CrossRankKeepFirst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       // id
	KeepFirstDays uint32 `protobuf:"varint,2,opt,name=keepFirstDays,proto3" json:"keepFirstDays,omitempty"` // 霸榜多少天
}

func (x *CrossRankKeepFirst) Reset() {
	*x = CrossRankKeepFirst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRankKeepFirst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRankKeepFirst) ProtoMessage() {}

func (x *CrossRankKeepFirst) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRankKeepFirst.ProtoReflect.Descriptor instead.
func (*CrossRankKeepFirst) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{303}
}

func (x *CrossRankKeepFirst) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CrossRankKeepFirst) GetKeepFirstDays() uint32 {
	if x != nil {
		return x.KeepFirstDays
	}
	return 0
}

// 北伐中原
type Expedition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapter         map[int32]*ExpeditionChapter `protobuf:"bytes,1,rep,name=Chapter,proto3" json:"Chapter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 篇章Id->对应章节
	ShowTime        int64                        `protobuf:"varint,2,opt,name=showTime,proto3" json:"showTime,omitempty"`                                                                                       //  功能开放的时间
	TodaySweepTimes uint32                       `protobuf:"varint,3,opt,name=todaySweepTimes,proto3" json:"todaySweepTimes,omitempty"`                                                                         // 今日已扫荡次数
	TodayBuyTimes   uint32                       `protobuf:"varint,4,opt,name=todayBuyTimes,proto3" json:"todayBuyTimes,omitempty"`                                                                             // 今日购买扫荡次数
}

func (x *Expedition) Reset() {
	*x = Expedition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expedition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expedition) ProtoMessage() {}

func (x *Expedition) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expedition.ProtoReflect.Descriptor instead.
func (*Expedition) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{304}
}

func (x *Expedition) GetChapter() map[int32]*ExpeditionChapter {
	if x != nil {
		return x.Chapter
	}
	return nil
}

func (x *Expedition) GetShowTime() int64 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

func (x *Expedition) GetTodaySweepTimes() uint32 {
	if x != nil {
		return x.TodaySweepTimes
	}
	return 0
}

func (x *Expedition) GetTodayBuyTimes() uint32 {
	if x != nil {
		return x.TodayBuyTimes
	}
	return 0
}

// 北伐中原章节
type ExpeditionChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarGift         []int32                         `protobuf:"varint,1,rep,packed,name=starGift,proto3" json:"starGift,omitempty"`                 // 已领的星数宝箱id
	HistoryStarGrids []int32                         `protobuf:"varint,2,rep,packed,name=historyStarGrids,proto3" json:"historyStarGrids,omitempty"` // 记录获得过星星的格子,为了历史记录，和前端显示
	OwnSkills        []*common.Skill                 `protobuf:"bytes,3,rep,name=ownSkills,proto3" json:"ownSkills,omitempty"`                       // 加成的buff
	EverReset        bool                            `protobuf:"varint,4,opt,name=everReset,proto3" json:"everReset,omitempty"`                      // 是否重置过
	HasPass          bool                            `protobuf:"varint,5,opt,name=hasPass,proto3" json:"hasPass,omitempty"`                          // 是否通关
	Grids            map[int32]*ExpeditionGrid       `protobuf:"bytes,6,rep,name=grids,proto3" json:"grids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MyBattleUnits    map[int32]*ExpeditionBattleUnit `protobuf:"bytes,7,rep,name=myBattleUnits,proto3" json:"myBattleUnits,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 主将,神兽,助战，战斗单元,不在map中代表满血，战斗单元id ->战斗单元信息
	BuyShop          map[int32]bool                  `protobuf:"bytes,8,rep,name=buyShop,proto3" json:"buyShop,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`            // 已经购买过的商人物品id 商品->是否购买
	UsedAssistId     []int32                         `protobuf:"varint,9,rep,packed,name=usedAssistId,proto3" json:"usedAssistId,omitempty"`                                                                                    //用过的助战id
	GotTopReward     bool                            `protobuf:"varint,10,opt,name=gotTopReward,proto3" json:"gotTopReward,omitempty"`                                                                                          // 是否领过排行榜奖励
	GotWelfareReward bool                            `protobuf:"varint,11,opt,name=gotWelfareReward,proto3" json:"gotWelfareReward,omitempty"`                                                                                  // 是否领取过福利大奖
	Formation        *common.Formation               `protobuf:"bytes,12,opt,name=formation,proto3" json:"formation,omitempty"`                                                                                                 // 本关卡布阵
	RoundStar        []int32                         `protobuf:"varint,13,rep,packed,name=roundStar,proto3" json:"roundStar,omitempty"`                                                                                         // 本轮获得星数的格子id
	HistoryMaxStar   uint32                          `protobuf:"varint,14,opt,name=historyMaxStar,proto3" json:"historyMaxStar,omitempty"`                                                                                      // 历史最高星数,之所有用这个字段，而不是用内存中星数计算,这个historyStar记录的是每轮最高星数，而不是累计通关最高星数;如果不是每轮，就会导致，玩家每次重置就打之前未通过的，星数会一直涨
}

func (x *ExpeditionChapter) Reset() {
	*x = ExpeditionChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionChapter) ProtoMessage() {}

func (x *ExpeditionChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionChapter.ProtoReflect.Descriptor instead.
func (*ExpeditionChapter) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{305}
}

func (x *ExpeditionChapter) GetStarGift() []int32 {
	if x != nil {
		return x.StarGift
	}
	return nil
}

func (x *ExpeditionChapter) GetHistoryStarGrids() []int32 {
	if x != nil {
		return x.HistoryStarGrids
	}
	return nil
}

func (x *ExpeditionChapter) GetOwnSkills() []*common.Skill {
	if x != nil {
		return x.OwnSkills
	}
	return nil
}

func (x *ExpeditionChapter) GetEverReset() bool {
	if x != nil {
		return x.EverReset
	}
	return false
}

func (x *ExpeditionChapter) GetHasPass() bool {
	if x != nil {
		return x.HasPass
	}
	return false
}

func (x *ExpeditionChapter) GetGrids() map[int32]*ExpeditionGrid {
	if x != nil {
		return x.Grids
	}
	return nil
}

func (x *ExpeditionChapter) GetMyBattleUnits() map[int32]*ExpeditionBattleUnit {
	if x != nil {
		return x.MyBattleUnits
	}
	return nil
}

func (x *ExpeditionChapter) GetBuyShop() map[int32]bool {
	if x != nil {
		return x.BuyShop
	}
	return nil
}

func (x *ExpeditionChapter) GetUsedAssistId() []int32 {
	if x != nil {
		return x.UsedAssistId
	}
	return nil
}

func (x *ExpeditionChapter) GetGotTopReward() bool {
	if x != nil {
		return x.GotTopReward
	}
	return false
}

func (x *ExpeditionChapter) GetGotWelfareReward() bool {
	if x != nil {
		return x.GotWelfareReward
	}
	return false
}

func (x *ExpeditionChapter) GetFormation() *common.Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *ExpeditionChapter) GetRoundStar() []int32 {
	if x != nil {
		return x.RoundStar
	}
	return nil
}

func (x *ExpeditionChapter) GetHistoryMaxStar() uint32 {
	if x != nil {
		return x.HistoryMaxStar
	}
	return 0
}

// 格子的事件类型
type CellEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      // 配表id
	Parameter []int32 `protobuf:"varint,2,rep,packed,name=parameter,proto3" json:"parameter,omitempty"` // 参数
}

func (x *CellEvent) Reset() {
	*x = CellEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellEvent) ProtoMessage() {}

func (x *CellEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellEvent.ProtoReflect.Descriptor instead.
func (*CellEvent) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{306}
}

func (x *CellEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CellEvent) GetParameter() []int32 {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// 格子信息
type ExpeditionGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           int32                           `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // 格子通关状态  ->val:1.挑战过关 2.过关后生成物品是否领取
	Event            *CellEvent                      `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`                                                                                                                // 触发事件
	BuffIds          []int32                         `protobuf:"varint,3,rep,packed,name=buffIds,proto3" json:"buffIds,omitempty"`                                                                                                    // 随机出来的3个buff
	EmeryBattleUnits map[int32]*ExpeditionBattleUnit `protobuf:"bytes,4,rep,name=emeryBattleUnits,proto3" json:"emeryBattleUnits,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 敌人的战斗单元信息
}

func (x *ExpeditionGrid) Reset() {
	*x = ExpeditionGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionGrid) ProtoMessage() {}

func (x *ExpeditionGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionGrid.ProtoReflect.Descriptor instead.
func (*ExpeditionGrid) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{307}
}

func (x *ExpeditionGrid) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExpeditionGrid) GetEvent() *CellEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ExpeditionGrid) GetBuffIds() []int32 {
	if x != nil {
		return x.BuffIds
	}
	return nil
}

func (x *ExpeditionGrid) GetEmeryBattleUnits() map[int32]*ExpeditionBattleUnit {
	if x != nil {
		return x.EmeryBattleUnits
	}
	return nil
}

// 战斗单元数据,包括主将，神兽，助战...
type ExpeditionBattleUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp int32 `protobuf:"varint,1,opt,name=hp,proto3" json:"hp,omitempty"` // 血量
}

func (x *ExpeditionBattleUnit) Reset() {
	*x = ExpeditionBattleUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionBattleUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionBattleUnit) ProtoMessage() {}

func (x *ExpeditionBattleUnit) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionBattleUnit.ProtoReflect.Descriptor instead.
func (*ExpeditionBattleUnit) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{308}
}

func (x *ExpeditionBattleUnit) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

// game模块北伐中原
type GameExpedition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapter map[int32]*GameExpeditionChapter `protobuf:"bytes,1,rep,name=chapter,proto3" json:"chapter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 关卡id -> 章节信息
}

func (x *GameExpedition) Reset() {
	*x = GameExpedition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameExpedition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameExpedition) ProtoMessage() {}

func (x *GameExpedition) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameExpedition.ProtoReflect.Descriptor instead.
func (*GameExpedition) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{309}
}

func (x *GameExpedition) GetChapter() map[int32]*GameExpeditionChapter {
	if x != nil {
		return x.Chapter
	}
	return nil
}

// 北伐中原Game模块
//速通排行榜
type GameExpeditionChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo  []*common.ExpeditionRankItem `protobuf:"bytes,1,rep,name=rankInfo,proto3" json:"rankInfo,omitempty"`    // 每个章节对应的排行榜信息
	PassCount uint32                       `protobuf:"varint,2,opt,name=passCount,proto3" json:"passCount,omitempty"` // 通关人数
}

func (x *GameExpeditionChapter) Reset() {
	*x = GameExpeditionChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameExpeditionChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameExpeditionChapter) ProtoMessage() {}

func (x *GameExpeditionChapter) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameExpeditionChapter.ProtoReflect.Descriptor instead.
func (*GameExpeditionChapter) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{310}
}

func (x *GameExpeditionChapter) GetRankInfo() []*common.ExpeditionRankItem {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

func (x *GameExpeditionChapter) GetPassCount() uint32 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

type RechargeRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenID int32   `protobuf:"varint,1,opt,name=openID,proto3" json:"openID,omitempty"` // 开启id
	ActID  int32   `protobuf:"varint,2,opt,name=actID,proto3" json:"actID,omitempty"`
	Money  float32 `protobuf:"fixed32,3,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *RechargeRank) Reset() {
	*x = RechargeRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeRank) ProtoMessage() {}

func (x *RechargeRank) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeRank.ProtoReflect.Descriptor instead.
func (*RechargeRank) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{311}
}

func (x *RechargeRank) GetOpenID() int32 {
	if x != nil {
		return x.OpenID
	}
	return 0
}

func (x *RechargeRank) GetActID() int32 {
	if x != nil {
		return x.ActID
	}
	return 0
}

func (x *RechargeRank) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 名将录系统
type Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombatPower uint32                    `protobuf:"varint,1,opt,name=combatPower,proto3" json:"combatPower,omitempty"`                                                                           // 战斗力
	Arms        map[uint32]*BiographyArms `protobuf:"bytes,2,rep,name=arms,proto3" json:"arms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 兵种信息，兵种ID->兵种信息
}

func (x *Biography) Reset() {
	*x = Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biography) ProtoMessage() {}

func (x *Biography) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biography.ProtoReflect.Descriptor instead.
func (*Biography) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{312}
}

func (x *Biography) GetCombatPower() uint32 {
	if x != nil {
		return x.CombatPower
	}
	return 0
}

func (x *Biography) GetArms() map[uint32]*BiographyArms {
	if x != nil {
		return x.Arms
	}
	return nil
}

type BiographyArms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      uint32                         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                                                                                                   // 兵种等级
	Experience uint32                         `protobuf:"varint,2,opt,name=experience,proto3" json:"experience,omitempty"`                                                                                         // 兵种经验
	Commanders map[uint32]*BiographyCommander `protobuf:"bytes,3,rep,name=commanders,proto3" json:"commanders,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 所有已经激活的主将，主将ID->主将信息
}

func (x *BiographyArms) Reset() {
	*x = BiographyArms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiographyArms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiographyArms) ProtoMessage() {}

func (x *BiographyArms) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiographyArms.ProtoReflect.Descriptor instead.
func (*BiographyArms) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{313}
}

func (x *BiographyArms) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BiographyArms) GetExperience() uint32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *BiographyArms) GetCommanders() map[uint32]*BiographyCommander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

type BiographyCommander struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"` // 主将等级
}

func (x *BiographyCommander) Reset() {
	*x = BiographyCommander{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiographyCommander) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiographyCommander) ProtoMessage() {}

func (x *BiographyCommander) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiographyCommander.ProtoReflect.Descriptor instead.
func (*BiographyCommander) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{314}
}

func (x *BiographyCommander) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ZmSnExplore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info map[int32]*ZmSnExploreInfo `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //
}

func (x *ZmSnExplore) Reset() {
	*x = ZmSnExplore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmSnExplore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmSnExplore) ProtoMessage() {}

func (x *ZmSnExplore) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmSnExplore.ProtoReflect.Descriptor instead.
func (*ZmSnExplore) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{315}
}

func (x *ZmSnExplore) GetInfo() map[int32]*ZmSnExploreInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ZmSnExploreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurRewardIndex int32          `protobuf:"varint,1,opt,name=curRewardIndex,proto3" json:"curRewardIndex,omitempty"`
	Rewards        []*ExploreItem `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ZmSnExploreInfo) Reset() {
	*x = ZmSnExploreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmSnExploreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmSnExploreInfo) ProtoMessage() {}

func (x *ZmSnExploreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmSnExploreInfo.ProtoReflect.Descriptor instead.
func (*ZmSnExploreInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{316}
}

func (x *ZmSnExploreInfo) GetCurRewardIndex() int32 {
	if x != nil {
		return x.CurRewardIndex
	}
	return 0
}

func (x *ZmSnExploreInfo) GetRewards() []*ExploreItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ExploreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectId    int32 `protobuf:"varint,1,opt,name=selectId,proto3" json:"selectId,omitempty"`       // 客户端选择得id
	ItemIndex   int32 `protobuf:"varint,2,opt,name=itemIndex,proto3" json:"itemIndex,omitempty"`     // 数组索引
	Special     bool  `protobuf:"varint,3,opt,name=special,proto3" json:"special,omitempty"`         // 特殊奖励
	RewardIndex int32 `protobuf:"varint,4,opt,name=rewardIndex,proto3" json:"rewardIndex,omitempty"` // 阶段
}

func (x *ExploreItem) Reset() {
	*x = ExploreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExploreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExploreItem) ProtoMessage() {}

func (x *ExploreItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExploreItem.ProtoReflect.Descriptor instead.
func (*ExploreItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{317}
}

func (x *ExploreItem) GetSelectId() int32 {
	if x != nil {
		return x.SelectId
	}
	return 0
}

func (x *ExploreItem) GetItemIndex() int32 {
	if x != nil {
		return x.ItemIndex
	}
	return 0
}

func (x *ExploreItem) GetSpecial() bool {
	if x != nil {
		return x.Special
	}
	return false
}

func (x *ExploreItem) GetRewardIndex() int32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

// CommonTask 任务
type CommonTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId int32           `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"` // 活动开启id
	ActId  int32           `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`   // 活动id
	Common *ActivityCommon `protobuf:"bytes,3,opt,name=common,proto3" json:"common,omitempty"`  // 任务
}

func (x *CommonTask) Reset() {
	*x = CommonTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTask) ProtoMessage() {}

func (x *CommonTask) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTask.ProtoReflect.Descriptor instead.
func (*CommonTask) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{318}
}

func (x *CommonTask) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *CommonTask) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *CommonTask) GetCommon() *ActivityCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

type MountRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times map[int32]int32 `protobuf:"bytes,1,rep,name=times,proto3" json:"times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 坐骑ID->次数
}

func (x *MountRefine) Reset() {
	*x = MountRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRefine) ProtoMessage() {}

func (x *MountRefine) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRefine.ProtoReflect.Descriptor instead.
func (*MountRefine) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{319}
}

func (x *MountRefine) GetTimes() map[int32]int32 {
	if x != nil {
		return x.Times
	}
	return nil
}

// YouthReturn 少年回归
type YouthReturns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YouthReturn []*YouthReturn `protobuf:"bytes,1,rep,name=youthReturn,proto3" json:"youthReturn,omitempty"`
}

func (x *YouthReturns) Reset() {
	*x = YouthReturns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouthReturns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouthReturns) ProtoMessage() {}

func (x *YouthReturns) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouthReturns.ProtoReflect.Descriptor instead.
func (*YouthReturns) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{320}
}

func (x *YouthReturns) GetYouthReturn() []*YouthReturn {
	if x != nil {
		return x.YouthReturn
	}
	return nil
}

type YouthReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 回归ID
	SubId            uint32                        `protobuf:"varint,2,opt,name=subId,proto3" json:"subId,omitempty"`                       // 子活动ID
	LoginTimes       uint32                        `protobuf:"varint,3,opt,name=loginTimes,proto3" json:"loginTimes,omitempty"`             // 活动期间累计登录天数
	Items            []*common.YouthReturnGiftItem `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`                        // 回归礼包
	SpecialGift      bool                          `protobuf:"varint,6,opt,name=specialGift,proto3" json:"specialGift,omitempty"`           // 特权礼包领取状态
	BeginTimes       int64                         `protobuf:"varint,7,opt,name=beginTimes,proto3" json:"beginTimes,omitempty"`             // 触发时间(修正后)
	LastAddLoginTime int64                         `protobuf:"varint,8,opt,name=lastAddLoginTime,proto3" json:"lastAddLoginTime,omitempty"` // 上次累计登录次数时间
	SignIds          []int32                       `protobuf:"varint,9,rep,packed,name=signIds,proto3" json:"signIds,omitempty"`            //已近签到的ID
	DiscountCard     bool                          `protobuf:"varint,10,opt,name=discountCard,proto3" json:"discountCard,omitempty"`        // 折扣月卡
}

func (x *YouthReturn) Reset() {
	*x = YouthReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouthReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouthReturn) ProtoMessage() {}

func (x *YouthReturn) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouthReturn.ProtoReflect.Descriptor instead.
func (*YouthReturn) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{321}
}

func (x *YouthReturn) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YouthReturn) GetSubId() uint32 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *YouthReturn) GetLoginTimes() uint32 {
	if x != nil {
		return x.LoginTimes
	}
	return 0
}

func (x *YouthReturn) GetItems() []*common.YouthReturnGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *YouthReturn) GetSpecialGift() bool {
	if x != nil {
		return x.SpecialGift
	}
	return false
}

func (x *YouthReturn) GetBeginTimes() int64 {
	if x != nil {
		return x.BeginTimes
	}
	return 0
}

func (x *YouthReturn) GetLastAddLoginTime() int64 {
	if x != nil {
		return x.LastAddLoginTime
	}
	return 0
}

func (x *YouthReturn) GetSignIds() []int32 {
	if x != nil {
		return x.SignIds
	}
	return nil
}

func (x *YouthReturn) GetDiscountCard() bool {
	if x != nil {
		return x.DiscountCard
	}
	return false
}

//----------------------------------------九州问鼎
type Lm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId           int32     `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"`                            // 当前赛季id
	SignUp             *LmSignUp `protobuf:"bytes,2,opt,name=signUp,proto3" json:"signUp,omitempty"`                                 // 下赛季报名的数据
	Players            []uint64  `protobuf:"varint,3,rep,packed,name=players,proto3" json:"players,omitempty"`                       // 参赛玩家
	ChooseRewardPlayer []uint64  `protobuf:"varint,4,rep,packed,name=chooseRewardPlayer,proto3" json:"chooseRewardPlayer,omitempty"` // 海选赛领奖情况
	Worship            []uint64  `protobuf:"varint,5,rep,packed,name=worship,proto3" json:"worship,omitempty"`                       // 膜拜玩家
}

func (x *Lm) Reset() {
	*x = Lm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lm) ProtoMessage() {}

func (x *Lm) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lm.ProtoReflect.Descriptor instead.
func (*Lm) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{322}
}

func (x *Lm) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *Lm) GetSignUp() *LmSignUp {
	if x != nil {
		return x.SignUp
	}
	return nil
}

func (x *Lm) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Lm) GetChooseRewardPlayer() []uint64 {
	if x != nil {
		return x.ChooseRewardPlayer
	}
	return nil
}

func (x *Lm) GetWorship() []uint64 {
	if x != nil {
		return x.Worship
	}
	return nil
}

// 报名
type LmSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId   int32    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"`      // 赛季id
	Players    []uint64 `protobuf:"varint,2,rep,packed,name=players,proto3" json:"players,omitempty"` // 参赛玩家
	Success    bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`        // 报名跨服服务器成功
	DySeasonId int32    `protobuf:"varint,5,opt,name=dySeasonId,proto3" json:"dySeasonId,omitempty"`  // 九州对应的赛季
}

func (x *LmSignUp) Reset() {
	*x = LmSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmSignUp) ProtoMessage() {}

func (x *LmSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmSignUp.ProtoReflect.Descriptor instead.
func (*LmSignUp) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{323}
}

func (x *LmSignUp) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *LmSignUp) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *LmSignUp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LmSignUp) GetDySeasonId() int32 {
	if x != nil {
		return x.DySeasonId
	}
	return 0
}

// CrossLmSignup 报名信息
type CrossLmSignup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []uint64          `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
	Power   map[uint64]uint32 `protobuf:"bytes,2,rep,name=power,proto3" json:"power,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 报名战斗力
}

func (x *CrossLmSignup) Reset() {
	*x = CrossLmSignup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossLmSignup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossLmSignup) ProtoMessage() {}

func (x *CrossLmSignup) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossLmSignup.ProtoReflect.Descriptor instead.
func (*CrossLmSignup) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{324}
}

func (x *CrossLmSignup) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CrossLmSignup) GetPower() map[uint64]uint32 {
	if x != nil {
		return x.Power
	}
	return nil
}

// CrossLm 跨服数据
type CrossLm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId int32 `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"` // 赛季id
	Open     bool  `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`         // 开启
}

func (x *CrossLm) Reset() {
	*x = CrossLm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossLm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossLm) ProtoMessage() {}

func (x *CrossLm) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossLm.ProtoReflect.Descriptor instead.
func (*CrossLm) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{325}
}

func (x *CrossLm) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *CrossLm) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

// lm战斗验证
type LmBattleVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1   uint64   `protobuf:"varint,1,opt,name=player1,proto3" json:"player1,omitempty"`            // 玩家1
	Player2   uint64   `protobuf:"varint,2,opt,name=player2,proto3" json:"player2,omitempty"`            // 玩家2
	BattleIds []uint64 `protobuf:"varint,3,rep,packed,name=battleIds,proto3" json:"battleIds,omitempty"` // 3场战斗id的列表
}

func (x *LmBattleVerify) Reset() {
	*x = LmBattleVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmBattleVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmBattleVerify) ProtoMessage() {}

func (x *LmBattleVerify) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmBattleVerify.ProtoReflect.Descriptor instead.
func (*LmBattleVerify) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{326}
}

func (x *LmBattleVerify) GetPlayer1() uint64 {
	if x != nil {
		return x.Player1
	}
	return 0
}

func (x *LmBattleVerify) GetPlayer2() uint64 {
	if x != nil {
		return x.Player2
	}
	return 0
}

func (x *LmBattleVerify) GetBattleIds() []uint64 {
	if x != nil {
		return x.BattleIds
	}
	return nil
}

type PlayerLmPeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampReward  bool          `protobuf:"varint,1,opt,name=champReward,proto3" json:"champReward,omitempty"`
	SecondReward bool          `protobuf:"varint,2,opt,name=secondReward,proto3" json:"secondReward,omitempty"`
	ThirdReward  bool          `protobuf:"varint,3,opt,name=thirdReward,proto3" json:"thirdReward,omitempty"`
	SignUp       *DyPeakSignUp `protobuf:"bytes,4,opt,name=signUp,proto3" json:"signUp,omitempty"`
}

func (x *PlayerLmPeak) Reset() {
	*x = PlayerLmPeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLmPeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLmPeak) ProtoMessage() {}

func (x *PlayerLmPeak) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLmPeak.ProtoReflect.Descriptor instead.
func (*PlayerLmPeak) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{327}
}

func (x *PlayerLmPeak) GetChampReward() bool {
	if x != nil {
		return x.ChampReward
	}
	return false
}

func (x *PlayerLmPeak) GetSecondReward() bool {
	if x != nil {
		return x.SecondReward
	}
	return false
}

func (x *PlayerLmPeak) GetThirdReward() bool {
	if x != nil {
		return x.ThirdReward
	}
	return false
}

func (x *PlayerLmPeak) GetSignUp() *DyPeakSignUp {
	if x != nil {
		return x.SignUp
	}
	return nil
}

// 九州问鼎 阶段信息
type LmStageBattleInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MInfo map[int32]*LmPlayerInfos `protobuf:"bytes,1,rep,name=mInfo,proto3" json:"mInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 赛程Id->该赛程下的玩家信息
}

func (x *LmStageBattleInfos) Reset() {
	*x = LmStageBattleInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmStageBattleInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmStageBattleInfos) ProtoMessage() {}

func (x *LmStageBattleInfos) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmStageBattleInfos.ProtoReflect.Descriptor instead.
func (*LmStageBattleInfos) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{328}
}

func (x *LmStageBattleInfos) GetMInfo() map[int32]*LmPlayerInfos {
	if x != nil {
		return x.MInfo
	}
	return nil
}

type LmPlayerInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MInfo map[uint64]*LmSimpleBattleInfos `protobuf:"bytes,1,rep,name=mInfo,proto3" json:"mInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 玩家Id->玩家简单信息
}

func (x *LmPlayerInfos) Reset() {
	*x = LmPlayerInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmPlayerInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmPlayerInfos) ProtoMessage() {}

func (x *LmPlayerInfos) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmPlayerInfos.ProtoReflect.Descriptor instead.
func (*LmPlayerInfos) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{329}
}

func (x *LmPlayerInfos) GetMInfo() map[uint64]*LmSimpleBattleInfos {
	if x != nil {
		return x.MInfo
	}
	return nil
}

type LmSimpleBattleInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*LmSimpleBattleInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"` // 三个布阵的信息
	Name  string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`   // 玩家名字
}

func (x *LmSimpleBattleInfos) Reset() {
	*x = LmSimpleBattleInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmSimpleBattleInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmSimpleBattleInfos) ProtoMessage() {}

func (x *LmSimpleBattleInfos) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmSimpleBattleInfos.ProtoReflect.Descriptor instead.
func (*LmSimpleBattleInfos) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{330}
}

func (x *LmSimpleBattleInfos) GetInfos() []*LmSimpleBattleInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *LmSimpleBattleInfos) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LmSimpleBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commanders []*common.Commander `protobuf:"bytes,1,rep,name=commanders,proto3" json:"commanders,omitempty"` // 主将
	Counsellor *common.Counsellor  `protobuf:"bytes,2,opt,name=counsellor,proto3" json:"counsellor,omitempty"` // 军师
	Beasts     []*common.Beast     `protobuf:"bytes,3,rep,name=beasts,proto3" json:"beasts,omitempty"`         // 神兽
}

func (x *LmSimpleBattleInfo) Reset() {
	*x = LmSimpleBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LmSimpleBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LmSimpleBattleInfo) ProtoMessage() {}

func (x *LmSimpleBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LmSimpleBattleInfo.ProtoReflect.Descriptor instead.
func (*LmSimpleBattleInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{331}
}

func (x *LmSimpleBattleInfo) GetCommanders() []*common.Commander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

func (x *LmSimpleBattleInfo) GetCounsellor() *common.Counsellor {
	if x != nil {
		return x.Counsellor
	}
	return nil
}

func (x *LmSimpleBattleInfo) GetBeasts() []*common.Beast {
	if x != nil {
		return x.Beasts
	}
	return nil
}

// ----------------------------------------------------------------问鼎中原
// 逻辑服问鼎中原玩家数据
type PlayerWon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moves           uint32                 `protobuf:"varint,1,opt,name=moves,proto3" json:"moves,omitempty"`                     // 挑战次数
	BuyMoves        uint32                 `protobuf:"varint,2,opt,name=buyMoves,proto3" json:"buyMoves,omitempty"`               //购买过的移动次数
	OverflowMoves   uint32                 `protobuf:"varint,3,opt,name=overflowMoves,proto3" json:"overflowMoves,omitempty"`     // 溢出移动次数
	BattleLogs      []*common.WonBattleLog `protobuf:"bytes,4,rep,name=battleLogs,proto3" json:"battleLogs,omitempty"`            // 进攻战报
	Worship         *WonWorship            `protobuf:"bytes,6,opt,name=worship,proto3" json:"worship,omitempty"`                  // 膜拜
	MeritorNum      uint32                 `protobuf:"varint,7,opt,name=meritorNum,proto3" json:"meritorNum,omitempty"`           // 战功
	HasWeekEnterWon bool                   `protobuf:"varint,8,opt,name=hasWeekEnterWon,proto3" json:"hasWeekEnterWon,omitempty"` // 本周进入过won
	ClearMoveTime   int64                  `protobuf:"varint,9,opt,name=clearMoveTime,proto3" json:"clearMoveTime,omitempty"`     // 清除体力时间戳
}

func (x *PlayerWon) Reset() {
	*x = PlayerWon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWon) ProtoMessage() {}

func (x *PlayerWon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWon.ProtoReflect.Descriptor instead.
func (*PlayerWon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{332}
}

func (x *PlayerWon) GetMoves() uint32 {
	if x != nil {
		return x.Moves
	}
	return 0
}

func (x *PlayerWon) GetBuyMoves() uint32 {
	if x != nil {
		return x.BuyMoves
	}
	return 0
}

func (x *PlayerWon) GetOverflowMoves() uint32 {
	if x != nil {
		return x.OverflowMoves
	}
	return 0
}

func (x *PlayerWon) GetBattleLogs() []*common.WonBattleLog {
	if x != nil {
		return x.BattleLogs
	}
	return nil
}

func (x *PlayerWon) GetWorship() *WonWorship {
	if x != nil {
		return x.Worship
	}
	return nil
}

func (x *PlayerWon) GetMeritorNum() uint32 {
	if x != nil {
		return x.MeritorNum
	}
	return 0
}

func (x *PlayerWon) GetHasWeekEnterWon() bool {
	if x != nil {
		return x.HasWeekEnterWon
	}
	return false
}

func (x *PlayerWon) GetClearMoveTime() int64 {
	if x != nil {
		return x.ClearMoveTime
	}
	return 0
}

// 逻辑服问鼎中原联盟数据
type GuildWon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanEnterWon           bool            `protobuf:"varint,1,opt,name=canEnterWon,proto3" json:"canEnterWon,omitempty"`                                                                                                              // 能否参加问鼎中原
	DoFtInActivityPlayers map[uint64]bool `protobuf:"bytes,2,rep,name=doFtInActivityPlayers,proto3" json:"doFtInActivityPlayers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 联盟在开战活动期参与玩法的玩家
}

func (x *GuildWon) Reset() {
	*x = GuildWon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildWon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildWon) ProtoMessage() {}

func (x *GuildWon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildWon.ProtoReflect.Descriptor instead.
func (*GuildWon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{333}
}

func (x *GuildWon) GetCanEnterWon() bool {
	if x != nil {
		return x.CanEnterWon
	}
	return false
}

func (x *GuildWon) GetDoFtInActivityPlayers() map[uint64]bool {
	if x != nil {
		return x.DoFtInActivityPlayers
	}
	return nil
}

// Won玩家
type WonPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                  uint64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                            // 用户id
	GuildId              uint64                  `protobuf:"varint,2,opt,name=guildId,proto3" json:"guildId,omitempty"`                                                                                                                    // 联盟id
	ServerId             uint64                  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                                                                                                  // 服务器id
	Fts                  map[uint32]*WonPlayerFt `protobuf:"bytes,4,rep,name=fts,proto3" json:"fts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                    // ft -> 玩家队伍数据
	FormationUintsRecord map[int32]int32         `protobuf:"bytes,5,rep,name=formationUintsRecord,proto3" json:"formationUintsRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // uint->hp 当日布阵过的主将记录下来
	TotalKillCount       map[uint32]uint32       `protobuf:"bytes,6,rep,name=totalKillCount,proto3" json:"totalKillCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`             // mapId -> 累计击杀数
}

func (x *WonPlayer) Reset() {
	*x = WonPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonPlayer) ProtoMessage() {}

func (x *WonPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonPlayer.ProtoReflect.Descriptor instead.
func (*WonPlayer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{334}
}

func (x *WonPlayer) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WonPlayer) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *WonPlayer) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *WonPlayer) GetFts() map[uint32]*WonPlayerFt {
	if x != nil {
		return x.Fts
	}
	return nil
}

func (x *WonPlayer) GetFormationUintsRecord() map[int32]int32 {
	if x != nil {
		return x.FormationUintsRecord
	}
	return nil
}

func (x *WonPlayer) GetTotalKillCount() map[uint32]uint32 {
	if x != nil {
		return x.TotalKillCount
	}
	return nil
}

type WonPlayerFt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              uint64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                        // uid
	Ft               uint32             `protobuf:"varint,2,opt,name=ft,proto3" json:"ft,omitempty"`                                                                                                          // 队伍
	DMor             uint32             `protobuf:"varint,4,opt,name=dMor,proto3" json:"dMor,omitempty"`                                                                                                      // 掉了多少士气
	Coor             *common.Coordinate `protobuf:"bytes,5,opt,name=coor,proto3" json:"coor,omitempty"`                                                                                                       // 队伍所在位置
	BattleUint       map[int32]int32    `protobuf:"bytes,6,rep,name=battleUint,proto3" json:"battleUint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //作战单元:血量
	Status           int32              `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                                                                  // 状态，0：默认，1：行军，2：撤退，3：养伤/重伤，4：恢复中
	NextRecoverTime  int64              `protobuf:"varint,8,opt,name=nextRecoverTime,proto3" json:"nextRecoverTime,omitempty"`                                                                                // 恢复满血的时间
	LeftHealTime     int64              `protobuf:"varint,9,opt,name=leftHealTime,proto3" json:"leftHealTime,omitempty"`                                                                                      // 重伤剩余多长时间
	StartRecoverTime int64              `protobuf:"varint,10,opt,name=startRecoverTime,proto3" json:"startRecoverTime,omitempty"`                                                                             // 开始恢复的时间戳
	LeftRecoverTime  int64              `protobuf:"varint,11,opt,name=leftRecoverTime,proto3" json:"leftRecoverTime,omitempty"`                                                                               // 恢复剩余多长时间
	AutoMoveSetCoor  *common.Coordinate `protobuf:"bytes,12,opt,name=autoMoveSetCoor,proto3" json:"autoMoveSetCoor,omitempty"`                                                                                // 自动行军预设坐标
	LastBattleIsPvE  bool               `protobuf:"varint,13,opt,name=lastBattleIsPvE,proto3" json:"lastBattleIsPvE,omitempty"`                                                                               // 队伍上次战斗是pve
	God              bool               `protobuf:"varint,14,opt,name=god,proto3" json:"god,omitempty"`                                                                                                       // 超厉害
	IsDisturb        bool               `protobuf:"varint,15,opt,name=isDisturb,proto3" json:"isDisturb,omitempty"`                                                                                           // 是否被打扰，队伍在某个城池休息时候城池发生占领的标志
}

func (x *WonPlayerFt) Reset() {
	*x = WonPlayerFt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonPlayerFt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonPlayerFt) ProtoMessage() {}

func (x *WonPlayerFt) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonPlayerFt.ProtoReflect.Descriptor instead.
func (*WonPlayerFt) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{335}
}

func (x *WonPlayerFt) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WonPlayerFt) GetFt() uint32 {
	if x != nil {
		return x.Ft
	}
	return 0
}

func (x *WonPlayerFt) GetDMor() uint32 {
	if x != nil {
		return x.DMor
	}
	return 0
}

func (x *WonPlayerFt) GetCoor() *common.Coordinate {
	if x != nil {
		return x.Coor
	}
	return nil
}

func (x *WonPlayerFt) GetBattleUint() map[int32]int32 {
	if x != nil {
		return x.BattleUint
	}
	return nil
}

func (x *WonPlayerFt) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WonPlayerFt) GetNextRecoverTime() int64 {
	if x != nil {
		return x.NextRecoverTime
	}
	return 0
}

func (x *WonPlayerFt) GetLeftHealTime() int64 {
	if x != nil {
		return x.LeftHealTime
	}
	return 0
}

func (x *WonPlayerFt) GetStartRecoverTime() int64 {
	if x != nil {
		return x.StartRecoverTime
	}
	return 0
}

func (x *WonPlayerFt) GetLeftRecoverTime() int64 {
	if x != nil {
		return x.LeftRecoverTime
	}
	return 0
}

func (x *WonPlayerFt) GetAutoMoveSetCoor() *common.Coordinate {
	if x != nil {
		return x.AutoMoveSetCoor
	}
	return nil
}

func (x *WonPlayerFt) GetLastBattleIsPvE() bool {
	if x != nil {
		return x.LastBattleIsPvE
	}
	return false
}

func (x *WonPlayerFt) GetGod() bool {
	if x != nil {
		return x.God
	}
	return false
}

func (x *WonPlayerFt) GetIsDisturb() bool {
	if x != nil {
		return x.IsDisturb
	}
	return false
}

// Won服务器信息
type WonServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 服务器id
	Score            uint64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                       // 积分
	FieldId          uint32 `protobuf:"varint,3,opt,name=fieldId,proto3" json:"fieldId,omitempty"`                   // 战场id
	EnterPlayerCount uint32 `protobuf:"varint,4,opt,name=enterPlayerCount,proto3" json:"enterPlayerCount,omitempty"` // 参与won玩法玩家数量
}

func (x *WonServer) Reset() {
	*x = WonServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonServer) ProtoMessage() {}

func (x *WonServer) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonServer.ProtoReflect.Descriptor instead.
func (*WonServer) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{336}
}

func (x *WonServer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WonServer) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WonServer) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *WonServer) GetEnterPlayerCount() uint32 {
	if x != nil {
		return x.EnterPlayerCount
	}
	return 0
}

// won基础数据
type WonCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                   // 当前版本
	IsAlreadyWeekEnd bool  `protobuf:"varint,2,opt,name=isAlreadyWeekEnd,proto3" json:"isAlreadyWeekEnd,omitempty"` // 是否周结算
}

func (x *WonCommon) Reset() {
	*x = WonCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonCommon) ProtoMessage() {}

func (x *WonCommon) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonCommon.ProtoReflect.Descriptor instead.
func (*WonCommon) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{337}
}

func (x *WonCommon) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WonCommon) GetIsAlreadyWeekEnd() bool {
	if x != nil {
		return x.IsAlreadyWeekEnd
	}
	return false
}

// 地图里的动态数据
type WonAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               // id
	ActType   int32                `protobuf:"varint,2,opt,name=actType,proto3" json:"actType,omitempty"`     // 类型
	Uid       uint64               `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`             // uid
	Ft        uint32               `protobuf:"varint,4,opt,name=ft,proto3" json:"ft,omitempty"`               // 队伍
	StartTime int64                `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"` // 开始时间
	GuildID   uint32               `protobuf:"varint,6,opt,name=guildID,proto3" json:"guildID,omitempty"`     // 联盟ID
	Path      []*common.Coordinate `protobuf:"bytes,7,rep,name=path,proto3" json:"path,omitempty"`            // 路径
}

func (x *WonAct) Reset() {
	*x = WonAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonAct) ProtoMessage() {}

func (x *WonAct) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonAct.ProtoReflect.Descriptor instead.
func (*WonAct) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{338}
}

func (x *WonAct) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WonAct) GetActType() int32 {
	if x != nil {
		return x.ActType
	}
	return 0
}

func (x *WonAct) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WonAct) GetFt() uint32 {
	if x != nil {
		return x.Ft
	}
	return 0
}

func (x *WonAct) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WonAct) GetGuildID() uint32 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *WonAct) GetPath() []*common.Coordinate {
	if x != nil {
		return x.Path
	}
	return nil
}

// 格子数据
type WonGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coor       *common.Coordinate `protobuf:"bytes,1,opt,name=coor,proto3" json:"coor,omitempty"`              // 格子坐标
	GridTypeId uint32             `protobuf:"varint,2,opt,name=gridTypeId,proto3" json:"gridTypeId,omitempty"` // 格子类型ID
	BattleGrid *WonBattleGrid     `protobuf:"bytes,3,opt,name=battleGrid,proto3" json:"battleGrid,omitempty"`  // 战斗格子
}

func (x *WonGrid) Reset() {
	*x = WonGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonGrid) ProtoMessage() {}

func (x *WonGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonGrid.ProtoReflect.Descriptor instead.
func (*WonGrid) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{339}
}

func (x *WonGrid) GetCoor() *common.Coordinate {
	if x != nil {
		return x.Coor
	}
	return nil
}

func (x *WonGrid) GetGridTypeId() uint32 {
	if x != nil {
		return x.GridTypeId
	}
	return 0
}

func (x *WonGrid) GetBattleGrid() *WonBattleGrid {
	if x != nil {
		return x.BattleGrid
	}
	return nil
}

// 战斗类型格子
type WonBattleGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OccGuildId    uint64             `protobuf:"varint,1,opt,name=occGuildId,proto3" json:"occGuildId,omitempty"`                                                                                      // 当前占领的城池信息
	OriginGuildId uint64             `protobuf:"varint,2,opt,name=originGuildId,proto3" json:"originGuildId,omitempty"`                                                                                // 初始联盟id
	DHp           uint64             `protobuf:"varint,3,opt,name=dHp,proto3" json:"dHp,omitempty"`                                                                                                    // 格子掉了多少血
	RecoverTime   int64              `protobuf:"varint,4,opt,name=recoverTime,proto3" json:"recoverTime,omitempty"`                                                                                    // 上次回血时间
	AucItems      map[uint32]uint32  `protobuf:"bytes,5,rep,name=aucItems,proto3" json:"aucItems,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 流到拍卖行的物品
	DefendQueue   []*common.PlayerFt `protobuf:"bytes,6,rep,name=defendQueue,proto3" json:"defendQueue,omitempty"`                                                                                     // 防守者队列
	AttackQueue   []*common.PlayerFt `protobuf:"bytes,7,rep,name=attackQueue,proto3" json:"attackQueue,omitempty"`                                                                                     // 攻击者队列
	RecoverQueue  []*common.PlayerFt `protobuf:"bytes,8,rep,name=recoverQueue,proto3" json:"recoverQueue,omitempty"`                                                                                   // 恢复队列
}

func (x *WonBattleGrid) Reset() {
	*x = WonBattleGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonBattleGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonBattleGrid) ProtoMessage() {}

func (x *WonBattleGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonBattleGrid.ProtoReflect.Descriptor instead.
func (*WonBattleGrid) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{340}
}

func (x *WonBattleGrid) GetOccGuildId() uint64 {
	if x != nil {
		return x.OccGuildId
	}
	return 0
}

func (x *WonBattleGrid) GetOriginGuildId() uint64 {
	if x != nil {
		return x.OriginGuildId
	}
	return 0
}

func (x *WonBattleGrid) GetDHp() uint64 {
	if x != nil {
		return x.DHp
	}
	return 0
}

func (x *WonBattleGrid) GetRecoverTime() int64 {
	if x != nil {
		return x.RecoverTime
	}
	return 0
}

func (x *WonBattleGrid) GetAucItems() map[uint32]uint32 {
	if x != nil {
		return x.AucItems
	}
	return nil
}

func (x *WonBattleGrid) GetDefendQueue() []*common.PlayerFt {
	if x != nil {
		return x.DefendQueue
	}
	return nil
}

func (x *WonBattleGrid) GetAttackQueue() []*common.PlayerFt {
	if x != nil {
		return x.AttackQueue
	}
	return nil
}

func (x *WonBattleGrid) GetRecoverQueue() []*common.PlayerFt {
	if x != nil {
		return x.RecoverQueue
	}
	return nil
}

// 联盟db
type WonGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildIdS            []uint64                             `protobuf:"varint,1,rep,packed,name=guildIdS,proto3" json:"guildIdS,omitempty"`                                                                                                  // 联盟IDS
	Forces              map[uint32]uint64                    `protobuf:"bytes,2,rep,name=forces,proto3" json:"forces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                    // 势力值 地图id->势力值
	SignUpMapId         uint32                               `protobuf:"varint,3,opt,name=signUpMapId,proto3" json:"signUpMapId,omitempty"`                                                                                                   // 当前联盟报名的地图id
	DeclareCoors        map[string]*common.Coordinate        `protobuf:"bytes,4,rep,name=declareCoors,proto3" json:"declareCoors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // 宣战的格子坐标
	OriginHouseCoors    map[uint32]*common.Coordinate        `protobuf:"bytes,5,rep,name=originHouseCoors,proto3" json:"originHouseCoors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 一开始创建的大本营坐标
	ServerId            uint64                               `protobuf:"varint,6,opt,name=serverId,proto3" json:"serverId,omitempty"`                                                                                                         // 服务器id
	OccupyMapIds        []uint32                             `protobuf:"varint,7,rep,packed,name=occupyMapIds,proto3" json:"occupyMapIds,omitempty"`                                                                                          // 占领的的地图
	LastRemoveHouseTime int64                                `protobuf:"varint,8,opt,name=lastRemoveHouseTime,proto3" json:"lastRemoveHouseTime,omitempty"`                                                                                   // 上次拆除大本营时间
	SurrenderApplys     map[string]*common.WonSurrenderApply `protobuf:"bytes,9,rep,name=surrenderApplys,proto3" json:"surrenderApplys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`    // 归降申请列表
}

func (x *WonGuild) Reset() {
	*x = WonGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonGuild) ProtoMessage() {}

func (x *WonGuild) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonGuild.ProtoReflect.Descriptor instead.
func (*WonGuild) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{341}
}

func (x *WonGuild) GetGuildIdS() []uint64 {
	if x != nil {
		return x.GuildIdS
	}
	return nil
}

func (x *WonGuild) GetForces() map[uint32]uint64 {
	if x != nil {
		return x.Forces
	}
	return nil
}

func (x *WonGuild) GetSignUpMapId() uint32 {
	if x != nil {
		return x.SignUpMapId
	}
	return 0
}

func (x *WonGuild) GetDeclareCoors() map[string]*common.Coordinate {
	if x != nil {
		return x.DeclareCoors
	}
	return nil
}

func (x *WonGuild) GetOriginHouseCoors() map[uint32]*common.Coordinate {
	if x != nil {
		return x.OriginHouseCoors
	}
	return nil
}

func (x *WonGuild) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *WonGuild) GetOccupyMapIds() []uint32 {
	if x != nil {
		return x.OccupyMapIds
	}
	return nil
}

func (x *WonGuild) GetLastRemoveHouseTime() int64 {
	if x != nil {
		return x.LastRemoveHouseTime
	}
	return 0
}

func (x *WonGuild) GetSurrenderApplys() map[string]*common.WonSurrenderApply {
	if x != nil {
		return x.SurrenderApplys
	}
	return nil
}

// 膜拜
type WonWorship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapIds []uint32 `protobuf:"varint,1,rep,packed,name=mapIds,proto3" json:"mapIds,omitempty"` // 已经膜拜的地图ID
}

func (x *WonWorship) Reset() {
	*x = WonWorship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WonWorship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WonWorship) ProtoMessage() {}

func (x *WonWorship) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WonWorship.ProtoReflect.Descriptor instead.
func (*WonWorship) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{342}
}

func (x *WonWorship) GetMapIds() []uint32 {
	if x != nil {
		return x.MapIds
	}
	return nil
}

type AucBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime    int64    `protobuf:"varint,1,opt,name=expireTime,proto3" json:"expireTime,omitempty"`              // 过期时间
	NotifyServers []uint64 `protobuf:"varint,2,rep,packed,name=notifyServers,proto3" json:"notifyServers,omitempty"` // 通知的服务器
	EndTime       int64    `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`                    // 结束时间
}

func (x *AucBox) Reset() {
	*x = AucBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucBox) ProtoMessage() {}

func (x *AucBox) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucBox.ProtoReflect.Descriptor instead.
func (*AucBox) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{343}
}

func (x *AucBox) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *AucBox) GetNotifyServers() []uint64 {
	if x != nil {
		return x.NotifyServers
	}
	return nil
}

func (x *AucBox) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 拍卖行
type AucBoxIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxBoxs map[string]bool `protobuf:"bytes,1,rep,name=auxBoxs,proto3" json:"auxBoxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 拍卖行id ->
}

func (x *AucBoxIds) Reset() {
	*x = AucBoxIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucBoxIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucBoxIds) ProtoMessage() {}

func (x *AucBoxIds) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucBoxIds.ProtoReflect.Descriptor instead.
func (*AucBoxIds) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{344}
}

func (x *AucBoxIds) GetAuxBoxs() map[string]bool {
	if x != nil {
		return x.AuxBoxs
	}
	return nil
}

// 拍卖行商品
type AucItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               // 唯一id
	GoodId    uint32 `protobuf:"varint,2,opt,name=goodId,proto3" json:"goodId,omitempty"`       // 商品id  对应goods表
	LastPrice uint32 `protobuf:"varint,3,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"` // 最新竞价
	LastUid   uint64 `protobuf:"varint,4,opt,name=lastUid,proto3" json:"lastUid,omitempty"`     // 最新竞价的uid
	IsSale    bool   `protobuf:"varint,5,opt,name=isSale,proto3" json:"isSale,omitempty"`       // 是否已卖出
	OriginId  uint64 `protobuf:"varint,6,opt,name=originId,proto3" json:"originId,omitempty"`   // 产出者
}

func (x *AucItem) Reset() {
	*x = AucItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucItem) ProtoMessage() {}

func (x *AucItem) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucItem.ProtoReflect.Descriptor instead.
func (*AucItem) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{345}
}

func (x *AucItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AucItem) GetGoodId() uint32 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *AucItem) GetLastPrice() uint32 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *AucItem) GetLastUid() uint64 {
	if x != nil {
		return x.LastUid
	}
	return 0
}

func (x *AucItem) GetIsSale() bool {
	if x != nil {
		return x.IsSale
	}
	return false
}

func (x *AucItem) GetOriginId() uint64 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

// 玩家自己出的价
type AucPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdPrice map[uint32]uint32 `protobuf:"bytes,1,rep,name=idPrice,proto3" json:"idPrice,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 商品出的价
}

func (x *AucPrices) Reset() {
	*x = AucPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AucPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AucPrices) ProtoMessage() {}

func (x *AucPrices) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AucPrices.ProtoReflect.Descriptor instead.
func (*AucPrices) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{346}
}

func (x *AucPrices) GetIdPrice() map[uint32]uint32 {
	if x != nil {
		return x.IdPrice
	}
	return nil
}

type PlayerAuc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AucRecord []*common.AucRecord `protobuf:"bytes,1,rep,name=aucRecord,proto3" json:"aucRecord,omitempty"` // 成交记录
}

func (x *PlayerAuc) Reset() {
	*x = PlayerAuc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAuc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAuc) ProtoMessage() {}

func (x *PlayerAuc) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAuc.ProtoReflect.Descriptor instead.
func (*PlayerAuc) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{347}
}

func (x *PlayerAuc) GetAucRecord() []*common.AucRecord {
	if x != nil {
		return x.AucRecord
	}
	return nil
}

type GuildAuc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AucRecord []*common.AucRecord `protobuf:"bytes,1,rep,name=aucRecord,proto3" json:"aucRecord,omitempty"` // 成交记录
}

func (x *GuildAuc) Reset() {
	*x = GuildAuc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildAuc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildAuc) ProtoMessage() {}

func (x *GuildAuc) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildAuc.ProtoReflect.Descriptor instead.
func (*GuildAuc) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{348}
}

func (x *GuildAuc) GetAucRecord() []*common.AucRecord {
	if x != nil {
		return x.AucRecord
	}
	return nil
}

// ----------------------------------------------------------------------------联盟R点
// 玩家GuildRoll点信息
type RollMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                       // 玩家id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 玩家名字
	TotalRollPoint uint32 `protobuf:"varint,3,opt,name=totalRollPoint,proto3" json:"totalRollPoint,omitempty"` //本轮总点数
	RollTime       int64  `protobuf:"varint,4,opt,name=rollTime,proto3" json:"rollTime,omitempty"`             //roll的时间
}

func (x *RollMemberInfo) Reset() {
	*x = RollMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollMemberInfo) ProtoMessage() {}

func (x *RollMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollMemberInfo.ProtoReflect.Descriptor instead.
func (*RollMemberInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{349}
}

func (x *RollMemberInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RollMemberInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollMemberInfo) GetTotalRollPoint() uint32 {
	if x != nil {
		return x.TotalRollPoint
	}
	return 0
}

func (x *RollMemberInfo) GetRollTime() int64 {
	if x != nil {
		return x.RollTime
	}
	return 0
}

//联盟R信息
type GuildRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollMembers []*RollMemberInfo `protobuf:"bytes,1,rep,name=rollMembers,proto3" json:"rollMembers,omitempty"`
	LastEndTime int64             `protobuf:"varint,2,opt,name=lastEndTime,proto3" json:"lastEndTime,omitempty"` //上次结算时间
}

func (x *GuildRoll) Reset() {
	*x = GuildRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoll) ProtoMessage() {}

func (x *GuildRoll) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoll.ProtoReflect.Descriptor instead.
func (*GuildRoll) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{350}
}

func (x *GuildRoll) GetRollMembers() []*RollMemberInfo {
	if x != nil {
		return x.RollMembers
	}
	return nil
}

func (x *GuildRoll) GetLastEndTime() int64 {
	if x != nil {
		return x.LastEndTime
	}
	return 0
}

//玩家roll信息
type PlayerGuildRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollCount   uint32 `protobuf:"varint,1,opt,name=rollCount,proto3" json:"rollCount,omitempty"`     //今日roll次数
	LastEndTime int64  `protobuf:"varint,2,opt,name=lastEndTime,proto3" json:"lastEndTime,omitempty"` //上次结算时间
	LastGuildID uint64 `protobuf:"varint,3,opt,name=lastGuildID,proto3" json:"lastGuildID,omitempty"` //上一次加入联盟的id，用于判断今日是否更换过联盟
}

func (x *PlayerGuildRoll) Reset() {
	*x = PlayerGuildRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGuildRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGuildRoll) ProtoMessage() {}

func (x *PlayerGuildRoll) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGuildRoll.ProtoReflect.Descriptor instead.
func (*PlayerGuildRoll) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{351}
}

func (x *PlayerGuildRoll) GetRollCount() uint32 {
	if x != nil {
		return x.RollCount
	}
	return 0
}

func (x *PlayerGuildRoll) GetLastEndTime() int64 {
	if x != nil {
		return x.LastEndTime
	}
	return 0
}

func (x *PlayerGuildRoll) GetLastGuildID() uint64 {
	if x != nil {
		return x.LastGuildID
	}
	return 0
}

//==============================================霸主挑战
// 霸主挑战PlayerDB
type PlayerOverlord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stages map[int32]*PayerOverlordStage `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 阶段信息
}

func (x *PlayerOverlord) Reset() {
	*x = PlayerOverlord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOverlord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOverlord) ProtoMessage() {}

func (x *PlayerOverlord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOverlord.ProtoReflect.Descriptor instead.
func (*PlayerOverlord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{352}
}

func (x *PlayerOverlord) GetStages() map[int32]*PayerOverlordStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

// 霸主挑战PayerOverlordStage
type PayerOverlordStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   int32             `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`                                                                                        // 阶段ID
	Magics    map[int32]int32   `protobuf:"bytes,2,rep,name=magics,proto3" json:"magics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 锦囊
	Formation *common.Formation `protobuf:"bytes,3,opt,name=formation,proto3" json:"formation,omitempty"`                                                                                     // 布阵信息
}

func (x *PayerOverlordStage) Reset() {
	*x = PayerOverlordStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayerOverlordStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerOverlordStage) ProtoMessage() {}

func (x *PayerOverlordStage) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayerOverlordStage.ProtoReflect.Descriptor instead.
func (*PayerOverlordStage) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{353}
}

func (x *PayerOverlordStage) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PayerOverlordStage) GetMagics() map[int32]int32 {
	if x != nil {
		return x.Magics
	}
	return nil
}

func (x *PayerOverlordStage) GetFormation() *common.Formation {
	if x != nil {
		return x.Formation
	}
	return nil
}

// 霸主挑战GameDB
// 霸主信息
type GameOverlord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   int32                    `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`    // 霸主ID
	Rank      int32                    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`          // 排名
	Status    int32                    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`      // 镜像状态
	Overlord  *common.BattlePlayerInfo `protobuf:"bytes,4,opt,name=overlord,proto3" json:"overlord,omitempty"`   // 霸主信息
	Mirroring *common.BattlePlayerInfo `protobuf:"bytes,5,opt,name=mirroring,proto3" json:"mirroring,omitempty"` // 镜像
}

func (x *GameOverlord) Reset() {
	*x = GameOverlord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameOverlord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameOverlord) ProtoMessage() {}

func (x *GameOverlord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameOverlord.ProtoReflect.Descriptor instead.
func (*GameOverlord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{354}
}

func (x *GameOverlord) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GameOverlord) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameOverlord) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GameOverlord) GetOverlord() *common.BattlePlayerInfo {
	if x != nil {
		return x.Overlord
	}
	return nil
}

func (x *GameOverlord) GetMirroring() *common.BattlePlayerInfo {
	if x != nil {
		return x.Mirroring
	}
	return nil
}

// 霸主挑战通关信息
type GameOverlordClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint64                 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`        // 玩家ID
	Stages   []*common.GOClearStage `protobuf:"bytes,2,rep,name=stages,proto3" json:"stages,omitempty"`             // 阶段信息
	StageIds []int32                `protobuf:"varint,3,rep,packed,name=stageIds,proto3" json:"stageIds,omitempty"` // 已经战斗过的阶段
}

func (x *GameOverlordClear) Reset() {
	*x = GameOverlordClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameOverlordClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameOverlordClear) ProtoMessage() {}

func (x *GameOverlordClear) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameOverlordClear.ProtoReflect.Descriptor instead.
func (*GameOverlordClear) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{355}
}

func (x *GameOverlordClear) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GameOverlordClear) GetStages() []*common.GOClearStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *GameOverlordClear) GetStageIds() []int32 {
	if x != nil {
		return x.StageIds
	}
	return nil
}

// 魂匣抽卡活动
type SuperDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrDraw *UrDraw `protobuf:"bytes,1,opt,name=urDraw,proto3" json:"urDraw,omitempty"` // 20资质抽卡
}

func (x *SuperDraw) Reset() {
	*x = SuperDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperDraw) ProtoMessage() {}

func (x *SuperDraw) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperDraw.ProtoReflect.Descriptor instead.
func (*SuperDraw) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{356}
}

func (x *SuperDraw) GetUrDraw() *UrDraw {
	if x != nil {
		return x.UrDraw
	}
	return nil
}

// Ur抽卡
type UrDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId          int32            `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`
	ActId           int32            `protobuf:"varint,2,opt,name=actId,proto3" json:"actId,omitempty"`
	TakeRewards     []int32          `protobuf:"varint,3,rep,packed,name=takeRewards,proto3" json:"takeRewards,omitempty"`                                                                                         //已经领取的奖励
	KillTotalCount  uint32           `protobuf:"varint,4,opt,name=killTotalCount,proto3" json:"killTotalCount,omitempty"`                                                                                          //当前活动击杀敌人总数
	IsHitServerSoul bool             `protobuf:"varint,5,opt,name=isHitServerSoul,proto3" json:"isHitServerSoul,omitempty"`                                                                                        // 是否中服务器大奖
	ItemCount       map[int32]uint32 `protobuf:"bytes,6,rep,name=itemCount,proto3" json:"itemCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // 兑换物品次数记录
	TenDrawDataPer  map[int32]int32  `protobuf:"bytes,7,rep,name=tenDrawDataPer,proto3" json:"tenDrawDataPer,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // groupId:count 每A抽内获得的gift3，gift4占据槽位的数量
	DrawData        map[int32]int32  `protobuf:"bytes,8,rep,name=drawData,proto3" json:"drawData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`             // groupId:count 当前已经获得抽卡的道具的全部数量，这里是道具数量，不是槽位数量
	DrawCount       int32            `protobuf:"varint,9,opt,name=drawCount,proto3" json:"drawCount,omitempty"`                                                                                                    // 当前抽卡总次数
}

func (x *UrDraw) Reset() {
	*x = UrDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrDraw) ProtoMessage() {}

func (x *UrDraw) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrDraw.ProtoReflect.Descriptor instead.
func (*UrDraw) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{357}
}

func (x *UrDraw) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *UrDraw) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *UrDraw) GetTakeRewards() []int32 {
	if x != nil {
		return x.TakeRewards
	}
	return nil
}

func (x *UrDraw) GetKillTotalCount() uint32 {
	if x != nil {
		return x.KillTotalCount
	}
	return 0
}

func (x *UrDraw) GetIsHitServerSoul() bool {
	if x != nil {
		return x.IsHitServerSoul
	}
	return false
}

func (x *UrDraw) GetItemCount() map[int32]uint32 {
	if x != nil {
		return x.ItemCount
	}
	return nil
}

func (x *UrDraw) GetTenDrawDataPer() map[int32]int32 {
	if x != nil {
		return x.TenDrawDataPer
	}
	return nil
}

func (x *UrDraw) GetDrawData() map[int32]int32 {
	if x != nil {
		return x.DrawData
	}
	return nil
}

func (x *UrDraw) GetDrawCount() int32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

// 注水
type PublicCheat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealBuyNum   uint32             `protobuf:"varint,1,opt,name=realBuyNum,proto3" json:"realBuyNum,omitempty"` // 真实购买人数
	PublicCheats []*PublicCheatData `protobuf:"bytes,2,rep,name=publicCheats,proto3" json:"publicCheats,omitempty"`
	CheatTime    int64              `protobuf:"varint,3,opt,name=cheatTime,proto3" json:"cheatTime,omitempty"`
	FakeBuyNum   uint32             `protobuf:"varint,4,opt,name=fakeBuyNum,proto3" json:"fakeBuyNum,omitempty"` // 假的购买人数
	CheatType    int32              `protobuf:"varint,5,opt,name=cheatType,proto3" json:"cheatType,omitempty"`   // 注水类型
}

func (x *PublicCheat) Reset() {
	*x = PublicCheat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicCheat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicCheat) ProtoMessage() {}

func (x *PublicCheat) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicCheat.ProtoReflect.Descriptor instead.
func (*PublicCheat) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{358}
}

func (x *PublicCheat) GetRealBuyNum() uint32 {
	if x != nil {
		return x.RealBuyNum
	}
	return 0
}

func (x *PublicCheat) GetPublicCheats() []*PublicCheatData {
	if x != nil {
		return x.PublicCheats
	}
	return nil
}

func (x *PublicCheat) GetCheatTime() int64 {
	if x != nil {
		return x.CheatTime
	}
	return 0
}

func (x *PublicCheat) GetFakeBuyNum() uint32 {
	if x != nil {
		return x.FakeBuyNum
	}
	return 0
}

func (x *PublicCheat) GetCheatType() int32 {
	if x != nil {
		return x.CheatType
	}
	return 0
}

type PublicCheatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PublicCheatData) Reset() {
	*x = PublicCheatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicCheatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicCheatData) ProtoMessage() {}

func (x *PublicCheatData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicCheatData.ProtoReflect.Descriptor instead.
func (*PublicCheatData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{359}
}

func (x *PublicCheatData) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PublicCheatData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 玩家个人注水活动数据
type PlayerCheatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId       int32   `protobuf:"varint,1,opt,name=openId,proto3" json:"openId,omitempty"`                    //
	TakeCheatBox []int32 `protobuf:"varint,2,rep,packed,name=takeCheatBox,proto3" json:"takeCheatBox,omitempty"` // 已经领取的注水宝箱
}

func (x *PlayerCheatData) Reset() {
	*x = PlayerCheatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCheatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCheatData) ProtoMessage() {}

func (x *PlayerCheatData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCheatData.ProtoReflect.Descriptor instead.
func (*PlayerCheatData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{360}
}

func (x *PlayerCheatData) GetOpenId() int32 {
	if x != nil {
		return x.OpenId
	}
	return 0
}

func (x *PlayerCheatData) GetTakeCheatBox() []int32 {
	if x != nil {
		return x.TakeCheatBox
	}
	return nil
}

// 战魂晋升
type WarSoul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurId     int32                             `protobuf:"varint,1,opt,name=curId,proto3" json:"curId,omitempty"`                                                                                                 // 当前ID
	Schedules map[int32]*common.WarSoulSchedule `protobuf:"bytes,2,rep,name=schedules,proto3" json:"schedules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // id->进度奖励
}

func (x *WarSoul) Reset() {
	*x = WarSoul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarSoul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarSoul) ProtoMessage() {}

func (x *WarSoul) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarSoul.ProtoReflect.Descriptor instead.
func (*WarSoul) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{361}
}

func (x *WarSoul) GetCurId() int32 {
	if x != nil {
		return x.CurId
	}
	return 0
}

func (x *WarSoul) GetSchedules() map[int32]*common.WarSoulSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// 跨服海战玩家队伍存储
type NavalBattleFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       uint64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	PlayerId       uint64 `protobuf:"varint,2,opt,name=playerId,proto3" json:"playerId,omitempty"`             //玩家id
	FormationId    int32  `protobuf:"varint,3,opt,name=formationId,proto3" json:"formationId,omitempty"`       //队伍id
	Power          uint64 `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`                   //队伍战力
	CommanderCount int32  `protobuf:"varint,5,opt,name=commanderCount,proto3" json:"commanderCount,omitempty"` //主将数量
}

func (x *NavalBattleFormation) Reset() {
	*x = NavalBattleFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleFormation) ProtoMessage() {}

func (x *NavalBattleFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleFormation) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{362}
}

func (x *NavalBattleFormation) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *NavalBattleFormation) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *NavalBattleFormation) GetFormationId() int32 {
	if x != nil {
		return x.FormationId
	}
	return 0
}

func (x *NavalBattleFormation) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *NavalBattleFormation) GetCommanderCount() int32 {
	if x != nil {
		return x.CommanderCount
	}
	return 0
}

// 海战队伍段存储
type NavalBattleSectionFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formations []*common.NavalBattleFormation `protobuf:"bytes,1,rep,name=formations,proto3" json:"formations,omitempty"`
}

func (x *NavalBattleSectionFormation) Reset() {
	*x = NavalBattleSectionFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleSectionFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleSectionFormation) ProtoMessage() {}

func (x *NavalBattleSectionFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleSectionFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleSectionFormation) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{363}
}

func (x *NavalBattleSectionFormation) GetFormations() []*common.NavalBattleFormation {
	if x != nil {
		return x.Formations
	}
	return nil
}

//跨服海战功能队伍
type NavalBattleModuleFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionFormations []*NavalBattleSectionFormation `protobuf:"bytes,1,rep,name=sectionFormations,proto3" json:"sectionFormations,omitempty"`
}

func (x *NavalBattleModuleFormation) Reset() {
	*x = NavalBattleModuleFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleModuleFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleModuleFormation) ProtoMessage() {}

func (x *NavalBattleModuleFormation) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleModuleFormation.ProtoReflect.Descriptor instead.
func (*NavalBattleModuleFormation) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{364}
}

func (x *NavalBattleModuleFormation) GetSectionFormations() []*NavalBattleSectionFormation {
	if x != nil {
		return x.SectionFormations
	}
	return nil
}

// ==========================================周年庆
type ActAnniversary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikedCount uint32 `protobuf:"varint,1,opt,name=likedCount,proto3" json:"likedCount,omitempty"` // 已经点赞的数量
}

func (x *ActAnniversary) Reset() {
	*x = ActAnniversary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActAnniversary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActAnniversary) ProtoMessage() {}

func (x *ActAnniversary) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActAnniversary.ProtoReflect.Descriptor instead.
func (*ActAnniversary) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{365}
}

func (x *ActAnniversary) GetLikedCount() uint32 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

type ActMainSsr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyTimes uint32 `protobuf:"varint,1,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"` // 购买令牌次数
}

func (x *ActMainSsr) Reset() {
	*x = ActMainSsr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActMainSsr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActMainSsr) ProtoMessage() {}

func (x *ActMainSsr) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActMainSsr.ProtoReflect.Descriptor instead.
func (*ActMainSsr) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{366}
}

func (x *ActMainSsr) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

// 市场活动
type Bazaar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records map[int32]*BazaarRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // openId->市场记录
}

func (x *Bazaar) Reset() {
	*x = Bazaar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bazaar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bazaar) ProtoMessage() {}

func (x *Bazaar) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bazaar.ProtoReflect.Descriptor instead.
func (*Bazaar) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{367}
}

func (x *Bazaar) GetRecords() map[int32]*BazaarRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// 市场活动记录
type BazaarRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*common.BazaarItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // 道具
}

func (x *BazaarRecord) Reset() {
	*x = BazaarRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BazaarRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BazaarRecord) ProtoMessage() {}

func (x *BazaarRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BazaarRecord.ProtoReflect.Descriptor instead.
func (*BazaarRecord) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{368}
}

func (x *BazaarRecord) GetItems() []*common.BazaarItem {
	if x != nil {
		return x.Items
	}
	return nil
}

//海战队伍池
type NavalBattlePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreResetTime int64 `protobuf:"varint,3,opt,name=preResetTime,proto3" json:"preResetTime,omitempty"` // 上次重置时间
	SceneId      int32 `protobuf:"varint,4,opt,name=sceneId,proto3" json:"sceneId,omitempty"`           // 场景id
}

func (x *NavalBattlePool) Reset() {
	*x = NavalBattlePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattlePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattlePool) ProtoMessage() {}

func (x *NavalBattlePool) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattlePool.ProtoReflect.Descriptor instead.
func (*NavalBattlePool) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{369}
}

func (x *NavalBattlePool) GetPreResetTime() int64 {
	if x != nil {
		return x.PreResetTime
	}
	return 0
}

func (x *NavalBattlePool) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

// 海战
type NavalBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreResetTime       int64                              `protobuf:"varint,1,opt,name=preResetTime,proto3" json:"preResetTime,omitempty"`                                                                              // 上次系统重制时间
	ResetCount         int32                              `protobuf:"varint,2,opt,name=resetCount,proto3" json:"resetCount,omitempty"`                                                                                  // 系统重置次数
	CurrentRoundPlayer int32                              `protobuf:"varint,3,opt,name=currentRoundPlayer,proto3" json:"currentRoundPlayer,omitempty"`                                                                  // 当前回合是已方还是敌方
	RoundCount         int32                              `protobuf:"varint,4,opt,name=roundCount,proto3" json:"roundCount,omitempty"`                                                                                  // 当前回合数
	WinCount           int32                              `protobuf:"varint,5,opt,name=winCount,proto3" json:"winCount,omitempty"`                                                                                      // 战斗胜利次数
	Status             NavalBattle_State                  `protobuf:"varint,6,opt,name=status,proto3,enum=common1.NavalBattle_State" json:"status,omitempty"`                                                           // 当前状态
	BeginTime          int64                              `protobuf:"varint,7,opt,name=beginTime,proto3" json:"beginTime,omitempty"`                                                                                    // 开始闯关时间
	EnemyStrength      int32                              `protobuf:"varint,8,opt,name=enemyStrength,proto3" json:"enemyStrength,omitempty"`                                                                            // 敌方行动力
	RewardIds          []int32                            `protobuf:"varint,9,rep,packed,name=rewardIds,proto3" json:"rewardIds,omitempty"`                                                                             // 已经领取的奖励
	Stages             map[int32]*common.NavalStage       `protobuf:"bytes,10,rep,name=stages,proto3" json:"stages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 关卡信息
	Events             map[int32]*common.NavalBattleEvent `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //计谋池
	NegativeEvents     []*common.NavalBattleEvent         `protobuf:"bytes,12,rep,name=negativeEvents,proto3" json:"negativeEvents,omitempty"`                                                                          // 负面事件
	Hps                map[int32]*common.BattleUnitHp     `protobuf:"bytes,13,rep,name=hps,proto3" json:"hps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // 己方血量hp
	SelfTeams          []*common.NavalBattleTeam          `protobuf:"bytes,14,rep,name=selfTeams,proto3" json:"selfTeams,omitempty"`
	PlayerBuffs        []*common.Skill                    `protobuf:"bytes,15,rep,name=playerBuffs,proto3" json:"playerBuffs,omitempty"`                                                                                    // player buff
	Assist             *NavalBattleAssist                 `protobuf:"bytes,16,opt,name=assist,proto3" json:"assist,omitempty"`                                                                                              // 助战
	NpcBuffs           []*common.Skill                    `protobuf:"bytes,17,rep,name=npcBuffs,proto3" json:"npcBuffs,omitempty"`                                                                                          // npc buff
	PassPath           map[int32]*NavalBattlePath         `protobuf:"bytes,18,rep,name=passPath,proto3" json:"passPath,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 通路
	StopPath           map[int32]*NavalBattlePath         `protobuf:"bytes,19,rep,name=stopPath,proto3" json:"stopPath,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 断路
	Enemys             map[int32]*NavalBattleEnemy        `protobuf:"bytes,20,rep,name=enemys,proto3" json:"enemys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ai                 *NavalBattleAI                     `protobuf:"bytes,21,opt,name=ai,proto3" json:"ai,omitempty"`                                                                                                                   // ai
	IsPass             bool                               `protobuf:"varint,22,opt,name=isPass,proto3" json:"isPass,omitempty"`                                                                                                          // 是否通关
	MaxWinCount        int32                              `protobuf:"varint,23,opt,name=maxWinCount,proto3" json:"maxWinCount,omitempty"`                                                                                                // 最大胜利次数
	OldFormations      []*common.Formation                `protobuf:"bytes,24,rep,name=oldFormations,proto3" json:"oldFormations,omitempty"`                                                                                             // old formation
	OldEnemys          map[int32]*NavalBattleEnemy        `protobuf:"bytes,25,rep,name=oldEnemys,proto3" json:"oldEnemys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`            // old怪物信息
	FoundPlayerIds     map[uint64]int32                   `protobuf:"bytes,26,rep,name=foundPlayerIds,proto3" json:"foundPlayerIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 已经找过的玩家Id
	FoundPlayerFts     map[string]int32                   `protobuf:"bytes,27,rep,name=foundPlayerFts,proto3" json:"foundPlayerFts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`  // 已经找过的玩家队伍
}

func (x *NavalBattle) Reset() {
	*x = NavalBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattle) ProtoMessage() {}

func (x *NavalBattle) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattle.ProtoReflect.Descriptor instead.
func (*NavalBattle) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{370}
}

func (x *NavalBattle) GetPreResetTime() int64 {
	if x != nil {
		return x.PreResetTime
	}
	return 0
}

func (x *NavalBattle) GetResetCount() int32 {
	if x != nil {
		return x.ResetCount
	}
	return 0
}

func (x *NavalBattle) GetCurrentRoundPlayer() int32 {
	if x != nil {
		return x.CurrentRoundPlayer
	}
	return 0
}

func (x *NavalBattle) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *NavalBattle) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *NavalBattle) GetStatus() NavalBattle_State {
	if x != nil {
		return x.Status
	}
	return NavalBattle_none
}

func (x *NavalBattle) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *NavalBattle) GetEnemyStrength() int32 {
	if x != nil {
		return x.EnemyStrength
	}
	return 0
}

func (x *NavalBattle) GetRewardIds() []int32 {
	if x != nil {
		return x.RewardIds
	}
	return nil
}

func (x *NavalBattle) GetStages() map[int32]*common.NavalStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *NavalBattle) GetEvents() map[int32]*common.NavalBattleEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *NavalBattle) GetNegativeEvents() []*common.NavalBattleEvent {
	if x != nil {
		return x.NegativeEvents
	}
	return nil
}

func (x *NavalBattle) GetHps() map[int32]*common.BattleUnitHp {
	if x != nil {
		return x.Hps
	}
	return nil
}

func (x *NavalBattle) GetSelfTeams() []*common.NavalBattleTeam {
	if x != nil {
		return x.SelfTeams
	}
	return nil
}

func (x *NavalBattle) GetPlayerBuffs() []*common.Skill {
	if x != nil {
		return x.PlayerBuffs
	}
	return nil
}

func (x *NavalBattle) GetAssist() *NavalBattleAssist {
	if x != nil {
		return x.Assist
	}
	return nil
}

func (x *NavalBattle) GetNpcBuffs() []*common.Skill {
	if x != nil {
		return x.NpcBuffs
	}
	return nil
}

func (x *NavalBattle) GetPassPath() map[int32]*NavalBattlePath {
	if x != nil {
		return x.PassPath
	}
	return nil
}

func (x *NavalBattle) GetStopPath() map[int32]*NavalBattlePath {
	if x != nil {
		return x.StopPath
	}
	return nil
}

func (x *NavalBattle) GetEnemys() map[int32]*NavalBattleEnemy {
	if x != nil {
		return x.Enemys
	}
	return nil
}

func (x *NavalBattle) GetAi() *NavalBattleAI {
	if x != nil {
		return x.Ai
	}
	return nil
}

func (x *NavalBattle) GetIsPass() bool {
	if x != nil {
		return x.IsPass
	}
	return false
}

func (x *NavalBattle) GetMaxWinCount() int32 {
	if x != nil {
		return x.MaxWinCount
	}
	return 0
}

func (x *NavalBattle) GetOldFormations() []*common.Formation {
	if x != nil {
		return x.OldFormations
	}
	return nil
}

func (x *NavalBattle) GetOldEnemys() map[int32]*NavalBattleEnemy {
	if x != nil {
		return x.OldEnemys
	}
	return nil
}

func (x *NavalBattle) GetFoundPlayerIds() map[uint64]int32 {
	if x != nil {
		return x.FoundPlayerIds
	}
	return nil
}

func (x *NavalBattle) GetFoundPlayerFts() map[string]int32 {
	if x != nil {
		return x.FoundPlayerFts
	}
	return nil
}

type NavalBattleEnemy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       //敌人id
	CreateStageId int32                          `protobuf:"varint,2,opt,name=createStageId,proto3" json:"createStageId,omitempty"` //地图生成时的关卡id，地图重置时使用
	StageId       int32                          `protobuf:"varint,3,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleUnitHps map[int32]*common.BattleUnitHp `protobuf:"bytes,5,rep,name=battleUnitHps,proto3" json:"battleUnitHps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 剩余血量
	PlayerId      uint64                         `protobuf:"varint,6,opt,name=playerId,proto3" json:"playerId,omitempty"`                                                                                                   // 皮肤
	FormationId   int32                          `protobuf:"varint,7,opt,name=formationId,proto3" json:"formationId,omitempty"`                                                                                             // 皮肤
	ServerId      uint64                         `protobuf:"varint,8,opt,name=serverId,proto3" json:"serverId,omitempty"`                                                                                                   // 皮肤
	Skin          int32                          `protobuf:"varint,9,opt,name=skin,proto3" json:"skin,omitempty"`                                                                                                           // 皮肤
	IsDie         bool                           `protobuf:"varint,10,opt,name=isDie,proto3" json:"isDie,omitempty"`                                                                                                        //
	Power         uint64                         `protobuf:"varint,11,opt,name=power,proto3" json:"power,omitempty"`                                                                                                        //
}

func (x *NavalBattleEnemy) Reset() {
	*x = NavalBattleEnemy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleEnemy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleEnemy) ProtoMessage() {}

func (x *NavalBattleEnemy) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleEnemy.ProtoReflect.Descriptor instead.
func (*NavalBattleEnemy) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{371}
}

func (x *NavalBattleEnemy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NavalBattleEnemy) GetCreateStageId() int32 {
	if x != nil {
		return x.CreateStageId
	}
	return 0
}

func (x *NavalBattleEnemy) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *NavalBattleEnemy) GetBattleUnitHps() map[int32]*common.BattleUnitHp {
	if x != nil {
		return x.BattleUnitHps
	}
	return nil
}

func (x *NavalBattleEnemy) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *NavalBattleEnemy) GetFormationId() int32 {
	if x != nil {
		return x.FormationId
	}
	return 0
}

func (x *NavalBattleEnemy) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *NavalBattleEnemy) GetSkin() int32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *NavalBattleEnemy) GetIsDie() bool {
	if x != nil {
		return x.IsDie
	}
	return false
}

func (x *NavalBattleEnemy) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

type NavalBattleAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools      []*NavalBattleAssistPool  `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`           // 助战数据
	Commanders []*common.AssistCommander `protobuf:"bytes,2,rep,name=commanders,proto3" json:"commanders,omitempty"` // 助战的主将
}

func (x *NavalBattleAssist) Reset() {
	*x = NavalBattleAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleAssist) ProtoMessage() {}

func (x *NavalBattleAssist) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleAssist.ProtoReflect.Descriptor instead.
func (*NavalBattleAssist) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{372}
}

func (x *NavalBattleAssist) GetPools() []*NavalBattleAssistPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *NavalBattleAssist) GetCommanders() []*common.AssistCommander {
	if x != nil {
		return x.Commanders
	}
	return nil
}

type NavalBattleAssistPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint64 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`       // 皮肤
	FormationId int32  `protobuf:"varint,2,opt,name=formationId,proto3" json:"formationId,omitempty"` // 皮肤
	ServerId    uint64 `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`       // 皮
	Power       uint64 `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`             //
}

func (x *NavalBattleAssistPool) Reset() {
	*x = NavalBattleAssistPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleAssistPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleAssistPool) ProtoMessage() {}

func (x *NavalBattleAssistPool) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleAssistPool.ProtoReflect.Descriptor instead.
func (*NavalBattleAssistPool) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{373}
}

func (x *NavalBattleAssistPool) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *NavalBattleAssistPool) GetFormationId() int32 {
	if x != nil {
		return x.FormationId
	}
	return 0
}

func (x *NavalBattleAssistPool) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *NavalBattleAssistPool) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

type NavalBattlePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`                                                                                              // 当前节点
	AroundIds map[int32]int32 `protobuf:"bytes,2,rep,name=aroundIds,proto3" json:"aroundIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 周围节点
}

func (x *NavalBattlePath) Reset() {
	*x = NavalBattlePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattlePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattlePath) ProtoMessage() {}

func (x *NavalBattlePath) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattlePath.ProtoReflect.Descriptor instead.
func (*NavalBattlePath) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{374}
}

func (x *NavalBattlePath) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *NavalBattlePath) GetAroundIds() map[int32]int32 {
	if x != nil {
		return x.AroundIds
	}
	return nil
}

type NavalBattleAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackNum int32   `protobuf:"varint,1,opt,name=attackNum,proto3" json:"attackNum,omitempty"`       // 玩家被攻击次数
	EventIds  []int32 `protobuf:"varint,2,rep,packed,name=eventIds,proto3" json:"eventIds,omitempty"`  // AI回合已经被选择的事件
	EnemyIds  []int32 `protobuf:"varint,22,rep,packed,name=enemyIds,proto3" json:"enemyIds,omitempty"` // 敌方回合已经走过的怪物
}

func (x *NavalBattleAI) Reset() {
	*x = NavalBattleAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavalBattleAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavalBattleAI) ProtoMessage() {}

func (x *NavalBattleAI) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavalBattleAI.ProtoReflect.Descriptor instead.
func (*NavalBattleAI) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{375}
}

func (x *NavalBattleAI) GetAttackNum() int32 {
	if x != nil {
		return x.AttackNum
	}
	return 0
}

func (x *NavalBattleAI) GetEventIds() []int32 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *NavalBattleAI) GetEnemyIds() []int32 {
	if x != nil {
		return x.EnemyIds
	}
	return nil
}

// 铁锁横江跨服基础数据
type CrossNavalBattleBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreResetTime int64 `protobuf:"varint,1,opt,name=preResetTime,proto3" json:"preResetTime,omitempty"` // 上一次重置时间
}

func (x *CrossNavalBattleBase) Reset() {
	*x = CrossNavalBattleBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossNavalBattleBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossNavalBattleBase) ProtoMessage() {}

func (x *CrossNavalBattleBase) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossNavalBattleBase.ProtoReflect.Descriptor instead.
func (*CrossNavalBattleBase) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{376}
}

func (x *CrossNavalBattleBase) GetPreResetTime() int64 {
	if x != nil {
		return x.PreResetTime
	}
	return 0
}

// h5 用户数据
type H5UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level             uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                         // 玩家等级
	Power             uint32 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`                         // 玩家战力
	AreaMaxRank       uint32 `protobuf:"varint,3,opt,name=areaMaxRank,proto3" json:"areaMaxRank,omitempty"`             // 竞技场最高排名
	FormationNums     uint32 `protobuf:"varint,4,opt,name=formationNums,proto3" json:"formationNums,omitempty"`         // 上阵主将数量
	Mission           int32  `protobuf:"varint,5,opt,name=mission,proto3" json:"mission,omitempty"`                     // 最新主线
	TowerLevel        int32  `protobuf:"varint,6,opt,name=towerLevel,proto3" json:"towerLevel,omitempty"`               // 黄巾通关数
	JoinGuild         bool   `protobuf:"varint,7,opt,name=joinGuild,proto3" json:"joinGuild,omitempty"`                 // 加入或创建联盟
	PassDrama         bool   `protobuf:"varint,8,opt,name=passDrama,proto3" json:"passDrama,omitempty"`                 // 通关沙盘
	GainCommanderNums uint32 `protobuf:"varint,9,opt,name=gainCommanderNums,proto3" json:"gainCommanderNums,omitempty"` // 获取三星主将的个数
	VipLv             uint32 `protobuf:"varint,10,opt,name=vipLv,proto3" json:"vipLv,omitempty"`                        // 玩家vip等级
	VipExp            uint32 `protobuf:"varint,11,opt,name=vipExp,proto3" json:"vipExp,omitempty"`                      // 玩家vip经验
	RegisterTime      int64  `protobuf:"varint,12,opt,name=registerTime,proto3" json:"registerTime,omitempty"`          // 玩家注册时间
	Avatar            int32  `protobuf:"varint,13,opt,name=avatar,proto3" json:"avatar,omitempty"`                      // 头像
	Name              string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                           // 名字
	OpenServerTime    int64  `protobuf:"varint,15,opt,name=openServerTime,proto3" json:"openServerTime,omitempty"`      // 开服时间
	Stats             *Stats `protobuf:"bytes,16,opt,name=stats,proto3" json:"stats,omitempty"`                         // 用户统计数据
	LastLoginTime     int64  `protobuf:"varint,17,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`        // 玩家上次登录时间
}

func (x *H5UserInfo) Reset() {
	*x = H5UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5UserInfo) ProtoMessage() {}

func (x *H5UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5UserInfo.ProtoReflect.Descriptor instead.
func (*H5UserInfo) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{377}
}

func (x *H5UserInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *H5UserInfo) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *H5UserInfo) GetAreaMaxRank() uint32 {
	if x != nil {
		return x.AreaMaxRank
	}
	return 0
}

func (x *H5UserInfo) GetFormationNums() uint32 {
	if x != nil {
		return x.FormationNums
	}
	return 0
}

func (x *H5UserInfo) GetMission() int32 {
	if x != nil {
		return x.Mission
	}
	return 0
}

func (x *H5UserInfo) GetTowerLevel() int32 {
	if x != nil {
		return x.TowerLevel
	}
	return 0
}

func (x *H5UserInfo) GetJoinGuild() bool {
	if x != nil {
		return x.JoinGuild
	}
	return false
}

func (x *H5UserInfo) GetPassDrama() bool {
	if x != nil {
		return x.PassDrama
	}
	return false
}

func (x *H5UserInfo) GetGainCommanderNums() uint32 {
	if x != nil {
		return x.GainCommanderNums
	}
	return 0
}

func (x *H5UserInfo) GetVipLv() uint32 {
	if x != nil {
		return x.VipLv
	}
	return 0
}

func (x *H5UserInfo) GetVipExp() uint32 {
	if x != nil {
		return x.VipExp
	}
	return 0
}

func (x *H5UserInfo) GetRegisterTime() int64 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *H5UserInfo) GetAvatar() int32 {
	if x != nil {
		return x.Avatar
	}
	return 0
}

func (x *H5UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *H5UserInfo) GetOpenServerTime() int64 {
	if x != nil {
		return x.OpenServerTime
	}
	return 0
}

func (x *H5UserInfo) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *H5UserInfo) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

type DrawOnlyEquip_DrawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawCount          int32            `protobuf:"varint,1,opt,name=drawCount,proto3" json:"drawCount,omitempty"`                                                                                                       // 每个卡池以抽次数,抽中红色后重新计算
	TodayDrawCount     int32            `protobuf:"varint,2,opt,name=todayDrawCount,proto3" json:"todayDrawCount,omitempty"`                                                                                             //每个卡池今天以抽次数
	TodayBuyTimes      int32            `protobuf:"varint,3,opt,name=todayBuyTimes,proto3" json:"todayBuyTimes,omitempty"`                                                                                               //今日购买资源次数
	TodayBuyLimitTimes int32            `protobuf:"varint,4,opt,name=todayBuyLimitTimes,proto3" json:"todayBuyLimitTimes,omitempty"`                                                                                     //今日购买限制次数
	TodayFreeCount     int32            `protobuf:"varint,5,opt,name=todayFreeCount,proto3" json:"todayFreeCount,omitempty"`                                                                                             //今日免费次数
	NextFreeTime       int64            `protobuf:"varint,6,opt,name=nextFreeTime,proto3" json:"nextFreeTime,omitempty"`                                                                                                 //下次免费时间
	DrawRedCount       int32            `protobuf:"varint,7,opt,name=drawRedCount,proto3" json:"drawRedCount,omitempty"`                                                                                                 //历史抽到红色次数
	IsDrawRedEquip     bool             `protobuf:"varint,8,opt,name=isDrawRedEquip,proto3" json:"isDrawRedEquip,omitempty"`                                                                                             //是否抽中过红色
	SpecialDrawCount   map[string]int32 `protobuf:"bytes,9,rep,name=specialDrawCount,proto3" json:"specialDrawCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 特殊规则
	HistoryDrawCount   int32            `protobuf:"varint,10,opt,name=historyDrawCount,proto3" json:"historyDrawCount,omitempty"`                                                                                        //历史抽卡总次数
	ResId              int32            `protobuf:"varint,11,opt,name=resId,proto3" json:"resId,omitempty"`                                                                                                              //根据资源Id重制一些变量
}

func (x *DrawOnlyEquip_DrawData) Reset() {
	*x = DrawOnlyEquip_DrawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common1_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawOnlyEquip_DrawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawOnlyEquip_DrawData) ProtoMessage() {}

func (x *DrawOnlyEquip_DrawData) ProtoReflect() protoreflect.Message {
	mi := &file_common1_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawOnlyEquip_DrawData.ProtoReflect.Descriptor instead.
func (*DrawOnlyEquip_DrawData) Descriptor() ([]byte, []int) {
	return file_common1_proto_rawDescGZIP(), []int{103, 0}
}

func (x *DrawOnlyEquip_DrawData) GetDrawCount() int32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetTodayDrawCount() int32 {
	if x != nil {
		return x.TodayDrawCount
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetTodayBuyTimes() int32 {
	if x != nil {
		return x.TodayBuyTimes
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetTodayBuyLimitTimes() int32 {
	if x != nil {
		return x.TodayBuyLimitTimes
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetTodayFreeCount() int32 {
	if x != nil {
		return x.TodayFreeCount
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetNextFreeTime() int64 {
	if x != nil {
		return x.NextFreeTime
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetDrawRedCount() int32 {
	if x != nil {
		return x.DrawRedCount
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetIsDrawRedEquip() bool {
	if x != nil {
		return x.IsDrawRedEquip
	}
	return false
}

func (x *DrawOnlyEquip_DrawData) GetSpecialDrawCount() map[string]int32 {
	if x != nil {
		return x.SpecialDrawCount
	}
	return nil
}

func (x *DrawOnlyEquip_DrawData) GetHistoryDrawCount() int32 {
	if x != nil {
		return x.HistoryDrawCount
	}
	return 0
}

func (x *DrawOnlyEquip_DrawData) GetResId() int32 {
	if x != nil {
		return x.ResId
	}
	return 0
}

var File_common1_proto protoreflect.FileDescriptor

var file_common1_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x23,
	0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a,
	0x0e, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64,
	0x22, 0x80, 0x06, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x42, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x08, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x42, 0x61, 0x63,
	0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x54, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x54, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x54, 0x65,
	0x6e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x42, 0x2e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x66, 0x0a, 0x19, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x52, 0x03, 0x61, 0x63, 0x74, 0x22, 0x7a, 0x0a, 0x14, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x46, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x22,
	0x42, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x3f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x75,
	0x72, 0x22, 0x38, 0x0a, 0x08, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x43,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x61, 0x6b,
	0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x39, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73,
	0x61, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x0e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x73,
	0x22, 0xf3, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e,
	0x52, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0a, 0x67, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x0a, 0x67, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x52, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x52, 0x07, 0x72, 0x65, 0x64, 0x52,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x05, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x75,
	0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4c, 0x75, 0x63, 0x6b, 0x44,
	0x72, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x68,
	0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x61, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x52, 0x06, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x22,
	0x40, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xd0, 0x04,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c,
	0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x32, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xae,
	0x02, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x3e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4d, 0x0a, 0x07, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x22, 0xd0,
	0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x57, 0x75, 0x48,
	0x75, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77,
	0x57, 0x75, 0x48, 0x75, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xed, 0x02, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x32, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x76, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6b, 0x65, 0x65,
	0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x22, 0x8f,
	0x03, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0x56,
	0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5e, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67,
	0x53, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x57,
	0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x4c,
	0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x08,
	0x4d, 0x73, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x0c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x06,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x0a, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x7a, 0x69, 0x7a, 0x68, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x7a, 0x69,
	0x7a, 0x68, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e,
	0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x7a, 0x69, 0x7a, 0x68,
	0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x7a, 0x69, 0x7a, 0x68, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x51,
	0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0f, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce,
	0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68,
	0x61, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x69, 0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x46, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9d, 0x12, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x61, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x72, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x50, 0x75, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x75, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x4d, 0x61, 0x69, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x4d, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x63, 0x0a, 0x15, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x47, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x41, 0x0a, 0x0f,
	0x64, 0x61, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x76, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f,
	0x64, 0x61, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x47, 0x76,
	0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x47, 0x76, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x44, 0x69, 0x64, 0x48, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x44, 0x69, 0x64, 0x48, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x67, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76,
	0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x58, 0x0a, 0x1d, 0x73, 0x61, 0x6d, 0x65, 0x47, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x78, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x1d, 0x73, 0x61, 0x6d,
	0x65, 0x47, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6f, 0x78, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x67, 0x76,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x47, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x67, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67,
	0x12, 0x5a, 0x0a, 0x12, 0x67, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x2e, 0x47, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x67, 0x76, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x57, 0x65, 0x65, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65, 0x67, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65,
	0x67, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65, 0x67, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x47, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x47, 0x76, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd4, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a,
	0x13, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a,
	0x18, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x12, 0x4c, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x65, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x42, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x42, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x27, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x42, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x0d, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x68, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x68, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x42, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x42, 0x2e, 0x50,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x6f, 0x70, 0x38, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x38, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65,
	0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x76,
	0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x76,
	0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x42,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3d,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x42, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x6f, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x42, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x42,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x1a, 0x5c, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb4, 0x24, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x42, 0x12, 0x1e, 0x0a, 0x03, 0x62, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x03, 0x62, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x03, 0x76, 0x69,
	0x70, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x61, 0x69,
	0x6c, 0x44, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x6d, 0x61,
	0x69, 0x6c, 0x44, 0x42, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x43, 0x61, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x53,
	0x68, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x51,
	0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x7a, 0x61,
	0x61, 0x72, 0x52, 0x06, 0x62, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x43, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x43,
	0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x42, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x42, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x44, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x44, 0x42, 0x12, 0x46, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x42, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x42,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x12, 0x2a,
	0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f,
	0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x77, 0x75,
	0x48, 0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12,
	0x36, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x3f,
	0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x07, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x07, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a,
	0x04, 0x73, 0x6c, 0x61, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x79, 0x52, 0x04, 0x73, 0x6c, 0x61, 0x79,
	0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x4d, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73,
	0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x65, 0x61, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x04,
	0x70, 0x65, 0x61, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x05, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x42, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x5b,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x42, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x64,
	0x79, 0x50, 0x65, 0x61, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x50, 0x65,
	0x61, 0x6b, 0x52, 0x06, 0x64, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x71, 0x69,
	0x65, 0x63, 0x75, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x69, 0x65, 0x43, 0x75,
	0x6f, 0x52, 0x06, 0x71, 0x69, 0x65, 0x63, 0x75, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x6d,
	0x50, 0x65, 0x61, 0x6b, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6d, 0x50, 0x65, 0x61,
	0x6b, 0x52, 0x06, 0x6c, 0x6d, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x46, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x42, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x77,
	0x65, 0x62, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65, 0x62, 0x12,
	0x3c, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0d,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2d, 0x0a,
	0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45,
	0x78, 0x70, 0x52, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x12, 0x30, 0x0a, 0x09,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x24,
	0x0a, 0x05, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x52, 0x05, 0x64,
	0x72, 0x61, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x62, 0x69, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x62, 0x69, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x04,
	0x67, 0x69, 0x66, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x43, 0x0a, 0x0a,
	0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x42, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0e, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x06, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x79, 0x6f, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x52, 0x0c, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x61,
	0x72, 0x53, 0x6f, 0x75, 0x6c, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x52, 0x07, 0x77,
	0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x0b, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x67, 0x75, 0x69, 0x64, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0xfc,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x69, 0x64, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0xfd,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0xff,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x73,
	0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x67, 0x76, 0x67, 0x18,
	0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x76, 0x67, 0x52, 0x03, 0x67, 0x76, 0x67, 0x12,
	0x25, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x6f,
	0x6e, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x75, 0x63, 0x18, 0x83, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x63, 0x52, 0x03, 0x61, 0x75, 0x63, 0x1a, 0x52, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x42, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x51, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x47, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61,
	0x69, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x55,
	0x0a, 0x0e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x47,
	0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x5b, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x11,
	0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x71, 0x0a, 0x21, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x77,
	0x61, 0x6b, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x21, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x24,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6c, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x3b, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd3, 0x10, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x47, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x47, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x75, 0x79, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x57,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x72, 0x65, 0x6e, 0x61, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6c,
	0x69, 0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x45,
	0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6f, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x4b,
	0x69, 0x6c, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x70, 0x4b, 0x69,
	0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x30, 0x39, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x30, 0x39,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x30, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x30, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x31, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x35, 0x30, 0x30, 0x31, 0x32, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f,
	0x69, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6f,
	0x73, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x76, 0x61,
	0x6c, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x76, 0x61, 0x6c,
	0x72, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x48, 0x65, 0x61, 0x76, 0x79, 0x43, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x48, 0x65, 0x61, 0x76, 0x79, 0x43, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69,
	0x61, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x72, 0x61, 0x6d,
	0x61, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72,
	0x61, 0x6d, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x72, 0x61, 0x6d, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x65,
	0x61, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x44, 0x72, 0x61, 0x6d, 0x61, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x72, 0x61, 0x6d, 0x61,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4d,
	0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x75, 0x74, 0x4f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x69, 0x76, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x76, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x76, 0x65, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x61,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x48, 0x61, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x32, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x32, 0x12, 0x2e,
	0x0a, 0x12, 0x67, 0x76, 0x67, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x76, 0x67, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6e, 0x61, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x38,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x57, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78,
	0x57, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61,
	0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xf8, 0x0b, 0x0a,
	0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6c, 0x69,
	0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6f, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x6f, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x75, 0x79, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x70, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x70, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x62, 0x69, 0x57, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x62, 0x69, 0x57, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6c, 0x69,
	0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x67, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x76, 0x67, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x4d, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x67, 0x76, 0x67, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x69, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x65,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x22, 0xfd, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x61, 0x63, 0x74, 0x22, 0x29, 0x0a, 0x03,
	0x42, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x4f,
	0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x34, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x6c, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x35, 0x22, 0x71, 0x0a,
	0x07, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x52, 0x08, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65,
	0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x65, 0x63, 0x68, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x40, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x75, 0x48,
	0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x77, 0x6e, 0x57, 0x75, 0x48, 0x75, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x57, 0x75, 0x48, 0x75, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x75, 0x75, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x0e, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x1a, 0x4b, 0x0a, 0x0e,
	0x4f, 0x77, 0x6e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x0e, 0x4f, 0x6e,
	0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x0d,
	0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4f, 0x6e,
	0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x77, 0x6e,
	0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x75,
	0x49, 0x64, 0x1a, 0x53, 0x0a, 0x12, 0x4f, 0x77, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x65, 0x63, 0x68, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x54, 0x65, 0x63, 0x68, 0x52, 0x05, 0x74, 0x65, 0x63, 0x68,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0xd5, 0x05, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42,
	0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61,
	0x70, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a,
	0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01,
	0x0a, 0x10, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x07, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x6c,
	0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0xfa, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x54, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xba, 0x02, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xcf, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x57, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01,
	0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x70,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x70,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x69,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x22, 0x8f, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x61,
	0x72, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x1a, 0x50, 0x0a, 0x0c, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd2, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x57, 0x65, 0x65, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x94,
	0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x27,
	0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x67, 0x72, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x67, 0x72, 0x6f, 0x77, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x65, 0x52, 0x05, 0x66, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x22, 0x23,
	0x0a, 0x09, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x55, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x65, 0x61,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x7a, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x0c, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x79, 0x73, 0x22, 0x35,
	0x0a, 0x0d, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x44, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41,
	0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x84, 0x03, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x54, 0x0a, 0x0e, 0x4c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x4c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x0a, 0x44, 0x72, 0x61, 0x77,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa7,
	0x02, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x77, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6c, 0x66,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x68, 0x61, 0x6c, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x0a, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x36, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x36, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x35, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x35, 0x22, 0xb2, 0x04, 0x0a,
	0x0c, 0x44, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x6c, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x61, 0x6c, 0x66,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x77,
	0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61,
	0x77, 0x47, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x68, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x69, 0x74, 0x4f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x69, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x48, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x69, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x48, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xad, 0x03, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x57, 0x75, 0x48,
	0x75, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42,
	0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xda, 0x05, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa8, 0x04, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x61, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4f,
	0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5c, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1,
	0x03, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x52, 0x07, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x57, 0x75,
	0x48, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x52, 0x0b, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x57,
	0x75, 0x48, 0x75, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x57, 0x75, 0x48,
	0x75, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x22, 0x52, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x50, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x44, 0x61, 0x79, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x44, 0x61, 0x79, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xff,
	0x0e, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x47,
	0x69, 0x66, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x76, 0x69, 0x70, 0x43, 0x61, 0x73,
	0x68, 0x47, 0x69, 0x66, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66,
	0x74, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x67, 0x6f, 0x6c,
	0x64, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e,
	0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x6c, 0x42, 0x6f, 0x78, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x52, 0x07, 0x73, 0x6f,
	0x75, 0x6c, 0x42, 0x6f, 0x78, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75,
	0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x09, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x69, 0x61, 0x6e, 0x47,
	0x6f, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x69, 0x61, 0x6e, 0x47, 0x6f, 0x6e, 0x67,
	0x46, 0x75, 0x6e, 0x64, 0x52, 0x0c, 0x74, 0x69, 0x61, 0x6e, 0x47, 0x6f, 0x6e, 0x67, 0x46, 0x75,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x57, 0x65, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x57, 0x65, 0x6c,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x41, 0x63, 0x74, 0x52, 0x09, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x64, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61,
	0x77, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x52, 0x08, 0x6c,
	0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x61, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x52, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x52,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x52, 0x0d, 0x73, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12,
	0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x53, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x52, 0x0d,
	0x73, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x12, 0x3f, 0x0a,
	0x0e, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x57, 0x75, 0x48, 0x75, 0x6e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x52, 0x0e,
	0x77, 0x75, 0x48, 0x75, 0x6e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x61, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x04, 0x61, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x77, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x52, 0x09,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x61, 0x74, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x22, 0x41, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x22, 0x87, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x67, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0xde, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11,
	0x68, 0x61, 0x76, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x61, 0x6e, 0x47,
	0x6f, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x74, 0x50, 0x61,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6f,
	0x74, 0x50, 0x61, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x09, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x0d, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x79, 0x47, 0x69,
	0x66, 0x74, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x47, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x67, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x6f, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x3b,
	0x0a, 0x0d, 0x47, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x75, 0x72, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0xa2, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x67, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x5a,
	0x6d, 0x73, 0x6e, 0x22, 0xa7, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x7a, 0x6d,
	0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x5a, 0x6d, 0x73, 0x6e, 0x52, 0x04, 0x7a, 0x6d, 0x73, 0x6e,
	0x12, 0x30, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x5a, 0x6d, 0x53,
	0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x07,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x73, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x73, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x73, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x63,
	0x61, 0x6b, 0x65, 0x46, 0x65, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x61, 0x73,
	0x74, 0x52, 0x09, 0x63, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x61, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x68, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c,
	0x6f, 0x70, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x46, 0x6c, 0x6f, 0x70, 0x22, 0x2e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xef, 0x04,
	0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x54, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x6c,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x15, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x33, 0x0a, 0x17, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x0e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xd7, 0x01,
	0x0a, 0x08, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69,
	0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x0c, 0x43, 0x61, 0x73, 0x68, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x8a, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x43, 0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43,
	0x61, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x56, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a,
	0x0c, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x07, 0x53, 0x6f, 0x75, 0x6c, 0x42,
	0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x67, 0x69, 0x66, 0x74, 0x34, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x34, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x31, 0x36, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x31, 0x36, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x48, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x34, 0x43, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x67, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x1a, 0x5b, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x47, 0x69,
	0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x47, 0x69,
	0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x34,
	0x43, 0x72, 0x69, 0x74, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x67, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x48, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72,
	0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x67, 0x69, 0x66, 0x74, 0x34, 0x43, 0x72, 0x69, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x43, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x43, 0x66, 0x22, 0x82, 0x03, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f,
	0x78, 0x4c, 0x6f, 0x67, 0x4d, 0x67, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78,
	0x4c, 0x6f, 0x67, 0x4d, 0x67, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x4d, 0x67, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x57,
	0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x73, 0x6f, 0x75, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6f, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6f, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x42,
	0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x42, 0x6f, 0x78, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x3e, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x52, 0x04, 0x61, 0x63, 0x74, 0x73,
	0x22, 0x72, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x52, 0x03, 0x61,
	0x63, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x22, 0x73, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x70, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x70, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xaf, 0x02, 0x0a, 0x08, 0x53, 0x6c, 0x61, 0x79, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0e, 0x73, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x73,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x47, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x47, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x72, 0x6d, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x6d, 0x79, 0x22, 0x72, 0x0a, 0x0a, 0x53, 0x6c, 0x61, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe1, 0x06, 0x0a, 0x04,
	0x53, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x53, 0x6c, 0x61, 0x79, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x79, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x44, 0x6f, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x6c,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x42, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6c, 0x6b, 0x42, 0x75, 0x79,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x73, 0x69, 0x6c, 0x6b, 0x42, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6c, 0x6b, 0x42, 0x61, 0x67, 0x52, 0x07,
	0x73, 0x69, 0x6c, 0x6b, 0x42, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x61, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x61, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x69, 0x6c, 0x6b, 0x42, 0x61, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x69,
	0x6c, 0x6b, 0x42, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x97, 0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x16, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x18, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x73, 0x6b, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x51, 0x69, 0x65, 0x43, 0x75, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0xb9, 0x05, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x61, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x1e, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x65, 0x61, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x65, 0x61, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x57, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x58, 0x0a,
	0x0e, 0x50, 0x75, 0x72, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x48, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x04, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x55,
	0x49, 0x44, 0x22, 0x72, 0x0a, 0x0c, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d,
	0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6d,
	0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x22, 0xec,
	0x01, 0x0a, 0x0c, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e,
	0x63, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x12, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x22, 0x4a, 0x0a, 0x11, 0x44, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x07,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x31, 0x45, 0x76, 0x65, 0x72, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x61, 0x73,
	0x6b, 0x31, 0x45, 0x76, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xac, 0x12, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65,
	0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x03, 0x62, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x03, 0x62, 0x61, 0x67, 0x12,
	0x45, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x15, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x67, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x67, 0x76,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x47,
	0x65, 0x74, 0x47, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x47, 0x65, 0x74, 0x47, 0x76,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a,
	0x18, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x79,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76, 0x65, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x64, 0x61, 0x79,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x47, 0x76, 0x65, 0x49, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x47, 0x76, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x44, 0x69, 0x64, 0x48, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x44, 0x69, 0x64, 0x48, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x1d, 0x73, 0x61, 0x6d, 0x65, 0x47, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x78, 0x41,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x1d, 0x73, 0x61, 0x6d, 0x65, 0x47, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x78, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x47, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x47, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x44, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x44, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x44, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x76, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x61, 0x78, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x61, 0x78,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x65, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x65, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x65, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x56, 0x0a, 0x10, 0x67, 0x76,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67, 0x18, 0x2e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x76, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x67, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44,
	0x6d, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x46, 0x0a, 0x18, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15,
	0x47, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x6d, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x47, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x6c, 0x44, 0x6d, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x22, 0x31, 0x0a, 0x0d, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0xb9,
	0x05, 0x0a, 0x07, 0x47, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x61,
	0x70, 0x47, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x47, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x68, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x69, 0x64, 0x48, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x47, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x2e, 0x44, 0x69, 0x64, 0x48, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x64, 0x69, 0x64, 0x48, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64,
	0x2e, 0x52, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x72, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x74, 0x61, 0x78, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65,
	0x47, 0x72, 0x69, 0x64, 0x2e, 0x54, 0x61, 0x78, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x46, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0a, 0x44, 0x69, 0x64, 0x48,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x76, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x52,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54,
	0x61, 0x78, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x47,
	0x76, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x07, 0x47,
	0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8,
	0x01, 0x0a, 0x03, 0x47, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x67, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76,
	0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x52, 0x0b, 0x67, 0x76, 0x65, 0x4d, 0x61, 0x70,
	0x47, 0x72, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x69, 0x65, 0x67, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73,
	0x69, 0x65, 0x67, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x22, 0xca, 0x05, 0x0a, 0x08, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x65,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x76,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x76, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x69, 0x65, 0x67, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x73, 0x69, 0x65, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x64, 0x69, 0x74,
	0x47, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x64, 0x69, 0x74, 0x47, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x64,
	0x69, 0x74, 0x47, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x64, 0x69, 0x74, 0x47, 0x76, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x15,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x2e, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69,
	0x65, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x69, 0x65, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x4a, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x47, 0x72, 0x69,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x12, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x53, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f,
	0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x71, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67,
	0x52, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x56, 0x0a, 0x19, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x19, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x47, 0x76, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x47, 0x76, 0x65, 0x52, 0x03, 0x47, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x76, 0x65, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x73, 0x73, 0x47, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x73, 0x73, 0x47, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x67, 0x76, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x47, 0x76,
	0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x67, 0x76, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x76, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x67, 0x76, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x67, 0x76, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x47, 0x76, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x48,
	0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f,
	0x73, 0x73, 0x48, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73,
	0x73, 0x44, 0x6d, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x41, 0x6e, 0x79, 0x4d, 0x65, 0x6d,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x76, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x41, 0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x47, 0x76, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x50, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x47, 0x76, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a,
	0x0d, 0x47, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a,
	0x18, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xf7, 0x01,
	0x0a, 0x09, 0x47, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x75, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x72, 0x69,
	0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0a, 0x47,
	0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x06, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x4d, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x57, 0x61, 0x67, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x57, 0x61, 0x67, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b,
	0x0a, 0x03, 0x56, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x69,
	0x66, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x57, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x1a, 0x4c, 0x0a, 0x0a, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x22, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x42, 0x6f, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x42, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0d,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x42, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x47, 0x69, 0x66, 0x74, 0x42, 0x61,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x08,
	0x43, 0x61, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x2e,
	0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x62, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x48,
	0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x50, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x0f, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xdc, 0x03, 0x0a, 0x08,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x79, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x30, 0x0a, 0x10, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x9d, 0x04, 0x0a,
	0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14,
	0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c,
	0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61,
	0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x62, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xef, 0x0a, 0x0a,
	0x05, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x72, 0x61, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x6d,
	0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x65, 0x65,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x78, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x69, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x6f, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x48, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x61, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x2e, 0x47,
	0x61, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x67, 0x61, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x65, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x65, 0x42, 0x65,
	0x61, 0x73, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x48, 0x70, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x72, 0x61, 0x6d, 0x61, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x48, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x62, 0x65, 0x61, 0x73, 0x74, 0x48, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x77, 0x65, 0x65, 0x70, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x53, 0x77, 0x65, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x47, 0x61, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x46, 0x6c, 0x61,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x65, 0x61, 0x73, 0x74, 0x48, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xab, 0x02, 0x0a,
	0x0b, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d,
	0x64, 0x69, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x69,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x65, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x65, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x69, 0x65, 0x42, 0x65,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52,
	0x09, 0x64, 0x69, 0x65, 0x42, 0x65, 0x61, 0x73, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x44, 0x72,
	0x61, 0x6d, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3f, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x6d, 0x61,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x22, 0x70, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x69,
	0x62, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x22,
	0xe2, 0x04, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x62, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43,
	0x68, 0x69, 0x62, 0x69, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x1a, 0x5e, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x69, 0x62, 0x69, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x62, 0x69, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x12, 0x43, 0x68, 0x69, 0x62, 0x69, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x0b, 0x43,
	0x68, 0x69, 0x62, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0f, 0x43, 0x68,
	0x69, 0x62, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x22, 0x7d, 0x0a,
	0x09, 0x43, 0x68, 0x69, 0x62, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x43, 0x68, 0x69, 0x62, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xb2, 0x01, 0x0a,
	0x0e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x1a, 0x4c, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69,
	0x62, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x62, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x10, 0x43, 0x68, 0x69, 0x62, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62,
	0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x69, 0x62, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x43, 0x68, 0x69, 0x62, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x62, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x05, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6c,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2f, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x51, 0x75, 0x61, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x73,
	0x22, 0x31, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x08, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x4c, 0x6f,
	0x67, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4c, 0x6f, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x22, 0xe3, 0x03, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x75, 0x48, 0x75, 0x6e,
	0x52, 0x05, 0x77, 0x75, 0x48, 0x75, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x22, 0x9a, 0x01, 0x0a,
	0x0a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a,
	0x51, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x67, 0x69, 0x66,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x69, 0x66, 0x74, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x64, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x69, 0x66, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x7f, 0x0a, 0x06, 0x44,
	0x79, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x9a, 0x01, 0x0a,
	0x0c, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x44, 0x79,
	0x50, 0x65, 0x61, 0x6b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7f, 0x0a, 0x08, 0x50, 0x6b, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x49, 0x64, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x32, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x65,
	0x73, 0x73, 0x4d, 0x75, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67,
	0x75, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x0e, 0x50, 0x6b, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x64, 0x31, 0x48, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x64, 0x31, 0x48, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x32, 0x48, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x64, 0x32, 0x48, 0x70, 0x22, 0x3f, 0x0a, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2b, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x07,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x50, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x6b, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x22, 0x63, 0x0a, 0x0d, 0x50, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x44, 0x79, 0x50, 0x65,
	0x61, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x50, 0x4b, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x50, 0x4b, 0x12,
	0x29, 0x0a, 0x06, 0x53, 0x65, 0x6d, 0x69, 0x50, 0x4b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x06, 0x53, 0x65, 0x6d, 0x69, 0x50, 0x4b, 0x12, 0x27, 0x0a, 0x05, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x07,
	0x54, 0x6f, 0x70, 0x31, 0x36, 0x50, 0x4b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x07, 0x54, 0x6f, 0x70, 0x31, 0x36, 0x50, 0x4b, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x44, 0x79,
	0x50, 0x65, 0x61, 0x6b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x11, 0x44,
	0x79, 0x50, 0x65, 0x61, 0x6b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x09, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x72, 0x65, 0x64, 0x1a, 0x4e, 0x0a,
	0x08, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01,
	0x0a, 0x0d, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x1a, 0x3c, 0x0a, 0x0e, 0x47, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x70, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x53, 0x65, 0x61, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x22, 0x4e,
	0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x3b,
	0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x45, 0x0a, 0x09, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0e, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e,
	0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x66, 0x72, 0x65, 0x65, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61,
	0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x62, 0x75, 0x79, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x65,
	0x70, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x48,
	0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x61, 0x6e,
	0x67, 0x55, 0x70, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x72,
	0x65, 0x65, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62,
	0x75, 0x79, 0x46, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22,
	0xca, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x6e, 0x67,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x61, 0x6e,
	0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0b,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0c,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x0b, 0x52,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x22, 0xb6, 0x06, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x76, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x76, 0x67, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x6f, 0x6c, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x76, 0x67, 0x2e, 0x48, 0x6f, 0x6c, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x68, 0x6f, 0x6c, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x4c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x76, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x76, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x47,
	0x76, 0x67, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x47, 0x76, 0x67, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65,
	0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x65, 0x65, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x6f, 0x76, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x47, 0x76, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x76, 0x67, 0x12, 0x45,
	0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x47, 0x76, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x47, 0x76, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x47, 0x76, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x38, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfd, 0x02, 0x0a, 0x09, 0x47, 0x76, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x05, 0x68, 0x6f, 0x6c, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x48, 0x6f, 0x6c, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x68, 0x6f,
	0x6c, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x44, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbd, 0x01, 0x0a, 0x09, 0x47, 0x76, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x73, 0x0a, 0x07, 0x47, 0x76, 0x67, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x47, 0x76, 0x67, 0x4d, 0x69, 0x6e, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47,
	0x76, 0x67, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x47, 0x76, 0x67,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x64, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x22, 0xc2, 0x01, 0x0a, 0x15, 0x47, 0x76, 0x67, 0x53, 0x61, 0x66, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x53, 0x61, 0x66,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x56, 0x0a,
	0x10, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x11, 0x47, 0x76, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x47, 0x76, 0x67,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x4d, 0x0a, 0x09, 0x47, 0x76, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x12, 0x47, 0x76, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xf6, 0x01,
	0x0a, 0x0c, 0x47, 0x76, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x08, 0x67, 0x76, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x76, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x76, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x64, 0x69, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x4c,
	0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x4d, 0x0a, 0x0d, 0x47, 0x76, 0x67, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x76, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x07, 0x47, 0x76, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd8, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x48, 0x61, 0x73, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x48, 0x61, 0x73, 0x47,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x61,
	0x73, 0x47, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x48, 0x61, 0x73, 0x47,
	0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f,
	0x73, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42,
	0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x08, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x67, 0x48, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x67, 0x48, 0x70, 0x22, 0xab, 0x04, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x48, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x48, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x6d, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x6f, 0x73,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x65, 0x61, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x65, 0x61, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x77, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x77, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x73, 0x77, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x57, 0x0a, 0x0e, 0x53, 0x77,
	0x65, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73,
	0x73, 0x48, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x84, 0x03, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73,
	0x73, 0x48, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x48, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x43, 0x61, 0x75, 0x73, 0x65, 0x64, 0x48, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75,
	0x72, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x55,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x65, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x55, 0x73, 0x65, 0x64, 0x42, 0x65, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x48, 0x70, 0x43, 0x75, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x43, 0x75, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x48, 0x70, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x48, 0x70, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x65, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x48,
	0x70, 0x55, 0x73, 0x65, 0x64, 0x42, 0x65, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x48, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x48, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x43,
	0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x41, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x41,
	0x63, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x47, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4e,
	0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88,
	0x01, 0x0a, 0x0c, 0x43, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x09, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x50, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x74, 0x50, 0x61,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6f,
	0x74, 0x50, 0x61, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xf1, 0x03, 0x0a, 0x0b, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x41, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x6f, 0x74, 0x47, 0x69, 0x66, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x67, 0x6f, 0x74, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x75, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x44,
	0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0c, 0x4c, 0x75, 0x63, 0x6b, 0x44, 0x72, 0x61,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x39, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x44, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x0b, 0x47, 0x69, 0x66, 0x74, 0x52, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x68, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x0a, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x42, 0x65,
	0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e,
	0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x57, 0x0a, 0x11,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x65, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x68, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x53, 0x68, 0x69,
	0x4c, 0x65, 0x6e, 0x67, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73,
	0x54, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x9f, 0x01,
	0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4f,
	0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8e, 0x02, 0x0a, 0x0e, 0x57, 0x75, 0x48, 0x75, 0x6e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61,
	0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0d, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x4e, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xdf, 0x01, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x75, 0x63, 0x6b,
	0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe7, 0x03, 0x0a, 0x0d, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x16, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42,
	0x75, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x40, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0xc2, 0x07, 0x0a, 0x06, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x49, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x68, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x69,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x57, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdd, 0x01,
	0x0a, 0x0b, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x0d, 0x67, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x2e, 0x47, 0x6f, 0x64,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x67, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x5d,
	0x0a, 0x12, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x61, 0x6e, 0x6b, 0x4b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61,
	0x79, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x77, 0x65, 0x65, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf0, 0x06, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x69, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64,
	0x73, 0x12, 0x53, 0x0a, 0x0d, 0x6d, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x53, 0x68, 0x6f,
	0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x67, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6f, 0x74, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x6f, 0x74,
	0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x72, 0x1a, 0x51, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x12, 0x4d, 0x79, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x53,
	0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22,
	0xab, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x59,
	0x0a, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x69,
	0x64, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x79, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0x62, 0x0a, 0x15, 0x45, 0x6d, 0x65,
	0x72, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a,
	0x14, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x68, 0x70, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x1a, 0x5a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x42, 0x69, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x41, 0x72, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x6d, 0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x41, 0x72, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x41, 0x72, 0x6d, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x42,
	0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x41, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x41, 0x72, 0x6d, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x12, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x5a, 0x6d, 0x53, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x5a, 0x6d, 0x53, 0x6e, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x51, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x5a,
	0x6d, 0x53, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x0f, 0x5a, 0x6d, 0x53,
	0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6b, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0c, 0x59, 0x6f, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x0b, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22,
	0xb2, 0x02, 0x0a, 0x0b, 0x59, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x02, 0x4c, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x4c, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x7a, 0x0a, 0x08, 0x4c, 0x6d, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x6d, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x6d, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x39, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x0e,
	0x4c, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6d, 0x50, 0x65, 0x61,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x4c, 0x6d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x3c, 0x0a, 0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x50, 0x0a,
	0x0a, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa0, 0x01, 0x0a, 0x0d, 0x4c, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x56, 0x0a, 0x0a, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x4c, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5c, 0x0a, 0x13, 0x4c, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x4c, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x12, 0x4c, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c,
	0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x06, 0x62, 0x65, 0x61, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x73, 0x74, 0x52, 0x06, 0x62,
	0x65, 0x61, 0x73, 0x74, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x57, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x57, 0x65,
	0x65, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xda, 0x01, 0x0a, 0x08, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x6e, 0x12,
	0x62, 0x0a, 0x15, 0x64, 0x6f, 0x46, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x6f,
	0x6e, 0x2e, 0x44, 0x6f, 0x46, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x6f,
	0x46, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x44, 0x6f, 0x46, 0x74, 0x49, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x04,
	0x0a, 0x09, 0x57, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x46, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x66,
	0x74, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4c, 0x0a, 0x08, 0x46, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4,
	0x04, 0x0a, 0x0b, 0x57, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x4d, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x64, 0x4d, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x65, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x73, 0x50, 0x76, 0x45, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x73, 0x50, 0x76, 0x45, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x6f, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x09, 0x57, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51,
	0x0a, 0x09, 0x57, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x45, 0x6e,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x06, 0x57, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x57, 0x6f, 0x6e,
	0x47, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x72, 0x69, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x0d, 0x57, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x48, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x48, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x61, 0x75, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x46, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x06,
	0x0a, 0x08, 0x57, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x53, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x53, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x2e, 0x57, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x57, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x57, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x53, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x57, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x14, 0x53, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x6e,
	0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0a, 0x57, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x68, 0x0a, 0x06, 0x41, 0x75, 0x63, 0x42, 0x6f, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x41, 0x75,
	0x63, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x42, 0x6f,
	0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x73, 0x2e, 0x41, 0x75, 0x78,
	0x42, 0x6f, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x75, 0x78, 0x42, 0x6f,
	0x78, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x75, 0x78, 0x42, 0x6f, 0x78, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x01, 0x0a, 0x07, 0x41, 0x75, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f,
	0x6f, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x53, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x61,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x09, 0x41, 0x75, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x63,
	0x12, 0x2f, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x63,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x3b, 0x0a, 0x08, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x75, 0x63, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x75, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x7a,
	0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x09, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc2, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x09,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x79, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x4f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x34, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x12, 0x27, 0x0a, 0x06,
	0x75, 0x72, 0x44, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x72, 0x44, 0x72, 0x61, 0x77, 0x52, 0x06, 0x75,
	0x72, 0x44, 0x72, 0x61, 0x77, 0x22, 0xcc, 0x04, 0x0a, 0x06, 0x55, 0x72, 0x44, 0x72, 0x61, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x48, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x55, 0x72, 0x44, 0x72, 0x61, 0x77, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x55, 0x72, 0x44, 0x72, 0x61, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74,
	0x65, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x08, 0x64, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x55, 0x72, 0x44, 0x72, 0x61, 0x77,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x64, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x42, 0x75,
	0x79, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68,
	0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x65, 0x61, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68,
	0x65, 0x61, 0x74, 0x42, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61,
	0x6b, 0x65, 0x43, 0x68, 0x65, 0x61, 0x74, 0x42, 0x6f, 0x78, 0x22, 0xb5, 0x01, 0x0a, 0x07, 0x57,
	0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x75, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x6f, 0x75,
	0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x1b, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x70, 0x0a, 0x1a, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x30, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x73, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x06, 0x42, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x42, 0x61, 0x7a,
	0x61, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x7a, 0x61, 0x61, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x7a,
	0x61, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4f,
	0x0a, 0x0f, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22,
	0xc5, 0x10, 0x0a, 0x0b, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x68,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x48,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x68, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x66,
	0x66, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x75, 0x66, 0x66, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e,
	0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x42,
	0x75, 0x66, 0x66, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x08, 0x6e, 0x70, 0x63, 0x42, 0x75,
	0x66, 0x66, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x73, 0x12, 0x26, 0x0a,
	0x02, 0x61, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x49, 0x52, 0x02, 0x61, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a,
	0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x74, 0x73, 0x1a,
	0x4d, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x08, 0x48, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x54, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x46, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0xa8, 0x03, 0x0a, 0x10, 0x4e, 0x61, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0d,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x44, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x56, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x31, 0x2e, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x76, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x09, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x4e, 0x61, 0x76,
	0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x41, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0d, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x41, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x14, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x4e, 0x61, 0x76, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x0a, 0x48, 0x35, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x44, 0x72, 0x61, 0x6d, 0x61,
	0x12, 0x2c, 0x0a, 0x11, 0x67, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x69, 0x70, 0x4c, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x69, 0x70, 0x4c, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x2a, 0x32, 0x0a, 0x0f, 0x47, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0a, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x2a, 0x63, 0x0a, 0x0b, 0x44, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x6f, 0x70, 0x31, 0x36, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6d, 0x69, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x6e, 0x64, 0x10, 0x06, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x75, 0x75, 0x7a, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x2f, 0x70, 0x62, 0x74,
	0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common1_proto_rawDescOnce sync.Once
	file_common1_proto_rawDescData = file_common1_proto_rawDesc
)

func file_common1_proto_rawDescGZIP() []byte {
	file_common1_proto_rawDescOnce.Do(func() {
		file_common1_proto_rawDescData = protoimpl.X.CompressGZIP(file_common1_proto_rawDescData)
	})
	return file_common1_proto_rawDescData
}

var file_common1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_common1_proto_msgTypes = make([]protoimpl.MessageInfo, 538)
var file_common1_proto_goTypes = []interface{}{
	(GveBattleStatus)(0),                // 0: common1.GveBattleStatus
	(GiftStatus)(0),                     // 1: common1.GiftStatus
	(DyPeakStage)(0),                    // 2: common1.DyPeakStage
	(NavalBattle_State)(0),              // 3: common1.NavalBattle.State
	(*Uint32Wrapper)(nil),               // 4: common1.Uint32Wrapper
	(*StringArray)(nil),                 // 5: common1.StringArray
	(*Uint64Array)(nil),                 // 6: common1.Uint64Array
	(*ZonePartition)(nil),               // 7: common1.ZonePartition
	(*ServerMail)(nil),                  // 8: common1.ServerMail
	(*ServerDB)(nil),                    // 9: common1.ServerDB
	(*FirstReachLevelLimit)(nil),        // 10: common1.FirstReachLevelLimit
	(*GameDailyDiscount)(nil),           // 11: common1.GameDailyDiscount
	(*GameDailyDiscountAct)(nil),        // 12: common1.GameDailyDiscountAct
	(*GameStarAct)(nil),                 // 13: common1.GameStarAct
	(*StarRewardPlayer)(nil),            // 14: common1.StarRewardPlayer
	(*GameStarActDaily)(nil),            // 15: common1.GameStarActDaily
	(*Section)(nil),                     // 16: common1.Section
	(*FakeCode)(nil),                    // 17: common1.FakeCode
	(*CodeData)(nil),                    // 18: common1.CodeData
	(*GameDailyDiscountItem)(nil),       // 19: common1.GameDailyDiscountItem
	(*UserStatistics)(nil),              // 20: common1.UserStatistics
	(*Announce)(nil),                    // 21: common1.Announce
	(*AnnounceMessages)(nil),            // 22: common1.AnnounceMessages
	(*ServerActivity)(nil),              // 23: common1.ServerActivity
	(*GameLuckDraw)(nil),                // 24: common1.GameLuckDraw
	(*GameFoundataion)(nil),             // 25: common1.GameFoundataion
	(*GameFoundataionCheat)(nil),        // 26: common1.GameFoundataionCheat
	(*GameActivityOpen)(nil),            // 27: common1.GameActivityOpen
	(*ActivityOpen)(nil),                // 28: common1.ActivityOpen
	(*ServerGolden)(nil),                // 29: common1.ServerGolden
	(*ServerGoldenPrize)(nil),           // 30: common1.ServerGoldenPrize
	(*ServerDrawTreasure)(nil),          // 31: common1.ServerDrawTreasure
	(*DayTime)(nil),                     // 32: common1.DayTime
	(*ServerDrawWuHun)(nil),             // 33: common1.ServerDrawWuHun
	(*DrawMount)(nil),                   // 34: common1.DrawMount
	(*UserRank)(nil),                    // 35: common1.UserRank
	(*RankItemData)(nil),                // 36: common1.RankItemData
	(*RankInfo)(nil),                    // 37: common1.RankInfo
	(*Rank)(nil),                        // 38: common1.Rank
	(*RankSimpleInfo)(nil),              // 39: common1.RankSimpleInfo
	(*RankGuildSimple)(nil),             // 40: common1.RankGuildSimple
	(*RankReward)(nil),                  // 41: common1.RankReward
	(*RankRewardItem)(nil),              // 42: common1.RankRewardItem
	(*RankRewardPlayer)(nil),            // 43: common1.RankRewardPlayer
	(*MsgCache)(nil),                    // 44: common1.MsgCache
	(*Commander)(nil),                   // 45: common1.Commander
	(*UserMail)(nil),                    // 46: common1.UserMail
	(*UserGuild)(nil),                   // 47: common1.UserGuild
	(*UserSetting)(nil),                 // 48: common1.UserSetting
	(*UserAvatarFrameSetting)(nil),      // 49: common1.UserAvatarFrameSetting
	(*UserWeb)(nil),                     // 50: common1.UserWeb
	(*User)(nil),                        // 51: common1.User
	(*UserBaseDB)(nil),                  // 52: common1.UserBaseDB
	(*UserExtraDB)(nil),                 // 53: common1.UserExtraDB
	(*UserGameDB)(nil),                  // 54: common1.UserGameDB
	(*SpecialBuyGiftRecord)(nil),        // 55: common1.SpecialBuyGiftRecord
	(*ItemGift)(nil),                    // 56: common1.ItemGift
	(*ItemGiftScore)(nil),               // 57: common1.ItemGiftScore
	(*ItemGiftScoreItem)(nil),           // 58: common1.ItemGiftScoreItem
	(*CommanderData)(nil),               // 59: common1.CommanderData
	(*CommanderAwakeTaskProgress)(nil),  // 60: common1.CommanderAwakeTaskProgress
	(*UserBattle)(nil),                  // 61: common1.UserBattle
	(*Battle)(nil),                      // 62: common1.Battle
	(*FormationGroup)(nil),              // 63: common1.FormationGroup
	(*StatsData)(nil),                   // 64: common1.StatsData
	(*ActivityData)(nil),                // 65: common1.ActivityData
	(*RechargeStatTotal)(nil),           // 66: common1.RechargeStatTotal
	(*DailyStatsData)(nil),              // 67: common1.DailyStatsData
	(*RechargeStatDaily)(nil),           // 68: common1.RechargeStatDaily
	(*Stats)(nil),                       // 69: common1.Stats
	(*Bag)(nil),                         // 70: common1.Bag
	(*CounsellorGroup)(nil),             // 71: common1.CounsellorGroup
	(*Soldier)(nil),                     // 72: common1.Soldier
	(*WuHunGroup)(nil),                  // 73: common1.WuHunGroup
	(*OnlyEquipGroup)(nil),              // 74: common1.OnlyEquipGroup
	(*SoldierClassTech)(nil),            // 75: common1.SoldierClassTech
	(*Mission)(nil),                     // 76: common1.Mission
	(*MissionTimeLimit)(nil),            // 77: common1.MissionTimeLimit
	(*Dungeon)(nil),                     // 78: common1.Dungeon
	(*Season)(nil),                      // 79: common1.Season
	(*SeasonStoreItem)(nil),             // 80: common1.SeasonStoreItem
	(*PrivateMessage)(nil),              // 81: common1.PrivateMessage
	(*BanChannel)(nil),                  // 82: common1.BanChannel
	(*Chat)(nil),                        // 83: common1.Chat
	(*Checkin)(nil),                     // 84: common1.Checkin
	(*Friends)(nil),                     // 85: common1.Friends
	(*PhysicalPresent)(nil),             // 86: common1.PhysicalPresent
	(*Market)(nil),                      // 87: common1.Market
	(*Train)(nil),                       // 88: common1.Train
	(*TaskUnit)(nil),                    // 89: common1.TaskUnit
	(*TaskWeek)(nil),                    // 90: common1.TaskWeek
	(*Task)(nil),                        // 91: common1.Task
	(*Treasure)(nil),                    // 92: common1.Treasure
	(*RobotUIDs)(nil),                   // 93: common1.RobotUIDs
	(*RobotPeakScore)(nil),              // 94: common1.RobotPeakScore
	(*ImagePeakMatchData)(nil),          // 95: common1.ImagePeakMatchData
	(*ArenaVersion)(nil),                // 96: common1.ArenaVersion
	(*ArenaRankItem)(nil),               // 97: common1.ArenaRankItem
	(*RankList)(nil),                    // 98: common1.RankList
	(*SystemOpenData)(nil),              // 99: common1.SystemOpenData
	(*DrawLowActive)(nil),               // 100: common1.DrawLowActive
	(*DrawScore)(nil),                   // 101: common1.DrawScore
	(*DrawNormal)(nil),                  // 102: common1.DrawNormal
	(*DrawDiamond)(nil),                 // 103: common1.DrawDiamond
	(*DrawChoose)(nil),                  // 104: common1.DrawChoose
	(*DrawTreasure)(nil),                // 105: common1.DrawTreasure
	(*DrawWuHun)(nil),                   // 106: common1.DrawWuHun
	(*DrawOnlyEquip)(nil),               // 107: common1.DrawOnlyEquip
	(*Draw)(nil),                        // 108: common1.Draw
	(*ActivityTask)(nil),                // 109: common1.ActivityTask
	(*ActivityCommon)(nil),              // 110: common1.ActivityCommon
	(*Activity)(nil),                    // 111: common1.Activity
	(*ActivityExtra)(nil),               // 112: common1.ActivityExtra
	(*ActivityExtraItem)(nil),           // 113: common1.ActivityExtraItem
	(*ActivityRechargeGift)(nil),        // 114: common1.ActivityRechargeGift
	(*ActivityRechargeGiftItem)(nil),    // 115: common1.ActivityRechargeGiftItem
	(*ActivityTotalCommander)(nil),      // 116: common1.ActivityTotalCommander
	(*AppComment)(nil),                  // 117: common1.AppComment
	(*SuperWelGift)(nil),                // 118: common1.SuperWelGift
	(*ResourceRecover)(nil),             // 119: common1.ResourceRecover
	(*ResourceCommon)(nil),              // 120: common1.ResourceCommon
	(*TianGongFund)(nil),                // 121: common1.TianGongFund
	(*FundCommon)(nil),                  // 122: common1.FundCommon
	(*TowerFund)(nil),                   // 123: common1.TowerFund
	(*TowerFundData)(nil),               // 124: common1.TowerFundData
	(*CollectWord)(nil),                 // 125: common1.CollectWord
	(*CollectWordPlayer)(nil),           // 126: common1.CollectWordPlayer
	(*CollectWordGift)(nil),             // 127: common1.CollectWordGift
	(*SeasonFund)(nil),                  // 128: common1.SeasonFund
	(*SeasonFundData)(nil),              // 129: common1.SeasonFundData
	(*ActZmsn)(nil),                     // 130: common1.ActZmsn
	(*ActWrapper)(nil),                  // 131: common1.ActWrapper
	(*TotalLogin)(nil),                  // 132: common1.TotalLogin
	(*DailyPhysical)(nil),               // 133: common1.DailyPhysical
	(*PhysicalLuckyGiftRecord)(nil),     // 134: common1.PhysicalLuckyGiftRecord
	(*LevelGift)(nil),                   // 135: common1.LevelGift
	(*Foundation)(nil),                  // 136: common1.Foundation
	(*FoundationItem)(nil),              // 137: common1.FoundationItem
	(*CashGift)(nil),                    // 138: common1.CashGift
	(*CashGiftItem)(nil),                // 139: common1.CashGiftItem
	(*VipCashGift)(nil),                 // 140: common1.VipCashGift
	(*GoldenDragon)(nil),                // 141: common1.GoldenDragon
	(*SoulBox)(nil),                     // 142: common1.SoulBox
	(*SoulBoxGift4Crit)(nil),            // 143: common1.SoulBoxGift4Crit
	(*SoulBoxLogMgr)(nil),               // 144: common1.SoulBoxLogMgr
	(*SoulLogsBoth)(nil),                // 145: common1.soulLogsBoth
	(*SoulServerScore)(nil),             // 146: common1.SoulServerScore
	(*DailyDiscount)(nil),               // 147: common1.DailyDiscount
	(*DailyDiscountAct)(nil),            // 148: common1.DailyDiscountAct
	(*DailyDiscountItem)(nil),           // 149: common1.DailyDiscountItem
	(*StarActivity)(nil),                // 150: common1.StarActivity
	(*DailyRecharge)(nil),               // 151: common1.DailyRecharge
	(*DailyRechargeAct)(nil),            // 152: common1.DailyRechargeAct
	(*DailyRechargeItem)(nil),           // 153: common1.DailyRechargeItem
	(*SlayCommander)(nil),               // 154: common1.SlayCommander
	(*SlayCity)(nil),                    // 155: common1.SlayCity
	(*SlayAction)(nil),                  // 156: common1.SlayAction
	(*Slay)(nil),                        // 157: common1.Slay
	(*PlayerArena)(nil),                 // 158: common1.PlayerArena
	(*PlayerQieCuo)(nil),                // 159: common1.PlayerQieCuo
	(*PlayerPeak)(nil),                  // 160: common1.PlayerPeak
	(*PurePeakPlayer)(nil),              // 161: common1.PurePeakPlayer
	(*HotCommanders)(nil),               // 162: common1.HotCommanders
	(*Peak)(nil),                        // 163: common1.Peak
	(*PeakRankItem)(nil),                // 164: common1.PeakRankItem
	(*PlayerDyPeak)(nil),                // 165: common1.PlayerDyPeak
	(*DyPeakSignUp)(nil),                // 166: common1.DyPeakSignUp
	(*DyPeakChoosePlayer)(nil),          // 167: common1.DyPeakChoosePlayer
	(*DyPeakChooseRound)(nil),           // 168: common1.DyPeakChooseRound
	(*DyPeakChooseGroup)(nil),           // 169: common1.DyPeakChooseGroup
	(*PlaceFinish)(nil),                 // 170: common1.PlaceFinish
	(*PlaceFinishTask)(nil),             // 171: common1.PlaceFinishTask
	(*GuildPlayer)(nil),                 // 172: common1.GuildPlayer
	(*GveBattleInfo)(nil),               // 173: common1.GveBattleInfo
	(*GuildGoods)(nil),                  // 174: common1.GuildGoods
	(*GuildBuilding)(nil),               // 175: common1.GuildBuilding
	(*GveGrid)(nil),                     // 176: common1.GveGrid
	(*GveMapGrid)(nil),                  // 177: common1.GveMapGrid
	(*GveFlag)(nil),                     // 178: common1.GveFlag
	(*Gve)(nil),                         // 179: common1.Gve
	(*GuildGve)(nil),                    // 180: common1.GuildGve
	(*Guild)(nil),                       // 181: common1.Guild
	(*GuildRecruitPowerTypeLog)(nil),    // 182: common1.GuildRecruitPowerTypeLog
	(*GveChange)(nil),                   // 183: common1.GveChange
	(*Guilds)(nil),                      // 184: common1.Guilds
	(*StrMansion)(nil),                  // 185: common1.StrMansion
	(*Privilege)(nil),                   // 186: common1.Privilege
	(*Vip)(nil),                         // 187: common1.Vip
	(*OrderData)(nil),                   // 188: common1.OrderData
	(*Recharge)(nil),                    // 189: common1.Recharge
	(*RechargeGift)(nil),                // 190: common1.RechargeGift
	(*RechargeGiftItem)(nil),            // 191: common1.RechargeGiftItem
	(*MonthCard)(nil),                   // 192: common1.MonthCard
	(*MonthCards)(nil),                  // 193: common1.MonthCards
	(*MonthCardsAct)(nil),               // 194: common1.MonthCardsAct
	(*Subscribe)(nil),                   // 195: common1.Subscribe
	(*Subscribes)(nil),                  // 196: common1.Subscribes
	(*CashShop)(nil),                    // 197: common1.CashShop
	(*HandBook)(nil),                    // 198: common1.HandBook
	(*DailyExpVersion)(nil),             // 199: common1.DailyExpVersion
	(*DailyExp)(nil),                    // 200: common1.DailyExp
	(*DailyCoinVersion)(nil),            // 201: common1.DailyCoinVersion
	(*DailyCoin)(nil),                   // 202: common1.DailyCoin
	(*Drama)(nil),                       // 203: common1.Drama
	(*AssistReward)(nil),                // 204: common1.AssistReward
	(*DramaBattle)(nil),                 // 205: common1.DramaBattle
	(*DramaRank)(nil),                   // 206: common1.DramaRank
	(*DramaPlayer)(nil),                 // 207: common1.DramaPlayer
	(*History)(nil),                     // 208: common1.History
	(*HistoryChapter)(nil),              // 209: common1.HistoryChapter
	(*ChibiAssist)(nil),                 // 210: common1.ChibiAssist
	(*Chibi)(nil),                       // 211: common1.Chibi
	(*ChibiFinishedStage)(nil),          // 212: common1.ChibiFinishedStage
	(*ChibiFight)(nil),                  // 213: common1.ChibiFight
	(*ChibiFightProgress)(nil),          // 214: common1.ChibiFightProgress
	(*ChibiRecord)(nil),                 // 215: common1.ChibiRecord
	(*ChibiRankPlayer)(nil),             // 216: common1.ChibiRankPlayer
	(*ChibiRank)(nil),                   // 217: common1.ChibiRank
	(*ChibiStageRank)(nil),              // 218: common1.ChibiStageRank
	(*ChibiReport)(nil),                 // 219: common1.ChibiReport
	(*ChibiStageReport)(nil),            // 220: common1.ChibiStageReport
	(*ChibiStageRecords)(nil),           // 221: common1.ChibiStageRecords
	(*Album)(nil),                       // 222: common1.Album
	(*AlbumItem)(nil),                   // 223: common1.AlbumItem
	(*AlbumQua)(nil),                    // 224: common1.AlbumQua
	(*Assist)(nil),                      // 225: common1.Assist
	(*AssistCommander)(nil),             // 226: common1.AssistCommander
	(*AssistSlot)(nil),                  // 227: common1.AssistSlot
	(*AssistPlayer)(nil),                // 228: common1.AssistPlayer
	(*GameAssist)(nil),                  // 229: common1.GameAssist
	(*DynamicGift)(nil),                 // 230: common1.DynamicGift
	(*DynamicGiftItem)(nil),             // 231: common1.DynamicGiftItem
	(*DynamicGiftRangeItem)(nil),        // 232: common1.DynamicGiftRangeItem
	(*DyPeak)(nil),                      // 233: common1.DyPeak
	(*DyPeakChoose)(nil),                // 234: common1.DyPeakChoose
	(*DyPeakSimpleInfo)(nil),            // 235: common1.DyPeakSimpleInfo
	(*PkBattle)(nil),                    // 236: common1.PkBattle
	(*PkBattleResult)(nil),              // 237: common1.PkBattleResult
	(*GroupBattleRound)(nil),            // 238: common1.GroupBattleRound
	(*ExtraPk)(nil),                     // 239: common1.ExtraPk
	(*PkGroup)(nil),                     // 240: common1.PkGroup
	(*PkGroupPlayer)(nil),               // 241: common1.PkGroupPlayer
	(*DyPeakBattlePlayer)(nil),          // 242: common1.DyPeakBattlePlayer
	(*DyPeakSchedule)(nil),              // 243: common1.DyPeakSchedule
	(*DyPeakGuess)(nil),                 // 244: common1.DyPeakGuess
	(*DyPeakGuessReward)(nil),           // 245: common1.DyPeakGuessReward
	(*DyPeakRed)(nil),                   // 246: common1.DyPeakRed
	(*DyPeakRedItem)(nil),               // 247: common1.DyPeakRedItem
	(*StarSeal)(nil),                    // 248: common1.StarSeal
	(*StarSealPlayer)(nil),              // 249: common1.StarSealPlayer
	(*BulletData)(nil),                  // 250: common1.BulletData
	(*Share)(nil),                       // 251: common1.Share
	(*ShareData)(nil),                   // 252: common1.ShareData
	(*OBSOLETE_Tower)(nil),              // 253: common1.OBSOLETE_Tower
	(*Tower)(nil),                       // 254: common1.Tower
	(*TowerData)(nil),                   // 255: common1.TowerData
	(*TowerHangUp)(nil),                 // 256: common1.TowerHangUp
	(*TowerBattleReport)(nil),           // 257: common1.TowerBattleReport
	(*TowerLevelReports)(nil),           // 258: common1.TowerLevelReports
	(*TowerReports)(nil),                // 259: common1.TowerReports
	(*CommanderBattle)(nil),             // 260: common1.CommanderBattle
	(*CommanderBattleData)(nil),         // 261: common1.CommanderBattleData
	(*RecruitCard)(nil),                 // 262: common1.RecruitCard
	(*PlayerGvg)(nil),                   // 263: common1.PlayerGvg
	(*GvgPlayer)(nil),                   // 264: common1.GvgPlayer
	(*GvgServer)(nil),                   // 265: common1.GvgServer
	(*GvgCity)(nil),                     // 266: common1.GvgCity
	(*GvgMine)(nil),                     // 267: common1.GvgMine
	(*GvgOccupyInfo)(nil),               // 268: common1.GvgOccupyInfo
	(*GvgSafeAreaOccupyInfo)(nil),       // 269: common1.GvgSafeAreaOccupyInfo
	(*GvgPlayerMetadata)(nil),           // 270: common1.GvgPlayerMetadata
	(*GvgGuildMetadata)(nil),            // 271: common1.GvgGuildMetadata
	(*GvgCommon)(nil),                   // 272: common1.GvgCommon
	(*GvgBeginBattleData)(nil),          // 273: common1.GvgBeginBattleData
	(*GvgGuildData)(nil),                // 274: common1.GvgGuildData
	(*GvgFlag)(nil),                     // 275: common1.GvgFlag
	(*SeasonReward)(nil),                // 276: common1.SeasonReward
	(*SeasonTaskInfo)(nil),              // 277: common1.SeasonTaskInfo
	(*GameWorldBoss)(nil),               // 278: common1.GameWorldBoss
	(*BossData)(nil),                    // 279: common1.BossData
	(*WorldBossPlayer)(nil),             // 280: common1.WorldBossPlayer
	(*WorldBossHisInfo)(nil),            // 281: common1.WorldBossHisInfo
	(*CityGiftAct)(nil),                 // 282: common1.CityGiftAct
	(*CityGiftInfo)(nil),                // 283: common1.CityGiftInfo
	(*CrossData)(nil),                   // 284: common1.CrossData
	(*CommanderVisit)(nil),              // 285: common1.CommanderVisit
	(*CommonTowerFundData)(nil),         // 286: common1.CommonTowerFundData
	(*CommonTowerFundAct)(nil),          // 287: common1.CommonTowerFundAct
	(*LuckDrawAct)(nil),                 // 288: common1.LuckDrawAct
	(*LuckDrawInfo)(nil),                // 289: common1.LuckDrawInfo
	(*BuyDrawInfo)(nil),                 // 290: common1.BuyDrawInfo
	(*GiftRainAct)(nil),                 // 291: common1.GiftRainAct
	(*BeastGroup)(nil),                  // 292: common1.BeastGroup
	(*BeastLocation)(nil),               // 293: common1.BeastLocation
	(*ShiLengSignIn)(nil),               // 294: common1.ShiLengSignIn
	(*ActCommonSignIn)(nil),             // 295: common1.ActCommonSignIn
	(*ShiLengJigsaw)(nil),               // 296: common1.ShiLengJigsaw
	(*MountGroup)(nil),                  // 297: common1.MountGroup
	(*WuHunAstrolabe)(nil),              // 298: common1.WuHunAstrolabe
	(*NumberTreasureChest)(nil),         // 299: common1.NumberTreasureChest
	(*DigitalMatrix)(nil),               // 300: common1.DigitalMatrix
	(*SpecialBuyGift)(nil),              // 301: common1.SpecialBuyGift
	(*SpecialBuyGiftItem)(nil),          // 302: common1.SpecialBuyGiftItem
	(*Ladder)(nil),                      // 303: common1.Ladder
	(*LadderGame)(nil),                  // 304: common1.LadderGame
	(*LadderCross)(nil),                 // 305: common1.LadderCross
	(*CrossRankSnapshot)(nil),           // 306: common1.CrossRankSnapshot
	(*CrossRankKeepFirst)(nil),          // 307: common1.CrossRankKeepFirst
	(*Expedition)(nil),                  // 308: common1.Expedition
	(*ExpeditionChapter)(nil),           // 309: common1.ExpeditionChapter
	(*CellEvent)(nil),                   // 310: common1.CellEvent
	(*ExpeditionGrid)(nil),              // 311: common1.ExpeditionGrid
	(*ExpeditionBattleUnit)(nil),        // 312: common1.ExpeditionBattleUnit
	(*GameExpedition)(nil),              // 313: common1.GameExpedition
	(*GameExpeditionChapter)(nil),       // 314: common1.GameExpeditionChapter
	(*RechargeRank)(nil),                // 315: common1.RechargeRank
	(*Biography)(nil),                   // 316: common1.Biography
	(*BiographyArms)(nil),               // 317: common1.BiographyArms
	(*BiographyCommander)(nil),          // 318: common1.BiographyCommander
	(*ZmSnExplore)(nil),                 // 319: common1.ZmSnExplore
	(*ZmSnExploreInfo)(nil),             // 320: common1.ZmSnExploreInfo
	(*ExploreItem)(nil),                 // 321: common1.ExploreItem
	(*CommonTask)(nil),                  // 322: common1.CommonTask
	(*MountRefine)(nil),                 // 323: common1.MountRefine
	(*YouthReturns)(nil),                // 324: common1.YouthReturns
	(*YouthReturn)(nil),                 // 325: common1.YouthReturn
	(*Lm)(nil),                          // 326: common1.Lm
	(*LmSignUp)(nil),                    // 327: common1.LmSignUp
	(*CrossLmSignup)(nil),               // 328: common1.CrossLmSignup
	(*CrossLm)(nil),                     // 329: common1.CrossLm
	(*LmBattleVerify)(nil),              // 330: common1.LmBattleVerify
	(*PlayerLmPeak)(nil),                // 331: common1.PlayerLmPeak
	(*LmStageBattleInfos)(nil),          // 332: common1.LmStageBattleInfos
	(*LmPlayerInfos)(nil),               // 333: common1.LmPlayerInfos
	(*LmSimpleBattleInfos)(nil),         // 334: common1.LmSimpleBattleInfos
	(*LmSimpleBattleInfo)(nil),          // 335: common1.LmSimpleBattleInfo
	(*PlayerWon)(nil),                   // 336: common1.PlayerWon
	(*GuildWon)(nil),                    // 337: common1.GuildWon
	(*WonPlayer)(nil),                   // 338: common1.WonPlayer
	(*WonPlayerFt)(nil),                 // 339: common1.WonPlayerFt
	(*WonServer)(nil),                   // 340: common1.WonServer
	(*WonCommon)(nil),                   // 341: common1.WonCommon
	(*WonAct)(nil),                      // 342: common1.WonAct
	(*WonGrid)(nil),                     // 343: common1.WonGrid
	(*WonBattleGrid)(nil),               // 344: common1.WonBattleGrid
	(*WonGuild)(nil),                    // 345: common1.WonGuild
	(*WonWorship)(nil),                  // 346: common1.WonWorship
	(*AucBox)(nil),                      // 347: common1.AucBox
	(*AucBoxIds)(nil),                   // 348: common1.AucBoxIds
	(*AucItem)(nil),                     // 349: common1.AucItem
	(*AucPrices)(nil),                   // 350: common1.AucPrices
	(*PlayerAuc)(nil),                   // 351: common1.PlayerAuc
	(*GuildAuc)(nil),                    // 352: common1.GuildAuc
	(*RollMemberInfo)(nil),              // 353: common1.RollMemberInfo
	(*GuildRoll)(nil),                   // 354: common1.GuildRoll
	(*PlayerGuildRoll)(nil),             // 355: common1.PlayerGuildRoll
	(*PlayerOverlord)(nil),              // 356: common1.PlayerOverlord
	(*PayerOverlordStage)(nil),          // 357: common1.PayerOverlordStage
	(*GameOverlord)(nil),                // 358: common1.GameOverlord
	(*GameOverlordClear)(nil),           // 359: common1.GameOverlordClear
	(*SuperDraw)(nil),                   // 360: common1.SuperDraw
	(*UrDraw)(nil),                      // 361: common1.UrDraw
	(*PublicCheat)(nil),                 // 362: common1.PublicCheat
	(*PublicCheatData)(nil),             // 363: common1.PublicCheatData
	(*PlayerCheatData)(nil),             // 364: common1.PlayerCheatData
	(*WarSoul)(nil),                     // 365: common1.WarSoul
	(*NavalBattleFormation)(nil),        // 366: common1.NavalBattleFormation
	(*NavalBattleSectionFormation)(nil), // 367: common1.NavalBattleSectionFormation
	(*NavalBattleModuleFormation)(nil),  // 368: common1.NavalBattleModuleFormation
	(*ActAnniversary)(nil),              // 369: common1.ActAnniversary
	(*ActMainSsr)(nil),                  // 370: common1.ActMainSsr
	(*Bazaar)(nil),                      // 371: common1.Bazaar
	(*BazaarRecord)(nil),                // 372: common1.BazaarRecord
	(*NavalBattlePool)(nil),             // 373: common1.NavalBattlePool
	(*NavalBattle)(nil),                 // 374: common1.NavalBattle
	(*NavalBattleEnemy)(nil),            // 375: common1.NavalBattleEnemy
	(*NavalBattleAssist)(nil),           // 376: common1.NavalBattleAssist
	(*NavalBattleAssistPool)(nil),       // 377: common1.NavalBattleAssistPool
	(*NavalBattlePath)(nil),             // 378: common1.NavalBattlePath
	(*NavalBattleAI)(nil),               // 379: common1.NavalBattleAI
	(*CrossNavalBattleBase)(nil),        // 380: common1.CrossNavalBattleBase
	(*H5UserInfo)(nil),                  // 381: common1.H5UserInfo
	nil,                                 // 382: common1.ZonePartition.PartitionEntry
	nil,                                 // 383: common1.ServerDB.FirstReachLevelLimitEntry
	nil,                                 // 384: common1.Announce.NormalMsgEntry
	nil,                                 // 385: common1.ServerDrawTreasure.PlayerTimesEntry
	nil,                                 // 386: common1.ServerDrawWuHun.PlayerTimesEntry
	nil,                                 // 387: common1.DrawMount.CardScoreEntry
	nil,                                 // 388: common1.DrawMount.DrawNumEntry
	nil,                                 // 389: common1.Rank.SimpleInfoEntry
	nil,                                 // 390: common1.Rank.GuildSimpleEntry
	nil,                                 // 391: common1.Commander.SkillsEntry
	nil,                                 // 392: common1.Commander.EquipsEntry
	nil,                                 // 393: common1.Commander.PotentialsEntry
	nil,                                 // 394: common1.Commander.MedicationsEntry
	nil,                                 // 395: common1.Commander.DestinysEntry
	nil,                                 // 396: common1.Commander.DestinyFloatsEntry
	nil,                                 // 397: common1.UserMail.MailsEntry
	nil,                                 // 398: common1.UserGuild.SkillsEntry
	nil,                                 // 399: common1.UserGuild.ExchangeGoodsEntry
	nil,                                 // 400: common1.UserGuild.TaskCompleteEntry
	nil,                                 // 401: common1.UserGuild.OccupiedProgressStateEntry
	nil,                                 // 402: common1.UserGuild.GuildGveBuffsEntry
	nil,                                 // 403: common1.UserGuild.GveHistoryMaxDmgEntry
	nil,                                 // 404: common1.UserGuild.GveHistoryMaxPowerEntry
	nil,                                 // 405: common1.UserSetting.UserSwitchEntry
	nil,                                 // 406: common1.UserSetting.AvatarFrameSettingsEntry
	nil,                                 // 407: common1.UserWeb.QuestionnairesEntry
	nil,                                 // 408: common1.UserWeb.UsedCodeEntry
	nil,                                 // 409: common1.UserBaseDB.CounsellorEntry
	nil,                                 // 410: common1.UserBaseDB.PraiseRecordEntry
	nil,                                 // 411: common1.UserBaseDB.LevelRewardEntry
	nil,                                 // 412: common1.UserBaseDB.ResourceEntry
	nil,                                 // 413: common1.UserExtraDB.OfflineRewardsEntry
	nil,                                 // 414: common1.UserGameDB.CommanderDBEntry
	nil,                                 // 415: common1.UserGameDB.FormationDBEntry
	nil,                                 // 416: common1.UserGameDB.UsedFunctionEntry
	nil,                                 // 417: common1.UserGameDB.LastSendBulletTimeEntry
	nil,                                 // 418: common1.UserGameDB.GiftScoreEntry
	nil,                                 // 419: common1.UserGameDB.MailDemandEntry
	nil,                                 // 420: common1.SpecialBuyGiftRecord.BuyRecordEntry
	nil,                                 // 421: common1.CommanderData.CurrentAwakeCommanderTaskStatusEntry
	nil,                                 // 422: common1.WuHunGroup.OwnWuHunsEntry
	nil,                                 // 423: common1.OnlyEquipGroup.OwnOnlyEquipsEntry
	nil,                                 // 424: common1.Mission.FinishBitEntry
	nil,                                 // 425: common1.Season.TaskInfoEntry
	nil,                                 // 426: common1.Season.StoreItemEntry
	nil,                                 // 427: common1.Train.BarrageEntry
	nil,                                 // 428: common1.TaskUnit.FinishedTaskEntry
	nil,                                 // 429: common1.RobotPeakScore.RobotScoresEntry
	nil,                                 // 430: common1.SystemOpenData.OpenDataEntry
	nil,                                 // 431: common1.DrawScore.LowActiveEntry
	nil,                                 // 432: common1.DrawWuHun.ScoreEntry
	nil,                                 // 433: common1.DrawWuHun.TriggerTimesEntry
	(*DrawOnlyEquip_DrawData)(nil),      // 434: common1.DrawOnlyEquip.DrawData
	nil,                                 // 435: common1.DrawOnlyEquip.DrawDataEntry
	nil,                                 // 436: common1.DrawOnlyEquip.DrawData.SpecialDrawCountEntry
	nil,                                 // 437: common1.ResourceRecover.ResourceEntry
	nil,                                 // 438: common1.CollectWord.ExchangeTimesEntry
	nil,                                 // 439: common1.CollectWordPlayer.GotWordsEntry
	nil,                                 // 440: common1.DailyPhysical.LuckyTimesEntry
	nil,                                 // 441: common1.DailyPhysical.LuckyGiftRecordsEntry
	nil,                                 // 442: common1.CashGift.RebateEntry
	nil,                                 // 443: common1.SoulBox.Gift4CritDataEntry
	nil,                                 // 444: common1.SoulBoxLogMgr.OpenIdMapLogsEntry
	nil,                                 // 445: common1.SoulBoxLogMgr.OpenIdMapServerScoreEntry
	nil,                                 // 446: common1.PlayerArena.RewardScoreEntry
	nil,                                 // 447: common1.GuildPlayer.OfflineCompleteTaskEntry
	nil,                                 // 448: common1.GuildPlayer.OccupiedProgressStateEntry
	nil,                                 // 449: common1.GuildPlayer.GveHistoryMaxDmgEntry
	nil,                                 // 450: common1.GveGrid.LastInteractiveTimeEntry
	nil,                                 // 451: common1.GveGrid.DidHpEntry
	nil,                                 // 452: common1.GveGrid.RiceGetTimeEntry
	nil,                                 // 453: common1.GveGrid.TaxGetTimeEntry
	nil,                                 // 454: common1.GuildGve.GridsEntry
	nil,                                 // 455: common1.GuildGve.OccupiedLevelProgressEntry
	nil,                                 // 456: common1.Guild.MembersEntry
	nil,                                 // 457: common1.Guild.BuildingsEntry
	nil,                                 // 458: common1.Guild.SetOfficialTypeTimeEntry
	nil,                                 // 459: common1.Guild.ExchangeGoodsEntry
	nil,                                 // 460: common1.Guild.RequestsEntry
	nil,                                 // 461: common1.Guild.GveFirstPassTimeEntry
	nil,                                 // 462: common1.Guild.GveFlagsEntry
	nil,                                 // 463: common1.Guild.GuildRecruitPowerTypeLogsEntry
	nil,                                 // 464: common1.GveChange.CuesEntry
	nil,                                 // 465: common1.GveChange.GridsEntry
	nil,                                 // 466: common1.Recharge.OrderEntry
	nil,                                 // 467: common1.CashShop.BuyRecordsEntry
	nil,                                 // 468: common1.HandBook.QuestsEntry
	nil,                                 // 469: common1.Drama.CommanderHpEntry
	nil,                                 // 470: common1.Drama.GainBuffFlagEntry
	nil,                                 // 471: common1.Drama.BeastHpEntry
	nil,                                 // 472: common1.Chibi.FinishedStagesEntry
	nil,                                 // 473: common1.ChibiStageRank.RanksEntry
	nil,                                 // 474: common1.ChibiStageRecords.RecordsEntry
	nil,                                 // 475: common1.GameAssist.PlayersEntry
	nil,                                 // 476: common1.DynamicGift.WeightAddEntry
	nil,                                 // 477: common1.DyPeakGuess.DataEntry
	nil,                                 // 478: common1.DyPeakGuess.SupportEntry
	nil,                                 // 479: common1.DyPeakRed.RedEntry
	nil,                                 // 480: common1.DyPeakRedItem.GotPlayerEntry
	nil,                                 // 481: common1.StarSeal.PlayersEntry
	nil,                                 // 482: common1.TowerData.HangUpTimeEntry
	nil,                                 // 483: common1.TowerReports.ReportsEntry
	nil,                                 // 484: common1.PlayerGvg.TasksEntry
	nil,                                 // 485: common1.PlayerGvg.HolysEntry
	nil,                                 // 486: common1.GvgPlayer.MaxInCityPercentsEntry
	nil,                                 // 487: common1.GvgPlayer.HolysEntry
	nil,                                 // 488: common1.GvgSafeAreaOccupyInfo.OccupyInfosEntry
	nil,                                 // 489: common1.GvgGuildData.GvgFlagsEntry
	nil,                                 // 490: common1.WorldBossPlayer.SweepInfoEntry
	nil,                                 // 491: common1.CityGiftAct.ItemEntry
	nil,                                 // 492: common1.LuckDrawAct.AwardTimesEntry
	nil,                                 // 493: common1.BeastGroup.LocationInfoEntry
	nil,                                 // 494: common1.MountGroup.MountInfoEntry
	nil,                                 // 495: common1.DigitalMatrix.PositionEntry
	nil,                                 // 496: common1.DigitalMatrix.OnlineCollectionRecordEntry
	nil,                                 // 497: common1.LadderCross.GodBattleLogsEntry
	nil,                                 // 498: common1.CrossRankSnapshot.SnapshotDataEntry
	nil,                                 // 499: common1.Expedition.ChapterEntry
	nil,                                 // 500: common1.ExpeditionChapter.GridsEntry
	nil,                                 // 501: common1.ExpeditionChapter.MyBattleUnitsEntry
	nil,                                 // 502: common1.ExpeditionChapter.BuyShopEntry
	nil,                                 // 503: common1.ExpeditionGrid.EmeryBattleUnitsEntry
	nil,                                 // 504: common1.GameExpedition.ChapterEntry
	nil,                                 // 505: common1.Biography.ArmsEntry
	nil,                                 // 506: common1.BiographyArms.CommandersEntry
	nil,                                 // 507: common1.ZmSnExplore.InfoEntry
	nil,                                 // 508: common1.MountRefine.TimesEntry
	nil,                                 // 509: common1.CrossLmSignup.PowerEntry
	nil,                                 // 510: common1.LmStageBattleInfos.MInfoEntry
	nil,                                 // 511: common1.LmPlayerInfos.MInfoEntry
	nil,                                 // 512: common1.GuildWon.DoFtInActivityPlayersEntry
	nil,                                 // 513: common1.WonPlayer.FtsEntry
	nil,                                 // 514: common1.WonPlayer.FormationUintsRecordEntry
	nil,                                 // 515: common1.WonPlayer.TotalKillCountEntry
	nil,                                 // 516: common1.WonPlayerFt.BattleUintEntry
	nil,                                 // 517: common1.WonBattleGrid.AucItemsEntry
	nil,                                 // 518: common1.WonGuild.ForcesEntry
	nil,                                 // 519: common1.WonGuild.DeclareCoorsEntry
	nil,                                 // 520: common1.WonGuild.OriginHouseCoorsEntry
	nil,                                 // 521: common1.WonGuild.SurrenderApplysEntry
	nil,                                 // 522: common1.AucBoxIds.AuxBoxsEntry
	nil,                                 // 523: common1.AucPrices.IdPriceEntry
	nil,                                 // 524: common1.PlayerOverlord.StagesEntry
	nil,                                 // 525: common1.PayerOverlordStage.MagicsEntry
	nil,                                 // 526: common1.UrDraw.ItemCountEntry
	nil,                                 // 527: common1.UrDraw.TenDrawDataPerEntry
	nil,                                 // 528: common1.UrDraw.DrawDataEntry
	nil,                                 // 529: common1.WarSoul.SchedulesEntry
	nil,                                 // 530: common1.Bazaar.RecordsEntry
	nil,                                 // 531: common1.NavalBattle.StagesEntry
	nil,                                 // 532: common1.NavalBattle.EventsEntry
	nil,                                 // 533: common1.NavalBattle.HpsEntry
	nil,                                 // 534: common1.NavalBattle.PassPathEntry
	nil,                                 // 535: common1.NavalBattle.StopPathEntry
	nil,                                 // 536: common1.NavalBattle.EnemysEntry
	nil,                                 // 537: common1.NavalBattle.OldEnemysEntry
	nil,                                 // 538: common1.NavalBattle.FoundPlayerIdsEntry
	nil,                                 // 539: common1.NavalBattle.FoundPlayerFtsEntry
	nil,                                 // 540: common1.NavalBattleEnemy.BattleUnitHpsEntry
	nil,                                 // 541: common1.NavalBattlePath.AroundIdsEntry
	(*common.Item)(nil),                 // 542: common.Item
	(*common.MailCondition)(nil),        // 543: common.MailCondition
	(*common.AnnounceMessage)(nil),      // 544: common.AnnounceMessage
	(*common.PlayerRankReward)(nil),     // 545: common.PlayerRankReward
	(*common.CommanderSkill)(nil),       // 546: common.CommanderSkill
	(*common.Mail)(nil),                 // 547: common.Mail
	(*common.GveDamageRecord)(nil),      // 548: common.GveDamageRecord
	(*common.Coordinate)(nil),           // 549: common.Coordinate
	(*common.DailyBoss)(nil),            // 550: common.DailyBoss
	(*common.Rebate)(nil),               // 551: common.Rebate
	(*common.FirstInfo)(nil),            // 552: common.FirstInfo
	(*common.BattleStartInfo)(nil),      // 553: common.BattleStartInfo
	(*common.Formation)(nil),            // 554: common.Formation
	(*common.BattleResultInfo)(nil),     // 555: common.BattleResultInfo
	(*common.FormationGroupItem)(nil),   // 556: common.FormationGroupItem
	(*common.Counsellor)(nil),           // 557: common.Counsellor
	(*common.Soldier)(nil),              // 558: common.Soldier
	(*common.WuHun)(nil),                // 559: common.WuHun
	(*common.SoldierTech)(nil),          // 560: common.SoldierTech
	(*common.MissionUnit)(nil),          // 561: common.MissionUnit
	(*common.District)(nil),             // 562: common.District
	(*common.WorldMap)(nil),             // 563: common.WorldMap
	(*common.MissionTargetChapter)(nil), // 564: common.MissionTargetChapter
	(*common.Fortress)(nil),             // 565: common.Fortress
	(*common.TimeMission)(nil),          // 566: common.TimeMission
	(*common.DungeonChapter)(nil),       // 567: common.DungeonChapter
	(*common.DungeonLevel)(nil),         // 568: common.DungeonLevel
	(*common.ChatCell)(nil),             // 569: common.ChatCell
	(*common.ShopDailyRecord)(nil),      // 570: common.ShopDailyRecord
	(*common.ItemMarket)(nil),           // 571: common.ItemMarket
	(*common.TrainItem)(nil),            // 572: common.TrainItem
	(*common.ReplaySimple)(nil),         // 573: common.ReplaySimple
	(*common.TaskCell)(nil),             // 574: common.TaskCell
	(*common.Treasure)(nil),             // 575: common.Treasure
	(*common.TreasureFate)(nil),         // 576: common.TreasureFate
	(*common.TreasureRefine)(nil),       // 577: common.TreasureRefine
	(*common.SeasonFundTask)(nil),       // 578: common.SeasonFundTask
	(*common.CakeFeast)(nil),            // 579: common.CakeFeast
	(*common.HappyFlop)(nil),            // 580: common.HappyFlop
	(*common.SoulBoxLog)(nil),           // 581: common.SoulBoxLog
	(*common.Grid)(nil),                 // 582: common.Grid
	(*common.SlayAttack)(nil),           // 583: common.SlayAttack
	(*common.SlayPower)(nil),            // 584: common.SlayPower
	(*common.SlayRoundReport)(nil),      // 585: common.SlayRoundReport
	(*common.SlayPlayerCommander)(nil),  // 586: common.SlayPlayerCommander
	(*common.SlaySilkBuy)(nil),          // 587: common.SlaySilkBuy
	(*common.SilkBag)(nil),              // 588: common.SilkBag
	(*common.SlayEvent)(nil),            // 589: common.SlayEvent
	(*common.BattlePlayerInfo)(nil),     // 590: common.BattlePlayerInfo
	(*common.Commander)(nil),            // 591: common.Commander
	(*common.ArenaBattleLog)(nil),       // 592: common.ArenaBattleLog
	(*common.ArenaBattleInfo)(nil),      // 593: common.ArenaBattleInfo
	(*common.PeakBattleLog)(nil),        // 594: common.PeakBattleLog
	(*common.PlayerHeadPortrait)(nil),   // 595: common.PlayerHeadPortrait
	(*common.GuildLog)(nil),             // 596: common.GuildLog
	(*common.GuildAnnouncement)(nil),    // 597: common.GuildAnnouncement
	(*common.GuildHonorPlayer)(nil),     // 598: common.GuildHonorPlayer
	(*common.StrTalent)(nil),            // 599: common.StrTalent
	(*common.PrivilegeAbility)(nil),     // 600: common.PrivilegeAbility
	(*common.DramaStage)(nil),           // 601: common.DramaStage
	(*common.Skill)(nil),                // 602: common.Skill
	(*common.AssistCommander)(nil),      // 603: common.AssistCommander
	(*common.BattleCommander)(nil),      // 604: common.BattleCommander
	(*common.BattleBeast)(nil),          // 605: common.BattleBeast
	(*common.Employee)(nil),             // 606: common.Employee
	(*common.AssistLog)(nil),            // 607: common.AssistLog
	(*common.MountItem)(nil),            // 608: common.MountItem
	(*common.OnlyEquip)(nil),            // 609: common.OnlyEquip
	(*common.StarSealLog)(nil),          // 610: common.StarSealLog
	(*common.Bullet)(nil),               // 611: common.Bullet
	(*common.GvgBattleLog)(nil),         // 612: common.GvgBattleLog
	(*common.Beast)(nil),                // 613: common.Beast
	(*common.BeastTalent)(nil),          // 614: common.BeastTalent
	(*common.LadderHistoryInfo)(nil),    // 615: common.LadderHistoryInfo
	(*common.LadderBattleLog)(nil),      // 616: common.LadderBattleLog
	(*common.ExpeditionRankItem)(nil),   // 617: common.ExpeditionRankItem
	(*common.YouthReturnGiftItem)(nil),  // 618: common.YouthReturnGiftItem
	(*common.WonBattleLog)(nil),         // 619: common.WonBattleLog
	(*common.PlayerFt)(nil),             // 620: common.PlayerFt
	(*common.AucRecord)(nil),            // 621: common.AucRecord
	(*common.GOClearStage)(nil),         // 622: common.GOClearStage
	(*common.NavalBattleFormation)(nil), // 623: common.NavalBattleFormation
	(*common.BazaarItem)(nil),           // 624: common.BazaarItem
	(*common.NavalBattleEvent)(nil),     // 625: common.NavalBattleEvent
	(*common.NavalBattleTeam)(nil),      // 626: common.NavalBattleTeam
	(*common.CommanderEquip)(nil),       // 627: common.CommanderEquip
	(*common.CommanderPotential)(nil),   // 628: common.CommanderPotential
	(*common.UserOfflineReward)(nil),    // 629: common.UserOfflineReward
	(*common.TrainBarrage)(nil),         // 630: common.TrainBarrage
	(*common.HandBookQuest)(nil),        // 631: common.HandBookQuest
	(*common.LadderGodBattleLogs)(nil),  // 632: common.LadderGodBattleLogs
	(*common.WonSurrenderApply)(nil),    // 633: common.WonSurrenderApply
	(*common.WarSoulSchedule)(nil),      // 634: common.WarSoulSchedule
	(*common.NavalStage)(nil),           // 635: common.NavalStage
	(*common.BattleUnitHp)(nil),         // 636: common.BattleUnitHp
}
var file_common1_proto_depIdxs = []int32{
	382, // 0: common1.ZonePartition.partition:type_name -> common1.ZonePartition.PartitionEntry
	542, // 1: common1.ServerMail.attachment:type_name -> common.Item
	543, // 2: common1.ServerMail.mailConditions:type_name -> common.MailCondition
	23,  // 3: common1.ServerDB.activity:type_name -> common1.ServerActivity
	21,  // 4: common1.ServerDB.announce:type_name -> common1.Announce
	31,  // 5: common1.ServerDB.drawTreasure:type_name -> common1.ServerDrawTreasure
	11,  // 6: common1.ServerDB.discount:type_name -> common1.GameDailyDiscount
	383, // 7: common1.ServerDB.firstReachLevelLimit:type_name -> common1.ServerDB.FirstReachLevelLimitEntry
	12,  // 8: common1.GameDailyDiscount.act:type_name -> common1.GameDailyDiscountAct
	19,  // 9: common1.GameDailyDiscountAct.times:type_name -> common1.GameDailyDiscountItem
	17,  // 10: common1.GameStarAct.code:type_name -> common1.FakeCode
	15,  // 11: common1.GameStarAct.daily:type_name -> common1.GameStarActDaily
	14,  // 12: common1.GameStarActDaily.special:type_name -> common1.StarRewardPlayer
	14,  // 13: common1.GameStarActDaily.first:type_name -> common1.StarRewardPlayer
	14,  // 14: common1.GameStarActDaily.second:type_name -> common1.StarRewardPlayer
	14,  // 15: common1.GameStarActDaily.third:type_name -> common1.StarRewardPlayer
	16,  // 16: common1.FakeCode.Sections:type_name -> common1.Section
	384, // 17: common1.Announce.normalMsg:type_name -> common1.Announce.NormalMsgEntry
	544, // 18: common1.Announce.saveAnnMsgs:type_name -> common.AnnounceMessage
	544, // 19: common1.AnnounceMessages.normalMsgs:type_name -> common.AnnounceMessage
	29,  // 20: common1.ServerActivity.goldenDragon:type_name -> common1.ServerGolden
	28,  // 21: common1.ServerActivity.gmOpenActs:type_name -> common1.ActivityOpen
	25,  // 22: common1.ServerActivity.foundation:type_name -> common1.GameFoundataion
	24,  // 23: common1.ServerActivity.luckDraw:type_name -> common1.GameLuckDraw
	24,  // 24: common1.ServerActivity.redRain:type_name -> common1.GameLuckDraw
	27,  // 25: common1.ServerActivity.opens:type_name -> common1.GameActivityOpen
	26,  // 26: common1.GameFoundataion.cheats:type_name -> common1.GameFoundataionCheat
	30,  // 27: common1.ServerGolden.prize1:type_name -> common1.ServerGoldenPrize
	30,  // 28: common1.ServerGolden.prize2:type_name -> common1.ServerGoldenPrize
	32,  // 29: common1.ServerDrawTreasure.openServerScoreTime:type_name -> common1.DayTime
	385, // 30: common1.ServerDrawTreasure.playerTimes:type_name -> common1.ServerDrawTreasure.PlayerTimesEntry
	32,  // 31: common1.ServerDrawWuHun.openServerScoreTime:type_name -> common1.DayTime
	386, // 32: common1.ServerDrawWuHun.playerTimes:type_name -> common1.ServerDrawWuHun.PlayerTimesEntry
	387, // 33: common1.DrawMount.cardScore:type_name -> common1.DrawMount.CardScoreEntry
	388, // 34: common1.DrawMount.drawNum:type_name -> common1.DrawMount.DrawNumEntry
	545, // 35: common1.UserRank.rewards:type_name -> common.PlayerRankReward
	41,  // 36: common1.Rank.reward:type_name -> common1.RankReward
	389, // 37: common1.Rank.simpleInfo:type_name -> common1.Rank.SimpleInfoEntry
	390, // 38: common1.Rank.guildSimple:type_name -> common1.Rank.GuildSimpleEntry
	37,  // 39: common1.Rank.ranks:type_name -> common1.RankInfo
	42,  // 40: common1.RankReward.items:type_name -> common1.RankRewardItem
	43,  // 41: common1.RankRewardItem.players:type_name -> common1.RankRewardPlayer
	391, // 42: common1.Commander.skills:type_name -> common1.Commander.SkillsEntry
	392, // 43: common1.Commander.equips:type_name -> common1.Commander.EquipsEntry
	393, // 44: common1.Commander.potentials:type_name -> common1.Commander.PotentialsEntry
	394, // 45: common1.Commander.medications:type_name -> common1.Commander.MedicationsEntry
	546, // 46: common1.Commander.awakeSkill:type_name -> common.CommanderSkill
	395, // 47: common1.Commander.destinys:type_name -> common1.Commander.DestinysEntry
	396, // 48: common1.Commander.destinyFloats:type_name -> common1.Commander.DestinyFloatsEntry
	397, // 49: common1.UserMail.mails:type_name -> common1.UserMail.MailsEntry
	398, // 50: common1.UserGuild.skills:type_name -> common1.UserGuild.SkillsEntry
	399, // 51: common1.UserGuild.exchangeGoods:type_name -> common1.UserGuild.ExchangeGoodsEntry
	400, // 52: common1.UserGuild.taskComplete:type_name -> common1.UserGuild.TaskCompleteEntry
	547, // 53: common1.UserGuild.heroicMail:type_name -> common.Mail
	547, // 54: common1.UserGuild.totalOfflineMail:type_name -> common.Mail
	401, // 55: common1.UserGuild.occupiedProgressState:type_name -> common1.UserGuild.OccupiedProgressStateEntry
	402, // 56: common1.UserGuild.guildGveBuffs:type_name -> common1.UserGuild.GuildGveBuffsEntry
	548, // 57: common1.UserGuild.dayDamageRecord:type_name -> common.GveDamageRecord
	183, // 58: common1.UserGuild.gveChange:type_name -> common1.GveChange
	548, // 59: common1.UserGuild.totalDamageRecord:type_name -> common.GveDamageRecord
	549, // 60: common1.UserGuild.sameGveInteractiveBoxAndTrans:type_name -> common.Coordinate
	403, // 61: common1.UserGuild.gveHistoryMaxDmg:type_name -> common1.UserGuild.GveHistoryMaxDmgEntry
	404, // 62: common1.UserGuild.gveHistoryMaxPower:type_name -> common1.UserGuild.GveHistoryMaxPowerEntry
	405, // 63: common1.UserSetting.userSwitch:type_name -> common1.UserSetting.UserSwitchEntry
	406, // 64: common1.UserSetting.avatarFrameSettings:type_name -> common1.UserSetting.AvatarFrameSettingsEntry
	407, // 65: common1.UserWeb.questionnaires:type_name -> common1.UserWeb.QuestionnairesEntry
	408, // 66: common1.UserWeb.usedCode:type_name -> common1.UserWeb.UsedCodeEntry
	52,  // 67: common1.User.base:type_name -> common1.UserBaseDB
	53,  // 68: common1.User.extra:type_name -> common1.UserExtraDB
	54,  // 69: common1.User.game:type_name -> common1.UserGameDB
	409, // 70: common1.UserBaseDB.counsellor:type_name -> common1.UserBaseDB.CounsellorEntry
	410, // 71: common1.UserBaseDB.praiseRecord:type_name -> common1.UserBaseDB.PraiseRecordEntry
	411, // 72: common1.UserBaseDB.levelReward:type_name -> common1.UserBaseDB.LevelRewardEntry
	412, // 73: common1.UserBaseDB.resource:type_name -> common1.UserBaseDB.ResourceEntry
	85,  // 74: common1.UserExtraDB.friends:type_name -> common1.Friends
	413, // 75: common1.UserExtraDB.offlineRewards:type_name -> common1.UserExtraDB.OfflineRewardsEntry
	70,  // 76: common1.UserGameDB.bag:type_name -> common1.Bag
	187, // 77: common1.UserGameDB.vip:type_name -> common1.Vip
	189, // 78: common1.UserGameDB.recharge:type_name -> common1.Recharge
	83,  // 79: common1.UserGameDB.chat:type_name -> common1.Chat
	69,  // 80: common1.UserGameDB.stats:type_name -> common1.Stats
	46,  // 81: common1.UserGameDB.mailDB:type_name -> common1.UserMail
	48,  // 82: common1.UserGameDB.setting:type_name -> common1.UserSetting
	197, // 83: common1.UserGameDB.cashShop:type_name -> common1.CashShop
	190, // 84: common1.UserGameDB.rechargeGift:type_name -> common1.RechargeGift
	55,  // 85: common1.UserGameDB.specialBuyGiftRecord:type_name -> common1.SpecialBuyGiftRecord
	371, // 86: common1.UserGameDB.bazaar:type_name -> common1.Bazaar
	71,  // 87: common1.UserGameDB.CounsellorGroup:type_name -> common1.CounsellorGroup
	414, // 88: common1.UserGameDB.commanderDB:type_name -> common1.UserGameDB.CommanderDBEntry
	415, // 89: common1.UserGameDB.formationDB:type_name -> common1.UserGameDB.FormationDBEntry
	72,  // 90: common1.UserGameDB.soldier:type_name -> common1.Soldier
	59,  // 91: common1.UserGameDB.commander:type_name -> common1.CommanderData
	63,  // 92: common1.UserGameDB.formationGroup:type_name -> common1.FormationGroup
	198, // 93: common1.UserGameDB.handbook:type_name -> common1.HandBook
	92,  // 94: common1.UserGameDB.treasure:type_name -> common1.Treasure
	73,  // 95: common1.UserGameDB.wuHunGroup:type_name -> common1.WuHunGroup
	292, // 96: common1.UserGameDB.beastGroup:type_name -> common1.BeastGroup
	297, // 97: common1.UserGameDB.mount:type_name -> common1.MountGroup
	308, // 98: common1.UserGameDB.expedition:type_name -> common1.Expedition
	316, // 99: common1.UserGameDB.biography:type_name -> common1.Biography
	323, // 100: common1.UserGameDB.mountRefine:type_name -> common1.MountRefine
	74,  // 101: common1.UserGameDB.onlyEquip:type_name -> common1.OnlyEquipGroup
	99,  // 102: common1.UserGameDB.systemOpenData:type_name -> common1.SystemOpenData
	91,  // 103: common1.UserGameDB.task:type_name -> common1.Task
	76,  // 104: common1.UserGameDB.Mission:type_name -> common1.Mission
	78,  // 105: common1.UserGameDB.Dungeon:type_name -> common1.Dungeon
	108, // 106: common1.UserGameDB.draw:type_name -> common1.Draw
	157, // 107: common1.UserGameDB.slay:type_name -> common1.Slay
	185, // 108: common1.UserGameDB.strMansion:type_name -> common1.StrMansion
	87,  // 109: common1.UserGameDB.market:type_name -> common1.Market
	158, // 110: common1.UserGameDB.arena:type_name -> common1.PlayerArena
	550, // 111: common1.UserGameDB.dailyBoss:type_name -> common.DailyBoss
	160, // 112: common1.UserGameDB.peak:type_name -> common1.PlayerPeak
	47,  // 113: common1.UserGameDB.guild:type_name -> common1.UserGuild
	186, // 114: common1.UserGameDB.privilege:type_name -> common1.Privilege
	88,  // 115: common1.UserGameDB.Train:type_name -> common1.Train
	416, // 116: common1.UserGameDB.usedFunction:type_name -> common1.UserGameDB.UsedFunctionEntry
	225, // 117: common1.UserGameDB.assist:type_name -> common1.Assist
	35,  // 118: common1.UserGameDB.rank:type_name -> common1.UserRank
	61,  // 119: common1.UserGameDB.battle:type_name -> common1.UserBattle
	417, // 120: common1.UserGameDB.lastSendBulletTime:type_name -> common1.UserGameDB.LastSendBulletTimeEntry
	165, // 121: common1.UserGameDB.dyPeak:type_name -> common1.PlayerDyPeak
	159, // 122: common1.UserGameDB.qiecuo:type_name -> common1.PlayerQieCuo
	79,  // 123: common1.UserGameDB.season:type_name -> common1.Season
	280, // 124: common1.UserGameDB.worldBoss:type_name -> common1.WorldBossPlayer
	331, // 125: common1.UserGameDB.lmPeak:type_name -> common1.PlayerLmPeak
	356, // 126: common1.UserGameDB.overlord:type_name -> common1.PlayerOverlord
	418, // 127: common1.UserGameDB.giftScore:type_name -> common1.UserGameDB.GiftScoreEntry
	84,  // 128: common1.UserGameDB.checkin:type_name -> common1.Checkin
	111, // 129: common1.UserGameDB.activity:type_name -> common1.Activity
	50,  // 130: common1.UserGameDB.web:type_name -> common1.UserWeb
	133, // 131: common1.UserGameDB.dailyPhysical:type_name -> common1.DailyPhysical
	200, // 132: common1.UserGameDB.dailyExp:type_name -> common1.DailyExp
	202, // 133: common1.UserGameDB.dailyCoin:type_name -> common1.DailyCoin
	203, // 134: common1.UserGameDB.drama:type_name -> common1.Drama
	208, // 135: common1.UserGameDB.history:type_name -> common1.History
	211, // 136: common1.UserGameDB.chibi:type_name -> common1.Chibi
	222, // 137: common1.UserGameDB.album:type_name -> common1.Album
	230, // 138: common1.UserGameDB.gift:type_name -> common1.DynamicGift
	251, // 139: common1.UserGameDB.share:type_name -> common1.Share
	419, // 140: common1.UserGameDB.mailDemand:type_name -> common1.UserGameDB.MailDemandEntry
	56,  // 141: common1.UserGameDB.itemGift:type_name -> common1.ItemGift
	170, // 142: common1.UserGameDB.placeFinish:type_name -> common1.PlaceFinish
	253, // 143: common1.UserGameDB.OBSOLETE_tower:type_name -> common1.OBSOLETE_Tower
	260, // 144: common1.UserGameDB.commanderBattle:type_name -> common1.CommanderBattle
	551, // 145: common1.UserGameDB.rebate:type_name -> common.Rebate
	254, // 146: common1.UserGameDB.tower:type_name -> common1.Tower
	303, // 147: common1.UserGameDB.ladder:type_name -> common1.Ladder
	324, // 148: common1.UserGameDB.youthReturns:type_name -> common1.YouthReturns
	355, // 149: common1.UserGameDB.guildRoll:type_name -> common1.PlayerGuildRoll
	365, // 150: common1.UserGameDB.warSoul:type_name -> common1.WarSoul
	374, // 151: common1.UserGameDB.navalBattle:type_name -> common1.NavalBattle
	44,  // 152: common1.UserGameDB.msgCache:type_name -> common1.MsgCache
	44,  // 153: common1.UserGameDB.pushMsgCache:type_name -> common1.MsgCache
	552, // 154: common1.UserGameDB.firstInfo:type_name -> common.FirstInfo
	263, // 155: common1.UserGameDB.gvg:type_name -> common1.PlayerGvg
	336, // 156: common1.UserGameDB.won:type_name -> common1.PlayerWon
	351, // 157: common1.UserGameDB.auc:type_name -> common1.PlayerAuc
	420, // 158: common1.SpecialBuyGiftRecord.buyRecord:type_name -> common1.SpecialBuyGiftRecord.BuyRecordEntry
	57,  // 159: common1.ItemGift.items:type_name -> common1.ItemGiftScore
	58,  // 160: common1.ItemGiftScore.scores:type_name -> common1.ItemGiftScoreItem
	60,  // 161: common1.CommanderData.currentAwakeCommanderTaskProgress:type_name -> common1.CommanderAwakeTaskProgress
	421, // 162: common1.CommanderData.currentAwakeCommanderTaskStatus:type_name -> common1.CommanderData.CurrentAwakeCommanderTaskStatusEntry
	553, // 163: common1.UserBattle.battle:type_name -> common.BattleStartInfo
	62,  // 164: common1.UserBattle.lastBattle:type_name -> common1.Battle
	554, // 165: common1.UserBattle.battleFormation:type_name -> common.Formation
	553, // 166: common1.Battle.info:type_name -> common.BattleStartInfo
	555, // 167: common1.Battle.resultInfo:type_name -> common.BattleResultInfo
	556, // 168: common1.FormationGroup.items:type_name -> common.FormationGroupItem
	66,  // 169: common1.StatsData.recharge:type_name -> common1.RechargeStatTotal
	66,  // 170: common1.StatsData.rechargeReal:type_name -> common1.RechargeStatTotal
	68,  // 171: common1.DailyStatsData.recharge:type_name -> common1.RechargeStatDaily
	68,  // 172: common1.DailyStatsData.rechargeReal:type_name -> common1.RechargeStatDaily
	67,  // 173: common1.Stats.daily:type_name -> common1.DailyStatsData
	64,  // 174: common1.Stats.total:type_name -> common1.StatsData
	65,  // 175: common1.Stats.act:type_name -> common1.ActivityData
	542, // 176: common1.Bag.items:type_name -> common.Item
	557, // 177: common1.CounsellorGroup.OwnCounsellors:type_name -> common.Counsellor
	558, // 178: common1.Soldier.soldiers:type_name -> common.Soldier
	75,  // 179: common1.Soldier.classTechs:type_name -> common1.SoldierClassTech
	422, // 180: common1.WuHunGroup.ownWuHuns:type_name -> common1.WuHunGroup.OwnWuHunsEntry
	559, // 181: common1.WuHunGroup.materialWuHuns:type_name -> common.WuHun
	423, // 182: common1.OnlyEquipGroup.ownOnlyEquips:type_name -> common1.OnlyEquipGroup.OwnOnlyEquipsEntry
	560, // 183: common1.SoldierClassTech.techs:type_name -> common.SoldierTech
	561, // 184: common1.Mission.MainMission:type_name -> common.MissionUnit
	561, // 185: common1.Mission.BranchMission:type_name -> common.MissionUnit
	424, // 186: common1.Mission.FinishBit:type_name -> common1.Mission.FinishBitEntry
	77,  // 187: common1.Mission.timeLimitMission:type_name -> common1.MissionTimeLimit
	562, // 188: common1.Mission.district:type_name -> common.District
	563, // 189: common1.Mission.maps:type_name -> common.WorldMap
	564, // 190: common1.Mission.targetChapter:type_name -> common.MissionTargetChapter
	565, // 191: common1.Mission.fortress:type_name -> common.Fortress
	566, // 192: common1.MissionTimeLimit.mission:type_name -> common.TimeMission
	567, // 193: common1.Dungeon.Chapters:type_name -> common.DungeonChapter
	568, // 194: common1.Dungeon.Levels:type_name -> common.DungeonLevel
	276, // 195: common1.Season.reward:type_name -> common1.SeasonReward
	425, // 196: common1.Season.taskInfo:type_name -> common1.Season.TaskInfoEntry
	426, // 197: common1.Season.storeItem:type_name -> common1.Season.StoreItemEntry
	569, // 198: common1.PrivateMessage.msg:type_name -> common.ChatCell
	82,  // 199: common1.Chat.banChannel:type_name -> common1.BanChannel
	81,  // 200: common1.Chat.privateMsg:type_name -> common1.PrivateMessage
	570, // 201: common1.Market.shopDailyRecord:type_name -> common.ShopDailyRecord
	571, // 202: common1.Market.itemMarkets:type_name -> common.ItemMarket
	572, // 203: common1.Train.Items:type_name -> common.TrainItem
	573, // 204: common1.Train.replays:type_name -> common.ReplaySimple
	427, // 205: common1.Train.barrage:type_name -> common1.Train.BarrageEntry
	574, // 206: common1.TaskUnit.tasks:type_name -> common.TaskCell
	428, // 207: common1.TaskUnit.finishedTask:type_name -> common1.TaskUnit.FinishedTaskEntry
	90,  // 208: common1.Task.week:type_name -> common1.TaskWeek
	89,  // 209: common1.Task.daily:type_name -> common1.TaskUnit
	89,  // 210: common1.Task.grow:type_name -> common1.TaskUnit
	89,  // 211: common1.Task.story:type_name -> common1.TaskUnit
	564, // 212: common1.Task.targetChapter:type_name -> common.MissionTargetChapter
	575, // 213: common1.Treasure.treasures:type_name -> common.Treasure
	576, // 214: common1.Treasure.fates:type_name -> common.TreasureFate
	577, // 215: common1.Treasure.refine:type_name -> common.TreasureRefine
	429, // 216: common1.RobotPeakScore.robotScores:type_name -> common1.RobotPeakScore.RobotScoresEntry
	430, // 217: common1.SystemOpenData.openData:type_name -> common1.SystemOpenData.OpenDataEntry
	431, // 218: common1.DrawScore.lowActive:type_name -> common1.DrawScore.LowActiveEntry
	101, // 219: common1.DrawNormal.score:type_name -> common1.DrawScore
	101, // 220: common1.DrawDiamond.diamondScore:type_name -> common1.DrawScore
	101, // 221: common1.DrawChoose.score:type_name -> common1.DrawScore
	432, // 222: common1.DrawWuHun.score:type_name -> common1.DrawWuHun.ScoreEntry
	433, // 223: common1.DrawWuHun.triggerTimes:type_name -> common1.DrawWuHun.TriggerTimesEntry
	435, // 224: common1.DrawOnlyEquip.drawData:type_name -> common1.DrawOnlyEquip.DrawDataEntry
	102, // 225: common1.Draw.normal:type_name -> common1.DrawNormal
	103, // 226: common1.Draw.diamond:type_name -> common1.DrawDiamond
	105, // 227: common1.Draw.treasure:type_name -> common1.DrawTreasure
	104, // 228: common1.Draw.select:type_name -> common1.DrawChoose
	106, // 229: common1.Draw.normalWuHun:type_name -> common1.DrawWuHun
	106, // 230: common1.Draw.diamondWuHun:type_name -> common1.DrawWuHun
	34,  // 231: common1.Draw.drawMount:type_name -> common1.DrawMount
	107, // 232: common1.Draw.drawOnlyEquip:type_name -> common1.DrawOnlyEquip
	109, // 233: common1.ActivityCommon.tasks:type_name -> common1.ActivityTask
	110, // 234: common1.Activity.activities:type_name -> common1.ActivityCommon
	112, // 235: common1.Activity.extra:type_name -> common1.ActivityExtra
	151, // 236: common1.Activity.dailyRecharge:type_name -> common1.DailyRecharge
	114, // 237: common1.Activity.actRechargeGift:type_name -> common1.ActivityRechargeGift
	116, // 238: common1.Activity.totalCommander:type_name -> common1.ActivityTotalCommander
	136, // 239: common1.Activity.foundation:type_name -> common1.Foundation
	138, // 240: common1.Activity.cashGift:type_name -> common1.CashGift
	140, // 241: common1.Activity.vipCashGift:type_name -> common1.VipCashGift
	150, // 242: common1.Activity.star:type_name -> common1.StarActivity
	141, // 243: common1.Activity.goldenDragon:type_name -> common1.GoldenDragon
	132, // 244: common1.Activity.totalLogin:type_name -> common1.TotalLogin
	135, // 245: common1.Activity.LevelGift:type_name -> common1.LevelGift
	147, // 246: common1.Activity.dailyDiscount:type_name -> common1.DailyDiscount
	142, // 247: common1.Activity.soulBox:type_name -> common1.SoulBox
	123, // 248: common1.Activity.towerFund:type_name -> common1.TowerFund
	121, // 249: common1.Activity.tianGongFund:type_name -> common1.TianGongFund
	117, // 250: common1.Activity.appComment:type_name -> common1.AppComment
	118, // 251: common1.Activity.superWelGift:type_name -> common1.SuperWelGift
	119, // 252: common1.Activity.resourceRecover:type_name -> common1.ResourceRecover
	262, // 253: common1.Activity.recruitCard:type_name -> common1.RecruitCard
	128, // 254: common1.Activity.seasonFund:type_name -> common1.SeasonFund
	282, // 255: common1.Activity.cityItems:type_name -> common1.CityGiftAct
	285, // 256: common1.Activity.visitList:type_name -> common1.CommanderVisit
	287, // 257: common1.Activity.commonTowerFund:type_name -> common1.CommonTowerFundAct
	288, // 258: common1.Activity.luckDraw:type_name -> common1.LuckDrawAct
	291, // 259: common1.Activity.giftRain:type_name -> common1.GiftRainAct
	125, // 260: common1.Activity.collectWord:type_name -> common1.CollectWord
	294, // 261: common1.Activity.shiLengSignIn:type_name -> common1.ShiLengSignIn
	296, // 262: common1.Activity.shiLengJigsaw:type_name -> common1.ShiLengJigsaw
	298, // 263: common1.Activity.wuHunAstrolabe:type_name -> common1.WuHunAstrolabe
	131, // 264: common1.Activity.acts:type_name -> common1.ActWrapper
	360, // 265: common1.Activity.superDraw:type_name -> common1.SuperDraw
	364, // 266: common1.Activity.playerCheat:type_name -> common1.PlayerCheatData
	315, // 267: common1.Activity.rechargeRank:type_name -> common1.RechargeRank
	113, // 268: common1.ActivityExtra.items:type_name -> common1.ActivityExtraItem
	115, // 269: common1.ActivityRechargeGift.items:type_name -> common1.ActivityRechargeGiftItem
	110, // 270: common1.ActivityTotalCommander.common:type_name -> common1.ActivityCommon
	109, // 271: common1.AppComment.actTask:type_name -> common1.ActivityTask
	437, // 272: common1.ResourceRecover.resource:type_name -> common1.ResourceRecover.ResourceEntry
	122, // 273: common1.TianGongFund.fundCommon:type_name -> common1.FundCommon
	124, // 274: common1.TowerFund.funds:type_name -> common1.TowerFundData
	438, // 275: common1.CollectWord.exchangeTimes:type_name -> common1.CollectWord.ExchangeTimesEntry
	439, // 276: common1.CollectWordPlayer.gotWords:type_name -> common1.CollectWordPlayer.GotWordsEntry
	127, // 277: common1.CollectWordPlayer.giftWords:type_name -> common1.CollectWordGift
	129, // 278: common1.SeasonFund.lastSeason:type_name -> common1.SeasonFundData
	129, // 279: common1.SeasonFund.curSeason:type_name -> common1.SeasonFundData
	578, // 280: common1.SeasonFundData.dailyTask:type_name -> common.SeasonFundTask
	578, // 281: common1.SeasonFundData.seasonTasks:type_name -> common.SeasonFundTask
	578, // 282: common1.SeasonFundData.exclusiveTasks:type_name -> common.SeasonFundTask
	130, // 283: common1.ActWrapper.zmsn:type_name -> common1.ActZmsn
	319, // 284: common1.ActWrapper.explorer:type_name -> common1.ZmSnExplore
	295, // 285: common1.ActWrapper.signIn:type_name -> common1.ActCommonSignIn
	110, // 286: common1.ActWrapper.task:type_name -> common1.ActivityCommon
	369, // 287: common1.ActWrapper.anniversary:type_name -> common1.ActAnniversary
	370, // 288: common1.ActWrapper.mainSsr:type_name -> common1.ActMainSsr
	579, // 289: common1.ActWrapper.cakeFeast:type_name -> common.CakeFeast
	580, // 290: common1.ActWrapper.happyFlop:type_name -> common.HappyFlop
	440, // 291: common1.DailyPhysical.luckyTimes:type_name -> common1.DailyPhysical.LuckyTimesEntry
	441, // 292: common1.DailyPhysical.luckyGiftRecords:type_name -> common1.DailyPhysical.LuckyGiftRecordsEntry
	542, // 293: common1.DailyPhysical.fullAttendGifts:type_name -> common.Item
	137, // 294: common1.Foundation.items:type_name -> common1.FoundationItem
	139, // 295: common1.CashGift.items:type_name -> common1.CashGiftItem
	442, // 296: common1.CashGift.rebate:type_name -> common1.CashGift.RebateEntry
	139, // 297: common1.VipCashGift.items:type_name -> common1.CashGiftItem
	110, // 298: common1.GoldenDragon.common:type_name -> common1.ActivityCommon
	443, // 299: common1.SoulBox.gift4CritData:type_name -> common1.SoulBox.Gift4CritDataEntry
	444, // 300: common1.SoulBoxLogMgr.openIdMapLogs:type_name -> common1.SoulBoxLogMgr.OpenIdMapLogsEntry
	445, // 301: common1.SoulBoxLogMgr.openIdMapServerScore:type_name -> common1.SoulBoxLogMgr.OpenIdMapServerScoreEntry
	581, // 302: common1.soulLogsBoth.commanderLogs:type_name -> common.SoulBoxLog
	581, // 303: common1.soulLogsBoth.BoxLogs:type_name -> common.SoulBoxLog
	148, // 304: common1.DailyDiscount.acts:type_name -> common1.DailyDiscountAct
	149, // 305: common1.DailyDiscountAct.items:type_name -> common1.DailyDiscountItem
	152, // 306: common1.DailyRecharge.act:type_name -> common1.DailyRechargeAct
	153, // 307: common1.DailyRechargeAct.items:type_name -> common1.DailyRechargeItem
	554, // 308: common1.SlayCity.formation:type_name -> common.Formation
	154, // 309: common1.SlayCity.slayCommanders:type_name -> common1.SlayCommander
	582, // 310: common1.SlayCity.notUsedGrid:type_name -> common.Grid
	583, // 311: common1.SlayAction.attack:type_name -> common.SlayAttack
	155, // 312: common1.Slay.cities:type_name -> common1.SlayCity
	584, // 313: common1.Slay.forces:type_name -> common.SlayPower
	156, // 314: common1.Slay.actions:type_name -> common1.SlayAction
	585, // 315: common1.Slay.roundReports:type_name -> common.SlayRoundReport
	586, // 316: common1.Slay.playerCommanders:type_name -> common.SlayPlayerCommander
	587, // 317: common1.Slay.selectBags:type_name -> common.SlaySilkBuy
	588, // 318: common1.Slay.silkBag:type_name -> common.SilkBag
	589, // 319: common1.Slay.event:type_name -> common.SlayEvent
	590, // 320: common1.Slay.aiTemplate:type_name -> common.BattlePlayerInfo
	591, // 321: common1.Slay.topCommanders:type_name -> common.Commander
	592, // 322: common1.PlayerArena.battleLogs:type_name -> common.ArenaBattleLog
	446, // 323: common1.PlayerArena.rewardScore:type_name -> common1.PlayerArena.RewardScoreEntry
	593, // 324: common1.PlayerArena.arenaBattleInfo:type_name -> common.ArenaBattleInfo
	594, // 325: common1.PlayerPeak.battleLogs:type_name -> common.PeakBattleLog
	166, // 326: common1.PlayerDyPeak.signUp:type_name -> common1.DyPeakSignUp
	167, // 327: common1.DyPeakChooseRound.Players:type_name -> common1.DyPeakChoosePlayer
	168, // 328: common1.DyPeakChooseGroup.Rounds:type_name -> common1.DyPeakChooseRound
	171, // 329: common1.PlaceFinish.taskList:type_name -> common1.PlaceFinishTask
	542, // 330: common1.PlaceFinishTask.baseReward:type_name -> common.Item
	595, // 331: common1.GuildPlayer.icon:type_name -> common.PlayerHeadPortrait
	547, // 332: common1.GuildPlayer.offlineMails:type_name -> common.Mail
	447, // 333: common1.GuildPlayer.offlineCompleteTask:type_name -> common1.GuildPlayer.OfflineCompleteTaskEntry
	549, // 334: common1.GuildPlayer.coordinate:type_name -> common.Coordinate
	70,  // 335: common1.GuildPlayer.bag:type_name -> common1.Bag
	548, // 336: common1.GuildPlayer.totalDamageRecord:type_name -> common.GveDamageRecord
	448, // 337: common1.GuildPlayer.occupiedProgressState:type_name -> common1.GuildPlayer.OccupiedProgressStateEntry
	173, // 338: common1.GuildPlayer.gveBattleInfo:type_name -> common1.GveBattleInfo
	548, // 339: common1.GuildPlayer.dayDamageRecord:type_name -> common.GveDamageRecord
	183, // 340: common1.GuildPlayer.offlineGveChange:type_name -> common1.GveChange
	549, // 341: common1.GuildPlayer.sameGveInteractiveBoxAndTrans:type_name -> common.Coordinate
	542, // 342: common1.GuildPlayer.leftTaxReward:type_name -> common.Item
	449, // 343: common1.GuildPlayer.gveHistoryMaxDmg:type_name -> common1.GuildPlayer.GveHistoryMaxDmgEntry
	553, // 344: common1.GveBattleInfo.battleStartInfo:type_name -> common.BattleStartInfo
	555, // 345: common1.GveBattleInfo.battleResultInfo:type_name -> common.BattleResultInfo
	0,   // 346: common1.GveBattleInfo.status:type_name -> common1.GveBattleStatus
	177, // 347: common1.GveGrid.mapGrid:type_name -> common1.GveMapGrid
	450, // 348: common1.GveGrid.lastInteractiveTime:type_name -> common1.GveGrid.LastInteractiveTimeEntry
	451, // 349: common1.GveGrid.didHp:type_name -> common1.GveGrid.DidHpEntry
	452, // 350: common1.GveGrid.riceGetTime:type_name -> common1.GveGrid.RiceGetTimeEntry
	453, // 351: common1.GveGrid.taxGetTime:type_name -> common1.GveGrid.TaxGetTimeEntry
	549, // 352: common1.GveMapGrid.coordinate:type_name -> common.Coordinate
	549, // 353: common1.GveMapGrid.shape:type_name -> common.Coordinate
	549, // 354: common1.GveFlag.coordinate:type_name -> common.Coordinate
	177, // 355: common1.Gve.gveMapGrids:type_name -> common1.GveMapGrid
	549, // 356: common1.Gve.siegeShape:type_name -> common.Coordinate
	454, // 357: common1.GuildGve.grids:type_name -> common1.GuildGve.GridsEntry
	455, // 358: common1.GuildGve.occupiedLevelProgress:type_name -> common1.GuildGve.OccupiedLevelProgressEntry
	456, // 359: common1.Guild.members:type_name -> common1.Guild.MembersEntry
	596, // 360: common1.Guild.logs:type_name -> common.GuildLog
	597, // 361: common1.Guild.Announcement:type_name -> common.GuildAnnouncement
	457, // 362: common1.Guild.buildings:type_name -> common1.Guild.BuildingsEntry
	596, // 363: common1.Guild.todayImportantLog:type_name -> common.GuildLog
	598, // 364: common1.Guild.yesterdayGuildHonorPlayer:type_name -> common.GuildHonorPlayer
	458, // 365: common1.Guild.setOfficialTypeTime:type_name -> common1.Guild.SetOfficialTypeTimeEntry
	459, // 366: common1.Guild.exchangeGoods:type_name -> common1.Guild.ExchangeGoodsEntry
	460, // 367: common1.Guild.requests:type_name -> common1.Guild.RequestsEntry
	229, // 368: common1.Guild.assist:type_name -> common1.GameAssist
	180, // 369: common1.Guild.Gve:type_name -> common1.GuildGve
	461, // 370: common1.Guild.gveFirstPassTime:type_name -> common1.Guild.GveFirstPassTimeEntry
	462, // 371: common1.Guild.gveFlags:type_name -> common1.Guild.GveFlagsEntry
	463, // 372: common1.Guild.guildRecruitPowerTypeLogs:type_name -> common1.Guild.GuildRecruitPowerTypeLogsEntry
	354, // 373: common1.Guild.rollInfo:type_name -> common1.GuildRoll
	464, // 374: common1.GveChange.cues:type_name -> common1.GveChange.CuesEntry
	465, // 375: common1.GveChange.grids:type_name -> common1.GveChange.GridsEntry
	181, // 376: common1.Guilds.guilds:type_name -> common1.Guild
	599, // 377: common1.StrMansion.talents:type_name -> common.StrTalent
	600, // 378: common1.Privilege.abilityList:type_name -> common.PrivilegeAbility
	193, // 379: common1.Recharge.monthCards:type_name -> common1.MonthCards
	466, // 380: common1.Recharge.order:type_name -> common1.Recharge.OrderEntry
	196, // 381: common1.Recharge.subscribes:type_name -> common1.Subscribes
	191, // 382: common1.RechargeGift.items:type_name -> common1.RechargeGiftItem
	192, // 383: common1.MonthCards.cards:type_name -> common1.MonthCard
	194, // 384: common1.MonthCards.cardAct:type_name -> common1.MonthCardsAct
	195, // 385: common1.Subscribes.subs:type_name -> common1.Subscribe
	467, // 386: common1.CashShop.buyRecords:type_name -> common1.CashShop.BuyRecordsEntry
	468, // 387: common1.HandBook.quests:type_name -> common1.HandBook.QuestsEntry
	601, // 388: common1.Drama.stages:type_name -> common.DramaStage
	205, // 389: common1.Drama.enemy:type_name -> common1.DramaBattle
	602, // 390: common1.Drama.ownSkills:type_name -> common.Skill
	603, // 391: common1.Drama.assistCommanders:type_name -> common.AssistCommander
	204, // 392: common1.Drama.assistRewards:type_name -> common1.AssistReward
	469, // 393: common1.Drama.commanderHp:type_name -> common1.Drama.CommanderHpEntry
	470, // 394: common1.Drama.gainBuffFlag:type_name -> common1.Drama.GainBuffFlagEntry
	471, // 395: common1.Drama.beastHp:type_name -> common1.Drama.BeastHpEntry
	590, // 396: common1.DramaBattle.battleInfo:type_name -> common.BattlePlayerInfo
	604, // 397: common1.DramaBattle.dieCommanders:type_name -> common.BattleCommander
	605, // 398: common1.DramaBattle.dieBeasts:type_name -> common.BattleBeast
	207, // 399: common1.DramaRank.players:type_name -> common1.DramaPlayer
	209, // 400: common1.History.historyChapters:type_name -> common1.HistoryChapter
	604, // 401: common1.ChibiAssist.BattleCommander:type_name -> common.BattleCommander
	472, // 402: common1.Chibi.finishedStages:type_name -> common1.Chibi.FinishedStagesEntry
	214, // 403: common1.Chibi.fightProgress:type_name -> common1.ChibiFightProgress
	210, // 404: common1.Chibi.assist:type_name -> common1.ChibiAssist
	554, // 405: common1.Chibi.formation1:type_name -> common.Formation
	554, // 406: common1.Chibi.formation2:type_name -> common.Formation
	213, // 407: common1.ChibiFightProgress.fights:type_name -> common1.ChibiFight
	216, // 408: common1.ChibiRank.rankPlayers:type_name -> common1.ChibiRankPlayer
	473, // 409: common1.ChibiStageRank.ranks:type_name -> common1.ChibiStageRank.RanksEntry
	219, // 410: common1.ChibiStageReport.dateReports:type_name -> common1.ChibiReport
	219, // 411: common1.ChibiStageReport.powerReports:type_name -> common1.ChibiReport
	474, // 412: common1.ChibiStageRecords.records:type_name -> common1.ChibiStageRecords.RecordsEntry
	223, // 413: common1.Album.albumItems:type_name -> common1.AlbumItem
	224, // 414: common1.Album.albumQuas:type_name -> common1.AlbumQua
	606, // 415: common1.Assist.employees:type_name -> common.Employee
	607, // 416: common1.Assist.employLog:type_name -> common.AssistLog
	607, // 417: common1.Assist.employedLog:type_name -> common.AssistLog
	591, // 418: common1.AssistCommander.Commander:type_name -> common.Commander
	558, // 419: common1.AssistCommander.soldier:type_name -> common.Soldier
	559, // 420: common1.AssistCommander.wuHun:type_name -> common.WuHun
	608, // 421: common1.AssistCommander.mount:type_name -> common.MountItem
	609, // 422: common1.AssistCommander.onlyEquip:type_name -> common.OnlyEquip
	591, // 423: common1.AssistCommander.deputy:type_name -> common.Commander
	226, // 424: common1.AssistSlot.Commander:type_name -> common1.AssistCommander
	227, // 425: common1.AssistPlayer.Slots:type_name -> common1.AssistSlot
	607, // 426: common1.AssistPlayer.employedLog:type_name -> common.AssistLog
	475, // 427: common1.GameAssist.players:type_name -> common1.GameAssist.PlayersEntry
	231, // 428: common1.DynamicGift.gifts:type_name -> common1.DynamicGiftItem
	476, // 429: common1.DynamicGift.weightAdd:type_name -> common1.DynamicGift.WeightAddEntry
	232, // 430: common1.DynamicGiftItem.items:type_name -> common1.DynamicGiftRangeItem
	1,   // 431: common1.DynamicGiftItem.status:type_name -> common1.GiftStatus
	542, // 432: common1.DynamicGiftRangeItem.item:type_name -> common.Item
	234, // 433: common1.DyPeak.choose:type_name -> common1.DyPeakChoose
	237, // 434: common1.PkBattle.Result:type_name -> common1.PkBattleResult
	236, // 435: common1.GroupBattleRound.battles:type_name -> common1.PkBattle
	241, // 436: common1.PkGroup.players:type_name -> common1.PkGroupPlayer
	238, // 437: common1.PkGroup.round:type_name -> common1.GroupBattleRound
	239, // 438: common1.PkGroup.extra:type_name -> common1.ExtraPk
	590, // 439: common1.DyPeakBattlePlayer.playerInfos:type_name -> common.BattlePlayerInfo
	240, // 440: common1.DyPeakSchedule.Groups:type_name -> common1.PkGroup
	236, // 441: common1.DyPeakSchedule.QuarterPK:type_name -> common1.PkBattle
	236, // 442: common1.DyPeakSchedule.SemiPK:type_name -> common1.PkBattle
	236, // 443: common1.DyPeakSchedule.Third:type_name -> common1.PkBattle
	236, // 444: common1.DyPeakSchedule.Champ:type_name -> common1.PkBattle
	236, // 445: common1.DyPeakSchedule.Top16PK:type_name -> common1.PkBattle
	477, // 446: common1.DyPeakGuess.data:type_name -> common1.DyPeakGuess.DataEntry
	478, // 447: common1.DyPeakGuess.support:type_name -> common1.DyPeakGuess.SupportEntry
	479, // 448: common1.DyPeakRed.red:type_name -> common1.DyPeakRed.RedEntry
	480, // 449: common1.DyPeakRedItem.gotPlayer:type_name -> common1.DyPeakRedItem.GotPlayerEntry
	481, // 450: common1.StarSeal.players:type_name -> common1.StarSeal.PlayersEntry
	610, // 451: common1.StarSeal.logs:type_name -> common.StarSealLog
	611, // 452: common1.BulletData.bullets:type_name -> common.Bullet
	252, // 453: common1.Share.shareDatas:type_name -> common1.ShareData
	256, // 454: common1.OBSOLETE_Tower.handUpData:type_name -> common1.TowerHangUp
	255, // 455: common1.Tower.towerDatas:type_name -> common1.TowerData
	482, // 456: common1.TowerData.hangUpTime:type_name -> common1.TowerData.HangUpTimeEntry
	257, // 457: common1.TowerLevelReports.minPowerReport:type_name -> common1.TowerBattleReport
	257, // 458: common1.TowerLevelReports.firstReport:type_name -> common1.TowerBattleReport
	257, // 459: common1.TowerLevelReports.lastReport:type_name -> common1.TowerBattleReport
	483, // 460: common1.TowerReports.reports:type_name -> common1.TowerReports.ReportsEntry
	261, // 461: common1.CommanderBattle.battleDatas:type_name -> common1.CommanderBattleData
	484, // 462: common1.PlayerGvg.tasks:type_name -> common1.PlayerGvg.TasksEntry
	485, // 463: common1.PlayerGvg.holys:type_name -> common1.PlayerGvg.HolysEntry
	612, // 464: common1.PlayerGvg.attackLogs:type_name -> common.GvgBattleLog
	612, // 465: common1.PlayerGvg.defendLogs:type_name -> common.GvgBattleLog
	612, // 466: common1.PlayerGvg.killedLogs:type_name -> common.GvgBattleLog
	273, // 467: common1.PlayerGvg.beginBattleData:type_name -> common1.GvgBeginBattleData
	486, // 468: common1.GvgPlayer.maxInCityPercents:type_name -> common1.GvgPlayer.MaxInCityPercentsEntry
	487, // 469: common1.GvgPlayer.holys:type_name -> common1.GvgPlayer.HolysEntry
	268, // 470: common1.GvgCity.occupyInfo:type_name -> common1.GvgOccupyInfo
	268, // 471: common1.GvgMine.occupyInfo:type_name -> common1.GvgOccupyInfo
	488, // 472: common1.GvgSafeAreaOccupyInfo.occupyInfos:type_name -> common1.GvgSafeAreaOccupyInfo.OccupyInfosEntry
	489, // 473: common1.GvgGuildData.gvgFlags:type_name -> common1.GvgGuildData.GvgFlagsEntry
	279, // 474: common1.GameWorldBoss.bossData:type_name -> common1.BossData
	490, // 475: common1.WorldBossPlayer.sweepInfo:type_name -> common1.WorldBossPlayer.SweepInfoEntry
	491, // 476: common1.CityGiftAct.item:type_name -> common1.CityGiftAct.ItemEntry
	286, // 477: common1.CommonTowerFundAct.funds:type_name -> common1.CommonTowerFundData
	290, // 478: common1.LuckDrawAct.buyCoin:type_name -> common1.BuyDrawInfo
	290, // 479: common1.LuckDrawAct.buyItem:type_name -> common1.BuyDrawInfo
	289, // 480: common1.LuckDrawAct.luckInfo:type_name -> common1.LuckDrawInfo
	492, // 481: common1.LuckDrawAct.awardTimes:type_name -> common1.LuckDrawAct.AwardTimesEntry
	613, // 482: common1.BeastGroup.ownBeast:type_name -> common.Beast
	493, // 483: common1.BeastGroup.locationInfo:type_name -> common1.BeastGroup.LocationInfoEntry
	614, // 484: common1.BeastGroup.talents:type_name -> common.BeastTalent
	110, // 485: common1.ShiLengJigsaw.common:type_name -> common1.ActivityCommon
	494, // 486: common1.MountGroup.mountInfo:type_name -> common1.MountGroup.MountInfoEntry
	300, // 487: common1.WuHunAstrolabe.digitalMatrix:type_name -> common1.DigitalMatrix
	299, // 488: common1.WuHunAstrolabe.numberTreasureChest:type_name -> common1.NumberTreasureChest
	495, // 489: common1.DigitalMatrix.position:type_name -> common1.DigitalMatrix.PositionEntry
	496, // 490: common1.DigitalMatrix.onlineCollectionRecord:type_name -> common1.DigitalMatrix.OnlineCollectionRecordEntry
	302, // 491: common1.SpecialBuyGift.items:type_name -> common1.SpecialBuyGiftItem
	615, // 492: common1.Ladder.hisInfo:type_name -> common.LadderHistoryInfo
	616, // 493: common1.Ladder.battleLogs:type_name -> common.LadderBattleLog
	497, // 494: common1.LadderCross.godBattleLogs:type_name -> common1.LadderCross.GodBattleLogsEntry
	498, // 495: common1.CrossRankSnapshot.snapshotData:type_name -> common1.CrossRankSnapshot.SnapshotDataEntry
	499, // 496: common1.Expedition.Chapter:type_name -> common1.Expedition.ChapterEntry
	602, // 497: common1.ExpeditionChapter.ownSkills:type_name -> common.Skill
	500, // 498: common1.ExpeditionChapter.grids:type_name -> common1.ExpeditionChapter.GridsEntry
	501, // 499: common1.ExpeditionChapter.myBattleUnits:type_name -> common1.ExpeditionChapter.MyBattleUnitsEntry
	502, // 500: common1.ExpeditionChapter.buyShop:type_name -> common1.ExpeditionChapter.BuyShopEntry
	554, // 501: common1.ExpeditionChapter.formation:type_name -> common.Formation
	310, // 502: common1.ExpeditionGrid.event:type_name -> common1.CellEvent
	503, // 503: common1.ExpeditionGrid.emeryBattleUnits:type_name -> common1.ExpeditionGrid.EmeryBattleUnitsEntry
	504, // 504: common1.GameExpedition.chapter:type_name -> common1.GameExpedition.ChapterEntry
	617, // 505: common1.GameExpeditionChapter.rankInfo:type_name -> common.ExpeditionRankItem
	505, // 506: common1.Biography.arms:type_name -> common1.Biography.ArmsEntry
	506, // 507: common1.BiographyArms.commanders:type_name -> common1.BiographyArms.CommandersEntry
	507, // 508: common1.ZmSnExplore.info:type_name -> common1.ZmSnExplore.InfoEntry
	321, // 509: common1.ZmSnExploreInfo.rewards:type_name -> common1.ExploreItem
	110, // 510: common1.CommonTask.common:type_name -> common1.ActivityCommon
	508, // 511: common1.MountRefine.times:type_name -> common1.MountRefine.TimesEntry
	325, // 512: common1.YouthReturns.youthReturn:type_name -> common1.YouthReturn
	618, // 513: common1.YouthReturn.items:type_name -> common.YouthReturnGiftItem
	327, // 514: common1.Lm.signUp:type_name -> common1.LmSignUp
	509, // 515: common1.CrossLmSignup.power:type_name -> common1.CrossLmSignup.PowerEntry
	166, // 516: common1.PlayerLmPeak.signUp:type_name -> common1.DyPeakSignUp
	510, // 517: common1.LmStageBattleInfos.mInfo:type_name -> common1.LmStageBattleInfos.MInfoEntry
	511, // 518: common1.LmPlayerInfos.mInfo:type_name -> common1.LmPlayerInfos.MInfoEntry
	335, // 519: common1.LmSimpleBattleInfos.infos:type_name -> common1.LmSimpleBattleInfo
	591, // 520: common1.LmSimpleBattleInfo.commanders:type_name -> common.Commander
	557, // 521: common1.LmSimpleBattleInfo.counsellor:type_name -> common.Counsellor
	613, // 522: common1.LmSimpleBattleInfo.beasts:type_name -> common.Beast
	619, // 523: common1.PlayerWon.battleLogs:type_name -> common.WonBattleLog
	346, // 524: common1.PlayerWon.worship:type_name -> common1.WonWorship
	512, // 525: common1.GuildWon.doFtInActivityPlayers:type_name -> common1.GuildWon.DoFtInActivityPlayersEntry
	513, // 526: common1.WonPlayer.fts:type_name -> common1.WonPlayer.FtsEntry
	514, // 527: common1.WonPlayer.formationUintsRecord:type_name -> common1.WonPlayer.FormationUintsRecordEntry
	515, // 528: common1.WonPlayer.totalKillCount:type_name -> common1.WonPlayer.TotalKillCountEntry
	549, // 529: common1.WonPlayerFt.coor:type_name -> common.Coordinate
	516, // 530: common1.WonPlayerFt.battleUint:type_name -> common1.WonPlayerFt.BattleUintEntry
	549, // 531: common1.WonPlayerFt.autoMoveSetCoor:type_name -> common.Coordinate
	549, // 532: common1.WonAct.path:type_name -> common.Coordinate
	549, // 533: common1.WonGrid.coor:type_name -> common.Coordinate
	344, // 534: common1.WonGrid.battleGrid:type_name -> common1.WonBattleGrid
	517, // 535: common1.WonBattleGrid.aucItems:type_name -> common1.WonBattleGrid.AucItemsEntry
	620, // 536: common1.WonBattleGrid.defendQueue:type_name -> common.PlayerFt
	620, // 537: common1.WonBattleGrid.attackQueue:type_name -> common.PlayerFt
	620, // 538: common1.WonBattleGrid.recoverQueue:type_name -> common.PlayerFt
	518, // 539: common1.WonGuild.forces:type_name -> common1.WonGuild.ForcesEntry
	519, // 540: common1.WonGuild.declareCoors:type_name -> common1.WonGuild.DeclareCoorsEntry
	520, // 541: common1.WonGuild.originHouseCoors:type_name -> common1.WonGuild.OriginHouseCoorsEntry
	521, // 542: common1.WonGuild.surrenderApplys:type_name -> common1.WonGuild.SurrenderApplysEntry
	522, // 543: common1.AucBoxIds.auxBoxs:type_name -> common1.AucBoxIds.AuxBoxsEntry
	523, // 544: common1.AucPrices.idPrice:type_name -> common1.AucPrices.IdPriceEntry
	621, // 545: common1.PlayerAuc.aucRecord:type_name -> common.AucRecord
	621, // 546: common1.GuildAuc.aucRecord:type_name -> common.AucRecord
	353, // 547: common1.GuildRoll.rollMembers:type_name -> common1.RollMemberInfo
	524, // 548: common1.PlayerOverlord.stages:type_name -> common1.PlayerOverlord.StagesEntry
	525, // 549: common1.PayerOverlordStage.magics:type_name -> common1.PayerOverlordStage.MagicsEntry
	554, // 550: common1.PayerOverlordStage.formation:type_name -> common.Formation
	590, // 551: common1.GameOverlord.overlord:type_name -> common.BattlePlayerInfo
	590, // 552: common1.GameOverlord.mirroring:type_name -> common.BattlePlayerInfo
	622, // 553: common1.GameOverlordClear.stages:type_name -> common.GOClearStage
	361, // 554: common1.SuperDraw.urDraw:type_name -> common1.UrDraw
	526, // 555: common1.UrDraw.itemCount:type_name -> common1.UrDraw.ItemCountEntry
	527, // 556: common1.UrDraw.tenDrawDataPer:type_name -> common1.UrDraw.TenDrawDataPerEntry
	528, // 557: common1.UrDraw.drawData:type_name -> common1.UrDraw.DrawDataEntry
	363, // 558: common1.PublicCheat.publicCheats:type_name -> common1.PublicCheatData
	529, // 559: common1.WarSoul.schedules:type_name -> common1.WarSoul.SchedulesEntry
	623, // 560: common1.NavalBattleSectionFormation.formations:type_name -> common.NavalBattleFormation
	367, // 561: common1.NavalBattleModuleFormation.sectionFormations:type_name -> common1.NavalBattleSectionFormation
	530, // 562: common1.Bazaar.records:type_name -> common1.Bazaar.RecordsEntry
	624, // 563: common1.BazaarRecord.items:type_name -> common.BazaarItem
	3,   // 564: common1.NavalBattle.status:type_name -> common1.NavalBattle.State
	531, // 565: common1.NavalBattle.stages:type_name -> common1.NavalBattle.StagesEntry
	532, // 566: common1.NavalBattle.events:type_name -> common1.NavalBattle.EventsEntry
	625, // 567: common1.NavalBattle.negativeEvents:type_name -> common.NavalBattleEvent
	533, // 568: common1.NavalBattle.hps:type_name -> common1.NavalBattle.HpsEntry
	626, // 569: common1.NavalBattle.selfTeams:type_name -> common.NavalBattleTeam
	602, // 570: common1.NavalBattle.playerBuffs:type_name -> common.Skill
	376, // 571: common1.NavalBattle.assist:type_name -> common1.NavalBattleAssist
	602, // 572: common1.NavalBattle.npcBuffs:type_name -> common.Skill
	534, // 573: common1.NavalBattle.passPath:type_name -> common1.NavalBattle.PassPathEntry
	535, // 574: common1.NavalBattle.stopPath:type_name -> common1.NavalBattle.StopPathEntry
	536, // 575: common1.NavalBattle.enemys:type_name -> common1.NavalBattle.EnemysEntry
	379, // 576: common1.NavalBattle.ai:type_name -> common1.NavalBattleAI
	554, // 577: common1.NavalBattle.oldFormations:type_name -> common.Formation
	537, // 578: common1.NavalBattle.oldEnemys:type_name -> common1.NavalBattle.OldEnemysEntry
	538, // 579: common1.NavalBattle.foundPlayerIds:type_name -> common1.NavalBattle.FoundPlayerIdsEntry
	539, // 580: common1.NavalBattle.foundPlayerFts:type_name -> common1.NavalBattle.FoundPlayerFtsEntry
	540, // 581: common1.NavalBattleEnemy.battleUnitHps:type_name -> common1.NavalBattleEnemy.BattleUnitHpsEntry
	377, // 582: common1.NavalBattleAssist.pools:type_name -> common1.NavalBattleAssistPool
	603, // 583: common1.NavalBattleAssist.commanders:type_name -> common.AssistCommander
	541, // 584: common1.NavalBattlePath.aroundIds:type_name -> common1.NavalBattlePath.AroundIdsEntry
	69,  // 585: common1.H5UserInfo.stats:type_name -> common1.Stats
	6,   // 586: common1.ZonePartition.PartitionEntry.value:type_name -> common1.Uint64Array
	10,  // 587: common1.ServerDB.FirstReachLevelLimitEntry.value:type_name -> common1.FirstReachLevelLimit
	22,  // 588: common1.Announce.NormalMsgEntry.value:type_name -> common1.AnnounceMessages
	39,  // 589: common1.Rank.SimpleInfoEntry.value:type_name -> common1.RankSimpleInfo
	40,  // 590: common1.Rank.GuildSimpleEntry.value:type_name -> common1.RankGuildSimple
	546, // 591: common1.Commander.SkillsEntry.value:type_name -> common.CommanderSkill
	627, // 592: common1.Commander.EquipsEntry.value:type_name -> common.CommanderEquip
	628, // 593: common1.Commander.PotentialsEntry.value:type_name -> common.CommanderPotential
	547, // 594: common1.UserMail.MailsEntry.value:type_name -> common.Mail
	174, // 595: common1.UserGuild.ExchangeGoodsEntry.value:type_name -> common1.GuildGoods
	49,  // 596: common1.UserSetting.AvatarFrameSettingsEntry.value:type_name -> common1.UserAvatarFrameSetting
	629, // 597: common1.UserExtraDB.OfflineRewardsEntry.value:type_name -> common.UserOfflineReward
	45,  // 598: common1.UserGameDB.CommanderDBEntry.value:type_name -> common1.Commander
	554, // 599: common1.UserGameDB.FormationDBEntry.value:type_name -> common.Formation
	301, // 600: common1.SpecialBuyGiftRecord.BuyRecordEntry.value:type_name -> common1.SpecialBuyGift
	559, // 601: common1.WuHunGroup.OwnWuHunsEntry.value:type_name -> common.WuHun
	609, // 602: common1.OnlyEquipGroup.OwnOnlyEquipsEntry.value:type_name -> common.OnlyEquip
	277, // 603: common1.Season.TaskInfoEntry.value:type_name -> common1.SeasonTaskInfo
	80,  // 604: common1.Season.StoreItemEntry.value:type_name -> common1.SeasonStoreItem
	630, // 605: common1.Train.BarrageEntry.value:type_name -> common.TrainBarrage
	100, // 606: common1.DrawScore.LowActiveEntry.value:type_name -> common1.DrawLowActive
	436, // 607: common1.DrawOnlyEquip.DrawData.specialDrawCount:type_name -> common1.DrawOnlyEquip.DrawData.SpecialDrawCountEntry
	434, // 608: common1.DrawOnlyEquip.DrawDataEntry.value:type_name -> common1.DrawOnlyEquip.DrawData
	120, // 609: common1.ResourceRecover.ResourceEntry.value:type_name -> common1.ResourceCommon
	134, // 610: common1.DailyPhysical.LuckyGiftRecordsEntry.value:type_name -> common1.PhysicalLuckyGiftRecord
	143, // 611: common1.SoulBox.Gift4CritDataEntry.value:type_name -> common1.SoulBoxGift4Crit
	145, // 612: common1.SoulBoxLogMgr.OpenIdMapLogsEntry.value:type_name -> common1.soulLogsBoth
	146, // 613: common1.SoulBoxLogMgr.OpenIdMapServerScoreEntry.value:type_name -> common1.SoulServerScore
	548, // 614: common1.GveGrid.DidHpEntry.value:type_name -> common.GveDamageRecord
	176, // 615: common1.GuildGve.GridsEntry.value:type_name -> common1.GveGrid
	172, // 616: common1.Guild.MembersEntry.value:type_name -> common1.GuildPlayer
	175, // 617: common1.Guild.BuildingsEntry.value:type_name -> common1.GuildBuilding
	174, // 618: common1.Guild.ExchangeGoodsEntry.value:type_name -> common1.GuildGoods
	178, // 619: common1.Guild.GveFlagsEntry.value:type_name -> common1.GveFlag
	182, // 620: common1.Guild.GuildRecruitPowerTypeLogsEntry.value:type_name -> common1.GuildRecruitPowerTypeLog
	176, // 621: common1.GveChange.GridsEntry.value:type_name -> common1.GveGrid
	188, // 622: common1.Recharge.OrderEntry.value:type_name -> common1.OrderData
	631, // 623: common1.HandBook.QuestsEntry.value:type_name -> common.HandBookQuest
	212, // 624: common1.Chibi.FinishedStagesEntry.value:type_name -> common1.ChibiFinishedStage
	217, // 625: common1.ChibiStageRank.RanksEntry.value:type_name -> common1.ChibiRank
	215, // 626: common1.ChibiStageRecords.RecordsEntry.value:type_name -> common1.ChibiRecord
	228, // 627: common1.GameAssist.PlayersEntry.value:type_name -> common1.AssistPlayer
	245, // 628: common1.DyPeakGuess.DataEntry.value:type_name -> common1.DyPeakGuessReward
	247, // 629: common1.DyPeakRed.RedEntry.value:type_name -> common1.DyPeakRedItem
	249, // 630: common1.StarSeal.PlayersEntry.value:type_name -> common1.StarSealPlayer
	258, // 631: common1.TowerReports.ReportsEntry.value:type_name -> common1.TowerLevelReports
	268, // 632: common1.GvgSafeAreaOccupyInfo.OccupyInfosEntry.value:type_name -> common1.GvgOccupyInfo
	275, // 633: common1.GvgGuildData.GvgFlagsEntry.value:type_name -> common1.GvgFlag
	281, // 634: common1.WorldBossPlayer.SweepInfoEntry.value:type_name -> common1.WorldBossHisInfo
	283, // 635: common1.CityGiftAct.ItemEntry.value:type_name -> common1.CityGiftInfo
	293, // 636: common1.BeastGroup.LocationInfoEntry.value:type_name -> common1.BeastLocation
	608, // 637: common1.MountGroup.MountInfoEntry.value:type_name -> common.MountItem
	632, // 638: common1.LadderCross.GodBattleLogsEntry.value:type_name -> common.LadderGodBattleLogs
	309, // 639: common1.Expedition.ChapterEntry.value:type_name -> common1.ExpeditionChapter
	311, // 640: common1.ExpeditionChapter.GridsEntry.value:type_name -> common1.ExpeditionGrid
	312, // 641: common1.ExpeditionChapter.MyBattleUnitsEntry.value:type_name -> common1.ExpeditionBattleUnit
	312, // 642: common1.ExpeditionGrid.EmeryBattleUnitsEntry.value:type_name -> common1.ExpeditionBattleUnit
	314, // 643: common1.GameExpedition.ChapterEntry.value:type_name -> common1.GameExpeditionChapter
	317, // 644: common1.Biography.ArmsEntry.value:type_name -> common1.BiographyArms
	318, // 645: common1.BiographyArms.CommandersEntry.value:type_name -> common1.BiographyCommander
	320, // 646: common1.ZmSnExplore.InfoEntry.value:type_name -> common1.ZmSnExploreInfo
	333, // 647: common1.LmStageBattleInfos.MInfoEntry.value:type_name -> common1.LmPlayerInfos
	334, // 648: common1.LmPlayerInfos.MInfoEntry.value:type_name -> common1.LmSimpleBattleInfos
	339, // 649: common1.WonPlayer.FtsEntry.value:type_name -> common1.WonPlayerFt
	549, // 650: common1.WonGuild.DeclareCoorsEntry.value:type_name -> common.Coordinate
	549, // 651: common1.WonGuild.OriginHouseCoorsEntry.value:type_name -> common.Coordinate
	633, // 652: common1.WonGuild.SurrenderApplysEntry.value:type_name -> common.WonSurrenderApply
	357, // 653: common1.PlayerOverlord.StagesEntry.value:type_name -> common1.PayerOverlordStage
	634, // 654: common1.WarSoul.SchedulesEntry.value:type_name -> common.WarSoulSchedule
	372, // 655: common1.Bazaar.RecordsEntry.value:type_name -> common1.BazaarRecord
	635, // 656: common1.NavalBattle.StagesEntry.value:type_name -> common.NavalStage
	625, // 657: common1.NavalBattle.EventsEntry.value:type_name -> common.NavalBattleEvent
	636, // 658: common1.NavalBattle.HpsEntry.value:type_name -> common.BattleUnitHp
	378, // 659: common1.NavalBattle.PassPathEntry.value:type_name -> common1.NavalBattlePath
	378, // 660: common1.NavalBattle.StopPathEntry.value:type_name -> common1.NavalBattlePath
	375, // 661: common1.NavalBattle.EnemysEntry.value:type_name -> common1.NavalBattleEnemy
	375, // 662: common1.NavalBattle.OldEnemysEntry.value:type_name -> common1.NavalBattleEnemy
	636, // 663: common1.NavalBattleEnemy.BattleUnitHpsEntry.value:type_name -> common.BattleUnitHp
	664, // [664:664] is the sub-list for method output_type
	664, // [664:664] is the sub-list for method input_type
	664, // [664:664] is the sub-list for extension type_name
	664, // [664:664] is the sub-list for extension extendee
	0,   // [0:664] is the sub-list for field type_name
}

func init() { file_common1_proto_init() }
func file_common1_proto_init() {
	if File_common1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZonePartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstReachLevelLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDailyDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDailyDiscountAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStarAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarRewardPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStarActDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDailyDiscountItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLuckDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFoundataion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFoundataionCheat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameActivityOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGolden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGoldenPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerDrawTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerDrawWuHun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankGuildSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRewardPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatarFrameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWeb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExtraDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialBuyGiftRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemGiftScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemGiftScoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderAwakeTaskProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeStatTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeStatDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounsellorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soldier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WuHunGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyEquipGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoldierClassTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionTimeLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dungeon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalPresent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Train); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotUIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotPeakScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePeakMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemOpenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawLowActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawNormal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawDiamond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawWuHun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawOnlyEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Draw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityExtraItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRechargeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRechargeGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTotalCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperWelGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TianGongFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWordPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWordGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonFundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActZmsn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyPhysical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalLuckyGiftRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Foundation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoundationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipCashGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldenDragon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulBoxGift4Crit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulBoxLogMgr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulLogsBoth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulServerScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDiscountAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDiscountItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyRecharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyRechargeAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyRechargeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlayAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerArena); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQieCuo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurePeakPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotCommanders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDyPeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakChoosePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakChooseRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakChooseGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceFinishTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveMapGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildGve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRecruitPowerTypeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GveChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guilds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrMansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Privilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardsAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyExpVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyCoinVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Drama); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DramaPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chibi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiFinishedStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiFightProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiRankPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiStageRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiStageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChibiStageRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumQua); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicGiftRangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkBattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBattleRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraPk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkGroupPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakBattlePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakGuess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakGuessReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakRed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyPeakRedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarSealPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulletData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBSOLETE_Tower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerHangUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerBattleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGvg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgMine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgOccupyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgSafeAreaOccupyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgPlayerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgGuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgBeginBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgGuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameWorldBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldBossPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldBossHisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityGiftAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityGiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommanderVisit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonTowerFundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonTowerFundAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckDrawAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckDrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyDrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftRainAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeastGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeastLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiLengSignIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActCommonSignIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiLengJigsaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WuHunAstrolabe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberTreasureChest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialBuyGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialBuyGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ladder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadderCross); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRankSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRankKeepFirst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expedition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionBattleUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameExpedition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameExpeditionChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiographyArms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiographyCommander); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmSnExplore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmSnExploreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExploreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouthReturns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouthReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossLmSignup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossLm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmBattleVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLmPeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmStageBattleInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmPlayerInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmSimpleBattleInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LmSimpleBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildWon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonPlayerFt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonBattleGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WonWorship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucBoxIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AucPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAuc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildAuc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGuildRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOverlord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayerOverlordStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameOverlord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameOverlordClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicCheat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicCheatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCheatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarSoul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleSectionFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleModuleFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActAnniversary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActMainSsr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bazaar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BazaarRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattlePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleEnemy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleAssistPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattlePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavalBattleAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossNavalBattleBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common1_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawOnlyEquip_DrawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   538,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common1_proto_goTypes,
		DependencyIndexes: file_common1_proto_depIdxs,
		EnumInfos:         file_common1_proto_enumTypes,
		MessageInfos:      file_common1_proto_msgTypes,
	}.Build()
	File_common1_proto = out.File
	file_common1_proto_rawDesc = nil
	file_common1_proto_goTypes = nil
	file_common1_proto_depIdxs = nil
}
